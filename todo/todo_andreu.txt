
SUGGESTION:

Use boost::FileSystem library

TODO:
* Check scandir
* Engine status using work status message
* Disk statictics

* Inform about the memory and process used when running samsonLocal
* Valgrind debuign


FUTURE:
review setup since the maximum number of outputs

ON-GOING
* Kill jobs ( kill the task ) --> Memory leaks

DONE
* Fuse Process library with the Engine Lib
* Notify Disk operations using Engine
* Process manager implemented with priorities and not type ( priority to halt processes and top priority processes )
* Avoid scripts to fail for too many outputs
* Refactoring (m) independent Error.h Error.cpp files and remove Status.cpp/.h file since it is not used any more...
* When all the "process" running are hold, we can not run "Process Buffers" to get buffer ready for writing!!
* assetr -> LM_X
* shared_memory automatization
* Wait for killed process
* Informacion about time in the jobs list
* Limit the number of operaitons for outputs
* File Management ( errors while uploading / downloading )
* Check queues when uploading
* New upload model notifying first the controller
* rm at the DiskManager to avoid colision between read and rm
* Remove help message since it is not used any more
* Reload modules to detect changes
* operations can emit errors to cancel the operation
* samsonCat -header with information about hash-group distribution
* Check String type
* Memory problem with OSN Data ( Goyo )
* Remove unnecessary files in /opt/samson/data

Mail Goyo:

PROBLEMAS



FILE MANAGEMENT
----------------------------------------------------------------------------------------------------------------

- En la tarea de osn, calculando el total de URLs, aunque teóricamente la cola tiene un elemento
(o dos, que he probado a replicarlo), el parserOut no ve ninguno.

- En la tarea de osn, cuando lanzo los 5GB, el map (he probado un par de ellos), se bloquea porque
parece que se come toda la memoria. Parece que usar .assign() en vez de = ha ayudado en el parser,
pero no en el map. Voy a probar a hacer un clear() después del emit(), pero es posible que el problema
esté en el hash del String, que mande todas las URLs al mismo mapper. Efectivamente, parece que el problema
está más bien relacionado con el parse().

SUGERENCIAS

- Estaría bien si al crear el prototipo, se añadiera un comentario con los parámetros de entrada y salida

