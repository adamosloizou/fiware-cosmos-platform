#!/opt/local/bin/perl
use LWP::UserAgent;
use JSON;

use constant USERNAME => "hookuser";
use constant PASSWORD => "h00kuser";
use constant REVIEW_BOARD_URL => "http://bigdatacodereviews.hi.inet";
use constant SVNLOOK_PATH => "/opt/local/bin/svnlook";
use constant PROTECTED_PATH_REGEX => "^trunk/";
use constant LOG_FILE => "/var/sortega/pre_commit.log";

unless ($#ARGV == 1) {
    print STDERR "Usage: $0 repo txn\n";
    exit(-1);
}
my $repo = $ARGV[0];
my $txn  = $ARGV[1];
open(my $log, ">>", LOG_FILE) or die "Cannot open log file";
print $log "=====\nPre-commit for repo $repo and trasaction $txn\n";

{
    package RequestAgent;
    @ISA = qw(LWP::UserAgent);

    sub new { 
	my $self = LWP::UserAgent::new(@_);
	$self->agent("RBHook/0.1 ");
	$self;
    }

    sub get_basic_credentials {
	return (::USERNAME, ::PASSWORD);
    }
}

sub get_review {
    my $id = shift;
    my $req = HTTP::Request->new(GET => 
	REVIEW_BOARD_URL . "/api/review-requests/$id/reviews/");
    $req->header(Accept => 'application/json');

    print $log "Requesting " . REVIEW_BOARD_URL . "/api/review-requests/$id/reviews/";

    my $ua = RequestAgent->new;
    my $res = $ua->request($req);
    unless ($res->is_success) {
	print $log "Request failed: " . $res->status_line;
	print STDERR "Review request $id does not exists or the service is not " .
		     "working properly.\n" .  $res->status_line;
	exit(1);
    }

    return decode_json($res->content);
}

sub validate_review {
    my ($id, $review_request) = @_;

    my %revisions = ();
    for my $review (@{$review_request->{"reviews"}}) {
	$revisions{$review->{links}->{user}->{title}} = {
	    ShipIt => ${$review->{ship_it}},
	    URL => $review->{links}->{self}->{href}
	};
    }

    unless (%revisions) {
	print $log "Review-request $id was not reviewed.\n";
	print STDERR "Review-request $id was not reviewed.\n" .
	             "Please, go to " . REVIEW_BOARD_URL . "/r/$id";
	exit(2);
    }

    for my $review (values %revisions) {
	unless ($review->{ShipIt}) {
	    print $log "Review-request $id is not marked as 'ship it'\n";
	    print STDERR "Review-request $id is not marked as 'ship it'\n" .
			"Please, go to $review->{URL}\n";
	    exit(3);
	}
    }

    print $log "Review request is OK\n";
}

sub has_protected_paths {
    print $log "Invoking " . SVNLOOK_PATH . "\n";
    open(my $changesfd, SVNLOOK_PATH . " changed -t \"$txn\" \"$repo\" |")
	or die "Cannot inspect changes";
    my $re = PROTECTED_PATH_REGEX;
    while(<$changesfd>) {
	my ($path) = /^.\s+(.*)$/;
	print $log "Path $path\n";
	return 1 if $path =~ /$re/;
    }
    close ($changesfd);
    print $log "No protected paths\n";
    return 0;
}

sub get_change_review_id {
    my $svnlook_command = SVNLOOK_PATH . " log -t \"$txn\" \"$repo\"";
    print $log "Command: $svnlook_command\n";
    my $msg = `$svnlook_command`;
    print $log "Log message: <msg>$msg</msg>\n";
    chomp($msg);
    if ($msg =~ /changereview:(\d+|later)/) {
	return $1;
    } else {
	return undef;
    }
}

if (has_protected_paths()) {
    print $log "Has protected paths, must have an associated change review\n";
    my $id = get_change_review_id();

    if (not $id) {
	print $log "Change review id not found\n";
	print STDERR "Change review id not found.\n" .
	             "Use changereview:### in your commit message.\n";
	exit(4);
    } elsif ($id ne 'later') {
	print $log "Change review id=$id\n";
	validate_review($id, get_review($id));
    }
}

close($log);
