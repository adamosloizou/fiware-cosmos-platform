#!/opt/local/bin/perl
use LWP::UserAgent;
use JSON;
use Encode;
use Data::Dumper;

use constant USERNAME => "hookuser";
use constant PASSWORD => "h00kuser";
use constant REVIEW_BOARD_URL => "http://bigdatacodereviews.hi.inet";
use constant SVNLOOK_PATH => "/opt/local/bin/svnlook";
use constant PROTECTED_PATH_REGEX => "^trunk/";

my $repo = $ARGV[0];
my $rev  = $ARGV[1];

{
    package RequestAgent;
    @ISA = qw(LWP::UserAgent);

    sub new { 
	my $self = LWP::UserAgent::new(@_);
	$self->agent("RBHook/0.1 ");
	$self;
    }

    sub get_basic_credentials {
	return (::USERNAME, ::PASSWORD);
    }
}

sub submit_change {
    my $id = shift;
    my $req = HTTP::Request->new(PUT => 
	REVIEW_BOARD_URL . "/api/review-requests/$id/");
    $req->header(Accept => 'application/json');
    $req->content(encode("utf8", "status=submitted")); 

    my $ua = RequestAgent->new;
    my $res = $ua->request($req);
    unless ($res->is_success) {
	print STDERR "Review request $id does not exists or the service is not " .
		     "working properly.\n" .  $res->status_line;
	print $res->as_string;
	exit(1);
    }
}

sub has_protected_paths {
    open(my $changesfd, SVNLOOK_PATH . " changed -r \"$rev\" \"$repo\" |")
	or die "Cannot inspect changes";
    my $re = PROTECTED_PATH_REGEX;
    while(<$changesfd>) {
	my ($path) = /^.\s+(.*)$/;
	return 1 if $path =~ /$re/;
    }
    close ($changesfd);
    return 0;
}

sub get_change_review_id {
    my $svnlook = SVNLOOK_PATH;
    my $msg = `$svnlook log -r "$rev" "$repo"`;
    chomp($msg);
    if ($msg =~ /changereview:(\d+|later)/) {
	return $1;
    } else {
	return undef;
    }
}

if (has_protected_paths()) {
    my $id = get_change_review_id();

    if (not $id) {
	print STDERR "No change review id to commit\n";
	exit(4);
    }
    
    if ($id ne 'later') {
	submit_change($id);
    }
}
