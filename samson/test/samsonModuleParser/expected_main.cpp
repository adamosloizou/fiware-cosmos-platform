

/**
	This file has been autogenerated using samsonModuleParser.
	Please, do not edit!
*/


#include "main.h"
#include <samson/modules/system/UInt.h>


extern "C" {
	samson::Module * moduleCreator( )
	{
		return new samson::example::Module();
	}
	std::string getSamsonVersion()
	{
		return SAMSON_VERSION;
	}
}


namespace samson{
namespace example{


	Module::Module() : samson::Module("example","0.6","Andreu Urruela")
	{
		//Add datas
		add( new DataImpl<MyData>("example.MyData" ));
		add( new DataImpl<ExampleData>("example.ExampleData" ));

		//Add operations
		{
			samson::Operation * operation = new samson::OperationImpl<generator>( "example.generator" , samson::Operation::generator);
			operation->outputFormats.push_back( samson::KVFormat::format("system.UInt" ,"system.UInt") );
			operation->setHelpLine("Simple generator that generates example.samples pairs of integers");
			std::ostringstream o;
			operation->setHelp( o.str() );
			add( operation ); // Add this operation to the module
		}
		{
			samson::Operation * operation = new samson::OperationImpl<generator_error_operation_crashes>( "example.generator_error_operation_crashes" , samson::Operation::generator);
			operation->outputFormats.push_back( samson::KVFormat::format("system.UInt" ,"system.UInt") );
			operation->setHelpLine("Generator that fails when executing. To simulate the processs 3rd party operation fails and crash");
			std::ostringstream o;
			operation->setHelp( o.str() );
			add( operation ); // Add this operation to the module
		}
		{
			samson::Operation * operation = new samson::OperationImpl<generator_error_timeout>( "example.generator_error_timeout" , samson::Operation::generator);
			operation->outputFormats.push_back( samson::KVFormat::format("system.UInt" ,"system.UInt") );
			operation->setHelpLine("Generator that fails when executing for a timeout.");
			std::ostringstream o;
			operation->setHelp( o.str() );
			add( operation ); // Add this operation to the module
		}
		{
			samson::Operation * operation = new samson::OperationImpl<generator_error_user_generated>( "example.generator_error_user_generated" , samson::Operation::generator);
			operation->outputFormats.push_back( samson::KVFormat::format("system.UInt" ,"system.UInt") );
			operation->setHelpLine("Generator that fails with a user defined error");
			std::ostringstream o;
			operation->setHelp( o.str() );
			add( operation ); // Add this operation to the module
		}
		{
			samson::Operation * operation = new samson::OperationImpl<generator_error_wrong_data_type>( "example.generator_error_wrong_data_type" , samson::Operation::generator);
			operation->outputFormats.push_back( samson::KVFormat::format("system.UInt" ,"system.UInt") );
			operation->setHelpLine("Generator that fails because it use a system.Double instead of a system.UInt");
			std::ostringstream o;
			operation->setHelp( o.str() );
			add( operation ); // Add this operation to the module
		}
		{
			samson::Operation * operation = new samson::OperationImpl<select>( "example.select" , samson::Operation::parserOut);
			operation->outputFormats.push_back( samson::KVFormat::format("txt" ,"txt") );
			operation->inputFormats.push_back( samson::KVFormat::format("system.UInt" ,"system.UInt") );
			operation->setHelpLine("Export system.UInt system.UInt key-values in a standard format. Use example.separator to custommize separator");
			std::ostringstream o;
			operation->setHelp( o.str() );
			add( operation ); // Add this operation to the module
		}
		{
			samson::Operation * operation = new samson::OperationImpl<map>( "example.map" , samson::Operation::map);
			operation->inputFormats.push_back( samson::KVFormat::format("system.UInt" ,"system.UInt") );
			operation->outputFormats.push_back( samson::KVFormat::format("system.UInt" ,"system.UInt") );
			operation->setHelpLine("");
			std::ostringstream o;
			operation->setHelp( o.str() );
			add( operation ); // Add this operation to the module
		}
		{
			samson::Operation * operation = new samson::OperationImpl<reduce>( "example.reduce" , samson::Operation::reduce);
			operation->inputFormats.push_back( samson::KVFormat::format("system.UInt" ,"system.UInt") );
			operation->outputFormats.push_back( samson::KVFormat::format("system.UInt" ,"system.UInt") );
			operation->setHelpLine("Reduce example to test platform");
			std::ostringstream o;
			operation->setHelp( o.str() );
			add( operation ); // Add this operation to the module
		}
		{
			samson::Operation * operation = new samson::OperationImpl<reduce2>( "example.reduce2" , samson::Operation::reduce);
			operation->inputFormats.push_back( samson::KVFormat::format("system.UInt" ,"system.UInt") );
			operation->inputFormats.push_back( samson::KVFormat::format("system.UInt" ,"system.UInt") );
			operation->outputFormats.push_back( samson::KVFormat::format("system.UInt" ,"system.UInt") );
			operation->outputFormats.push_back( samson::KVFormat::format("system.UInt" ,"system.UInt") );
			operation->setHelpLine("Reduce with two imputs");
			std::ostringstream o;
			operation->setHelp( o.str() );
			add( operation ); // Add this operation to the module
		}
		{
			samson::Operation * operation = new samson::Operation( "example.test" , samson::Operation::script);
			operation->setHelpLine("Full test with all the operations");
			std::ostringstream o;
			operation->setHelp( o.str() );

			// Code of this operation (usually scripts)

			operation->code.push_back("example.generator test.samples -create ");
			operation->code.push_back("example.map test.samples test.samples2 -create ");
			operation->code.push_back("example.reduce test.samples2 test.samples3 -create ");
			operation->code.push_back("example.select test.samples3 test.samples.txt -create ");
			operation->code.push_back("example.parser test.samples.txt test.samples4 -create ");

			add( operation ); // Add this operation to the module
		}
		{
			samson::Operation * operation = new samson::OperationImpl<generator2>( "example.generator2" , samson::Operation::generator);
			operation->outputFormats.push_back( samson::KVFormat::format("system.UInt" ,"system.UInt") );
			operation->outputFormats.push_back( samson::KVFormat::format("system.UInt" ,"system.UInt") );
			operation->setHelpLine("");
			std::ostringstream o;
			operation->setHelp( o.str() );
			add( operation ); // Add this operation to the module
		}
		{
			samson::Operation * operation = new samson::OperationImpl<parser>( "example.parser" , samson::Operation::parser);
			operation->inputFormats.push_back( samson::KVFormat::format("txt" ,"txt") );
			operation->outputFormats.push_back( samson::KVFormat::format("system.UInt" ,"system.UInt") );
			operation->setHelpLine("");
			std::ostringstream o;
			operation->setHelp( o.str() );
			add( operation ); // Add this operation to the module
		}
		{
			samson::Operation * operation = new samson::Operation( "example.script" , samson::Operation::script);
			operation->setHelpLine("");
			std::ostringstream o;
			o << "An example of a script that creates two queues and generate some content to the second\n";
			operation->setHelp( o.str() );

			// Code of this operation (usually scripts)

			operation->code.push_back("add pepe system.UInt system.UInt ");
			operation->code.push_back("add andreu system.UInt system.UInt ");
			operation->code.push_back("example.generator andreu ");

			add( operation ); // Add this operation to the module
		}
		{
			samson::Operation * operation = new samson::OperationImpl<error>( "example.error" , samson::Operation::map);
			operation->inputFormats.push_back( samson::KVFormat::format("system.UInt" ,"system.UInt") );
			operation->outputFormats.push_back( samson::KVFormat::format("system.UInt" ,"system.UInt") );
			operation->setHelpLine("Map to produce an error while running to test fault-issolation");
			std::ostringstream o;
			operation->setHelp( o.str() );
			add( operation ); // Add this operation to the module
		}
		{
			samson::Operation * operation = new samson::OperationImpl<map_error>( "example.map_error" , samson::Operation::map);
			operation->inputFormats.push_back( samson::KVFormat::format("system.String" ,"system.UInt") );
			operation->outputFormats.push_back( samson::KVFormat::format("system.String" ,"system.UInt") );
			operation->setHelpLine("Map to produce an error while running to test fault-issolation");
			std::ostringstream o;
			operation->setHelp( o.str() );
			add( operation ); // Add this operation to the module
		}
		{
			samson::Operation * operation = new samson::OperationImpl<map_error_user>( "example.map_error_user" , samson::Operation::map);
			operation->inputFormats.push_back( samson::KVFormat::format("system.String" ,"system.UInt") );
			operation->outputFormats.push_back( samson::KVFormat::format("system.String" ,"system.UInt") );
			operation->setHelpLine("Map to produce an error while running to test fault-issolation. User generated error");
			std::ostringstream o;
			operation->setHelp( o.str() );
			add( operation ); // Add this operation to the module
		}
		{
			samson::Operation * operation = new samson::OperationImpl<map_traces>( "example.map_traces" , samson::Operation::map);
			operation->inputFormats.push_back( samson::KVFormat::format("system.String" ,"system.UInt") );
			operation->outputFormats.push_back( samson::KVFormat::format("system.String" ,"system.UInt") );
			operation->setHelpLine("Map that produce traces");
			std::ostringstream o;
			operation->setHelp( o.str() );
			add( operation ); // Add this operation to the module
		}
		{
			samson::Operation * operation = new samson::OperationImpl<generator_list>( "example.generator_list" , samson::Operation::generator);
			operation->outputFormats.push_back( samson::KVFormat::format("system.UInt" ,"example.ExampleData") );
			operation->setHelpLine("Example of how to use list types");
			std::ostringstream o;
			operation->setHelp( o.str() );
			add( operation ); // Add this operation to the module
		}
		{
			samson::Operation * operation = new samson::OperationImpl<map_list>( "example.map_list" , samson::Operation::map);
			operation->inputFormats.push_back( samson::KVFormat::format("system.UInt" ,"example.ExampleData") );
			operation->outputFormats.push_back( samson::KVFormat::format("system.UInt" ,"example.ExampleData") );
			operation->setHelpLine("Example of how to use list types");
			std::ostringstream o;
			operation->setHelp( o.str() );
			add( operation ); // Add this operation to the module
		}
		{
			samson::Operation * operation = new samson::OperationImpl<splitter>( "example.splitter" , samson::Operation::splitter);
			operation->setHelpLine("Example of splitter that change first two characters of every line by XX");
			std::ostringstream o;
			operation->setHelp( o.str() );
			add( operation ); // Add this operation to the module
		}

	}; // end of class

} // end of namespace samson
} // end of namespace example
