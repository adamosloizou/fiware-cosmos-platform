/*
 * Telefónica Digital - Product Development and Innovation
 *
 * THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 * EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Copyright (c) Telefónica Investigación y Desarrollo S.A.U.
 * All rights reserved.
 */

/**
 File autogenerated with samsonModuleParser. Please, edit to complete this data
 */

#ifndef _H_SAMSON_OTTstream_ActivityByUser
#define _H_SAMSON_OTTstream_ActivityByUser


#include <samson/modules/OTTstream/ActivityByUser_base.h>


namespace samson{
namespace OTTstream{


class ActivityByUser : public ActivityByUser_base
{
    public:
    void Init()
    {
        // Preallocate a number of services...
#define INITIAL_NUMBER_OF_SERVICES 16
        servActivitySetLength(INITIAL_NUMBER_OF_SERVICES);
        // ... but start from 0
        servActivitySetLength(0);



        sequencesSetLength(0);
    }

    void AddService(samson::system::UInt serviceId, samson::system::TimeUnix timestamp, int inCount)
    {
        samson::OTTstream::ServiceActivity *service = servActivityAdd();
        service->serviceId.value = serviceId.value;
        service->timestamp.value = timestamp.value;
        service->inCount.value = inCount;
    }

    void AddSequence(int seqId, const char *seq_name, unsigned long time_window, const char *events_str, int strict)
    {
        samson::OTTstream::Sequence *sequence = sequencesAdd();
        sequence->Init(seqId, seq_name,  time_window, events_str, strict);
    }

    void AddAndCloneSequence(int index_sequence)
    {
        samson::OTTstream::Sequence *sequence = sequencesAdd();
        sequence->Clone(&(sequences[index_sequence]));
    }

    bool sequencesErase( int item_to_erase)
    {
        LM_M(("sequencesErase called with item_to_erase:%d", item_to_erase));
        return ActivityByUser_base::sequencesErase(item_to_erase);
    }
};


} // end of namespace samson
} // end of namespace OTTstream

#endif
