/*
 * Telefónica Digital - Product Development and Innovation
 *
 * THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 * EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Copyright (c) Telefónica Investigación y Desarrollo S.A.U.
 * All rights reserved.
 */

/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
 */

#ifndef _H_SAMSON_OTTstream_red_update_user_web_profile
#define _H_SAMSON_OTTstream_red_update_user_web_profile


#include <samson/module/samson.h>
#include <samson/modules/OTTstream/WebProfileByUser.h>
#include <samson/modules/OTTstream/WebCategoryHit.h>
#include <samson/modules/system/UInt.h>


namespace samson{
namespace OTTstream{


class red_update_user_web_profile : public samson::Reduce
{

    samson::OTTstream::WebProfileByUser profile;
    samson::system::UInt user;
    samson::OTTstream::WebCategoryHit hit;
    int timespan;

    public:


    //  INFO_MODULE
    // If interface changes and you do not recreate this file, you will have to update this information (and of course, the module file)
    // Please, do not remove this comments, as it will be used to check consistency on module declaration
    //
    //  input: system.UInt OTTstream.WebCategoryHit
    //  input: system.UInt OTTstream.WebProfileByUser
    //  output: system.UInt OTTstream.WebProfileByUser
    //
    // helpLine: Update the latest user web profile
    //  END_INFO_MODULE

    void init( samson::KVWriter *writer )
    {
    }

    void run( samson::KVSetStruct* inputs , samson::KVWriter *writer )
    {
        if (inputs[1].num_kvs == 0)
        {
            user.parse(inputs[0].kvs[0]->key);
            profile.Init();
            //LM_M(("Web profile created for user:%lu", user.value));
        }
        else
        {
            user.parse(inputs[1].kvs[0]->key);
            // Previous state
            profile.parse(inputs[1].kvs[0]->value); // We only consider one state

            if (inputs[1].num_kvs > 1)
            {
                LM_W(("Multiple states(%lu) for user:%lu", inputs[1].num_kvs, user.value));
            }
        }


        for (uint64_t i = 0; i < inputs[0].num_kvs; i++)
        {

            bool categoryFound = false;
            hit.parse(inputs[0].kvs[i]->value);

            for (int j = 0; (j < profile.webActivity_length); j++)
            {
                if (hit.category.value == profile.webActivity[j].category.value)
                {
                    categoryFound = true;
                    profile.webActivity[j].count.value++;
                    if (hit.timestamp.value > profile.webActivity[j].timestamp.value)
                    {
                        profile.webActivity[j].timestamp.value = hit.timestamp.value;
                    }
                }
            }

            if (categoryFound == false)
            {
                profile.AddWebCategory(hit.category, hit.timestamp, 1);
            }
        }

        if (user.value == 692605618)
        {
            LM_M(("Saving webprofile state for user:%lu", user.value));
        }
        writer->emit(0, &user, &profile);
    }

    void finish( samson::KVWriter *writer )
    {
    }



};


} // end of namespace OTTstream
} // end of namespace samson

#endif
