
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this data
*/

#ifndef _H_SAMSON_c4_Board
#define _H_SAMSON_c4_Board


#include <samson/modules/c4/Board_base.h>
#include "extra/c4/Board.h"

namespace samson{
namespace c4{
	class Board : public Board_base
	{
    
  public:
    
    Board()
    {
      // Init board with initial position
      white.value = 0;
      black.value = 0;

	  // Turn is white
	  turn.value = C4_WHITE;
    }
    

	virtual std::string strHTML(int level_html_heading)
	{
	   return str();
	}

	// XML Version of this data instance
	virtual std::string strXML()
	{
	   return str();
	}

	std::string str()
	{
	   std::ostringstream output;
	   au::c4::Board b( white.value , black.value );	   
	   output << b.str();
	   if( turn.value == C4_WHITE )
		  output << "Turn white\n";
	   else if( turn.value == C4_BLACK )
		  output << "Turn black\n";
	   else
		  output << "Unknown turn";
	   return output.str();
	}
    
    // Set from a string provided at the url
	virtual void setFromString(const char *str) {
	   
       // New board
	   au::c4::Board board;

	   if (str != NULL)
		  for ( size_t i = 0 ; i < strlen( str) ; i++ )
		  {
			 if( str[i] == 'W' || str[i] == 'w' )
				board.Set( C4_WHITE , i/7 , i%7 );
			 if( str[i] == 'B' || str[i] == 'b' )
				board.Set( C4_BLACK , i/7 , i%7 );
	   }

	   white.value = board.white_value(); // Set masks for white and black
	   black.value = board.black_value();
	   turn.value = C4_WHITE; 	    // Turn is white ( by default )

	}


    
	};


} // end of namespace samson
} // end of namespace c4

#endif
