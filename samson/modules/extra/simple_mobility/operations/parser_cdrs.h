/*
 * Telefónica Digital - Product Development and Innovation
 *
 * THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 * EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Copyright (c) Telefónica Investigación y Desarrollo S.A.U.
 * All rights reserved.
 */

/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_simple_mobility_parser_cdrs
#define _H_SAMSON_simple_mobility_parser_cdrs


#include <samson/module/samson.h>
#include <samson/modules/system/SimpleParser.h>    // SimpleParser
#include <samson/modules/mobility/Record.h>
#include <samson/modules/system/UInt.h>


namespace samson{
namespace simple_mobility{


   class parser_cdrs : public  samson::system::SimpleParser
	{

	   std::vector<char*> words;    // Vector used to store words parsed at each line

       // Key values used to emit content
	   samson::system::UInt key;
	   samson::mobility::Record value;
	   
	public:


#ifdef INFO_COMMENT //Just to include a comment without conflicting anything
// If interface changes and you do not recreate this file, consider updating this information (and of course, the module file)

output: system.UInt mobility.Record

helpLine: Parse input CDRs to get user - position -timestamp elements
#endif // de INFO_COMMENT

	   void init( samson::KVWriter *writer )
	   {
	   }
	   
	   void parseLine( char * line , samson::KVWriter *writer )
       {
          // Split line in words
          split_in_words( line, words );

		  // Expected format USER_ID CDR lat lon time

          if( words.size() < 5 )
             return; // No content for a valid instruction

		  if( strcmp( words[1] , "CDR" ) != 0)
			 return; // Non valid format
		  
		  // Set the key
		  key.value = atoll( words[0] );

		  // Set the position
		  value.position.set( atoll( words[2] ) ,  atoll( words[3] ) );
		  value.timestamp.value = atoll( words[4] );
	      value.cellId.value = 0; // No cell id
	   
		  // Emit the key-value
		  writer->emit( 0 , &key, &value );
	   }	   

	   void finish( samson::KVWriter *writer )
	   {
	   }	   

	};


} // end of namespace simple_mobility
} // end of namespace samson

#endif
