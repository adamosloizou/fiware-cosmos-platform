/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
 */

#ifndef _H_SAMSON_fiware_pos_ParserLogs
#define _H_SAMSON_fiware_pos_ParserLogs

#include <samson/module/samson.h>
#include <samson/modules/fiware_pos/UserTick.h>
#include <samson/modules/system/SimpleParser.h>
#include <samson/modules/system/UInt.h>

#include "logMsg/logMsg.h"

namespace samson {
namespace fiware_pos {

class ParserLogs : public samson::system::SimpleParser {

  public:

    //  INFO_MODULE
    // If interface changes and you do not recreate this file, you will have to update this information (and of course, the module file)
    // Please, do not remove this comments, as it will be used to check consistency on module declaration
    //
    //  output: system.UInt fiware_pos.UserTick
    //
    // helpLine: Parse input logs as 'userId|sensorId|timeStamp' and emits user ticks per sensorId
    //  END_INFO_MODULE

    void init(samson::KVWriter *writer) {
      sep_ = '|';
    }

    void parseLine(char * line, samson::KVWriter *writer) {
      char *tmp_line = strdup(line);
      //LM_M(("Parsing:'%s'", line));
      split_in_words(line, fields_, sep_);

      if (fields_.size() != 3) {
        LM_W(("Wrong number of fields(%lu) != (%d) in line:'%s'", fields_.size(), 3, tmp_line));
        free(tmp_line);
        return;
      }

      char *endptr;
      sensor_id_.value = strtoul(fields_[1], &endptr, 10 );
      if (*endptr != '\0') {
        LM_W(("Wrong sensor_id:'%s' in line:'%s'", fields_[1], tmp_line));
        free(tmp_line);
        return;
      }

      user_tick_.user_id.value = strtoul(fields_[0], &endptr, 10 );
      if (*endptr != '\0') {
        LM_W(("Wrong user_id:'%s' in line:'%s'", fields_[0], tmp_line));
        free(tmp_line);
        return;
      }
      free(tmp_line);
      user_tick_.timestamp.setFromStrTimeDate_YYYY_mm_dd_24H(fields_[2]);
      //LM_M(("Emit user_id:%lu to sensor:%lu", user_tick_.user_id.value, sensor_id_.value));
      writer->emit(0, &sensor_id_, &user_tick_);
    }

    void finish(samson::KVWriter *writer) {
    }

  private:
    samson::fiware_pos::UserTick user_tick_;
    samson::system::UInt sensor_id_;

    std::vector<char*> fields_;
    char sep_;
};

} // end of namespace fiware_pos
} // end of namespace samson

#endif
