/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
 */

#ifndef _H_SAMSON_fiware_pos_AddPositionInfo
#define _H_SAMSON_fiware_pos_AddPositionInfo

#include <samson/module/samson.h>
#include <samson/modules/fiware_pos/Position.h>
#include <samson/modules/fiware_pos/Sensor.h>
#include <samson/modules/fiware_pos/UserTick.h>
#include <samson/modules/system/UInt.h>

#include "logMsg/logMsg.h"

namespace samson {
namespace fiware_pos {

class AddPositionInfo : public samson::Reduce {

  public:

    //  INFO_MODULE
    // If interface changes and you do not recreate this file, you will have to update this information (and of course, the module file)
    // Please, do not remove this comments, as it will be used to check consistency on module declaration
    //
    //  input: system.UInt fiware_pos.UserTick
    //  input: system.UInt fiware_pos.Position
    //  output: system.UInt fiware_pos.SensorTick
    //
    // helpLine: Reduce forward operation to join the sensor position info to every user tick
    //  END_INFO_MODULE

    void init(samson::KVWriter *writer) {
    }

    void run(samson::KVSetStruct* inputs, samson::KVWriter *writer) {
      if (inputs[0].num_kvs == 0) {
        return;
      }

      sensor_id_.parse(inputs[0].kvs[0]->key);

      if (inputs[1].num_kvs == 0) {
        LM_W(("No position info for sensor_id:%lu (%lu records)", sensor_id_.value, inputs[0].num_kvs));
        return;
      }
      if (inputs[1].num_kvs > 1) {
        LM_W(("More than one position info for sensor_id:%u (%lu infos)", sensor_id_.value, inputs[1].num_kvs));
      }
      sensor_position_.parse(inputs[1].kvs[0]->value); // Only consider the first one...
      // Complete the complete record
      sensor_tick_.sensor.id.value = sensor_id_.value;
      sensor_tick_.sensor.position.copyFrom(&sensor_position_);

      for (uint64_t i = 0; i < inputs[0].num_kvs; ++i) {
        user_tick_.parse(inputs[0].kvs[i]->value);

        sensor_tick_.timestamp.value = user_tick_.timestamp.value;
        writer->emit(0, &(user_tick_.user_id), &sensor_tick_);
      }
      return;
    }

    void finish(samson::KVWriter *writer) {
    }

  private:
    samson::fiware_pos::Position sensor_position_;
    samson::system::UInt sensor_id_;
    samson::fiware_pos::UserTick user_tick_;
    samson::fiware_pos::SensorTick sensor_tick_;
};

} // end of namespace fiware_pos
} // end of namespace samson

#endif
