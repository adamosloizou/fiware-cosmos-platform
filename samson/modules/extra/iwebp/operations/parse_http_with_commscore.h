/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
 */

#ifndef _H_SAMSON_system_parse_http_with_commscore
#define _H_SAMSON_system_parse_http_with_commscore

#include <stdlib.h>
#include <string.h>
#include <stdint.h>

#include <samson/module/samson.h>
#include <samson/modules/system/Value.h>
#include <samson/modules/system/TimeUnix.h>
#include <samson_system/ValueContainer.h>

#include "au/string.h"
#include "comscore/SamsonComscoreDictionary.h"

namespace samson {
namespace iwebp {

class OTTService {

    std::vector<std::string> httpPatterns_;
    std::vector<std::string> dnsPatterns_;

  public:

    std::string name_;
    int serviceId_;
    std::string group_;
    bool category_;

    OTTService(const std::string& name, int serviceId, const std::string& group_serviceId, bool category) {
      name_ = name;
      serviceId_ = serviceId;
      group_ = group_serviceId;
      category_ = category;
    }

    ~OTTService() {
      httpPatterns_.clear();
      dnsPatterns_.clear();
    }

    void addHTTPPattern(const std::string& _httpPattern) {
      httpPatterns_.push_back(_httpPattern);
    }

    void addDNSPattern(const std::string& _dnsPattern) {
      dnsPatterns_.push_back(_dnsPattern);
    }

    bool checkHTTP(const char *url, const char *host) {
      char wildcard = '%';
      const char *p_check;

      if (category_ == true) {
        p_check = host;
      }
      else {
        p_check = url;
      }
      for (unsigned int i = 0; i < httpPatterns_.size(); ++i) {
        if (au::MatchPatterns(p_check, httpPatterns_[i].c_str(), wildcard)) {
          return true;
        }
      }
      return false;
    }

    bool checkDNS(const char *dns) {
      char wildcard = '%';
      for (unsigned int i = 0; i < dnsPatterns_.size(); ++i) {
        if (au::MatchPatterns(dns, dnsPatterns_[i].c_str(), wildcard)) {
          return true;
        }
      }
      return false;
    }

    bool checkName(const char *input_name) {
      if (strcmp(input_name, name_.c_str()) == 0) {
        return true;
      }
      return false;
    }

};

class parse_http_with_commscore : public samson::Parser {
    samson::system::ValueContainer keyContainer_;
    samson::system::ValueContainer valueContainer_;

    // OTT services to be detected
    std::vector<OTTService *> services_;

    char *line_;
    std::vector<char*> fields_;
    char sep_;
    samson::comscore::SamsonComscoreDictionary samson_comscore_dictionary_;

  public:

    //  INFO_MODULE
    // If interface changes and you do not recreate this file, you will have to update this information (and of course, the module file)
    // Please, do not remove this comments, as it will be used to check consistency on module declaration
    //
    //  output: system.Value system.Value
    //
    // helpLine: Parse lines from TRAFFICA http logs, enriching with comscore categories
    //  END_INFO_MODULE

    void init(samson::KVWriter *writer) {
      sep_ = '\t';

      // Alloc space for the lines...
#define MAX_LENGTH_LINE 20000
      line_ = static_cast<char *> (malloc(MAX_LENGTH_LINE + 1));
      //LM_M(("Created line at %p", line));

      au::ErrorManager error;
      samson_comscore_dictionary_.read("/var/comscore/samson_comscore_dictionary.bin");

      // Error defined by user
      if (error.IsActivated())
        tracer->setUserError(error.GetMessage());

      // OTT services section
      {
        OTTService *newService = new OTTService("web", 0, "WEB", false);
        services_.push_back(newService);
      }
      {
        OTTService *newService = new OTTService("Skype", 11, "COMMS", false);
        newService->addHTTPPattern("http://ui.skype.com/%/getlatestversion?%");
        newService->addHTTPPattern("http://apps.skype.com/countrycode");
        newService->addHTTPPattern("http://conn.skype.com");
        services_.push_back(newService);
      }
      {
        OTTService *newService = new OTTService("Viber", 12, "COMMS", false);
        newService->addHTTPPattern("http://www.cdn.viber.com/ok.txt");
        newService->addHTTPPattern("http://www.cdn.viber.com/android_version.txt");
        services_.push_back(newService);
      }
      {
        OTTService *newService = new OTTService("GTalk", 13, "COMMS", true);
        newService->addHTTPPattern("talkgadget.google.com");
        newService->addHTTPPattern("talkgadget.google");
        newService->addHTTPPattern("hostedtalkgadget.google.com");
        newService->addHTTPPattern("dl.google.com");
        newService->addHTTPPattern("tc.v%.cache%.c.pack.google.com");
        newService->addDNSPattern("talkgadget.google.com");
        newService->addDNSPattern("talkgadget.l.google.com");
        newService->addDNSPattern("hostedtalkgadget.google.com");
        newService->addDNSPattern("%.talkgadget.google.com");
        newService->addDNSPattern("mtalk.google.com");
        newService->addDNSPattern("talk.google.com");
        newService->addDNSPattern("mtalk.google.com.%");
        newService->addDNSPattern("talk.google.com.%");
        newService->addDNSPattern("talk.%.google.com");
        services_.push_back(newService);
      }
      {
        OTTService *newService = new OTTService("WhatsApp", 14, "COMMS", true);
        newService->addDNSPattern("sro.whatsapp.net");
        newService->addDNSPattern("bin-short.whatsapp.net");
        newService->addDNSPattern("bin-nokia.whatsapp.net");
        newService->addDNSPattern("mms.whatsapp.net");
        newService->addDNSPattern("mms40%.whatsapp.net");
        newService->addDNSPattern("mms30%.whatsapp.net");
        newService->addDNSPattern("mms20%.whatsapp.net");
        services_.push_back(newService);
      }
      {
        OTTService *newService = new OTTService("faceTime", 15, "COMMS", true);
        services_.push_back(newService);
      }
      {
        OTTService *newService = new OTTService("iphoneMessage", 16, "COMMS",
                                                true);
        services_.push_back(newService);
      }
      {
        OTTService *newService = new OTTService("Tango", 17, "COMMS", true);
        newService->addDNSPattern("%.cm.tango.me");
        services_.push_back(newService);
      }
      {
        OTTService *newService = new OTTService("Facebook", 21, "SOCIAL", false);
        newService->addHTTPPattern("http://www.facebook.com/ajax/messaging/typ.php?__a=1");
        newService->addHTTPPattern("http://apps.facebook.com/ajax/messaging/typ.php?__a=1");
        newService->addHTTPPattern("http://es-es.facebook.com/ajax/messaging/typ.php?__a=1");
        newService->addHTTPPattern("http://www.facebook.com/ajax/messaging/async.php?__a=1");
        newService->addHTTPPattern("http://apps.facebook.com/ajax/messaging/async.php?__a=1");
        newService->addHTTPPattern("http://es-es.facebook.com/ajax/messaging/async.php?__a=1");
        newService->addHTTPPattern("http://www.facebook.com/ajax/messaging/send.php?__a=1");
        newService->addHTTPPattern("http://apps.facebook.com/ajax/chat/send.php?__a=1");
        newService->addHTTPPattern("http://es-es.facebook.com/ajax/chat/send.php?__a=1");
        newService->addHTTPPattern("http://www.facebook.com/ajax/chat/buddy_list.php?__a=1");
        newService->addHTTPPattern("http://apps.facebook.com/ajax/chat/buddy_list.php?__a=1");
        newService->addHTTPPattern("http://es-es.facebook.com/ajax/chat/buddy_list.php?__a=1");
        newService->addHTTPPattern("http://www.facebook.com/ajax/chat/tabs.php?__a=1");
        newService->addHTTPPattern("http://apps.facebook.com/ajax/chat/tabs.php?__a=1");
        newService->addHTTPPattern("http://touch.facebook.com/touch/chathistory.php");
        newService->addHTTPPattern("http://iphone.facebook.com/touch/chathistory.php");
        newService->addHTTPPattern("http://www.facebook.com/ajax/presence/update.php");
        newService->addHTTPPattern("http://%.channel.facebook.com%");
        services_.push_back(newService);
      }
      {
        OTTService *newService = new OTTService("Tuenti", 22, "SOCIAL", true);
        newService->addHTTPPattern("m.tuenti.com");
        newService->addHTTPPattern("xmpp%.tuenti.com");
        newService->addHTTPPattern("api.tuenti.com");
        newService->addHTTPPattern("fotos.api.tuenti.com");
        newService->addHTTPPattern("api.pl.tuenti.com");
        services_.push_back(newService);
      }
      {
        OTTService *newService = new OTTService("Google+", 23, "SOCIAL", true);
        newService->addDNSPattern("plus.google.com");
        services_.push_back(newService);
      }
      {
        OTTService *newService = new OTTService("VodafoneADSL", 101, "VODAFONE", false);
        newService->addHTTPPattern("%vodafone%/%internet-y-tv/adsl%");
        newService->addHTTPPattern("%adsl-vodafone%");
        newService->addHTTPPattern("%internetvodafone%");
        services_.push_back(newService);
      }
      {
        OTTService *newService = new OTTService("VodafoneClientes", 102, "VODAFONE", false);
        newService->addHTTPPattern("%club2020.mi.vodafone%");
        newService->addHTTPPattern("%mivodafone%");
        newService->addHTTPPattern("%vodafone.es/%amigo%");
        newService->addHTTPPattern("%mi-vodafone%");
        newService->addHTTPPattern("%vodafone.es/miregalo%");
        newService->addHTTPPattern("%vodafone.es/%programa%");
        newService->addHTTPPattern("%vodafone.es/%trae-un-amigo%");
        newService->addHTTPPattern("%vodafone.es/%promociones%");
        newService->addHTTPPattern("%vodafone.es/%puntos%");
        newService->addHTTPPattern("%areaclientes.vodafone%");
        newService->addHTTPPattern("%zonaclientes.vodafone%");

        services_.push_back(newService);
      }
      {
        OTTService *newService = new OTTService("VodafoneOnline", 103, "VODAFONE", false);
        newService->addHTTPPattern("%atencionalcliente.vodafone%");
        newService->addHTTPPattern("%ayudacliente.vodafone%");
        newService->addHTTPPattern("%canalonline.vodafone%");
        newService->addHTTPPattern("%foro.vodafone%");
        newService->addHTTPPattern("%manuales.vodafone%");
        newService->addHTTPPattern("%vodafone%/%atencion-cliente%");
        newService->addHTTPPattern("%vodafone%/%ayuda%");
        services_.push_back(newService);
      }
      {
        OTTService *newService = new OTTService("VodafoneContacto", 104, "VODAFONE", false);
        newService->addHTTPPattern("%vodafone%/conocenos%");
        newService->addHTTPPattern("%vodafone%/%app%-y-descargas%");
        newService->addHTTPPattern("%vodafone%/%zonadescargas%");
        services_.push_back(newService);
      }
      {
        OTTService *newService = new OTTService("VodafoneEmpresas", 105, "VODAFONE", false);
        newService->addHTTPPattern("%mensaredempresas.vodafone%");
        newService->addHTTPPattern("%vodafone%/autonomos%");
        newService->addHTTPPattern("%vodafone%/empresas%");
        newService->addHTTPPattern("%vodafone%/puntosempresa%");
        services_.push_back(newService);
      }
      {
        OTTService *newService = new OTTService("VodafoneInternetMovil", 106, "VODAFONE", false);
        newService->addHTTPPattern("%vodafone%/%internet-y-correo%");
        newService->addHTTPPattern("%vodafone%/%internet-movil%");
        services_.push_back(newService);
      }
      {
        OTTService *newService = new OTTService("VodafoneMovilFijo", 107, "VODAFONE", false);
        newService->addHTTPPattern("%vodafone%/%/moviles-%");
        services_.push_back(newService);
      }
      {
        OTTService *newService = new OTTService("VodafoneTV", 108, "VODAFONE", false);
        newService->addHTTPPattern("%vodafone%/%internet-y-tv/television%");
        services_.push_back(newService);
      }
      {
        OTTService *newService = new OTTService("VodafoneTienda", 109, "VODAFONE", false);
        newService->addHTTPPattern("%tienda%.vodafone%");
        newService->addHTTPPattern("%tiendaempresasvodafone%");
        services_.push_back(newService);
      }
      {
        OTTService *newService = new OTTService("OrangeClientes", 201, "ORANGE", false);
        newService->addHTTPPattern("%area%clientes.orange.es%");
        newService->addHTTPPattern("%areaprivada.orange.es%");
        newService->addHTTPPattern("%clientes%.orange.es%");
        services_.push_back(newService);
      }
      {
        OTTService *newService = new OTTService("OrangeOnline", 202, "ORANGE", false);
        newService->addHTTPPattern("%ayuda.orange.es%");
        newService->addHTTPPattern("%configuratumovil.orange.es%");
        newService->addHTTPPattern("%foros.%orange.es%");
        services_.push_back(newService);
      }
      {
        OTTService *newService = new OTTService("OrangeEmpresas", 203, "ORANGE", false);
        newService->addHTTPPattern("%orange.es/empresas%");
        newService->addHTTPPattern("%orange.es%/autonomos%");
        services_.push_back(newService);
      }
      {
        OTTService *newService = new OTTService("OrangeADSL", 204, "ORANGE", false);
        newService->addHTTPPattern("%internet.orange.es%");
        newService->addHTTPPattern("%orange.es/internet%");
        services_.push_back(newService);
      }
      {
        OTTService *newService = new OTTService("OrangeInfoMovil", 205, "ORANGE", false);
        newService->addHTTPPattern("%movil.orange.es%");
        newService->addHTTPPattern("%orange.es/movil%");
        services_.push_back(newService);
      }
      {
        OTTService *newService = new OTTService("OrangePortabilidad", 206, "ORANGE", false);
        newService->addHTTPPattern("%portabilidad%orange.es%");
        services_.push_back(newService);
      }
      {
        OTTService *newService = new OTTService("OrangeTienda", 207, "ORANGE", false);
        newService->addHTTPPattern("%tienda%orange.es%");
        services_.push_back(newService);
      }
      {
        OTTService *newService = new OTTService("OrangeTonos", 208, "ORANGE", false);
        newService->addHTTPPattern("%tonosdeespera%orange%");
        services_.push_back(newService);
      }
      {
        OTTService *newService = new OTTService("YoigoClientes", 301, "YOIGO", false);
        newService->addHTTPPattern("%miyoigo.yoigo%");
        newService->addHTTPPattern("%yoigo.com/mequedo%");
        services_.push_back(newService);
      }
      {
        OTTService *newService = new OTTService("YoigoBlogs", 302, "YOIGO", false);
        newService->addHTTPPattern("%yoigo.blogspot%");
        newService->addHTTPPattern("%foroyoigo%");
        services_.push_back(newService);
      }
      {
        OTTService *newService = new OTTService("YoigoOnline", 303, "YOIGO", false);
        newService->addHTTPPattern("%yoigo.com/ayuda-al-cliente%");
        services_.push_back(newService);
      }
      {
        OTTService *newService = new OTTService("YoigoCobertura", 304, "YOIGO", false);
        newService->addHTTPPattern("%cobertura.yoigo.com%");
        services_.push_back(newService);
      }
      {
        OTTService *newService = new OTTService("YoigoComparadorMoviles", 305, "YOIGO", false);
        newService->addHTTPPattern("%yoigo.com/comparador%");
        services_.push_back(newService);
      }
      {
        OTTService *newService = new OTTService("YoigoCondiciones", 306, "YOIGO", false);
        newService->addHTTPPattern("%yoigo.com/%condiciones%");
        newService->addHTTPPattern("%yoigo.com/preguntas%");
        services_.push_back(newService);
      }
      {
        OTTService *newService = new OTTService("YoigoInternet", 307, "YOIGO", false);
        newService->addHTTPPattern("%yoigo.com/internet%");
        services_.push_back(newService);
      }
      {
        OTTService *newService = new OTTService("YoigoRecarga", 308, "YOIGO", false);
        newService->addHTTPPattern("%yoigo.com/recarga%");
        services_.push_back(newService);
      }
      {
        OTTService *newService = new OTTService("YoigoRevista", 309, "YOIGO", false);
        newService->addHTTPPattern("%yoigo.com/revista%");
        services_.push_back(newService);
      }
      {
        OTTService *newService = new OTTService("YoigoServicios", 310, "YOIGO", false);
        newService->addHTTPPattern("%yoigo.com/servicios%");
        services_.push_back(newService);
      }
      {
        OTTService *newService = new OTTService("YoigoTarifas", 311, "YOIGO", false);
        newService->addHTTPPattern("%yoigo.com/tarifas%");
        services_.push_back(newService);
      }
      {
        OTTService *newService = new OTTService("YoigoTiendasFisicas", 312, "YOIGO", false);
        newService->addHTTPPattern("%yoigo.com/tiendasyoigo%");
        services_.push_back(newService);
      }

    }

    OTTService *classify_http(const char *url, const char *host) {
      for (unsigned int i = 0; (i < services_.size()); ++i) {
        if (services_[i]->checkHTTP(url, host)) {
          return services_[i];
        }
      }
      return services_[0];
    }

    OTTService *classify_dns(const char *url) {
      for (unsigned int i = 0; (i < services_.size()); ++i) {
        if (services_[i]->checkDNS(url)) {
          return services_[i];
        }
      }
      return services_[0];
    }

    OTTService *classify_name(const char *name) {
      for (unsigned int i = 0; (i < services_.size()); ++i) {
        if (services_[i]->checkName(name)) {
          return services_[i];
        }
      }
      return services_[0];
    }

    bool parse_line_http(char * line, samson::system::ValueContainer *keyContainer) {
      /*
       --- HTTP ---
       MOBILE_IP_ADDRESS       88.31.48.46
       REFERER                 http://www.facebook.com/messages/?action=read&tid=
       HOST                    www.facebook.com
       CAUSE_CODE              200
       REPORT_REASON           71
       SERVICE_IP_ADDRESS      69.171.242.39
       MSISDN                  34682934158
       MESSAGING_END_TIME      03-NOV-11 10.59.37.680000 PM
       FIRST_URL               http://www.facebook.com/ajax/chat/send.php?__a=1
       MESSAGING_START_TIME    03-NOV-11 10.59.12.390000 PM
       GET_MESSAGES            1
       IMEI                    8698780025156101
       IMSI                    214075500570676
       SERVICE_PORT            80
       REPORT_TIME             2011-11_03 23:00:82800
       APPLICATION_ID          80
       */

      au::SplitInWords(line, fields_, sep_);

      if (fields_.size() != 16) {
        LM_W(("Wrong number of fields(%d) != expected(%d)", fields_.size(), 16));
        return false;
      }

      uint64_t userId = strtoul(fields_[6], NULL, 10);
      if (userId == 0) {
        return false;
      }
      uint64_t imei = strtoul(fields_[11], NULL, 10);

      samson::system::TimeUnix timestamp;
      timestamp.setFromStrTimeDate_dd_lett_YY_12H_AMPM(fields_[9]);

      //LM_M(("Time ok"));

      char *url = fields_[8];

      if ((url == NULL) || (*url == '\0')) {
        //LM_W(("Empty url at fields[0]:'%s', fields[1]:'%s', fields[2]:'%s', fields[6]:'%s', fields[9]:'%s' ", fields[0], fields[1], fields[2], fields[6], fields[9]));
        return false;
      }
      char *host = fields_[2];

      OTTService *detected_service = classify_http(url, host);
      if (detected_service == NULL) {
        LM_W(("No service detected"));
        return false;
      }
      char *name_service = strdup(detected_service->name_.c_str());
      char *name_group = strdup(detected_service->group_.c_str());

      //LM_M(("Service ok: %s", name_service));

      char *p_blank;
      if ((p_blank = strchr(url, ' ')) != NULL) {
        *p_blank = '\0';
      }
      // Remove protocol information (if any)
      char *p_sep;
      char *p_domain = url;
      char *domain;
      if ((p_sep = strstr(p_domain, "://")) != NULL) {
        p_domain = p_sep + strlen("://");
        url = p_domain;
      }
      if ((p_sep = strchr(p_domain, '/')) != NULL) {
        size_t length_domain = p_sep - p_domain;
        domain = static_cast<char *> (malloc(length_domain + 1));
        strncpy(domain, p_domain, length_domain);
        domain[length_domain] = '\0';
      }
      else {
        domain = strdup(p_domain);
      }

      //LM_M(("domain ok: %s", domain));

      // Get all categories for this url
      std::vector<uint> categories_ids = samson_comscore_dictionary_.getCategories(url);
      //LM_M(("categories ok with size:%d for url:'%s'", categories_ids.size(), url));

      keyContainer->value->SetAsMap();
      keyContainer->value->AddValueToMap("app")->SetString("agregatedKey");
      keyContainer->value->AddValueToMap("user")->SetDouble(static_cast<double> (userId));
      keyContainer->value->AddValueToMap("imei")->SetDouble(static_cast<double> (imei));
      keyContainer->value->AddValueToMap("timestamp")->SetDouble(static_cast<double> (timestamp.value));
      keyContainer->value->AddValueToMap("url")->SetString(url);
      keyContainer->value->AddValueToMap("domain")->SetString(domain);
      keyContainer->value->AddValueToMap("service")->SetString(name_service);
      keyContainer->value->AddValueToMap("group")->SetString(name_group);

      samson::system::Value *p_vector = keyContainer->value->AddValueToMap("categories");
      p_vector->SetAsVoid();
      p_vector->SetAsVector();
      int categories_size = categories_ids.size();
      if (categories_size == 0) {
        p_vector->AddValueToVector()->SetString("Unknown");
      }
      else {
        for (int i = 0; i < categories_size; ++i) {
          std::string name =
                  samson_comscore_dictionary_.getCategoryName(categories_ids[i]);
          p_vector->AddValueToVector()->SetString(name);
        }
      }

      char *p_search;
#define MAX_LENGTH_QUERY 1024
      char query[MAX_LENGTH_QUERY + 1];
      query[0] = '\0';
      // google search
      if ((p_search = strstr(url, "search?")) != NULL) {
        strncpy(query, p_search + strlen("search?"), MAX_LENGTH_QUERY);
        //LM_M(("Detected google query:'%s'", query));
      }
      else
        if ((p_search = strstr(url, "search.php?")) != NULL) {
          //facebook search
          strncpy(query, p_search + strlen("search.php?"), MAX_LENGTH_QUERY);
          //LM_M(("Detected query:'%s'", query));
        }
      keyContainer->value->AddValueToMap("search_query")->SetString(query);

      p_vector = keyContainer->value->AddValueToMap("query_words");
      p_vector->SetAsVector();
      if ((p_search = strstr(query, "q=")) != NULL) {
        p_search += strlen("q=");
        if ((p_sep = strchr(p_search, '&')) != NULL) {
          *p_sep = '\0';
        }
        while ((p_sep = strchr(p_search, '+'))) {
          *p_sep = '\0';
          p_vector->AddValueToVector()->SetString(p_search);
          p_search = p_sep + 1;
        }
        p_vector->AddValueToVector()->SetString(p_search);
      }

      free(domain);
      free(name_service);
      free(name_group);
      return true;

    }

    void run(char *data, size_t length, samson::KVWriter *writer) {

      // By default, value is 1
      valueContainer_.value->SetDouble(1.0);

      char *p_data = data;
      char *p_data_begin = data;
      char *p_data_end = data + length;

      //LM_M(("data block of length:%d with '%c%c%c%c%c%c%c%c%c%c...'", length, data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9]));
      //LM_M(("line at %p of length:%d with '%c%c%c%c%c%c%c%c%c%c...'", line, 0, line[0], line[1], line[2], line[3], line[4], line[5], line[6], line[7], line[8], line[9]));

      while (p_data < p_data_end) {
        //LM_M(("Looking at p_data:'%c'", *p_data));
        if ((*p_data == '\n') || (*p_data == '\0')) {
          int copy_length = p_data - p_data_begin;
          if (copy_length > MAX_LENGTH_LINE) {
            copy_length = MAX_LENGTH_LINE;
          }
          //LM_M(("Detected line with %d chars, line %p", copy_length, line));
          strncpy(line_, p_data_begin, copy_length);
          // We overwrite the '\n'
          line_[copy_length] = '\0';

          //LM_M(("line at %p of length:%d with '%c%c%c%c%c%c%c%c%c%c...'", line, copy_length, line[0], line[1], line[2], line[3], line[4], line[5], line[6], line[7], line[8], line[9]));

          //LM_M(("Parsing line:'%s'", line));
          if (parse_line_http(line_, &keyContainer_)) {
            //LM_M(("Parsed line:'%s'", line));
            //LM_M(("Result keyContainer: %s", keyContainer.value));
            writer->emit(0, keyContainer_.value, valueContainer_.value);
          }
          else {
            LM_W(("Wrong line:'%s'", line_));
          }
          p_data_begin = p_data + 1;
        }
        p_data++;
      }
    }

    void finish(samson::KVWriter *writer) {
      size_t services_size = services_.size();
      for (size_t i = 0; (i < services_size); ++i)
      {
        delete services_[i];
      }
      services_.clear();
      free(line_);
    }

};

}
} // end of namespace iwebp, samson

#endif

