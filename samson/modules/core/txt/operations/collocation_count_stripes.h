/*
 * Telefónica Digital - Product Development and Innovation
 *
 * THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 * EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Copyright (c) Telefónica Investigación y Desarrollo S.A.U.
 * All rights reserved.
 */

/**
 * File autogenerated with samsonModuleParser. Please, edit to complete this operation
 */

#ifndef _H_SAMSON_txt_collocation_count_stripes
#define _H_SAMSON_txt_collocation_count_stripes


#include "samson/modules/txt/CountData.h"
#include "samson/modules/txt/Stripe.h"
#include <samson/module/samson.h>
#include <samson/modules/system/String.h>
#include <samson/modules/system/UInt.h>
#include <string>
#include <vector>

namespace samson {
namespace txt {
class collocation_count_stripes : public samson::Reduce {
  samson::system::String key;
  samson::system::String keyPrev;
  samson::txt::Stripe valueIn;

public:


  void run(samson::KVSetStruct *inputs, samson::KVWriter *writer) {
    std::vector<samson::txt::CountData>valueOutTmp;
    samson::txt::Stripe valueOut;

    if (inputs[0].num_kvs == 0) {
      return;
    }

    key.parse(inputs[0].kvs[0]->key);

    valueOutTmp.clear();
    for (size_t i = 0; i < inputs[0].num_kvs; i++) {
      valueIn.parse(inputs[0].kvs[i]->value);

      for (int j = 0; (j < valueIn.colList_length); j++) {
        if (valueIn.colList[j].count == 0) {
          continue;
        }

        bool encontrado = false;
        for (size_t k = 0; (!encontrado && (k < valueOutTmp.size())); k++) {
          int ret;
          if ((ret = valueIn.colList[j].word.value.compare(valueOutTmp[k].word.value)) == 0) {
            valueOutTmp[k].count += valueIn.colList[j].count;
            encontrado = true;
          } else if (ret < 0) {
            break;
          }
        }
        if (!encontrado) {
          valueOutTmp.push_back(valueIn.colList[j]);
        }
      }
    }

    for (size_t k = 0; (k < valueOutTmp.size()); k++) {
      if (valueOutTmp[k].count > 0) {
        valueOut.colListAdd()->copyFrom(&(valueOutTmp[k]));
      }
    }
    writer->emit(0, &key, &valueOut);
  }
};
}  // end of namespace samson
}  // end of namespace txt

#endif  // ifndef _H_SAMSON_txt_collocation_count_stripes
