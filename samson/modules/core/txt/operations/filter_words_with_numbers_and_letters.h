/*
 * Telefónica Digital - Product Development and Innovation
 *
 * THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 * EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Copyright (c) Telefónica Investigación y Desarrollo S.A.U.
 * All rights reserved.
 */

/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_txt_filter_words_with_numbers_and_letters
#define _H_SAMSON_txt_filter_words_with_numbers_and_letters


#include <samson/module/samson.h>
#include <samson/modules/system/String.h>
#include <samson/modules/system/UInt.h>


namespace samson{
namespace txt{


	class filter_words_with_numbers_and_letters : public samson::Map
	{

	public:


#ifdef INFO_COMMENT //Just to include a comment without conflicting anything
// If interface changes and you do not recreate this file, consider updating this information (and of course, the module file)

input: system.String system.UInt  
output: system.String system.UInt

helpLine: Filter words containing only numbers and letter ( ommit words with non-printable ascii chars)
#endif // de INFO_COMMENT

		void init( samson::KVWriter *writer )
		{
		}

		void run( samson::KVSetStruct* inputs , samson::KVWriter *writer )
		{

		   samson::system::String word;
		   samson::system::UInt count;

		   for ( size_t i = 0 ; i < inputs[0].num_kvs ; i++ )
		   {
			  word.parse( inputs[0].kvs[i]->key );
			  count.parse( inputs[0].kvs[i]->value );
			  
			  bool emit_word = true;
			  for ( size_t c = 0 ; c < word.value.length() ; c++ )
			  {
				 char a = word.value[c];
				 if( ((a>47)&&(a<58)) || ((a>64)&&(a<91)) || ((a>96)&&(a<123)) )
				 {
					// Normal number of letter
				 }
				 else
				 {
					emit_word = false;
					break;
				 }
			  }

			  if( emit_word )
				 writer->emit( 0 , &word , &count );
		   }
		}

		void finish( samson::KVWriter *writer )
		{
		}



	};


} // end of namespace txt
} // end of namespace samson

#endif
