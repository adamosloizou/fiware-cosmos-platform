/*
 * Telefónica Digital - Product Development and Innovation
 *
 * THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 * EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Copyright (c) Telefónica Investigación y Desarrollo S.A.U.
 * All rights reserved.
 */

/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_graph_compute_links_from_simple_links
#define _H_SAMSON_graph_compute_links_from_simple_links


#include <samson/module/samson.h>


namespace samson{
namespace graph{


	class compute_links_from_simple_links : public samson::Reduce
	{
	  samson::system::UInt key;
	  samson::system::UInt value;

	  samson::graph::Link link;

	public:


#ifdef INFO_COMMENT //Just to include a comment without conflicting anything
// If interface changes and you do not recreate this file, consider updating this information (and of course, the module file)

input: system.UInt system.UInt  
output: system.UInt graph.Link

helpLine: Transform simple links ( pairs of system.UInts into links )
#endif // de INFO_COMMENT

		void init(samson::KVWriter *writer )
		{
		}

		void run(  samson::KVSetStruct* inputs , samson::KVWriter *writer )
		{

		  if( inputs[0].num_kvs == 0)
		    return;

		  // Parsing the key
		  key.parse( inputs[0].kvs[0]->key );

		  size_t current_node = 0;
		  int num_values = 0;

		  for (size_t i = 0 ; i < inputs[0].num_kvs ; i++ )
		  {
		    value.parse( inputs[0].kvs[i]->value );

		    if( num_values == 0)
		    {
		      current_node = value.value;
		      num_values++;
		    }
		    else
		    {
		      if( value.value == current_node)
			num_values++;
		      else
		      {
			link.setWeight( (double) num_values / (double) 4 );
			link.id = current_node;
			writer->emit( 0 , &key , &link );

			num_values = 0;
		      }
		    }
		  }


		  // Emit the last link
		  if( num_values > 0 )
		  {
			link.setWeight( (double) num_values / (double) 4 );
			link.id = current_node;
			writer->emit( 0 , &key , &link );
		  }


		}

		void finish(samson::KVWriter *writer )
		{
		}



	};


} // end of namespace graph
} // end of namespace samson

#endif
