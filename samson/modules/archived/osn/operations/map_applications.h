/*
 * Telefónica Digital - Product Development and Innovation
 *
 * THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 * EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Copyright (c) Telefónica Investigación y Desarrollo S.A.U.
 * All rights reserved.
 */

/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_osn_map_applications
#define _H_SAMSON_osn_map_applications


#include <samson/module/samson.h>
#include <string>




namespace samson{
namespace osn{


	class map_applications : public samson::Map
	{
		samson::system::UInt64 msisdn;
		samson::osn::URLConnection  connect;
		samson::system::String key_out;
		samson::system::String key_out_appl;
		samson::system::UInt value_out;

	public:


		void run(  samson::KVSetStruct* inputs , samson::KVWriter *writer )
		{
			std::string Apple = "Apple";
			std::string application_Weather = "Weather";
			std::string application_Stocks = "Stocks";
			std::string application_Maps = "Maps";
			std::string application_iTunes = "iTunes";


			const char *p_Apple = Apple.c_str();
			const char *p_application_Weather = application_Weather.c_str();
			const char *p_application_Stocks = application_Stocks.c_str();
			const char *p_application_Maps = application_Maps.c_str();
			const char *p_application_iTunes = application_iTunes.c_str();



			for (size_t i=0; (i < inputs[0].num_kvs); i++)
			{
				msisdn.parse(inputs[0].kvs[i]->key);
				connect.parse(inputs[0].kvs[i]->value);

				const char *p_userAgent = connect.userAgent.value.c_str();

				if (strstr(p_userAgent, p_Apple))
				{


					if (strstr(p_userAgent, p_application_Weather))
					{
						key_out.value.assign(connect.userAgent.value);
						value_out.value = 1;
						writer->emit(0, &key_out, &value_out);

						key_out_appl.value.assign(application_Weather);
						value_out.value = 1;
						writer->emit(1, &key_out_appl, &value_out);
					}
					else if (strstr(p_userAgent, p_application_Stocks))
					{
						key_out.value.assign(connect.userAgent.value);
						value_out.value = 1;
						writer->emit(0, &key_out, &value_out);

						key_out_appl.value.assign(application_Stocks);
						value_out.value = 1;
						writer->emit(1, &key_out_appl, &value_out);
					}
					else if (strstr(p_userAgent, p_application_Maps))
					{
						key_out.value.assign(connect.userAgent.value);
						value_out.value = 1;
						writer->emit(0, &key_out, &value_out);

						key_out_appl.value.assign(application_Maps);
						value_out.value = 1;
						writer->emit(1, &key_out_appl, &value_out);
					}
					else if (strstr(p_userAgent, p_application_iTunes))
					{
						key_out.value.assign(connect.userAgent.value);
						value_out.value = 1;
						writer->emit(0, &key_out, &value_out);

						key_out_appl.value.assign(application_iTunes);
						value_out.value = 1;
						writer->emit(1, &key_out_appl, &value_out);
					}
					else
					{

					}
				}
				else
				{

				}
			}
			samson::system::UInt key_total;
			samson::system::UInt val_total;
			key_total.value = 1;
			val_total.value = inputs[0].num_kvs;
			writer->emit(2, &key_total, &val_total);
		}
	};


} // end of namespace samson
} // end of namespace osn

#endif
