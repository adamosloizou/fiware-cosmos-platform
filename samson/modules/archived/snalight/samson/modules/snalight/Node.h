/*
 * Telefónica Digital - Product Development and Innovation
 *
 * THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 * EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Copyright (c) Telefónica Investigación y Desarrollo S.A.U.
 * All rights reserved.
 */

/**
 File autogenerated with samsonModuleParser. Please, edit to complete this data
*/

#ifndef _H_SAMSON_snalight_Node
#define _H_SAMSON_snalight_Node


#include <samson/modules/snalight/Node_base.h>


namespace samson{
namespace snalight{


	class Node : public Node_base
	{

	public:
		enum { NODE_FLAG_NONE=0, NODE_FLAG_EXTERN };

		double weightOfLinkWithId( size_t id )
		{
			for (int i = 0 ; i < links_length ; i++)
			{
				if ( links[i].id == id )
				{
					return links[i].getWeight();
				}
			}
			return 0;
		}

		int numberOfLinksWithWeightEqualOrHigher( double weight )
		{
			int counter = 0;

			for (int i = 0 ; i  < links_length ; i++)
			{
				if( links[i].getWeight() >= weight )
				{
					counter++;
				}
			}
			return counter;
		}

		std::string str()
		{
                        std::ostringstream output;
                        output << id.value << " ";
                        output << "[";

                        for (int i = 0 ; i < links_length ; i++)
                                output << links[i].id.value << " (" << links[i].getWeight() << ") ";

                        output << "]";

#define GRAPH_FLAG_EXTERN  1
                        if( flags.value & GRAPH_FLAG_EXTERN)
                                output << " EXTERN";

                        return output.str();

		}


		int containsLinkWithId( uint id){

			for (int i = 0 ; i < links_length ; i++)
				if ( links[i].id == id )
					return i;

			return -1;

		}

		bool isExtern()
		{
			return (flags.value & NODE_FLAG_EXTERN);

		}

		void sortLinksByWeight()
		{
			// Simple sort by weight
			for (int i = 0 ; i < links_length ; i++)
				for (int j = i+1 ; j < links_length ; j++)
				{
					if ( links[i].weight.value < links[j].weight.value )
					{

						Link tmp;
						tmp.copyFrom(&links[i]);
						links[i].copyFrom(&links[j]);
						links[j].copyFrom(&tmp);
					}

				}

		}


	};


} // end of namespace samson
} // end of namespace snalight

#endif
