
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_prime_generate_multiples
#define _H_SAMSON_prime_generate_multiples


#include <samson/module/samson.h>
#include <samson/modules/system/UInt.h>
#include <samson/modules/system/Void.h>


namespace samson{
namespace prime{


	class generate_multiples : public samson::Map
	{

	   size_t number;
	   size_t times;

	   samson::system::UInt key;
	   samson::system::Void value;


	public:


#ifdef INFO_COMMENT //Just to include a comment without conflicting anything
// If interface changes and you do not recreate this file, consider updating this information (and of course, the module file)

input: system.UInt system.Void  
output: system.UInt system.Void

helpLine: Emit the same numbers at the output and the multiple until prime.limit
#endif // de INFO_COMMENT

		void init(samson::KVWriter *writer )
		{
		}

		void run(  samson::KVSetStruct* inputs , samson::KVWriter *writer )
		{

           size_t num_samples = environment->get( "prime.limit" ,  100 );

		   for( size_t i = 0 ; i < inputs[0].num_kvs ; i++ )
		   {


			  key.parse( inputs[0].kvs[i]->key );


			  OLM_M(("Generating multiples for %lu",key.value));

			  if( key.value == 1)
			  {
				 writer->emit( 0 , &key , &value );
				 return;// Special case to avoid infinite loop
			  }
			  
			  number = key.value;
			  times = 1;

			  while( key.value < num_samples )
			  {
				 OLM_M(("Emiting %lu since it is %lu x %lu" , key.value , number , times ));
				 writer->emit( 0 , &key , &value );
				 times++;
				 key.value = number * times;
			  }

		   }

		}

		void finish(samson::KVWriter *writer )
		{

		}



	};


} // end of namespace prime
} // end of namespace samson

#endif
