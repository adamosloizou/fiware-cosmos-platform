
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_prime_generate_numbers
#define _H_SAMSON_prime_generate_numbers


#include <samson/module/samson.h>
#include <samson/modules/system/UInt.h>
#include <samson/modules/system/Void.h>


namespace samson{
namespace prime{


	class generate_numbers : public samson::Generator
	{

	   bool active;    // Flag to know if we have to run or not

	public:


#ifdef INFO_COMMENT //Just to include a comment without conflicting anything
// If interface changes and you do not recreate this file, consider updating this information (and of course, the module file)

output: system.UInt system.Void

helpLine: Generate natural numbers from 1 to prime.limit
#endif // de INFO_COMMENT

		void init( samson::KVWriter *writer )
		{
		}


    public:

		void setup( int worker , int num_workers, int process , int num_processes )
        {
		   if( ( worker == 0 ) && ( process == 0 ) )
			  active = true;
		   else
			  active = false;
        }

        void run( samson::KVWriter *writer )
        {

		   if(!active)
			  return;

		   // Recover the number of samples from the environment variables
		   size_t num_samples = environment->getSizeT( "prime.limit" ,  100 );

		   samson::system::UInt key;
		   samson::system::Void value;

           //Not emit 0 ;)
		   for( size_t i = 1 ; i < num_samples ; i++)
		   {
			  key.value = i;
			  writer->emit( 0 , &key , &value );
		   }


		}

		void finish( samson::KVWriter *writer )
		{
		}



	};


} // end of namespace prime
} // end of namespace samson

#endif
