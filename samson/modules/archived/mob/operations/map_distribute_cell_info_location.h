/*
 * Telefónica Digital - Product Development and Innovation
 *
 * THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 * EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Copyright (c) Telefónica Investigación y Desarrollo S.A.U.
 * All rights reserved.
 */

/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
 */

#ifndef _H_SAMSON_mob_map_distribute_cell_info_location
#define _H_SAMSON_mob_map_distribute_cell_info_location


#include <samson/module/samson.h>


namespace samson{
namespace mob{


class map_distribute_cell_info_location : public samson::Map
{

        // Input[0k]
        samson::system::UInt phone;
        // Input[0v]
	samson::cdr::Cell cell;
        // Output [0123k]
	PhoneLoc phoneLoc;
        // Output [0123v]
	samson::system::Void void_data;

public:


#ifdef INFO_COMMENT //Just to include a comment without conflicting anything
	// If interface changes and you do not recreate this file, consider updating this information (and of course, the module file)

	input: system.UInt cdr.Cell
	output: mob.PhoneLoc system.Void
	output: mob.PhoneLoc system.Void
	output: mob.PhoneLoc system.Void
	output: mob.PhoneLoc system.Void

#endif // de INFO_COMMENT

	void init(samson::KVWriter *writer )
	{
	}

	void run(  samson::KVSetStruct* inputs , samson::KVWriter *writer )
	{

		for (size_t i = 0; i < inputs[0].num_kvs; i++ )
		{
			phone.parse(inputs[0].kvs[i]->key);
			cell.parse(inputs[0].kvs[i]->value);

			phoneLoc.phone.value = phone.value;

			// mobility degree

			// cell level
			// fill structure
			phoneLoc.loc.value = cell.cellId.value;
			// emit output to compute the reference cell
			writer->emit(0, &phoneLoc, &void_data );

			// bts level
			// fill structure
			phoneLoc.loc.value = cell.btsId.value;
			// emit output to compute the reference cell
			writer->emit(1, &phoneLoc, &void_data );

			// lac level
			// fill structure
			phoneLoc.loc.value = cell.lacId.value;
			// emit output to compute the reference cell
			writer->emit(2, &phoneLoc, &void_data );

			// state level
			// fill structure
			phoneLoc.loc.value = cell.stateId.value;
			// emit output to compute the reference cell
			writer->emit(3, &phoneLoc, &void_data );
		}
	}

	void finish(samson::KVWriter *writer )
	{
	}



};


} // end of namespace samson
} // end of namespace mob

#endif
