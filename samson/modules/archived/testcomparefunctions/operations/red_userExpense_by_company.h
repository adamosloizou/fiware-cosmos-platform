/*
 * Telefónica Digital - Product Development and Innovation
 *
 * THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 * EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Copyright (c) Telefónica Investigación y Desarrollo S.A.U.
 * All rights reserved.
 */

/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_testcomparefunctions_red_userExpense_by_company
#define _H_SAMSON_testcomparefunctions_red_userExpense_by_company


#include <samson/module/samson.h>
#include <samson/modules/system/Void.h>


namespace samson{
namespace testcomparefunctions{


	class red_userExpense_by_company : public samson::Reduce
	{

	public:


#ifdef INFO_COMMENT //Just to include a comment without conflicting anything
// If interface changes and you do not recreate this file, consider updating this information (and of course, the module file)

input: system.UInt system.UInt  
input: system.UInt testcomparefunctions.User  
output: system.UInt testcomparefunctions.User
output: testcomparefunctions.User system.Void

helpLine: Accumulates expense by user, and emits by user and userId
#endif // de INFO_COMMENT

    		void init(samson::KVWriter *writer)
		{
			OLM_T(LMT_User06, ("class red_userExpense_by_company : public samson::Reduce: init()\n"));
		}

		void run(  samson::KVSetStruct* inputs , samson::KVWriter *writer )
		{
			system::UInt userId;
			system::UInt duration;
			User user;
			system::Void v;

			if (inputs[1].num_kvs == 0)
			{
				OLM_E(("Error, user not found in the user database\n"));
				return;
			}
			else if (inputs[1].num_kvs > 1)
			{
				OLM_E(("Error, user with multiple entries in the user database\n"));
				return;
			}

			userId.parse(inputs[0].kvs[0]->key);
			size_t acumExpense = 0;
			for (size_t i = 0; (i < inputs[0].num_kvs); i++)
			{
				duration.parse(inputs[0].kvs[i]->value);
				acumExpense += duration.value;
				OLM_T(LMT_User06, ("For user:%lu, acums expense:%lu with duration:%lu\n", userId.value, acumExpense, duration.value));
			}

			user.parse(inputs[1].kvs[0]->value);
			if (user.expense_GetAssigned())
			{
				user.expense.value += acumExpense;
			}
			else
			{
				user.expense.value = acumExpense;
				user.expense_SetAssigned(true);
			}

			writer->emit (0, &user.companyId, &user);
			writer->emit (1, &user, &v);
		}

    		void finish(samson::KVWriter *writer)
		{
			OLM_T(LMT_User06, ("class red_userExpense_by_company : public samson::Reduce: finish()\n"));
		}
	};


} // end of namespace samson
} // end of namespace testcomparefunctions

#endif
