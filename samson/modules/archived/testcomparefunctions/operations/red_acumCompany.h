/*
 * Telefónica Digital - Product Development and Innovation
 *
 * THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 * EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Copyright (c) Telefónica Investigación y Desarrollo S.A.U.
 * All rights reserved.
 */

/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_testcomparefunctions_red_acumCompany
#define _H_SAMSON_testcomparefunctions_red_acumCompany


#include <samson/module/samson.h>


namespace samson{
namespace testcomparefunctions{


	class red_acumCompany : public samson::ParserOutReduce
	{

	public:


#ifdef INFO_COMMENT //Just to include a comment without conflicting anything
// If interface changes and you do not recreate this file, consider updating this information (and of course, the module file)

input: testcomparefunctions.User system.Void compareKeyFunction=compare_by_company 

helpLine: Accumulates expense by company, and prints it
#endif // de INFO_COMMENT

#ifdef MAX_STR_LEN
#undef MAX_STR_LEN
#endif
// Max line to be output
#define MAX_STR_LEN 2048
    char line[MAX_STR_LEN];

    		void init( TXTWriter *writer)
		{
			OLM_T(LMT_User06, ("class red_acumCompany : public samson::ParserOutReduce: init()\n"));
			writer->emit("Hello, world!\n");
		}

		void run(KVSetStruct* inputs , TXTWriter *writer )
		{
			User user;
			size_t prevCompanyId;
			size_t acumExpense;

			OLM_T(LMT_User06, ("Starts with inputs[0].num_kvs:%d\n", inputs[0].num_kvs));
			if (inputs[0].num_kvs < 1)
			{
				OLM_E(("No users for this companies group\n"));
				return;
			}
			user.parse(inputs[0].kvs[0]->key);
			prevCompanyId = user.companyId.value;
			if (user.expense_GetAssigned())
			{
				acumExpense = user.expense.value;
				OLM_T(LMT_User06, ("For user:%lu, Starts expense:%lu company:%lu with prevCompanyId:%lu\n", user.id.value, acumExpense, user.companyId.value, prevCompanyId));
			}
			else
			{
				acumExpense = 0;
				OLM_T(LMT_User06, ("For user:%lu, Starts expense:%lu company:%lu with prevCompanyId:%lu\n", user.id.value, acumExpense, user.companyId.value, prevCompanyId));
			}

			for (size_t i = 1 ; i < inputs[0].num_kvs ; i++ )
			{
				user.parse(inputs[0].kvs[i]->key);

				OLM_T(LMT_User06, ("For user:%lu, Compares company:%lu with prevCompanyId:%lu\n", user.id.value, user.companyId.value, prevCompanyId));

				if (user.companyId.value == prevCompanyId)
				{
					if (user.expense_GetAssigned())
					{
						acumExpense += user.expense.value;
						OLM_T(LMT_User06, ("For user:%lu, acums expense:%lu company:%lu with user.expense.value:%lu\n", user.id.value, acumExpense, user.companyId.value, user.expense.value));
					}
				}
				else
				{
					snprintf( line , MAX_STR_LEN, "For user:%lu, companyId:%lu expense:%lu\n", user.id.value, prevCompanyId, acumExpense );
					writer->emit( line );

					prevCompanyId = user.companyId.value;
					if (user.expense_GetAssigned())
					{
						acumExpense = user.expense.value;
						OLM_T(LMT_User06, ("For user:%lu, Starts expense:%lu company:%lu with prevCompanyId:%lu\n", user.id.value, acumExpense, user.companyId.value, prevCompanyId));
					}
					else
					{
						acumExpense = 0;
						OLM_T(LMT_User06, ("For user:%lu, Starts expense:%lu company:%lu with prevCompanyId:%lu\n", user.id.value, acumExpense, user.companyId.value, prevCompanyId));
					}
				}
			}
			OLM_T( LMT_User06, ("For user:%lu, finally companyId:%lu expense:%lu\n", user.id.value, prevCompanyId, acumExpense ));
			snprintf( line , MAX_STR_LEN, "companyId:%lu expense:%lu\n", prevCompanyId, acumExpense );
			writer->emit( line );
		}

    		void finish(TXTWriter *writer)
		{
			OLM_T(LMT_User06, ("class red_acumCompany : public samson::ParserOutReduce: finish()\n"));
			writer->emit("That's all, folks\n");
		}
	};


} // end of namespace samson
} // end of namespace testcomparefunctions

#endif
