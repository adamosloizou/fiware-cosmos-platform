
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_url_SumServerPathFromUser
#define _H_SAMSON_url_SumServerPathFromUser


#include <samson/module/samson.h>


/***********************************************************
reduce SumServerPathFromUser
{
	in system.UInt url.ServerPath			# User(id) - ServerPathCount
	out system.UInt url.ServerPathVector	# User(id) - ServerPathVector   (suitable recommendations)

	helpLine "Aggregate all the recommendations for every user"
}
***********************************************************/

namespace samson{
namespace url{


	class SumServerPathFromUser : public samson::Reduce
	{
		samson::system::UInt userId;
		ServerPathCount serverPath;
		ServerPathCount serverPathPrev;

	public:


		void run(  samson::KVSetStruct* inputs , samson::KVWriter *writer )
		{
			bool first = true;
			size_t n_items = 0;
			ServerPathVector paths;

			if (inputs[0].num_kvs == 0)
			{
				return;
			}

			//OLM_T(LMT_User06,("Starts with inputs[0].num_kvs:%d", inputs[0].num_kvs));

			userId.parse(inputs[0].kvs[0]->key);

			//OLM_T(LMT_User06,("Working with userId:%d with inputs[0].num_kvs:%d", userId.value, inputs[0].num_kvs));

			for (size_t i = 0; (i < inputs[0].num_kvs); i++)
			{
				serverPath.parse(inputs[0].kvs[i]->value);

				if (first || ((serverPath.server == serverPathPrev.server) && (!serverPath.path.value.compare(serverPathPrev.path.value))))
				{
					if (first == true)
					{
						serverPathPrev = serverPath;
						first = false;
					}
					else
					{

						serverPathPrev.weight.value += serverPath.weight.value;
					}
					n_items++;
					//OLM_T(LMT_User06,("Detected: user:%d server:%d, path:%s, count:%d", userId.value, serverPath.server.value, serverPath.path.value.c_str(), serverPath.count.value));
				}
				else
				{
					// Again, dealing with weights, counts and probabilities is still a mess
					serverPathPrev.weight.value = serverPathPrev.weight.value / n_items;
					serverPathPrev.count.value = n_items;
					paths.serverPathAdd()->copyFrom(&serverPathPrev);
					//OLM_T(LMT_User06,("Add: user:%d server:%d, path:%s, count:%d", userId.value, serverPathPrev.server.value, serverPathPrev.path.value.c_str(), serverPathPrev.count.value));
					serverPathPrev = serverPath;
					n_items = 1;
				}
			}
			serverPathPrev.weight.value = serverPathPrev.weight.value / n_items;
			serverPathPrev.count.value = n_items;
			//OLM_T(LMT_User06,("Add last: user:%d server:%d, path:%s, count:%d", userId.value, serverPathPrev.server.value, serverPathPrev.path.value.c_str(), serverPathPrev.count.value));
			paths.serverPathAdd()->copyFrom(&serverPathPrev);
			paths.countRef = inputs[0].num_kvs;

			writer->emit(0, &userId, &paths);
		}


	};


} // end of namespace samson
} // end of namespace url

#endif
