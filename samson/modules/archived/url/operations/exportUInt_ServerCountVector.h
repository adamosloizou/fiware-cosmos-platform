
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_url_exportUInt_ServerCountVector
#define _H_SAMSON_url_exportUInt_ServerCountVector


#include <samson/module/samson.h>

/***********************************************************
parserOut exportUInt_ServerCountVector
{
	in system.UInt url.ServerCountVector
	out txt txt

	helpLine "parserOut for UInt-ServerCountVector type data-sets"
}
************************************************************/

namespace samson{
namespace url{


	class exportUInt_ServerCountVector : public samson::ParserOut
	{
		samson::system::UInt key;
		ServerCountVector val;

	public:


		void run(KVSetStruct* inputs , TXTWriter *writer )
		{
#ifdef MAX_STR_LEN
#undef MAX_STR_LEN
#endif

#define MAX_STR_LEN 2048
			char output[MAX_STR_LEN];
			char *p_output;


			int escritos;

			for (size_t i = 0; (i < inputs[0].num_kvs); i++)
			{
				key.parse(inputs[0].kvs[i]->key);
				val.parse(inputs[0].kvs[i]->value);

				escritos = snprintf(output, MAX_STR_LEN, "Id: %lu countRef: %lu: ", key.value, val.countRef.value);
				p_output = output + escritos;

				for (int j = 0; (j < val.serversCount_length); j++)
				{
#define MAX_CHUNK_LEN 128
					escritos += snprintf(p_output, MAX_CHUNK_LEN, "%lu (%lu); ", val.serversCount[j].server.value, val.serversCount[j].count.value);
					if ((escritos + MAX_CHUNK_LEN) > MAX_STR_LEN)
					{
						break;
					}
					p_output = output + escritos;
				}
				strcat(p_output, "\n");

				writer->emit(output);
			}
		}


	};


} // end of namespace samson
} // end of namespace url

#endif
