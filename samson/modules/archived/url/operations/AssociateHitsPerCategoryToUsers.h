
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_url_AssociateHitsPerCategoryToUsers
#define _H_SAMSON_url_AssociateHitsPerCategoryToUsers


#include <samson/module/samson.h>


/*****************************************************************
reduce AssociateHitsPerCategoryToUsers
{
	in system.UInt url.ServerPathVector   # Category(id) - ServerPathVector
	in system.UInt system.UInt            # Category(id) - User(id)
	out system.UInt url.ServerPath		  # User(id) - ServerPathCount

	helpLine "Join user per category with the list of hits, and emits them individually, in order to later produce the list of possible hits recommended to user"
}
*******************************************************************/

namespace samson{
namespace url{


	class AssociateHitsPerCategoryToUsers : public samson::Reduce
	{
		samson::system::UInt catIdRef;
		samson::system::UInt userId;
		ServerPathVector pathsRef;


	public:


		void run(  samson::KVSetStruct* inputs , samson::KVWriter *writer )
		{
			if (inputs[0].num_kvs != 1)
			{
				OLM_E(("We should have only one category vector per server: inputs[0].num_kvs:%d", inputs[0].num_kvs));
				return;
			}

			//OLM_T(LMT_User06,("Starts with inputs[0].num_kvs:%d", inputs[0].num_kvs));

			catIdRef.parse(inputs[0].kvs[0]->key);

			//OLM_T(LMT_User06,("Working with catId:%d with inputs[0].num_kvs:%d", catIdRef.value, inputs[0].num_kvs));


			pathsRef.parse(inputs[0].kvs[0]->value);

			for (size_t i = 0; (i < inputs[1].num_kvs); i++)
			{
				userId.parse(inputs[1].kvs[i]->value);
				//OLM_T(LMT_User06,("Working with: cat:%d user:%d", catIdRef.value, userId.value));

				for (int j = 0; (j < pathsRef.serverPath_length); j++)
				{
					//OLM_T(LMT_User06,("Emits cat:%d user:%d, item:%d path:%s, count:%d, weight:%d", catIdRef.value, userId.value, j, pathsRef.serverPath[j].path.value.c_str(), pathsRef.serverPath[j].count.value, pathsRef.serverPath[j].weight.value));

					ServerPathCount serverPath;
					serverPath.copyFrom(&(pathsRef.serverPath[j]));
					writer->emit(0, &userId, &serverPath);
				}
			}
		}


	};


} // end of namespace samson
} // end of namespace url

#endif
