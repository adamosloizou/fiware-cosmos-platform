/*
 * Telefónica Digital - Product Development and Innovation
 *
 * THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 * EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Copyright (c) Telefónica Investigación y Desarrollo S.A.U.
 * All rights reserved.
 */

/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_url_exportHitsRecommendationPerUser
#define _H_SAMSON_url_exportHitsRecommendationPerUser


#include <samson/module/samson.h>



namespace samson{
namespace url{

/*******************************************************
parserOut exportHitsRecommendationPerUser
{
	in system.UInt url.ServerPathVector  # User(id) - ServerPathVector
	out txt txt

	helpLine "Exports a list of hits for user"
}
********************************************************/

	class exportHitsRecommendationPerUser : public samson::ParserOut
	{
		samson::system::UInt userId;
		ServerPathVector paths;

	public:


		void run(KVSetStruct* inputs , TXTWriter *writer )
		{
#ifdef MAX_STR_LEN
#undef MAX_STR_LEN
#endif

#define MAX_STR_LEN 2048
			char output[MAX_STR_LEN];
			char *p_output;

			int escritos;

			for (size_t i = 0; (i < inputs[0].num_kvs); i++)
			{
				userId.parse(inputs[0].kvs[i]->key);
				paths.parse(inputs[0].kvs[i]->value);

				escritos = snprintf(output, MAX_STR_LEN, "User: %lu: [", userId.value);
				p_output = output + escritos;

				for (int j = 0; (j < paths.serverPath_length); j++)
				{
#define MAX_CHUNK_LEN 128
					escritos += snprintf(p_output, MAX_CHUNK_LEN, "%lu/%s; ", paths.serverPath[j].server.value, paths.serverPath[j].path.value.c_str());
					if ((escritos + MAX_CHUNK_LEN) > MAX_STR_LEN)
					{
						break;
					}
					p_output = output + escritos;
				}
				strcat(p_output, "]\n");

				writer->emit(output);
			}
		}


	};


} // end of namespace samson
} // end of namespace url

#endif
