/*
 * Telefónica Digital - Product Development and Innovation
 *
 * THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 * EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Copyright (c) Telefónica Investigación y Desarrollo S.A.U.
 * All rights reserved.
 */

/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_url_fakeURLs
#define _H_SAMSON_url_fakeURLs


#include <samson/module/samson.h>
#include "samson/modules/url/URL.h"
#include <samson/modules/system/Void.h>
#include <cstdlib> // rand()

/*
        out url.URL system.Void
        helpLine "Generate url.num_users_per_user URLs for url.num_users randomly"
*/

namespace samson{
namespace url{


	class fakeURLs : public samson::Generator
	{

	public:
		void run( samson::KVWriter *writer )
		{
			URL url;
			samson::system::Void v;

			// Recover the number of users in this demo
			size_t num_users  = environment->get( "url.num_users" ,  1000000 );

			// Recover the number of urls per user
			size_t num_urls_per_user = environment->get( "url.num_urls_per_user" ,  100 );

			// Recover the number of paths per server
			size_t num_paths_per_server = environment->get( "url.num_paths_per_server" ,  10 );

			// Recover the number of servers from the environment
			size_t num_servers = environment->get( "url.num_servers" ,  1000000 );

			for (size_t u = 0 ; u < num_users ; u++ )
			{
				if( !(u%1000) )
					operationController->reportProgress( (double) u / (double) num_users );

				for ( size_t t = 0 ; t < num_urls_per_user ; t++ )
				{
					std::ostringstream o;
					o << "path_to_somewhere_" << (rand()%num_paths_per_server);
					url.path.value = o.str();
					o.str(""); //Clear content;

					size_t server = ( rand()%1000 + 1000*(rand()%1000) + 1000000*(rand()%1000) )%num_servers;
					o << "ServerName_" << (server%num_servers);
					url.server.value = o.str();

					url.type = rand()%10;
					url.user.value = u;

					writer->emit( 0 , &url, &v);
				}
			}
		}


	};


} // end of namespace samson
} // end of namespace url

#endif
