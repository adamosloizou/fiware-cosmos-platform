
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_url_fakeInfos
#define _H_SAMSON_url_fakeInfos


#include <samson/module/samson.h>



namespace samson{
namespace url{


	class fakeInfos : public samson::Generator
	{

	public:
		samson::system::UInt id;



		void run( samson::KVWriter *writer )
		{
			OLM_M(("Starts run for Generator fakeInfos"));

			size_t num_servers = environment->get( "url.num_servers" ,  1000000 );
			size_t num_servers_ref = environment->get("url.num_servers_ref", 1000);
			size_t num_categories = environment->get("url.num_categories", 100);

			int fixed_categories = environment->getInt("url.fixed_categories", 0);

			size_t ratio = num_servers / num_servers_ref;

			for (size_t i = 0, num_server = 0; (i < num_servers); i++)
			{
				if (i%ratio == 0)
				{
					id.value = i;
					Category cat;
					CategoryVector categories;
					categories.fixed.value = fixed_categories;
					//categories.categorySetLength(num_categories);
					for (size_t j = 0; (j < num_categories); j++)
					{
						cat.confidence = CategoryVector::double_2_intScaled(1.0);
						if (j == num_server%num_categories)
						{
							//OLM_T(LMT_User06,("Assign serverIdRef:%d cat:%d", id.value, j));

							cat.weight = CategoryVector::double_2_intScaled(1.0);
						}
						else
						{
							cat.weight = CategoryVector::double_2_intScaled(0.0);

						}
						cat.countUser = 1;
						cat.countServer = 1;
						categories.categoryAdd()->copyFrom(&cat);
					}
					//OLM_T(LMT_User06,("Emit serverIdRef:%d ", id.value));

					writer->emit(0, &id, &categories);
					num_server++;
				}
				
			}
			OLM_M(("Ends run for Generator fakeInfos"));

		}


	};


} // end of namespace samson
} // end of namespace url

#endif
