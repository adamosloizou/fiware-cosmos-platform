
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
 */

#ifndef _H_SAMSON_urlbenchmark_fake_servers
#define _H_SAMSON_urlbenchmark_fake_servers


#include <samson/module/samson.h>

/***********************************************************
generator fake_servers
{
	out	system.String system.UInt  # ServerName - Category classification

	helpLine "Generate a fixed set of servers with one associated category each"
}
 ************************************************************/

namespace samson{
namespace urlbenchmark{


class fake_servers : public samson::Generator
{

	bool active;    // Flag to know if we have to run or not

public:

	void setup( int worker , int num_workers, int process , int num_processes )
	{
		if( ( worker == 0 ) && ( process == 0 ) )
			active = true;
		else
			active = false;
	}

	void run( samson::KVWriter *writer )
	{
		if (!active)
			return;

		samson::system::String server;
		samson::system::UInt categ;

		// Recover the number of servers from the environment
		size_t num_servers = environment->get( "urlbenchmark.num_servers" ,  1000000 );
		size_t num_categories = environment->get("urlbenchmark.num_categories", 100);


		for ( size_t i = 0 ; i < num_servers ; i++)
		{
			std::ostringstream o;
			o << "ServerName_" << i;
			server.value = o.str();

			categ.value = i%num_categories;

			writer->emit( 0 , &server , &categ );
		}
	}

};


} // end of namespace samson
} // end of namespace urlbenchmark

#endif
