/*
 * Telefónica Digital - Product Development and Innovation
 *
 * THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 * EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Copyright (c) Telefónica Investigación y Desarrollo S.A.U.
 * All rights reserved.
 */

/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_urlbenchmark_join_URLs_category_per_server
#define _H_SAMSON_urlbenchmark_join_URLs_category_per_server


#include <samson/module/samson.h>

/***************************************************************************
reduce join_URLs_category_per_server
{
	in system.String system.String           # ServerName - Path (URL without ServerName)
	in system.String system.UInt             # ServerName - Category
	out system.UInt urlbenchmark.URLHit       # Category - URLS visited per server

	helpLine "From the visits information and server classification, classifies the individual URLs per server, and selects the top 'urlbenchmark.num_hits' (per server)"
}
*****************************************************************************/

namespace samson{
namespace urlbenchmark{


	class join_URLs_category_per_server : public samson::Reduce
	{

	public:


		void run(  samson::KVSetStruct* inputs , samson::KVWriter *writer )
		{
			if ((inputs[1].num_kvs == 0) && (inputs[0].num_kvs == 0))
			{
				OLM_E(("Server without key-values"));
				return;
			}

			if ( inputs[0].num_kvs == 0)
			{
				samson::system::String s;
				s.parse( inputs[1].kvs[0]->key );
				OLM_D(("'%s' has no hits",s.value.c_str()));
				return;
			}

			if ( inputs[1].num_kvs == 0)
			{
				samson::system::String s;
				s.parse( inputs[0].kvs[0]->key );
				OLM_E(("Input '%s' not included in server encoding table",s.value.c_str()));
				return;
			}

			if ( inputs[1].num_kvs != 1)
			{
				samson::system::String s;
				s.parse( inputs[1].kvs[0]->key );
				OLM_E(("Input '%s' with multiple entries in server encoding table: inputs[1].num_kvs:%d",s.value.c_str(), inputs[1].num_kvs));
			}

			samson::system::String serverName;
			samson::system::String path;
			samson::system::String pathPrev;
			samson::system::UInt categ;
			URLHit url_hit;

			serverName.parse(inputs[1].kvs[0]->key);
			categ.parse(inputs[1].kvs[0]->value);

			//OLM_T(LMT_User01, ("server:%s, inputs[0].num_kvs:%d", serverName.value.c_str(), inputs[0].num_kvs));
			pathPrev.parse(inputs[0].kvs[0]->value);
			size_t count = 1;

			for ( size_t i = 1 ; i < inputs[0].num_kvs ; ++i)
			{
				path.parse(inputs[0].kvs[i]->value);

				if (pathPrev.value.compare(path.value) == 0)
				{
					++count;
				}
				else
				{
					url_hit.URL.value = serverName.value;
					url_hit.URL.value.append("|");
					url_hit.URL.value.append(pathPrev.value);
					url_hit.count = count;

					writer->emit( 0  , &categ, &url_hit);

					pathPrev = path;
					count = 1;
				}
			}
			url_hit.URL.value = serverName.value;
			url_hit.URL.value.append("|");
			url_hit.URL.value.append(pathPrev.value);

			url_hit.count.value = count;

			writer->emit( 0  , &categ, &url_hit);
		}
	};


} // end of namespace samson
} // end of namespace urlbenchmark

#endif
