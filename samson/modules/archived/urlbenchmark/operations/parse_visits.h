/*
 * Telefónica Digital - Product Development and Innovation
 *
 * THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 * EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Copyright (c) Telefónica Investigación y Desarrollo S.A.U.
 * All rights reserved.
 */

/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_urlbenchmark_parse_visits
#define _H_SAMSON_urlbenchmark_parse_visits


#include <samson/module/samson.h>

/*****************************************************************
parser parse_visits
{
	out system.String system.String   # ServerName - Path (URL without ServerName)

	helpLine "Parse input text with visits information"
}
*******************************************************************/

namespace samson{
namespace urlbenchmark{


	class parse_visits : public samson::Parser
	{

	public:


		void run( char *data , size_t length , samson::KVWriter *writer )
		{
			samson::system::String serverName;
			samson::system::String path;

			size_t offset = 0;
			size_t line_begin = 0;

			//OLM_M(("Parsing length:%d", length));

			while( offset < length )
			{

				if( data[offset] == '\n' || data[offset] == '\0' )
				{
					data[offset] = '\0';

					char *p_line = data+line_begin;
					char *p_url;

					if (((p_url = strchr(p_line, '|')) != NULL) || ((p_url = strchr(p_line, ' ')) != NULL))
					{
						p_url++;
					}
					else
					{
						p_url = p_line;
					}

	            	char *p_server;
	            	char *p_path;

	            	if (!strncmp(p_url, "http://", strlen("http://")))
	            	{
	            		p_server = p_url + strlen("http://");
	            	}
	            	else if (!strncmp(p_url, "https://", strlen("https://")))
	            	{
	            		p_server = p_url + strlen("https://");
	            	}
	            	else
	            	{
	            		p_server = p_url;
	            	}

	            	if ((p_path = strchr(p_server, '/')) != NULL)
	            	{
	            		*p_path = '\0';
	            		p_path++;
	            	}
	            	else
	            	{
	            		OLM_E(("Error, badly formed URL:%s", p_url));
	            		return;
	            	}

	            	serverName.value = p_server;
	            	path.value = p_path;

	                writer->emit( 0 , &serverName, &path);

					line_begin = offset+1;
				}
				++offset;
			}
			// Goyo. Mientras no tenga claro cómo se trocea el texto de entrada, mejor no procesar la última línea
			//OLM_T(LMT_User01, ("Last Detected line with offset:%d, length:%d, line_begin:%d, data[length-1]:%d", offset, length, line_begin, data[length-1]));
			//parseLines(data+line_begin , writer);
			//OLM_T(LMT_User01, ("Returned from parseLines"));
		}


	};


} // end of namespace samson
} // end of namespace urlbenchmark

#endif
