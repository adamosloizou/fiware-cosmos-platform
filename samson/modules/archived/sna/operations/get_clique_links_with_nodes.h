/*
 * Telefónica Digital - Product Development and Innovation
 *
 * THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 * EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Copyright (c) Telefónica Investigación y Desarrollo S.A.U.
 * All rights reserved.
 */

/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_sna_get_clique_links_with_nodes
#define _H_SAMSON_sna_get_clique_links_with_nodes


#include <samson/module/samson.h>


namespace samson{
namespace sna{


	class get_clique_links_with_nodes : public samson::Reduce
	{

	public:


		void run(  samson::KVSetStruct* inputs , samson::KVWriter *writer )
		{
			samson::system::UInt nodeId ;
			Node node ;
			Clique2 cliques_link ;
			Node outputNode ;

			// We are supposed to know the graph for all the nodes
			if ( inputs[1].num_kvs != 1)
			{
				OLM_E(("Error: ( inputs[1].num_kvs(%d) != 1)", inputs[1].num_kvs ));
				exit(1);
			}

			//Parse the node common to all elements
			node.parse( inputs[1].kvs[0]->value );

			outputNode.id = node.id;
			outputNode.flags = node.flags;

			for (size_t i = 0 ; i < inputs[0].num_kvs ; i++)
			{
				//Parse the clique-link
				cliques_link.parse( inputs[0].kvs[i]->value );

				// Prepare the output node for this link (only visibility of the related elements)
				outputNode.linksSetLength(0);
				for (int l = 0 ; l < node.links_length ; l++)
				{
					uint linkNodeId = node.links[l].id.value;
					if ( cliques_link.clique_1.containtsNode(linkNodeId) || cliques_link.clique_2.containtsNode(linkNodeId) )
						outputNode.linksAdd()->copyFrom(&node.links[l]);
				}

				//Emit information of this node for this link
				writer->emit(0, &cliques_link, &outputNode);
			}
		}


	};


} // end of namespace samson
} // end of namespace sna

#endif
