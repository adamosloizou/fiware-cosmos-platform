/*
 * Telefónica Digital - Product Development and Innovation
 *
 * THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 * EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Copyright (c) Telefónica Investigación y Desarrollo S.A.U.
 * All rights reserved.
 */

/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_sna_spread_nodes_to_strong_connections
#define _H_SAMSON_sna_spread_nodes_to_strong_connections


#include <samson/module/samson.h>

#include <samson/modules/system/UInt.h>

#include <samson/modules/graph/Node.h>


namespace samson{
namespace sna{


	class spread_nodes_to_strong_connections : public samson::Map
	{
		samson::system::UInt node_id;	// key 	
		graph::Node node;		// value
		graph::Node reducedNode;	//Node with soft contacts (not necessary in the cliques)
		
	public:

		void run(  samson::KVSetStruct* inputs , samson::KVWriter *writer )
		{
			
			//OLM_T(LMT_User06, ("spread_nodes_to_strong_connections, Enters inputs[0].num_kvs:%lu\n", inputs[0].num_kvs));

			for (size_t i = 0 ; i < inputs[0].num_kvs ; i++)
			{
				//Get key and value
				node_id.parse( inputs[0].kvs[i]->key );
				node.parse( inputs[0].kvs[i]->value );
				
				
				//Get the node only with strong contacts
				reducedNode.id = node.id;
				reducedNode.flags = node.flags;
				reducedNode.linksSetLength(0);	//Just in case (threoretically not necessary)
				for (int n = 0 ; n < node.links_length ; n++)
				{
					//OLM_T(LMT_User01, ("node_id:%ld, Prepares reducedNode with node.links[%d].id:%ld, weight:%.2f", node_id.value, n, node.links[n].id.value, node.links[n].getWeight()));

					if ( node.links[n].getWeight() >= 1 )
					{
						reducedNode.linksAdd()->copyFrom( &node.links[n] );
					}
				}
				
				
				//Emit yourself also to be part of the cliques
				//OLM_T(LMT_User01, ("node_id:%ld, emits itself with reducedNode.id:%ld", node_id.value, reducedNode.id.value));
				writer->emit(0,&node_id, &reducedNode);
				
				//Emit the same information to all your STRONG contacts
				for (int j = 0 ; j < reducedNode.links_length ; j++)
				{
					//Just in case node is auto-linked... (this should be avoided)
					if( reducedNode.links[j].id != reducedNode.id )
					{
						//OLM_T(LMT_User01, ("node_id:%ld, emits all other with reducedNode.links[%d].id:%ld, weight:%.2f", node_id.value, j, reducedNode.links[j].id.value, reducedNode.links[j].getWeight()));
						node_id.value = reducedNode.links[j].id.value ;	//Key node to send something
						writer->emit(0,&node_id, &reducedNode);
					}
				}
			}
			//OLM_T(LMT_User06, ("spread_nodes_to_strong_connections, Exits inputs[0].num_kvs:%lu\n", inputs[0].num_kvs));

			
		}


	};


} // end of namespace samson
} // end of namespace sna

#endif
