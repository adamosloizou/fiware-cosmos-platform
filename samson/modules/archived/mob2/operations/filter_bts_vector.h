/*
 * Telefónica Digital - Product Development and Innovation
 *
 * THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 * EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Copyright (c) Telefónica Investigación y Desarrollo S.A.U.
 * All rights reserved.
 */

/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
 */

#ifndef _H_SAMSON_mob2_filter_bts_vector
#define _H_SAMSON_mob2_filter_bts_vector


#include <samson/module/samson.h>
#include <samson/modules/mob2/Bts.h>
#include <samson/modules/mob2/Cluster.h>
#include <samson/modules/system/UInt.h>


namespace samson{
namespace mob2{


class filter_bts_vector : public samson::Reduce
{
	// Inputs
	samson::system::UInt bts;
	Cluster cluster;
	Bts bts_info;

	//Configurable thresholds
	uint64_t mob_conf_max_comms_bts;
	double mob_conf_max_bts_area;

public:


#ifdef INFO_COMMENT //Just to include a comment without conflicting anything
	// If interface changes and you do not recreate this file, consider updating this information (and of course, the module file)

	input: system.UInt mob2.Cluster
	input: system.UInt mob2.Bts
	output: system.UInt mob2.Cluster

	extendedHelp: 		Filter bts vector by num of comms and area

#endif // de INFO_COMMENT

	void init(samson::KVWriter *writer )
	{
		mob_conf_max_comms_bts = 36000;
		mob_conf_max_bts_area = 4.0;
	}

	void run(  samson::KVSetStruct* inputs , samson::KVWriter *writer )
	{
		for(uint64_t i=0; i<inputs[1].num_kvs; i++)
		{
			bts.parse(inputs[1].kvs[i]->key);
			bts_info.parse(inputs[1].kvs[i]->value);
			for(uint64_t j=0; j<inputs[0].num_kvs; j++)
			{
				cluster.parse(inputs[0].kvs[j]->value);
				if(bts_info.area.value > mob_conf_max_bts_area || bts_info.comms.value < mob_conf_max_comms_bts)
				{
					cluster.confident.value = 0;
				}
				writer->emit(0, &bts,&cluster);
			}
		}
	}

	void finish(samson::KVWriter *writer )
	{
	}



};


} // end of namespace mob2
} // end of namespace samson

#endif
