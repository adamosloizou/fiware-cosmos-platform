/*
 * Telefónica Digital - Product Development and Innovation
 *
 * THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 * EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Copyright (c) Telefónica Investigación y Desarrollo S.A.U.
 * All rights reserved.
 */

/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
 */

#ifndef _H_SAMSON_mob2_vector_filt_clientbts
#define _H_SAMSON_mob2_vector_filt_clientbts


#include <samson/module/samson.h>
#include <samson/modules/mob2/Bts_Counter.h>
#include <samson/modules/mob2/Node_Bts.h>
#include <samson/modules/mob2/TwoInt.h>



namespace samson{
namespace mob2{


class vector_filt_clientbts : public samson::Reduce
{
	// Inputs
	TwoInt node_bts; //      Num1: node      Num2: bts
	Bts_Counter counter;
	// Outputs
	Node_Bts nodbts;
	TwoInt hour_coms; // Num1: hour  Num2: coms

public:


#ifdef INFO_COMMENT //Just to include a comment without conflicting anything
	// If interface changes and you do not recreate this file, consider updating this information (and of course, the module file)

	input: mob2.TwoInt mob2.Bts_Counter
	input: mob2.TwoInt mob2.Bts_Counter
	output: mob2.Node_Bts mob2.TwoInt

	extendedHelp: 		Filter pair clients-bts to representative btss of a client
	Input 0: Node-bts sum of group comms by hour
	Input 1: Representative bts

#endif // de INFO_COMMENT

	void init(samson::KVWriter *writer )
	{
	}

	void run(  samson::KVSetStruct* inputs , samson::KVWriter *writer )
	{
		for(uint64_t i=0; i<inputs[1].num_kvs; i++)
		{
			for(uint64_t j=0; j<inputs[0].num_kvs; j++)
			{
				node_bts.parse(inputs[0].kvs[j]->key);
				counter.parse(inputs[0].kvs[j]->value);
				nodbts.phone.value = node_bts.num1.value;
				nodbts.bts.value = node_bts.num2.value;
				nodbts.wday.value = counter.wday.value;
				nodbts.range.value = 0;
				hour_coms.num1.value = counter.range.value;
				hour_coms.num2.value = counter.count.value;
				writer->emit(0, &nodbts,&hour_coms);
			}
		}

	}

	void finish(samson::KVWriter *writer )
	{
	}



};


} // end of namespace mob2
} // end of namespace samson

#endif
