/*
 * Telefónica Digital - Product Development and Innovation
 *
 * THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 * EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Copyright (c) Telefónica Investigación y Desarrollo S.A.U.
 * All rights reserved.
 */

/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
 */

#ifndef _H_SAMSON_mob2_repbts_get_representative_bts
#define _H_SAMSON_mob2_repbts_get_representative_bts


#include <samson/module/samson.h>
#include <samson/modules/mob2/Bts_Counter.h>
#include <samson/modules/mob2/TwoInt.h>
#include <samson/modules/system/UInt.h>
#include "mob2_environment_parameters.h"



namespace samson{
namespace mob2{


class repbts_get_representative_bts : public samson::Reduce
{
	//Inputs
	samson::system::UInt node;
	Bts_Counter counter;
	//Outputs
	TwoInt nodebts;
	Bts_Counter output;

	//Configurable thresholds
	unsigned int conf_min_number_calls_bts;
	unsigned int conf_min_perc_rep_bts;

public:


#ifdef INFO_COMMENT //Just to include a comment without conflicting anything
	// If interface changes and you do not recreate this file, consider updating this information (and of course, the module file)

	input: system.UInt mob2.Bts_Counter
	output: mob2.TwoInt mob2.Bts_Counter

	extendedHelp: 		Extract the most representative btss for a node

#endif // de INFO_COMMENT

	void init(samson::KVWriter *writer )
	{
		conf_min_number_calls_bts = environment->getInt(MOB2_PARAMETER_MIN_NUMBER_CALLS_BTS, MOB2_PARAMETER_MIN_NUMBER_CALLS_BTS_DEFAULT);
		conf_min_perc_rep_bts = environment->getInt(MOB2_PARAMETER_MIN_PERC_REP_BTS, MOB2_PARAMETER_MIN_PERC_REP_BTS_DEFAULT);
	}

	////////
	// Filter bts and extract representative ones
	////////

	void run(  samson::KVSetStruct* inputs , samson::KVWriter *writer )
	{
		if (inputs[0].num_kvs == 0)
		{
			return;
		}
		node.parse(inputs[0].kvs[0]->key);
		for(uint64_t i=0; i<inputs[0].num_kvs; i++)
		{
			counter.parse(inputs[0].kvs[i]->value);
			// counter.count --> percentage of comm of rep bts
			// counter.range --> number of comm of rep bts
			if( counter.count.value >= conf_min_perc_rep_bts  &&
					counter.range.value >= conf_min_number_calls_bts)
			{
				nodebts.num1.value = node.value;
				nodebts.num2.value = counter.bts.value;
				output.bts.value = counter.bts.value;
				output.count.value = counter.count.value;
				output.wday.value = output.range.value = 0;
				writer->emit(0, &nodebts,&output);
			}
		}

	}

	void finish(samson::KVWriter *writer )
	{
	}



};


} // end of namespace mob2
} // end of namespace samson

#endif
