/*
 * Telefónica Digital - Product Development and Innovation
 *
 * THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 * EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Copyright (c) Telefónica Investigación y Desarrollo S.A.U.
 * All rights reserved.
 */

/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
 */

#ifndef _H_SAMSON_mob2_itin_move_client_pois
#define _H_SAMSON_mob2_itin_move_client_pois


#include <samson/module/samson.h>
#include <samson/modules/mob2/ItinMovement.h>
#include <samson/modules/mob2/ItinTime.h>
#include <samson/modules/system/UInt.h>



namespace samson{
namespace mob2{


class itin_move_client_pois : public samson::Reduce
{
	// Inputs
	samson::system::UInt node;
	ItinTime cur_loc;
	ItinTime next_loc;
	// Outputs
	ItinMovement move;

	//Configurable threshold
	int mob_conf_max_minutes_in_moves;


public:


#ifdef INFO_COMMENT //Just to include a comment without conflicting anything
	// If interface changes and you do not recreate this file, consider updating this information (and of course, the module file)

	input: system.UInt mob2.ItinTime
	output: system.UInt mob2.ItinMovement

	extendedHelp: 		Extract movements between POIs of a client

#endif // de INFO_COMMENT

	void init(samson::KVWriter *writer )
	{
		mob_conf_max_minutes_in_moves = 120;
	}

	void run(  samson::KVSetStruct* inputs , samson::KVWriter *writer )
	{
		//Intermediate
		int difmonth, difday, difhour, difmin, distance;
		int nMinsMonth;

		node.parse(inputs[0].kvs[0]->key);

		for(uint64_t elem=0; elem<inputs[0].num_kvs - 1; elem++)
		{
			cur_loc.parse(inputs[0].kvs[elem]->value);
			next_loc.parse(inputs[0].kvs[elem+1]->value);

			if(cur_loc.bts.value != next_loc.bts.value) // Movement between POIs
			{
				//Calculate diference of time between locs
				difmonth = next_loc.date.month.value - cur_loc.date.month.value;
				if(difmonth > 1)
				{
					continue;
				}
				difday = next_loc.date.day.value - cur_loc.date.day.value;
				difhour = next_loc.time.hour.value - cur_loc.time.hour.value;
				difmin = next_loc.time.minute.value - cur_loc.time.minute.value;
				if(cur_loc.date.month.value==4 || cur_loc.date.month.value==6 || cur_loc.date.month.value==9 ||
						cur_loc.date.month.value==11)
				{
					nMinsMonth = 1440 * 30;
				}
				else if(cur_loc.date.month.value == 2)
				{
					nMinsMonth = 1440 * 28;
				}
				else
				{
					nMinsMonth = 1440 * 31;
				}
				distance = (nMinsMonth * difmonth) + (1440 * difday) + (60 * difhour) + difmin;

				if(distance <= mob_conf_max_minutes_in_moves)  // Filter movements by diff of time
				{
					move.source.copyFrom(&cur_loc);
					move.target.copyFrom(&next_loc);
					writer->emit(0, &node,&move);
				}
			}
		}

	}

	void finish(samson::KVWriter *writer )
	{
	}



};


} // end of namespace mob2
} // end of namespace samson

#endif
