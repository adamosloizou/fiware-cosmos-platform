/*
 * Telefónica Digital - Product Development and Innovation
 *
 * THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 * EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Copyright (c) Telefónica Investigación y Desarrollo S.A.U.
 * All rights reserved.
 */

/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
 */

#ifndef _H_SAMSON_mob2_MobVar_fusiontotalvars
#define _H_SAMSON_mob2_MobVar_fusiontotalvars


#include <samson/module/samson.h>
#include <samson/modules/mob2/MobVars.h>
#include <samson/modules/mob2/Mob_VI_MobVars.h>
#include <samson/modules/system/UInt.h>



namespace samson{
namespace mob2{


class MobVar_fusiontotalvars : public samson::Reduce
{
	// Inputs
	samson::system::UInt phone;
	MobVars period_vars;
	// Outputs
	Mob_VI_MobVars totalVars;

	// Intermediate
	Mob_VI_MobVars aux;

public:


#ifdef INFO_COMMENT //Just to include a comment without conflicting anything
	// If interface changes and you do not recreate this file, consider updating this information (and of course, the module file)

	input: system.UInt mob2.MobVars
	output: system.UInt mob2.Mob_VI_MobVars

	extendedHelp: 		Fuse working/weekend day statistics and variables of all months of a user

#endif // de INFO_COMMENT

	void init(samson::KVWriter *writer )
	{
	}


	void run(  samson::KVSetStruct* inputs , samson::KVWriter *writer )
	{
		int min_month, min_elem;
		int item_month = 0;

		phone.parse(inputs[0].kvs[0]->key);
		aux.varsSetLength(0);
		totalVars.varsSetLength(0);

		// Initialization of vectors
		for(uint64_t i=0; i<inputs[0].num_kvs; i++)
		{
			period_vars.parse(inputs[0].kvs[i]->value);
			aux.varsAdd()->copyFrom(&period_vars);
		}
		// Sort vectors
		for(int nElemAdd=0; nElemAdd<aux.vars_length; nElemAdd++)
		{
			min_month = 26;
			min_elem = -1;
			for(int elem=0; elem < aux.vars_length; elem++)
			{
				if(aux.vars[elem].month.value == 0)
				{
					continue;
				}
				item_month = (aux.vars[elem].month.value * 2) + abs((int)aux.vars[elem].workingday.value - 1);
				if(item_month < min_month)
				{
					min_month = item_month;
					min_elem = elem;
				}
			}
			totalVars.varsAdd()->copyFrom(&aux.vars[min_elem]);
			aux.vars[min_elem].month.value = 0;
		}
		writer->emit(0, &phone,&totalVars);

	}

	void finish(samson::KVWriter *writer )
	{
	}



};


} // end of namespace mob2
} // end of namespace samson

#endif
