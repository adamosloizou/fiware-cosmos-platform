/*
 * Telefónica Digital - Product Development and Innovation
 *
 * THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 * EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Copyright (c) Telefónica Investigación y Desarrollo S.A.U.
 * All rights reserved.
 */

/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_mob2_itin_get_vector
#define _H_SAMSON_mob2_itin_get_vector


#include <samson/module/samson.h>
#include <samson/modules/mob2/ClusterVector.h>
#include <samson/modules/mob2/ItinPercMove.h>
#include <samson/modules/mob2/ItinRange.h>


namespace samson{
namespace mob2{


	class itin_get_vector : public samson::Reduce
	{
		//Inputs
		samson::mob2::ItinRange moveRange;
		samson::mob2::ItinPercMove perc_moves;
		//Outputs
		samson::mob2::ClusterVector dist_moves;

	public:


#ifdef INFO_COMMENT //Just to include a comment without conflicting anything
// If interface changes and you do not recreate this file, consider updating this information (and of course, the module file)

input: mob2.ItinRange mob2.ItinPercMove  
output: mob2.ItinRange mob2.ClusterVector

extendedHelp: 		Get vector of moves between POIs

#endif // de INFO_COMMENT

		void init(samson::KVWriter *writer )
		{
		}

		void run(  samson::KVSetStruct* inputs , samson::KVWriter *writer )
		{
			// Initialization of vector
#define NUM_DAYS_WEEK 7
#define INDEX_SUNDAY 6
#define NUM_HOURS_DAY 24
#define NUM_SLOTS NUM_DAYS_WEEK * NUM_HOURS_DAY
			dist_moves.comsSetLength(NUM_SLOTS);
			for(int i=0; i<NUM_SLOTS; i++)
			{
				dist_moves.coms[i].value = 0;
			}

			moveRange.parse(inputs[0].kvs[0]->key);
			for(uint64_t i=0;i<inputs[0].num_kvs; i++)
			{
				perc_moves.parse(inputs[0].kvs[i]->value);
				int j = perc_moves.group.value - 1; // Vector starts on Monday
				j = j>=0 ? j : INDEX_SUNDAY;	// Sunday at the end
				j *= NUM_HOURS_DAY;
				j += perc_moves.range.value;
				dist_moves.coms[j].value = perc_moves.perc_moves.value;
			}
			writer->emit(0, &moveRange,&dist_moves);
		}

		void finish(samson::KVWriter *writer )
		{
		}



	};


} // end of namespace mob2
} // end of namespace samson

#endif
