/*
 * Telefónica Digital - Product Development and Innovation
 *
 * THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 * EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Copyright (c) Telefónica Investigación y Desarrollo S.A.U.
 * All rights reserved.
 */

/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
 */

#ifndef _H_SAMSON_mob2_cluster_agg_node_cluster
#define _H_SAMSON_mob2_cluster_agg_node_cluster


#include <samson/module/samson.h>
#include <samson/modules/mob2/Cluster.h>
#include <samson/modules/mob2/Poi.h>
#include <samson/modules/system/UInt.h>


namespace samson{
namespace mob2{


class cluster_agg_node_cluster : public samson::Reduce
{
	//Inputs
	Poi poi;
	Cluster nodeclus;
	//Outputs
	samson::mob2::TwoInt nodbts;
	samson::system::UInt nodlbl;

public:


#ifdef INFO_COMMENT //Just to include a comment without conflicting anything
	// If interface changes and you do not recreate this file, consider updating this information (and of course, the module file)

	input: system.UInt mob2.Poi
	input: system.UInt mob2.Cluster
	output: mob2.TwoInt mob2.Poi
	output: system.UInt mob2.Poi

	extendedHelp: 		Aggregate to results info about client cluster
	Input 0: POI with clientbts cluster info
	Input 1: Info about client cluster

#endif // de INFO_COMMENT

	void init(samson::KVWriter *writer )
	{
	}

	void run(  samson::KVSetStruct* inputs , samson::KVWriter *writer )
	{
		for(uint64_t i=0; i<inputs[0].num_kvs; i++)
		{
			poi.parse(inputs[0].kvs[i]->value);
			for(uint64_t j=0; j<inputs[1].num_kvs; j++)
			{
				nodeclus.parse(inputs[1].kvs[j]->value);
				nodbts.num1.value = poi.node.value;
				nodbts.num2.value = poi.bts.value;
				poi.labelnode.value = nodeclus.label.value;
				poi.labelgroupnode.value = nodeclus.labelgroup.value;
				poi.confidentnode.value = nodeclus.confident.value;
				poi.distancenode.value = nodeclus.distance.value;
				writer->emit(0, &nodbts,&poi);
				if((poi.confidentnode.value == 1) && (poi.confidentnodebts.value == 0))
				{
					nodlbl.value = poi.labelnode.value;
					writer->emit(1,&nodlbl,&poi);
				}
			}
		}

	}

	void finish(samson::KVWriter *writer )
	{
	}



};


} // end of namespace mob2
} // end of namespace samson

#endif
