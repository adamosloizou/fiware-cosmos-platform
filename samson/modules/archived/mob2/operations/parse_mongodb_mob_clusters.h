/*
 * Telefónica Digital - Product Development and Innovation
 *
 * THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 * EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Copyright (c) Telefónica Investigación y Desarrollo S.A.U.
 * All rights reserved.
 */

/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
 */

#ifndef _H_SAMSON_mob2_parse_mongodb_mob_clusters
#define _H_SAMSON_mob2_parse_mongodb_mob_clusters


#include <samson/module/samson.h>
#include <samson/modules/mob2/Cluster.h>
#include "macros_parse_fields_mob2.h"
#include "mongo/client/dbclient.h"
#include <stdint.h>
#include "mob2_environment_parameters.h"

using namespace mongo;

namespace samson{
namespace mob2{


class parse_mongodb_mob_clusters : public samson::Parser
{

	// MongoDB variables
	std::string          mongo_ip;
	std::string          mongo_db;
	std::string          mongo_collection;
	std::string          mongo_db_path;
	DBClientConnection*  mdbConnection;

	// Environment variable
	int coordsLength;

	// Temporal variables
	samson::system::Double coord;
	samson::system::UInt clusterId;
	Cluster clusterInfo;

public:


#ifdef INFO_COMMENT //Just to include a comment without conflicting anything
	// If interface changes and you do not recreate this file, consider updating this information (and of course, the module file)


	extendedHelp: 		Parse a txt file to extract mobility clusters (clients, bts or clientBts) and store them in MongoDB, to be accesible later

#endif // de INFO_COMMENT

	void init( samson::KVWriter *writer )
{
	//OLM_T(LMT_User06, ("Starting init()"));

	coordsLength = environment->getInt(MOB2_PARAMETER_COORDS_LENGTH, MOB2_PARAMETER_COORDS_LENGTH_DEFAULT);

	mdbConnection        = NULL;
	mongo_ip           = environment->get("mongo.ip",    "no-mongo-ip");
	mongo_db           = environment->get("mongo.db",    "no-mongo-db");
	mongo_collection   = environment->get("mongo.collection", "no-mongo-collection");


	if (mongo_ip == "no-mongo-ip")
	{
		tracer->setUserError("No mongo ip specified. Please specify mongo ip with 'mongo.ip' environment variable");
		OLM_E(("No mongo ip specified. Please specify mongo ip with 'mongo.ip' environment variable"));
		return;
	}

	if (mongo_db == "no-mongo-db")
	{
		tracer->setUserError("No db specified. Please specify mongo database db name with 'mongo.db' environment variable");
		OLM_E(("No db specified. Please specify mongo database db name with 'mongo.db' environment variable"));
		return;
	}

	if (mongo_collection == "no-mongo-collection")
	{
		tracer->setUserError("No collection specified. Please specify mongo database collection name with 'mongo.collection' environment variable");
		OLM_E(("No collection specified. Please specify mongo database collection name with 'mongo.collection' environment variable"));
		return;
	}

	mongo_db_path = mongo_db + "." + mongo_collection;

	mdbConnection = new DBClientConnection();

	if (mdbConnection == NULL)
	{
		tracer->setUserError("Error creating client mongoDB connection");
		OLM_E(("Error creating client mongoDB connection"));
	}

	try
	{
		mdbConnection->connect(mongo_ip);
	}
	catch ( ... )
	{
		tracer->setUserError("Error connecting to mongo_ip");
		OLM_E(("Error connecting to mongo_ip:'%s'", mongo_ip.c_str()));
	}

}
void parseLines( char *line , samson::KVWriter *writer)
{
	// Input: txt
	// Outputs

	BSONObjBuilder bb;

	uint64_t clusterLabel;
	uint64_t clusterLabelgroup;
	double clusterMean;
	double clusterDistance;
	double coord;

	//OLM_T(LMT_User06, ("Starting parseLines() with line:%s", line));

	MR_PARSER_INIT(line);
	GET_CLUST_INIT_MX
	GET_CLUST_NEXT_FIELD
	GET_CLUST_GET_INT(clusterLabel)
	//OLM_T(LMT_User06, ("clusterId:%lu", clusterLabel));
	bb.append("clusterInfo.label", (long long)clusterLabel); // clusterId
	GET_CLUST_NEXT_FIELD
	GET_CLUST_GET_INT(clusterLabelgroup)
	//OLM_T(LMT_User06, ("clusterInfo.labelgroup:%lu", clusterLabelgroup));
	bb.append("clusterInfo.labelgroup", (long long) clusterLabelgroup);
	GET_CLUST_NEXT_FIELD
	GET_CLUST_GET_DOUBLE(clusterMean)
	//OLM_T(LMT_User06, ("clusterInfo.mean:%lf", clusterMean));
	bb.append("clusterInfo.mean", clusterMean);
	GET_CLUST_NEXT_FIELD
	GET_CLUST_GET_DOUBLE(clusterDistance)
	//OLM_T(LMT_User06, ("clusterInfo.distance:%lf", clusterDistance));
	bb.append("clusterInfo.distance", clusterDistance);
	for(int j=0; j<coordsLength; j++)
	{
#define MAXLENKEY 20
		char coordKey[MAXLENKEY];

		GET_CLUST_NEXT_FIELD
		GET_CLUST_GET_DOUBLE(coord)
		snprintf(coordKey, MAXLENKEY, "coord_%d", j);
		//OLM_T(LMT_User06, ("%s:%lf", coordKey, coord));
		bb.append(coordKey, coord);
	}

	BSONObj bo = bb.obj();

	mdbConnection->insert(mongo_db_path, bo);
}
void run( char *data , size_t length , samson::KVWriter *writer )
{
	size_t offset = 0;
	size_t line_begin = 0;

	if (mdbConnection == NULL)
	{
		tracer->setUserError("Not connected to MongoDB - please check parameters");
		OLM_E(("Not connected to MongoDB - please check parameters"));
		return;
	}

	while( offset < length )
	{
		if( data[offset] == '\n')
		{
			data[offset] = '\0';
			parseLines(data+line_begin, writer);

			line_begin = offset+1;
		}
		++offset;
	}
}

void finish( samson::KVWriter *writer )
{
	//OLM_T(LMT_User06, ("Starting finish()"));
	if (mdbConnection != NULL)
	{
		mdbConnection->ensureIndex(mongo_db_path, fromjson("{clusterId:1}"));
		delete mdbConnection;
	}
}
};


} // end of namespace mob2
} // end of namespace samson

#endif
