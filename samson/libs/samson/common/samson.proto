package samson.gpb;

// ////////////////////////////////////////////////////////////////////////////
//
// Basic components
//

message EnvironmentVariable
{
	required string name	= 1;	// Name of the property
	required string value	= 2;	// Value
}

message Environment
{
	repeated EnvironmentVariable variable=1;	// List of enrivonment variables
}

message Error
{
	// When Error is used inside another message, it is always optional
	required string message = 2;	// String with the error definition ( if any )
}

message Alert
{
	
	required string text     = 1; 
	optional string type     = 2; // message , error , warning
	optional string context  = 3; // Context where this was generated ( streaming , delilah , etc... ) 

}

message KVRange
{
	required int32  hg_begin = 1;
	required int32  hg_end   = 2;
}


message KVInfo
{
	required int64  kvs = 1;
	required int64  size   = 2;
}


// ////////////////////////////////////////////////////////////////////////////
//
// Stream Operations model
//

message StreamOperation
{
	required uint64 stream_operation_id  = 1; // Unique identifier of this operation
	required string name                 = 2; // Name assigned to this operation
	required string operation            = 3; // Operation to be executed

	repeated string inputs               = 4; // Queues used as inputs;
	repeated string outputs              = 5; // Queues used as outputs;

	required bool paused                 = 6; // Flag to indicate that this operation is paused

	optional Environment environment     = 10; // Environment variables for this operation

	required bool reduce_forward         = 11; // Flag to indicate a reduce forward operation
	required bool reduce_update_only     = 12; // Flag to indicate that only key-values with new data is really executed
	required bool batch_operation        = 13; // Flag to indicate that this belongs to a batch operation
	
}


message BatchOperation
{
	required uint64 delilah_id           = 1; // Delilah that originated this command
	required uint64 delilah_component_id = 2; // Component inside this delilah
	
	repeated KVInfo input_info           = 3; // Data sets to be process at the input
	
	required string operation            = 4; // Operation to be executed
    repeated string inputs               = 5; // Queues used as inputs;
    repeated string outputs              = 6; // Queues used as outputs;

	required bool finished               = 7; // Flag to indicate that the operation is finished
}

// ////////////////////////////////////////////////////////////////////////////
//
// Data model for a worker
//

//message KVRanges
//{
//	repeated KVRange range    = 1; // Ranges considered for this block
//}

message Block
{
	required uint64  block_id   = 1; // Identifier of this block
	required uint64   block_size = 2; // Full size of this block
	required KVRange  range      = 3; // Range for this particular block
	required uint64   kvs        = 4; // Number of kvs
	required uint64   size       = 5; // Size in bytes of the kvs
	required uint64   time       = 6; // Creation time
	required uint64   commit_id  = 7; // Commit number where this block was added
}

message Queue
{
	required string name         = 1;  // Name of this queue
	repeated Block  blocks       = 3;  // Blocks contained in this queue
	required string key_format   = 4;  // Format for the key
	required string value_format = 5;  // Format for the value

	required uint64 commit_id    = 2;  // Version number of this queue ( updated when modified )
	
}

message QueueConnection
{
	required string queue_source = 1; // Source queue
	required string queue_target = 2; // Target queu
}

message Data
{
	// Queues included in the model
	repeated Queue queue = 1;
	
	// Stream operations scheduled 
	repeated StreamOperation operations = 2;
	required uint64 next_stream_operation_id = 3; 	// Identifier for the next stream operation

	// Batch operations
	repeated BatchOperation batch_operations = 4;

	// Queue connections ( to duplicate data automatically when added to a queue )
	repeated QueueConnection queue_connections = 5;

	// Last commit seen so far ( and id for the next commit )
	required uint64 commit_id = 7;

	// Last commits for debug
	repeated string last_commits = 8;
}

message DataCommit
{
	required uint64 id = 1;
	required string message = 2;
}

message DataModel
{
	required Data previous_data  = 1;  // Previous "safe" data model
	optional Data candidate_data = 2;  // Candidate for next "safe" model
	required Data current_data   = 3;  // Current "on the fly" data model

	// Commit history to recover commands ( mainly add_stream_operation or run )
	repeated DataCommit commit = 5;    // List of commits from previous_data to current_data

	// Replication factor
	required int32 replication_factor = 10;      // Number of times data  should be replicated to be considered "save"

}

// ////////////////////////////////////////////////////////////////////////////
//
// Worker Information ( Used in zookeeper at node  /samson/workers/wXXXXXXXXXX )
//

message WorkerInfo
{
	// Address information to access this worker
	required string host = 1;
	required int32 port = 2;
	required int32 port_web = 3;

	// Server info
	required int32 cores = 5;
	required uint64 memory = 6;

	// Last "seen" complete data model
	required uint64 last_commit_id = 10; // Method to confirm data model
}


// ////////////////////////////////////////////////////////////////////////////
//
// Cluster Information ( Used in zookeeper at node /samson/clusters )
//

message ClusterWorker
{
	required uint64 worker_id = 1;          // General identifiers for all workers
	required WorkerInfo worker_info = 2;    // Information for this worker
}

message ProcessUnit
{
    // Range of key-values
	required uint32 hg_begin = 1;
	required uint32 hg_end = 2;

	// Responsible for this range
	required uint64 worker_id =3;

	// Replicas of data
	repeated uint64 replica_worker_id =4;
}

message ClusterInfo
{
	// Version of this cluster information ( associated with the zk node version )
	required uint32 version=1;

	// Workers considered in this cluster
	repeated ClusterWorker workers = 2;

    // Ranges for each worker
	repeated ProcessUnit process_units = 3;  
}


// ////////////////////////////////////////////////////////////////////////////
//
// Common 
//


// ////////////////////////////////////////////////////////////////////////////
//
// Hello message
//

message NodeIdentifier
{
    enum NodeType
    {
        Delilah    = 1;    
        Worker     = 2;    
    }	

	required NodeType  node_type = 1;
	required uint64    id        = 2;
}

message Hello
{
	required NodeIdentifier      node_identifier         = 1; // My node identifier
}	


// ////////////////////////////////////////////////////////////////////////
// Messages used in the isolated process protocol
// ////////////////////////////////////////////////////////////////////////


message MessageProcessPlatform
{
	enum Code
	{
		code_begin		      = 1;    // Begin code
        code_end           	  = 2;    // End code
		code_operation	  	  = 3;	  // Run a particular operation
		code_user_error	  	  = 5;	  // Error reported by user
		code_progress		  = 6;	  // Report progress of a particular task
    }

	// Operation code
    required Code code = 1;

    // Optional parameters
    optional int32 operation	     = 2;  // Indicator of the operation
    optional double progress	     = 4;	// Optional progress report
    optional string progress_status  = 6;   // Optinal string describing the internal status of this task
    optional string error	         = 5;	// Error reported by user

}

message MessagePlatformProcess
{
    enum Code
    {
        code_ok            = 1;    // Continue after running operation
        code_kill          = 2;    // Kill the process since it has been canceled at platform
    }

    required Code code = 1;

}

// ////////////////////////////////////////////////////////////////////////////
//
// Message to pop  a particular queue from a worker
//


message PopQueue
{
	required string queue		= 1;        // Queue we are interested in extracting data
	required uint64 commit_id   = 2;    // Last commit_id requested for this queue ( -1 for initial popQueue request )
  required uint64 min_commit_id = 3;  // Min commit id still pending to be "poped". Blocks with lower commit ids can be removed
}

message PopQueueResponse
{
	optional Queue queue    = 1;	// Information about selected queue
	optional Error error    = 2;	// Optional error
}


// ////////////////////////////////////////////////////////////////////////////
//
// Message to send a command to a particular worker
//

message WorkerCommand
{
	required string command			  = 1;	// Command to run
	optional Environment environment  = 3;	// Enviroment properties ( including system.* for internal use )
}

message WorkerCommandResponse
{
	required WorkerCommand worker_command = 1;	// Copy of the original command ( Including the enviroment properties system.*)
	repeated string error   = 2;	      			// Optional error messages
	repeated string warning = 3;	      			// Optional warning messages
}

// ////////////////////////////////////////////////////////////////////////////
//
// Collection messages
//

message CollectionItem
{
	optional string name   = 1; // Name of this item
	optional string value  = 2; // Vaue of this property
	optional string format = 3; // Optional format for this field
}

message CollectionRecord
{
	 repeated CollectionItem item = 1; // Items in this collection
}

message Collection
{
     required string name = 1;
	 required string title = 2;
	 repeated CollectionRecord record = 3; 
}



// ////////////////////////////////////////////////////////////////////////////
//
// General message between delilahs and workers or between workers
//

message Message
{

	// Process identification inside delilah ( multiple push / pop / etc operations ... )
	optional uint64  delilah_component_id = 1;

	// Identifier of the block ( used in several messages )
	optional uint64 block_id = 100;

	// Uses in some pop messages
	// optional KVRanges ranges = 106;

	// Identifier of the delilah push operation ( used in all Push-like messages )
	optional uint64 push_id = 101;

    // Identifier of the pop item ( in PopBlockRequest ) 
	optional uint64 pop_id = 105;

	// List of queues ( used in PushBlock messages )
	repeated string queue = 103;

	// General error ( used in almost all messges )
	optional Error error   = 102;

	// Pop data from a worker ( push message and response )
	optional PopQueue pop_queue	= 4;	
	optional PopQueueResponse pop_queue_response = 5;	

	// Worker command ( message and reponse )
	optional WorkerCommand worker_command = 7;
	optional WorkerCommandResponse worker_command_response =8;

	// Alerts to delilah nodes
	optional Alert alert = 9;

	// XML report of status from all workers
	optional string info = 10;

	// Hello message ( used in the handshare between workers and delilahs )
	optional Hello hello = 11;

	// String Message ( used in the message Packet );
	optional string message = 12;

	// Collections .. used in some messages to report status ( ls_queues, ps_stream , etc... )
	repeated Collection collection = 14; 

	// Information about cluster ( sent from workers to delilahs )
	optional ClusterInfo cluster_info = 15;

	// Information about a log generated at workers to delilahs
	optional Environment log = 16;

}


