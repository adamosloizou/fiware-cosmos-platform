// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "au.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace au {
namespace gpb {

namespace {

const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Message_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AutoCompletionAlternative_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AutoCompletionAlternative_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConsolePacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConsolePacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogConnectionHello_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogConnectionHello_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LogConnectionHello_LogConnectionType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_au_2eproto() {
  protobuf_AddDesc_au_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "au.proto");
  GOOGLE_CHECK(file != NULL);
  Message_descriptor_ = file->message_type(0);
  static const int Message_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, txt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, type_),
  };
  Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message));
  Message_Type_descriptor_ = Message_descriptor_->enum_type(0);
  AutoCompletionAlternative_descriptor_ = file->message_type(1);
  static const int AutoCompletionAlternative_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoCompletionAlternative, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoCompletionAlternative, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoCompletionAlternative, add_space_if_unique_),
  };
  AutoCompletionAlternative_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AutoCompletionAlternative_descriptor_,
      AutoCompletionAlternative::default_instance_,
      AutoCompletionAlternative_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoCompletionAlternative, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoCompletionAlternative, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AutoCompletionAlternative));
  ConsolePacket_descriptor_ = file->message_type(2);
  static const int ConsolePacket_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsolePacket, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsolePacket, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsolePacket, auto_complettion_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsolePacket, auto_completion_alternatives_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsolePacket, prompt_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsolePacket, prompt_),
  };
  ConsolePacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConsolePacket_descriptor_,
      ConsolePacket::default_instance_,
      ConsolePacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsolePacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsolePacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConsolePacket));
  LogConnectionHello_descriptor_ = file->message_type(3);
  static const int LogConnectionHello_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogConnectionHello, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogConnectionHello, filter_),
  };
  LogConnectionHello_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogConnectionHello_descriptor_,
      LogConnectionHello::default_instance_,
      LogConnectionHello_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogConnectionHello, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogConnectionHello, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogConnectionHello));
  LogConnectionHello_LogConnectionType_descriptor_ = LogConnectionHello_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_au_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_descriptor_, &Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AutoCompletionAlternative_descriptor_, &AutoCompletionAlternative::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConsolePacket_descriptor_, &ConsolePacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogConnectionHello_descriptor_, &LogConnectionHello::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_au_2eproto() {
  delete Message::default_instance_;
  delete Message_reflection_;
  delete AutoCompletionAlternative::default_instance_;
  delete AutoCompletionAlternative_reflection_;
  delete ConsolePacket::default_instance_;
  delete ConsolePacket_reflection_;
  delete LogConnectionHello::default_instance_;
  delete LogConnectionHello_reflection_;
}

void protobuf_AddDesc_au_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010au.proto\022\006au.gpb\"g\n\007Message\022\013\n\003txt\030\001 \002"
    "(\t\022\"\n\004type\030\002 \002(\0162\024.au.gpb.Message.Type\"+"
    "\n\004Type\022\013\n\007message\020\001\022\013\n\007warning\020\002\022\t\n\005erro"
    "r\020\003\"X\n\031AutoCompletionAlternative\022\r\n\005labe"
    "l\030\001 \002(\t\022\017\n\007command\030\002 \002(\t\022\033\n\023add_space_if"
    "_unique\030\003 \002(\010\"\325\001\n\rConsolePacket\022\017\n\007comma"
    "nd\030\001 \001(\t\022 \n\007message\030\002 \003(\0132\017.au.gpb.Messa"
    "ge\022 \n\030auto_complettion_command\030\003 \001(\t\022G\n\034"
    "auto_completion_alternatives\030\004 \003(\0132!.au."
    "gpb.AutoCompletionAlternative\022\026\n\016prompt_"
    "request\030\005 \001(\t\022\016\n\006prompt\030\006 \001(\t\"\242\001\n\022LogCon"
    "nectionHello\022:\n\004type\030\001 \002(\0162,.au.gpb.LogC"
    "onnectionHello.LogConnectionType\022\016\n\006filt"
    "er\030\002 \001(\t\"@\n\021LogConnectionType\022\017\n\013LogProv"
    "ider\020\001\022\014\n\010LogProbe\020\002\022\014\n\010LogQuery\020\003", 594);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "au.proto", &protobuf_RegisterTypes);
  Message::default_instance_ = new Message();
  AutoCompletionAlternative::default_instance_ = new AutoCompletionAlternative();
  ConsolePacket::default_instance_ = new ConsolePacket();
  LogConnectionHello::default_instance_ = new LogConnectionHello();
  Message::default_instance_->InitAsDefaultInstance();
  AutoCompletionAlternative::default_instance_->InitAsDefaultInstance();
  ConsolePacket::default_instance_->InitAsDefaultInstance();
  LogConnectionHello::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_au_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_au_2eproto {
  StaticDescriptorInitializer_au_2eproto() {
    protobuf_AddDesc_au_2eproto();
  }
} static_descriptor_initializer_au_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* Message_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_Type_descriptor_;
}
bool Message_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Message_Type Message::message;
const Message_Type Message::warning;
const Message_Type Message::error;
const Message_Type Message::Type_MIN;
const Message_Type Message::Type_MAX;
const int Message::Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string Message::_default_txt_;
#ifndef _MSC_VER
const int Message::kTxtFieldNumber;
const int Message::kTypeFieldNumber;
#endif  // !_MSC_VER

Message::Message()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Message::InitAsDefaultInstance() {
}

Message::Message(const Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  txt_ = const_cast< ::std::string*>(&_default_txt_);
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  SharedDtor();
}

void Message::SharedDtor() {
  if (txt_ != &_default_txt_) {
    delete txt_;
  }
  if (this != default_instance_) {
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_au_2eproto();  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New() const {
  return new Message;
}

void Message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (txt_ != &_default_txt_) {
        txt_->clear();
      }
    }
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string txt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->txt().data(), this->txt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required .au.gpb.Message.Type type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::au::gpb::Message_Type_IsValid(value)) {
            set_type(static_cast< ::au::gpb::Message_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string txt = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->txt().data(), this->txt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->txt(), output);
  }
  
  // required .au.gpb.Message.Type type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string txt = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->txt().data(), this->txt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->txt(), target);
  }
  
  // required .au.gpb.Message.Type type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Message::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string txt = 1;
    if (has_txt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->txt());
    }
    
    // required .au.gpb.Message.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_txt(from.txt());
    }
    if (from._has_bit(1)) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Message::Swap(Message* other) {
  if (other != this) {
    std::swap(txt_, other->txt_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string AutoCompletionAlternative::_default_label_;
const ::std::string AutoCompletionAlternative::_default_command_;
#ifndef _MSC_VER
const int AutoCompletionAlternative::kLabelFieldNumber;
const int AutoCompletionAlternative::kCommandFieldNumber;
const int AutoCompletionAlternative::kAddSpaceIfUniqueFieldNumber;
#endif  // !_MSC_VER

AutoCompletionAlternative::AutoCompletionAlternative()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AutoCompletionAlternative::InitAsDefaultInstance() {
}

AutoCompletionAlternative::AutoCompletionAlternative(const AutoCompletionAlternative& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AutoCompletionAlternative::SharedCtor() {
  _cached_size_ = 0;
  label_ = const_cast< ::std::string*>(&_default_label_);
  command_ = const_cast< ::std::string*>(&_default_command_);
  add_space_if_unique_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutoCompletionAlternative::~AutoCompletionAlternative() {
  SharedDtor();
}

void AutoCompletionAlternative::SharedDtor() {
  if (label_ != &_default_label_) {
    delete label_;
  }
  if (command_ != &_default_command_) {
    delete command_;
  }
  if (this != default_instance_) {
  }
}

void AutoCompletionAlternative::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutoCompletionAlternative::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AutoCompletionAlternative_descriptor_;
}

const AutoCompletionAlternative& AutoCompletionAlternative::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_au_2eproto();  return *default_instance_;
}

AutoCompletionAlternative* AutoCompletionAlternative::default_instance_ = NULL;

AutoCompletionAlternative* AutoCompletionAlternative::New() const {
  return new AutoCompletionAlternative;
}

void AutoCompletionAlternative::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (label_ != &_default_label_) {
        label_->clear();
      }
    }
    if (_has_bit(1)) {
      if (command_ != &_default_command_) {
        command_->clear();
      }
    }
    add_space_if_unique_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AutoCompletionAlternative::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string label = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_command;
        break;
      }
      
      // required string command = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->command().data(), this->command().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_add_space_if_unique;
        break;
      }
      
      // required bool add_space_if_unique = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_space_if_unique:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &add_space_if_unique_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AutoCompletionAlternative::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string label = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->label(), output);
  }
  
  // required string command = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->command(), output);
  }
  
  // required bool add_space_if_unique = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->add_space_if_unique(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AutoCompletionAlternative::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string label = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->label(), target);
  }
  
  // required string command = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->command(), target);
  }
  
  // required bool add_space_if_unique = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->add_space_if_unique(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AutoCompletionAlternative::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string label = 1;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }
    
    // required string command = 2;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command());
    }
    
    // required bool add_space_if_unique = 3;
    if (has_add_space_if_unique()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoCompletionAlternative::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AutoCompletionAlternative* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AutoCompletionAlternative*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AutoCompletionAlternative::MergeFrom(const AutoCompletionAlternative& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_label(from.label());
    }
    if (from._has_bit(1)) {
      set_command(from.command());
    }
    if (from._has_bit(2)) {
      set_add_space_if_unique(from.add_space_if_unique());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AutoCompletionAlternative::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoCompletionAlternative::CopyFrom(const AutoCompletionAlternative& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoCompletionAlternative::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void AutoCompletionAlternative::Swap(AutoCompletionAlternative* other) {
  if (other != this) {
    std::swap(label_, other->label_);
    std::swap(command_, other->command_);
    std::swap(add_space_if_unique_, other->add_space_if_unique_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AutoCompletionAlternative::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AutoCompletionAlternative_descriptor_;
  metadata.reflection = AutoCompletionAlternative_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string ConsolePacket::_default_command_;
const ::std::string ConsolePacket::_default_auto_complettion_command_;
const ::std::string ConsolePacket::_default_prompt_request_;
const ::std::string ConsolePacket::_default_prompt_;
#ifndef _MSC_VER
const int ConsolePacket::kCommandFieldNumber;
const int ConsolePacket::kMessageFieldNumber;
const int ConsolePacket::kAutoComplettionCommandFieldNumber;
const int ConsolePacket::kAutoCompletionAlternativesFieldNumber;
const int ConsolePacket::kPromptRequestFieldNumber;
const int ConsolePacket::kPromptFieldNumber;
#endif  // !_MSC_VER

ConsolePacket::ConsolePacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConsolePacket::InitAsDefaultInstance() {
}

ConsolePacket::ConsolePacket(const ConsolePacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConsolePacket::SharedCtor() {
  _cached_size_ = 0;
  command_ = const_cast< ::std::string*>(&_default_command_);
  auto_complettion_command_ = const_cast< ::std::string*>(&_default_auto_complettion_command_);
  prompt_request_ = const_cast< ::std::string*>(&_default_prompt_request_);
  prompt_ = const_cast< ::std::string*>(&_default_prompt_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConsolePacket::~ConsolePacket() {
  SharedDtor();
}

void ConsolePacket::SharedDtor() {
  if (command_ != &_default_command_) {
    delete command_;
  }
  if (auto_complettion_command_ != &_default_auto_complettion_command_) {
    delete auto_complettion_command_;
  }
  if (prompt_request_ != &_default_prompt_request_) {
    delete prompt_request_;
  }
  if (prompt_ != &_default_prompt_) {
    delete prompt_;
  }
  if (this != default_instance_) {
  }
}

void ConsolePacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConsolePacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConsolePacket_descriptor_;
}

const ConsolePacket& ConsolePacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_au_2eproto();  return *default_instance_;
}

ConsolePacket* ConsolePacket::default_instance_ = NULL;

ConsolePacket* ConsolePacket::New() const {
  return new ConsolePacket;
}

void ConsolePacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (command_ != &_default_command_) {
        command_->clear();
      }
    }
    if (_has_bit(2)) {
      if (auto_complettion_command_ != &_default_auto_complettion_command_) {
        auto_complettion_command_->clear();
      }
    }
    if (_has_bit(4)) {
      if (prompt_request_ != &_default_prompt_request_) {
        prompt_request_->clear();
      }
    }
    if (_has_bit(5)) {
      if (prompt_ != &_default_prompt_) {
        prompt_->clear();
      }
    }
  }
  message_.Clear();
  auto_completion_alternatives_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConsolePacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->command().data(), this->command().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }
      
      // repeated .au.gpb.Message message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        if (input->ExpectTag(26)) goto parse_auto_complettion_command;
        break;
      }
      
      // optional string auto_complettion_command = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_auto_complettion_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auto_complettion_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->auto_complettion_command().data(), this->auto_complettion_command().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_auto_completion_alternatives;
        break;
      }
      
      // repeated .au.gpb.AutoCompletionAlternative auto_completion_alternatives = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_auto_completion_alternatives:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_auto_completion_alternatives()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_auto_completion_alternatives;
        if (input->ExpectTag(42)) goto parse_prompt_request;
        break;
      }
      
      // optional string prompt_request = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prompt_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prompt_request()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->prompt_request().data(), this->prompt_request().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_prompt;
        break;
      }
      
      // optional string prompt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prompt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prompt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->prompt().data(), this->prompt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConsolePacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string command = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->command(), output);
  }
  
  // repeated .au.gpb.Message message = 2;
  for (int i = 0; i < this->message_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->message(i), output);
  }
  
  // optional string auto_complettion_command = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->auto_complettion_command().data(), this->auto_complettion_command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->auto_complettion_command(), output);
  }
  
  // repeated .au.gpb.AutoCompletionAlternative auto_completion_alternatives = 4;
  for (int i = 0; i < this->auto_completion_alternatives_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->auto_completion_alternatives(i), output);
  }
  
  // optional string prompt_request = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prompt_request().data(), this->prompt_request().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->prompt_request(), output);
  }
  
  // optional string prompt = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prompt().data(), this->prompt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->prompt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConsolePacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string command = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->command(), target);
  }
  
  // repeated .au.gpb.Message message = 2;
  for (int i = 0; i < this->message_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->message(i), target);
  }
  
  // optional string auto_complettion_command = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->auto_complettion_command().data(), this->auto_complettion_command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->auto_complettion_command(), target);
  }
  
  // repeated .au.gpb.AutoCompletionAlternative auto_completion_alternatives = 4;
  for (int i = 0; i < this->auto_completion_alternatives_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->auto_completion_alternatives(i), target);
  }
  
  // optional string prompt_request = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prompt_request().data(), this->prompt_request().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->prompt_request(), target);
  }
  
  // optional string prompt = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prompt().data(), this->prompt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->prompt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConsolePacket::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command());
    }
    
    // optional string auto_complettion_command = 3;
    if (has_auto_complettion_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->auto_complettion_command());
    }
    
    // optional string prompt_request = 5;
    if (has_prompt_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prompt_request());
    }
    
    // optional string prompt = 6;
    if (has_prompt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prompt());
    }
    
  }
  // repeated .au.gpb.Message message = 2;
  total_size += 1 * this->message_size();
  for (int i = 0; i < this->message_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->message(i));
  }
  
  // repeated .au.gpb.AutoCompletionAlternative auto_completion_alternatives = 4;
  total_size += 1 * this->auto_completion_alternatives_size();
  for (int i = 0; i < this->auto_completion_alternatives_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->auto_completion_alternatives(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConsolePacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConsolePacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConsolePacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConsolePacket::MergeFrom(const ConsolePacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  message_.MergeFrom(from.message_);
  auto_completion_alternatives_.MergeFrom(from.auto_completion_alternatives_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_command(from.command());
    }
    if (from._has_bit(2)) {
      set_auto_complettion_command(from.auto_complettion_command());
    }
    if (from._has_bit(4)) {
      set_prompt_request(from.prompt_request());
    }
    if (from._has_bit(5)) {
      set_prompt(from.prompt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConsolePacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsolePacket::CopyFrom(const ConsolePacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsolePacket::IsInitialized() const {
  
  for (int i = 0; i < message_size(); i++) {
    if (!this->message(i).IsInitialized()) return false;
  }
  for (int i = 0; i < auto_completion_alternatives_size(); i++) {
    if (!this->auto_completion_alternatives(i).IsInitialized()) return false;
  }
  return true;
}

void ConsolePacket::Swap(ConsolePacket* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    message_.Swap(&other->message_);
    std::swap(auto_complettion_command_, other->auto_complettion_command_);
    auto_completion_alternatives_.Swap(&other->auto_completion_alternatives_);
    std::swap(prompt_request_, other->prompt_request_);
    std::swap(prompt_, other->prompt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConsolePacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConsolePacket_descriptor_;
  metadata.reflection = ConsolePacket_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LogConnectionHello_LogConnectionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogConnectionHello_LogConnectionType_descriptor_;
}
bool LogConnectionHello_LogConnectionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LogConnectionHello_LogConnectionType LogConnectionHello::LogProvider;
const LogConnectionHello_LogConnectionType LogConnectionHello::LogProbe;
const LogConnectionHello_LogConnectionType LogConnectionHello::LogQuery;
const LogConnectionHello_LogConnectionType LogConnectionHello::LogConnectionType_MIN;
const LogConnectionHello_LogConnectionType LogConnectionHello::LogConnectionType_MAX;
const int LogConnectionHello::LogConnectionType_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string LogConnectionHello::_default_filter_;
#ifndef _MSC_VER
const int LogConnectionHello::kTypeFieldNumber;
const int LogConnectionHello::kFilterFieldNumber;
#endif  // !_MSC_VER

LogConnectionHello::LogConnectionHello()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogConnectionHello::InitAsDefaultInstance() {
}

LogConnectionHello::LogConnectionHello(const LogConnectionHello& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogConnectionHello::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  filter_ = const_cast< ::std::string*>(&_default_filter_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogConnectionHello::~LogConnectionHello() {
  SharedDtor();
}

void LogConnectionHello::SharedDtor() {
  if (filter_ != &_default_filter_) {
    delete filter_;
  }
  if (this != default_instance_) {
  }
}

void LogConnectionHello::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogConnectionHello::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogConnectionHello_descriptor_;
}

const LogConnectionHello& LogConnectionHello::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_au_2eproto();  return *default_instance_;
}

LogConnectionHello* LogConnectionHello::default_instance_ = NULL;

LogConnectionHello* LogConnectionHello::New() const {
  return new LogConnectionHello;
}

void LogConnectionHello::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (_has_bit(1)) {
      if (filter_ != &_default_filter_) {
        filter_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogConnectionHello::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .au.gpb.LogConnectionHello.LogConnectionType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::au::gpb::LogConnectionHello_LogConnectionType_IsValid(value)) {
            set_type(static_cast< ::au::gpb::LogConnectionHello_LogConnectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_filter;
        break;
      }
      
      // optional string filter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filter().data(), this->filter().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogConnectionHello::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .au.gpb.LogConnectionHello.LogConnectionType type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional string filter = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->filter(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogConnectionHello::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .au.gpb.LogConnectionHello.LogConnectionType type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional string filter = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filter(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogConnectionHello::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .au.gpb.LogConnectionHello.LogConnectionType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional string filter = 2;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filter());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogConnectionHello::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogConnectionHello* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogConnectionHello*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogConnectionHello::MergeFrom(const LogConnectionHello& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(1)) {
      set_filter(from.filter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogConnectionHello::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogConnectionHello::CopyFrom(const LogConnectionHello& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogConnectionHello::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void LogConnectionHello::Swap(LogConnectionHello* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(filter_, other->filter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogConnectionHello::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogConnectionHello_descriptor_;
  metadata.reflection = LogConnectionHello_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gpb
}  // namespace au

// @@protoc_insertion_point(global_scope)
