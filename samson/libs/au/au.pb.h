// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: au.proto

#ifndef PROTOBUF_au_2eproto__INCLUDED
#define PROTOBUF_au_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace au {
namespace gpb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_au_2eproto();
void protobuf_AssignDesc_au_2eproto();
void protobuf_ShutdownFile_au_2eproto();

class Message;
class AutoCompletionAlternative;
class ConsolePacket;
class LogConnectionHello;

enum Message_Type {
  Message_Type_message = 1,
  Message_Type_warning = 2,
  Message_Type_error = 3
};
bool Message_Type_IsValid(int value);
const Message_Type Message_Type_Type_MIN = Message_Type_message;
const Message_Type Message_Type_Type_MAX = Message_Type_error;
const int Message_Type_Type_ARRAYSIZE = Message_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Message_Type_descriptor();
inline const ::std::string& Message_Type_Name(Message_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Message_Type_descriptor(), value);
}
inline bool Message_Type_Parse(
    const ::std::string& name, Message_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message_Type>(
    Message_Type_descriptor(), name, value);
}
enum LogConnectionHello_LogConnectionType {
  LogConnectionHello_LogConnectionType_LogProvider = 1,
  LogConnectionHello_LogConnectionType_LogProbe = 2,
  LogConnectionHello_LogConnectionType_LogQuery = 3
};
bool LogConnectionHello_LogConnectionType_IsValid(int value);
const LogConnectionHello_LogConnectionType LogConnectionHello_LogConnectionType_LogConnectionType_MIN = LogConnectionHello_LogConnectionType_LogProvider;
const LogConnectionHello_LogConnectionType LogConnectionHello_LogConnectionType_LogConnectionType_MAX = LogConnectionHello_LogConnectionType_LogQuery;
const int LogConnectionHello_LogConnectionType_LogConnectionType_ARRAYSIZE = LogConnectionHello_LogConnectionType_LogConnectionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogConnectionHello_LogConnectionType_descriptor();
inline const ::std::string& LogConnectionHello_LogConnectionType_Name(LogConnectionHello_LogConnectionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogConnectionHello_LogConnectionType_descriptor(), value);
}
inline bool LogConnectionHello_LogConnectionType_Parse(
    const ::std::string& name, LogConnectionHello_LogConnectionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogConnectionHello_LogConnectionType>(
    LogConnectionHello_LogConnectionType_descriptor(), name, value);
}
// ===================================================================

class Message : public ::google::protobuf::Message {
 public:
  Message();
  virtual ~Message();
  
  Message(const Message& from);
  
  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();
  
  void Swap(Message* other);
  
  // implements Message ----------------------------------------------
  
  Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Message_Type Type;
  static const Type message = Message_Type_message;
  static const Type warning = Message_Type_warning;
  static const Type error = Message_Type_error;
  static inline bool Type_IsValid(int value) {
    return Message_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Message_Type_Type_MIN;
  static const Type Type_MAX =
    Message_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Message_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Message_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Message_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Message_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string txt = 1;
  inline bool has_txt() const;
  inline void clear_txt();
  static const int kTxtFieldNumber = 1;
  inline const ::std::string& txt() const;
  inline void set_txt(const ::std::string& value);
  inline void set_txt(const char* value);
  inline void set_txt(const char* value, size_t size);
  inline ::std::string* mutable_txt();
  
  // required .au.gpb.Message.Type type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::au::gpb::Message_Type type() const;
  inline void set_type(::au::gpb::Message_Type value);
  
  // @@protoc_insertion_point(class_scope:au.gpb.Message)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* txt_;
  static const ::std::string _default_txt_;
  int type_;
  friend void  protobuf_AddDesc_au_2eproto();
  friend void protobuf_AssignDesc_au_2eproto();
  friend void protobuf_ShutdownFile_au_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// -------------------------------------------------------------------

class AutoCompletionAlternative : public ::google::protobuf::Message {
 public:
  AutoCompletionAlternative();
  virtual ~AutoCompletionAlternative();
  
  AutoCompletionAlternative(const AutoCompletionAlternative& from);
  
  inline AutoCompletionAlternative& operator=(const AutoCompletionAlternative& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AutoCompletionAlternative& default_instance();
  
  void Swap(AutoCompletionAlternative* other);
  
  // implements Message ----------------------------------------------
  
  AutoCompletionAlternative* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AutoCompletionAlternative& from);
  void MergeFrom(const AutoCompletionAlternative& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string label = 1;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 1;
  inline const ::std::string& label() const;
  inline void set_label(const ::std::string& value);
  inline void set_label(const char* value);
  inline void set_label(const char* value, size_t size);
  inline ::std::string* mutable_label();
  
  // required string command = 2;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 2;
  inline const ::std::string& command() const;
  inline void set_command(const ::std::string& value);
  inline void set_command(const char* value);
  inline void set_command(const char* value, size_t size);
  inline ::std::string* mutable_command();
  
  // required bool add_space_if_unique = 3;
  inline bool has_add_space_if_unique() const;
  inline void clear_add_space_if_unique();
  static const int kAddSpaceIfUniqueFieldNumber = 3;
  inline bool add_space_if_unique() const;
  inline void set_add_space_if_unique(bool value);
  
  // @@protoc_insertion_point(class_scope:au.gpb.AutoCompletionAlternative)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* label_;
  static const ::std::string _default_label_;
  ::std::string* command_;
  static const ::std::string _default_command_;
  bool add_space_if_unique_;
  friend void  protobuf_AddDesc_au_2eproto();
  friend void protobuf_AssignDesc_au_2eproto();
  friend void protobuf_ShutdownFile_au_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static AutoCompletionAlternative* default_instance_;
};
// -------------------------------------------------------------------

class ConsolePacket : public ::google::protobuf::Message {
 public:
  ConsolePacket();
  virtual ~ConsolePacket();
  
  ConsolePacket(const ConsolePacket& from);
  
  inline ConsolePacket& operator=(const ConsolePacket& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConsolePacket& default_instance();
  
  void Swap(ConsolePacket* other);
  
  // implements Message ----------------------------------------------
  
  ConsolePacket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConsolePacket& from);
  void MergeFrom(const ConsolePacket& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string command = 1;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 1;
  inline const ::std::string& command() const;
  inline void set_command(const ::std::string& value);
  inline void set_command(const char* value);
  inline void set_command(const char* value, size_t size);
  inline ::std::string* mutable_command();
  
  // repeated .au.gpb.Message message = 2;
  inline int message_size() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::au::gpb::Message& message(int index) const;
  inline ::au::gpb::Message* mutable_message(int index);
  inline ::au::gpb::Message* add_message();
  inline const ::google::protobuf::RepeatedPtrField< ::au::gpb::Message >&
      message() const;
  inline ::google::protobuf::RepeatedPtrField< ::au::gpb::Message >*
      mutable_message();
  
  // optional string auto_complettion_command = 3;
  inline bool has_auto_complettion_command() const;
  inline void clear_auto_complettion_command();
  static const int kAutoComplettionCommandFieldNumber = 3;
  inline const ::std::string& auto_complettion_command() const;
  inline void set_auto_complettion_command(const ::std::string& value);
  inline void set_auto_complettion_command(const char* value);
  inline void set_auto_complettion_command(const char* value, size_t size);
  inline ::std::string* mutable_auto_complettion_command();
  
  // repeated .au.gpb.AutoCompletionAlternative auto_completion_alternatives = 4;
  inline int auto_completion_alternatives_size() const;
  inline void clear_auto_completion_alternatives();
  static const int kAutoCompletionAlternativesFieldNumber = 4;
  inline const ::au::gpb::AutoCompletionAlternative& auto_completion_alternatives(int index) const;
  inline ::au::gpb::AutoCompletionAlternative* mutable_auto_completion_alternatives(int index);
  inline ::au::gpb::AutoCompletionAlternative* add_auto_completion_alternatives();
  inline const ::google::protobuf::RepeatedPtrField< ::au::gpb::AutoCompletionAlternative >&
      auto_completion_alternatives() const;
  inline ::google::protobuf::RepeatedPtrField< ::au::gpb::AutoCompletionAlternative >*
      mutable_auto_completion_alternatives();
  
  // optional string prompt_request = 5;
  inline bool has_prompt_request() const;
  inline void clear_prompt_request();
  static const int kPromptRequestFieldNumber = 5;
  inline const ::std::string& prompt_request() const;
  inline void set_prompt_request(const ::std::string& value);
  inline void set_prompt_request(const char* value);
  inline void set_prompt_request(const char* value, size_t size);
  inline ::std::string* mutable_prompt_request();
  
  // optional string prompt = 6;
  inline bool has_prompt() const;
  inline void clear_prompt();
  static const int kPromptFieldNumber = 6;
  inline const ::std::string& prompt() const;
  inline void set_prompt(const ::std::string& value);
  inline void set_prompt(const char* value);
  inline void set_prompt(const char* value, size_t size);
  inline ::std::string* mutable_prompt();
  
  // @@protoc_insertion_point(class_scope:au.gpb.ConsolePacket)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* command_;
  static const ::std::string _default_command_;
  ::google::protobuf::RepeatedPtrField< ::au::gpb::Message > message_;
  ::std::string* auto_complettion_command_;
  static const ::std::string _default_auto_complettion_command_;
  ::google::protobuf::RepeatedPtrField< ::au::gpb::AutoCompletionAlternative > auto_completion_alternatives_;
  ::std::string* prompt_request_;
  static const ::std::string _default_prompt_request_;
  ::std::string* prompt_;
  static const ::std::string _default_prompt_;
  friend void  protobuf_AddDesc_au_2eproto();
  friend void protobuf_AssignDesc_au_2eproto();
  friend void protobuf_ShutdownFile_au_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ConsolePacket* default_instance_;
};
// -------------------------------------------------------------------

class LogConnectionHello : public ::google::protobuf::Message {
 public:
  LogConnectionHello();
  virtual ~LogConnectionHello();
  
  LogConnectionHello(const LogConnectionHello& from);
  
  inline LogConnectionHello& operator=(const LogConnectionHello& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogConnectionHello& default_instance();
  
  void Swap(LogConnectionHello* other);
  
  // implements Message ----------------------------------------------
  
  LogConnectionHello* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogConnectionHello& from);
  void MergeFrom(const LogConnectionHello& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef LogConnectionHello_LogConnectionType LogConnectionType;
  static const LogConnectionType LogProvider = LogConnectionHello_LogConnectionType_LogProvider;
  static const LogConnectionType LogProbe = LogConnectionHello_LogConnectionType_LogProbe;
  static const LogConnectionType LogQuery = LogConnectionHello_LogConnectionType_LogQuery;
  static inline bool LogConnectionType_IsValid(int value) {
    return LogConnectionHello_LogConnectionType_IsValid(value);
  }
  static const LogConnectionType LogConnectionType_MIN =
    LogConnectionHello_LogConnectionType_LogConnectionType_MIN;
  static const LogConnectionType LogConnectionType_MAX =
    LogConnectionHello_LogConnectionType_LogConnectionType_MAX;
  static const int LogConnectionType_ARRAYSIZE =
    LogConnectionHello_LogConnectionType_LogConnectionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LogConnectionType_descriptor() {
    return LogConnectionHello_LogConnectionType_descriptor();
  }
  static inline const ::std::string& LogConnectionType_Name(LogConnectionType value) {
    return LogConnectionHello_LogConnectionType_Name(value);
  }
  static inline bool LogConnectionType_Parse(const ::std::string& name,
      LogConnectionType* value) {
    return LogConnectionHello_LogConnectionType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .au.gpb.LogConnectionHello.LogConnectionType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::au::gpb::LogConnectionHello_LogConnectionType type() const;
  inline void set_type(::au::gpb::LogConnectionHello_LogConnectionType value);
  
  // optional string filter = 2;
  inline bool has_filter() const;
  inline void clear_filter();
  static const int kFilterFieldNumber = 2;
  inline const ::std::string& filter() const;
  inline void set_filter(const ::std::string& value);
  inline void set_filter(const char* value);
  inline void set_filter(const char* value, size_t size);
  inline ::std::string* mutable_filter();
  
  // @@protoc_insertion_point(class_scope:au.gpb.LogConnectionHello)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int type_;
  ::std::string* filter_;
  static const ::std::string _default_filter_;
  friend void  protobuf_AddDesc_au_2eproto();
  friend void protobuf_AssignDesc_au_2eproto();
  friend void protobuf_ShutdownFile_au_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static LogConnectionHello* default_instance_;
};
// ===================================================================


// ===================================================================

// Message

// required string txt = 1;
inline bool Message::has_txt() const {
  return _has_bit(0);
}
inline void Message::clear_txt() {
  if (txt_ != &_default_txt_) {
    txt_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Message::txt() const {
  return *txt_;
}
inline void Message::set_txt(const ::std::string& value) {
  _set_bit(0);
  if (txt_ == &_default_txt_) {
    txt_ = new ::std::string;
  }
  txt_->assign(value);
}
inline void Message::set_txt(const char* value) {
  _set_bit(0);
  if (txt_ == &_default_txt_) {
    txt_ = new ::std::string;
  }
  txt_->assign(value);
}
inline void Message::set_txt(const char* value, size_t size) {
  _set_bit(0);
  if (txt_ == &_default_txt_) {
    txt_ = new ::std::string;
  }
  txt_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Message::mutable_txt() {
  _set_bit(0);
  if (txt_ == &_default_txt_) {
    txt_ = new ::std::string;
  }
  return txt_;
}

// required .au.gpb.Message.Type type = 2;
inline bool Message::has_type() const {
  return _has_bit(1);
}
inline void Message::clear_type() {
  type_ = 1;
  _clear_bit(1);
}
inline ::au::gpb::Message_Type Message::type() const {
  return static_cast< ::au::gpb::Message_Type >(type_);
}
inline void Message::set_type(::au::gpb::Message_Type value) {
  GOOGLE_DCHECK(::au::gpb::Message_Type_IsValid(value));
  _set_bit(1);
  type_ = value;
}

// -------------------------------------------------------------------

// AutoCompletionAlternative

// required string label = 1;
inline bool AutoCompletionAlternative::has_label() const {
  return _has_bit(0);
}
inline void AutoCompletionAlternative::clear_label() {
  if (label_ != &_default_label_) {
    label_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& AutoCompletionAlternative::label() const {
  return *label_;
}
inline void AutoCompletionAlternative::set_label(const ::std::string& value) {
  _set_bit(0);
  if (label_ == &_default_label_) {
    label_ = new ::std::string;
  }
  label_->assign(value);
}
inline void AutoCompletionAlternative::set_label(const char* value) {
  _set_bit(0);
  if (label_ == &_default_label_) {
    label_ = new ::std::string;
  }
  label_->assign(value);
}
inline void AutoCompletionAlternative::set_label(const char* value, size_t size) {
  _set_bit(0);
  if (label_ == &_default_label_) {
    label_ = new ::std::string;
  }
  label_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AutoCompletionAlternative::mutable_label() {
  _set_bit(0);
  if (label_ == &_default_label_) {
    label_ = new ::std::string;
  }
  return label_;
}

// required string command = 2;
inline bool AutoCompletionAlternative::has_command() const {
  return _has_bit(1);
}
inline void AutoCompletionAlternative::clear_command() {
  if (command_ != &_default_command_) {
    command_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& AutoCompletionAlternative::command() const {
  return *command_;
}
inline void AutoCompletionAlternative::set_command(const ::std::string& value) {
  _set_bit(1);
  if (command_ == &_default_command_) {
    command_ = new ::std::string;
  }
  command_->assign(value);
}
inline void AutoCompletionAlternative::set_command(const char* value) {
  _set_bit(1);
  if (command_ == &_default_command_) {
    command_ = new ::std::string;
  }
  command_->assign(value);
}
inline void AutoCompletionAlternative::set_command(const char* value, size_t size) {
  _set_bit(1);
  if (command_ == &_default_command_) {
    command_ = new ::std::string;
  }
  command_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AutoCompletionAlternative::mutable_command() {
  _set_bit(1);
  if (command_ == &_default_command_) {
    command_ = new ::std::string;
  }
  return command_;
}

// required bool add_space_if_unique = 3;
inline bool AutoCompletionAlternative::has_add_space_if_unique() const {
  return _has_bit(2);
}
inline void AutoCompletionAlternative::clear_add_space_if_unique() {
  add_space_if_unique_ = false;
  _clear_bit(2);
}
inline bool AutoCompletionAlternative::add_space_if_unique() const {
  return add_space_if_unique_;
}
inline void AutoCompletionAlternative::set_add_space_if_unique(bool value) {
  _set_bit(2);
  add_space_if_unique_ = value;
}

// -------------------------------------------------------------------

// ConsolePacket

// optional string command = 1;
inline bool ConsolePacket::has_command() const {
  return _has_bit(0);
}
inline void ConsolePacket::clear_command() {
  if (command_ != &_default_command_) {
    command_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& ConsolePacket::command() const {
  return *command_;
}
inline void ConsolePacket::set_command(const ::std::string& value) {
  _set_bit(0);
  if (command_ == &_default_command_) {
    command_ = new ::std::string;
  }
  command_->assign(value);
}
inline void ConsolePacket::set_command(const char* value) {
  _set_bit(0);
  if (command_ == &_default_command_) {
    command_ = new ::std::string;
  }
  command_->assign(value);
}
inline void ConsolePacket::set_command(const char* value, size_t size) {
  _set_bit(0);
  if (command_ == &_default_command_) {
    command_ = new ::std::string;
  }
  command_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConsolePacket::mutable_command() {
  _set_bit(0);
  if (command_ == &_default_command_) {
    command_ = new ::std::string;
  }
  return command_;
}

// repeated .au.gpb.Message message = 2;
inline int ConsolePacket::message_size() const {
  return message_.size();
}
inline void ConsolePacket::clear_message() {
  message_.Clear();
}
inline const ::au::gpb::Message& ConsolePacket::message(int index) const {
  return message_.Get(index);
}
inline ::au::gpb::Message* ConsolePacket::mutable_message(int index) {
  return message_.Mutable(index);
}
inline ::au::gpb::Message* ConsolePacket::add_message() {
  return message_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::au::gpb::Message >&
ConsolePacket::message() const {
  return message_;
}
inline ::google::protobuf::RepeatedPtrField< ::au::gpb::Message >*
ConsolePacket::mutable_message() {
  return &message_;
}

// optional string auto_complettion_command = 3;
inline bool ConsolePacket::has_auto_complettion_command() const {
  return _has_bit(2);
}
inline void ConsolePacket::clear_auto_complettion_command() {
  if (auto_complettion_command_ != &_default_auto_complettion_command_) {
    auto_complettion_command_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& ConsolePacket::auto_complettion_command() const {
  return *auto_complettion_command_;
}
inline void ConsolePacket::set_auto_complettion_command(const ::std::string& value) {
  _set_bit(2);
  if (auto_complettion_command_ == &_default_auto_complettion_command_) {
    auto_complettion_command_ = new ::std::string;
  }
  auto_complettion_command_->assign(value);
}
inline void ConsolePacket::set_auto_complettion_command(const char* value) {
  _set_bit(2);
  if (auto_complettion_command_ == &_default_auto_complettion_command_) {
    auto_complettion_command_ = new ::std::string;
  }
  auto_complettion_command_->assign(value);
}
inline void ConsolePacket::set_auto_complettion_command(const char* value, size_t size) {
  _set_bit(2);
  if (auto_complettion_command_ == &_default_auto_complettion_command_) {
    auto_complettion_command_ = new ::std::string;
  }
  auto_complettion_command_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConsolePacket::mutable_auto_complettion_command() {
  _set_bit(2);
  if (auto_complettion_command_ == &_default_auto_complettion_command_) {
    auto_complettion_command_ = new ::std::string;
  }
  return auto_complettion_command_;
}

// repeated .au.gpb.AutoCompletionAlternative auto_completion_alternatives = 4;
inline int ConsolePacket::auto_completion_alternatives_size() const {
  return auto_completion_alternatives_.size();
}
inline void ConsolePacket::clear_auto_completion_alternatives() {
  auto_completion_alternatives_.Clear();
}
inline const ::au::gpb::AutoCompletionAlternative& ConsolePacket::auto_completion_alternatives(int index) const {
  return auto_completion_alternatives_.Get(index);
}
inline ::au::gpb::AutoCompletionAlternative* ConsolePacket::mutable_auto_completion_alternatives(int index) {
  return auto_completion_alternatives_.Mutable(index);
}
inline ::au::gpb::AutoCompletionAlternative* ConsolePacket::add_auto_completion_alternatives() {
  return auto_completion_alternatives_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::au::gpb::AutoCompletionAlternative >&
ConsolePacket::auto_completion_alternatives() const {
  return auto_completion_alternatives_;
}
inline ::google::protobuf::RepeatedPtrField< ::au::gpb::AutoCompletionAlternative >*
ConsolePacket::mutable_auto_completion_alternatives() {
  return &auto_completion_alternatives_;
}

// optional string prompt_request = 5;
inline bool ConsolePacket::has_prompt_request() const {
  return _has_bit(4);
}
inline void ConsolePacket::clear_prompt_request() {
  if (prompt_request_ != &_default_prompt_request_) {
    prompt_request_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& ConsolePacket::prompt_request() const {
  return *prompt_request_;
}
inline void ConsolePacket::set_prompt_request(const ::std::string& value) {
  _set_bit(4);
  if (prompt_request_ == &_default_prompt_request_) {
    prompt_request_ = new ::std::string;
  }
  prompt_request_->assign(value);
}
inline void ConsolePacket::set_prompt_request(const char* value) {
  _set_bit(4);
  if (prompt_request_ == &_default_prompt_request_) {
    prompt_request_ = new ::std::string;
  }
  prompt_request_->assign(value);
}
inline void ConsolePacket::set_prompt_request(const char* value, size_t size) {
  _set_bit(4);
  if (prompt_request_ == &_default_prompt_request_) {
    prompt_request_ = new ::std::string;
  }
  prompt_request_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConsolePacket::mutable_prompt_request() {
  _set_bit(4);
  if (prompt_request_ == &_default_prompt_request_) {
    prompt_request_ = new ::std::string;
  }
  return prompt_request_;
}

// optional string prompt = 6;
inline bool ConsolePacket::has_prompt() const {
  return _has_bit(5);
}
inline void ConsolePacket::clear_prompt() {
  if (prompt_ != &_default_prompt_) {
    prompt_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& ConsolePacket::prompt() const {
  return *prompt_;
}
inline void ConsolePacket::set_prompt(const ::std::string& value) {
  _set_bit(5);
  if (prompt_ == &_default_prompt_) {
    prompt_ = new ::std::string;
  }
  prompt_->assign(value);
}
inline void ConsolePacket::set_prompt(const char* value) {
  _set_bit(5);
  if (prompt_ == &_default_prompt_) {
    prompt_ = new ::std::string;
  }
  prompt_->assign(value);
}
inline void ConsolePacket::set_prompt(const char* value, size_t size) {
  _set_bit(5);
  if (prompt_ == &_default_prompt_) {
    prompt_ = new ::std::string;
  }
  prompt_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConsolePacket::mutable_prompt() {
  _set_bit(5);
  if (prompt_ == &_default_prompt_) {
    prompt_ = new ::std::string;
  }
  return prompt_;
}

// -------------------------------------------------------------------

// LogConnectionHello

// required .au.gpb.LogConnectionHello.LogConnectionType type = 1;
inline bool LogConnectionHello::has_type() const {
  return _has_bit(0);
}
inline void LogConnectionHello::clear_type() {
  type_ = 1;
  _clear_bit(0);
}
inline ::au::gpb::LogConnectionHello_LogConnectionType LogConnectionHello::type() const {
  return static_cast< ::au::gpb::LogConnectionHello_LogConnectionType >(type_);
}
inline void LogConnectionHello::set_type(::au::gpb::LogConnectionHello_LogConnectionType value) {
  GOOGLE_DCHECK(::au::gpb::LogConnectionHello_LogConnectionType_IsValid(value));
  _set_bit(0);
  type_ = value;
}

// optional string filter = 2;
inline bool LogConnectionHello::has_filter() const {
  return _has_bit(1);
}
inline void LogConnectionHello::clear_filter() {
  if (filter_ != &_default_filter_) {
    filter_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& LogConnectionHello::filter() const {
  return *filter_;
}
inline void LogConnectionHello::set_filter(const ::std::string& value) {
  _set_bit(1);
  if (filter_ == &_default_filter_) {
    filter_ = new ::std::string;
  }
  filter_->assign(value);
}
inline void LogConnectionHello::set_filter(const char* value) {
  _set_bit(1);
  if (filter_ == &_default_filter_) {
    filter_ = new ::std::string;
  }
  filter_->assign(value);
}
inline void LogConnectionHello::set_filter(const char* value, size_t size) {
  _set_bit(1);
  if (filter_ == &_default_filter_) {
    filter_ = new ::std::string;
  }
  filter_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogConnectionHello::mutable_filter() {
  _set_bit(1);
  if (filter_ == &_default_filter_) {
    filter_ = new ::std::string;
  }
  return filter_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gpb
}  // namespace au

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::au::gpb::Message_Type>() {
  return ::au::gpb::Message_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::au::gpb::LogConnectionHello_LogConnectionType>() {
  return ::au::gpb::LogConnectionHello_LogConnectionType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_au_2eproto__INCLUDED
