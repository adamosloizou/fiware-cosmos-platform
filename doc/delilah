1. Introduction
   Samson is a MapReduce platform, developed for processing large volumes of information (> 1GB daily).
   delilah is its console client, used to connect to and to interact with the Samson platform.

2. delilah console client

'delilah' is the samson shell, used to interact with the samson platform.

Synopsis:
  delilah <IP address> <port> [options]

delilah supports a number of options, the most important being:
  -u                     print usage on the screen and then exit
  -v                     verbose mode - upto five v:s accepted
  --version              print version on the screen and then exit
  -user                  User to connect to SAMSON cluster
  -password              Password to connect to SAMSON cluster
  -memory                memory in GBytes
  -load_buffer_size      load buffer size in MBytes
  -f                     File with commands to execute
  -command               Single command to be executed


delilah is included in the samson package and installed with the rest of the platform.
delilah is an executable and the supported platforms are:
  o Ubuntu,
  o RedHat,
  o CentOS and
  o MacOS ?

delilah doesn't need to run in any of the nodes of the samson cluster but it does need to be able to connect to all the nodes in the cluster.
In order to tell delilah what cluster to connect to, it's two command line parameters are used.
The port parameter defaults to 1324, which is the default listen port for the samson worker, while the IP-address parameter defaults to 'localhost', i.e. the same node where delilah has been started.

As a shell, delilah offers a number of convenient features, such as:

o history
   Using the cursor keys, the delilah user can easily browse the history of previous commands, to invoke a command previously invoked.
   The history is kept on file, thus survives between sessions.

o auto-completion
   Using the tab key, the delilah user can auto-complete command names, its options, operation names, dataset names etc.

2.1 Getting help
   The command to use to get help in delilah is called 'help'.
   Once invoked, the following listing is presented on the screen:

=======================================================================================================================================================
 SAMSON v 0.6.1
=======================================================================================================================================================
    SAMSON is a distributed platform for efficient processing of unbounded streams of big data
    Authors: Andreu Urruela, Grant Croker, J.Gregorio Escalada & Ken Zangelin
    Telefonica I+D 2010-2012
-------------------------------------------------------------------------------------------------------------------------------------------------------
    help all .................. get a list of all available commands
    help categories ........... get a list of command categories
    help <command> ............ get detailed information for a command
    help <category> ........... get list of commands for a particular categoriy
-------------------------------------------------------------------------------------------------------------------------------------------------------

   The help categories are:
   o data
   o delilah
   o local
   o management
   o modules
   o push&pop
   o stream

   To see the listing of all commands for a category, use the following command:
   delilah> help <category name>

   To see the help of an individual command, use 'help <command name>', for example:
   delilah> help ls

         --------------------------------------------------------------------------------------------------------------------------------
          COMMAND ls       ( data )
         --------------------------------------------------------------------------------------------------------------------------------
         DESCRIPTION:  Show a list of all data queues in the system
         USAGE: 
                       ls [-rates] [-blocks] [-properties] [-group group_field]
                             -rates        Information about total size and current rate
                             -blocks       Detailes information about blocks
                             -properties   Get properties assigned to queues
                             -group X      Group results by a particular field
         --------------------------------------------------------------------------------------------------------------------------------

2.2 management commands
   A SAMSON cluster is a set of SAMSON nodes that work together.
   Nodes can easily be added or removed from a SAMSON cluster using delilah.

   'management' is the delilah command category to maintain clusters.
   The commands in this category are:
   o cluster         - to add/remove/view cluster members
   o ls_connections  - to see the status of all connections in the cluster

2.2.1 cluster
   The cluster command has a number of subcommands:
   o info                                         Show current cluster definition and connection status.
   o connections                                  Show more information about current connections.
   o pending                                      Show pending packets for unconnected workers.
   o connect host[:port] [-user X] [-password X]  Connect to another SAMSON cluster instance (default port: 1324 - the default worker port).
   o add     host[:port]                          Add a node to this cluster. A samsond clear instance should be running there.
   o remove  id                                   Remove one of the involved workers. The worker id should be provided (see cluster info).
   o get_my_id                                    Get this delilah identifier (see ls_connections).

   Exercise: create a new samson cluster with three nodes

   1. Make sure a 'free' samson worker is running in each of the nodes. With 'free' is meant that the worker does not belong to any cluster.
      If a samson worker already belongs to a cluster and you wish for it to belong to another cluster, just connect to it using delilah
      and issue the 'cluster info' command. Now you have the 'id' of the node and you can issue the 'cluster remove <id>' command to free the node.

   2. Connect to one of the three nodes (doesn't matter which one you start with), using the 'cluster connect' command.
      As this node is (was) a free node, a cluster containing only this node is created automatically.

   3. Now add the other two nodes, using the 'cluster add' command.

   4. To check that everything worked, use the 'cluster info' command and you should see the three nodes:


2.2.1.1 cluster info
   The cluster subcommand 'info' shows the list of nodes in the connected cluster, e.g.:

   Synopsis:
   delilah> cluster info

   Example output:
         /----------------------------------------------------------------\                                                              
         | Cluster 204695284815 ( version 2 )                             |
         |----------------------------------------------------------------|
         | Worker |        Host |                                  Status | 
         |--------+-------------+-----------------------------------------|
         |      0 | torkel:1324 | Connected In:     0 B/s Out:     0 B/s  | 
         |      1 | torkel:2000 | Connected In:     0 B/s Out:     0 B/s  | 
         |      2 | torkel:2001 | Connected In:  86.0 B/s Out:     0 B/s  | 
         \----------------------------------------------------------------/


2.2.1.2 cluster connections
   The cluster subcommand 'connections' shows a listing with detailed information of all currently open connections:

   Synopsis:
   delilah> cluster connections

   Example output:
         /------------------------------------------------\                                                                              
         | Connections                                    |
         |------------------------------------------------|
         |     Name |        Host |        In |       Out | 
         |----------+-------------+-----------+-----------|
         | worker_0 | torkel:1324 |  86.0 B/s |  3.00 B/s | 
         | worker_1 | torkel:2000 |  86.0 B/s |  3.00 B/s | 
         | worker_2 | torkel:2001 |  86.0 B/s |  3.00 B/s | 
         \------------------------------------------------/
2.2.1.3 cluster pending
   The cluster subcommand 'pending' shows all pending packets for unconnected workers:

   Synopsis:
   delilah> cluster pending

   Example output:
         /------------------------------\                                                                                                
         | Pending packets              |
         |------------------------------|
         | Connection | #Packets | Size | 
         |------------+----------+------|
         \------------------------------/

2.2.1.4 cluster connect
   The cluster subcommand 'connect' lets you connect to a samson cluster.
   If you are already connected to a cluster, delilah will disconnect from that cluster and
   connect to the requested cluster, unless delilah detects outstanding operations.
   If so, to override this, the user would have to disconnect manually, using the command
   'cluster disconnect' before connecting to the new cluster.
   To connect to a cluster, it is enoung to connect to any of the samson workers in the cluster.

   Synopsis:
   delilah> cluster connect host:port

2.2.1.5 cluster add
   To add a new node to an existing cluster (the cluster you're currently connected to), the
   subcommand 'add' is used. cluster add has one parameter, the name of the node where the
   samson worker instance is running. In case this samson worker has been started with a 
   port that is not the default samson worker port (1324), this port must be added to the node
   using colon (:) as separator.

   Synopsis:
   delilah> cluster add host:port

2.2.1.6 cluster remove
   To remove a worker instance from a cluster, the subcommand 'remove' is used.
   A removed worker instance is immediately informed and this worker instance is now
   cluster-free, meaning that it can be added to any cluster.
   One option is required for this command - the host of the worker instance that is
   to be removed from the cluster. In case the worker is not using the default worker port,
   the port number is added to the hostname, using a colon as separator.

   Synopsis:
   delilah> cluster remove host:port

2.2.1.7 cluster get_my_id
   To retrieve the cluster id of the currently connected cluster, the subcommand 'get_my_id' 
   is used. This identification number of the cluster can later be used in various listings
   to detect that connections are with this instance of delilah, and not another one.
   It is typical to have many instances of delilah running simultaneously.

   Synopsis:
   delilah> cluster get_my_id

2.2.2 ls_connections
   The management command ls_connections shows the status of all connections in a cluster. E.g.:

   Synopsis:
   delilah> ls_connections
         /---------------------------------------------------------------------------------------------------------------------------\   
         | ls_connections                                                                                                            |
         |---------------------------------------------------------------------------------------------------------------------------|
         | worker_id | name             | user      | connection | status    |        host | In (B) | Out (B) | In (B/s) | Out (B/s) | 
         |-----------+------------------+-----------+------------+-----------+-------------+--------+---------+----------+-----------|
         |         1 | delilah_f00gQjEf | anonymous | console    | connected |   127.0.0.1 |   397  |   1.02K |    44.0  |      112  | 
         |         1 | worker_0         | samson    | worker     | connected |   127.0.0.1 |   460  |    359  |    51.0  |     39.0  | 
         |         0 | delilah_f00gQjEf | anonymous | console    | connected |   127.0.0.1 |  4.72K |   12.3K |    47.0  |      103  | 
         |         0 | worker_1         | samson    | worker     | connected | torkel:2000 |   359  |    460  |    39.0  |     51.0  | 
         \---------------------------------------------------------------------------------------------------------------------------/


2.3 data commands
    There are seven different delilah command to view and modify data queues and blocks:
    o ls                     Show a list of all data queues in the system
    o rm                     Remove a queue. Usage: rm queue
    o set_queue_property     Specify the value of property <property> for queue <queue>
    o unset_queue_property   Remove a previously defined property property for a queue
    o show_stream_block      Show data activity in a particular stream block
    o ls_blocks              Show the list of data blocks managed in a SAMSON cluster. This is a debug tool
    o ls_buffers             Show the list of data buffers managed in a SAMSON cluster. This is a debug tool

2.3.1 ls
    'ls' is perhaps the most used command in delilah. It is used to see a listing of all data queues in the system and has a number of options:
    -rates        Information about total size and current rate
    -blocks       Detailes information about blocks
    -properties   Get properties assigned to queues
    -group X      Group results by a particular field

    Synopsis:
    delilah> ls [<queue name>]

2.3.2 rm
    The 'rm' command removes a data queue from the system.

    Synopsis:
    delilah> rm <queue name>

2.3.4 set_queue_property
    Properties of a Samson data queue is a set of variables associated to the queue.
    <An example or two of what properties can accomplish>

    Synopsis:
    delilah> set_queue_property <queue> <property> <value>

2.3.5 unset_queue_property
    The 'unset_queue_property' is used to remove a previously set property for a queue.

    Synopsis:
    delilah> unset_queue_property <queue> <property>

2.3.6 show_stream_block
    The 'show_stream_block' command shows data activity in a particular stream block.
    It shows input and output queues, state queues, stream operations and internal states included in inner stream blocks.

    Synopsis:
    delilah> show_stream_block <path> [-rates]

2.3.7 ls_blocks
    The 'ls_blocks' command shows the list of data blocks managed in the SAMSON cluster.
    This command is a tool used for debugging.

    Synopsis:
    delilah> ls_blocks

2.3.8 ls_buffers
    The 'ls_buffers' command shows the list of data buffers managed in the SAMSON cluster.
    This command is a tool used for debugging.

    Synopsis:
    delilah> ls_buffers

2.4 delilah commands
    The 'delilah' set of command are typically the commands that do not invoke anything outside of the
    delilah executable, i.e. no message is sent to any worker in order to execute these types of commands.
    The exception to this rule are connect/disconnect and wverbose/wdebug

2.4.1 help
    The 'help' command has been extensively described in chapter 2.1

2.4.2 ps
    The 'ps' command is used to view information about delilah processes

    Synopsis:
    delilah> ps [-clear] [<id>]

    The option '-clear', if set, removes all finished or erroneous processes.
    If a parameter (id) is sent to the 'ps' command, then extensive information about that process is shown.

2.4.3 set_mode
    The 'set_mode' command is used to select the delilah working mode, that can take one of three values: 'normal', 'database', and 'logs'.

    Synopsis:
    delilah> set_mode <normal|database|logs>

    Here perhaps a short explanation of the three modes ... and the keyboard shortcuts to change modes ...

2.4.4 set
    The 'set' command is used for setting an environment variable in delilah.

    Synopsis:
    delilah> set [<name>] [<value>]

    When using 'set' without parameters, a listing of all set environment variables is shown.

2.4.5 unset | Remove an environment variable
    The 'unset' command is used for removing an environment variable in delilah.

    Synopsis:
    delilah> unset <name>

2.4.6 connect
    The 'connect' command is used to connect the delilah to a SAMSON cluster or node.

    Synopsis:
    delilah> connect host [-port X] [-user X] [-password X]

2.4.7 disconnect
    The 'disconnect' command is used to disconnect the delilah from its current SAMSON cluster.

    Synopsis:
    delilah> disconnect

2.4.8 alerts
    The 'alerts' command is to activate or deactivate the delilah functionality to show incoming alerts on screen.

    Alerts in the Samson platform is a mechanism that the samson workers use, to send messages between themselves and 
    all connected delilahs. 

    Synopsis:
    delilah> alerts <on>|<off>

2.4.9 show_alerts
    The 'show_alerts' command is used to view a list of the last 10 incoming alerts.
    The number of alerts to view can be modified using the built-in option '-lines'

    Synopsis:
    delilah> show_alerts [-lines (number)]

2.4.10 open_alerts_file
    The 'open_alerts_file' command is used to open a file in the local file system to store all incoming alerts.
    This file must be closed using the 'close_alerts_file' command.

    Synopsis:
    delilah> open_alerts_file <file name>

2.4.11 close_alerts_file
    The 'close_alerts_file' command is used to close the alerts file, previously opened with the 'open_alerts_file' command.

    Synopsis:
    delilah> close_alerts_file

2.4.12 send_alert
    The 'send_alert' command is used to send an alert to all connected delilahs using a random worker as sender

    Synopsis:
    delilah> send_alert [-worker X] [-error] [-warning] message

      -worker X     Use only this worker as broadcaster
      -error        Mark this trace as an error for correct visualization
      -warning      Mark this trace as a warning for correct visualization

2.4.13 log
    This command is obsolete and should not be used.
    To view the log files, the Samson logClient executable should be used

2.4.14 trace
    Activate or disactivate trace levels in the Samson cluster.

    Synopsis:
    delilah> trace <on>|<off>

2.4.15 verbose
    The 'verbose' command activates or deactivates verbose mode for the delilah.
    When 'on', extra information for commands executed in delilah is shown on screen.

    Synopsis:
    delilah> verbose <on>|<off>

2.4.16 wverbose
    The 'wverbose' command sets the verbose level for the samson workers in the cluster.
    The higher the number, the more verbose the workers get.

    Synopsis:
    delilah> wverbose <0-5>|<off>
 
2.4.17 wdebug
    The 'wdebug' command sets the debug level for the samson workers in the cluster.

    Synopsis:
    delilah> wdebug <on>|<off>

2.4.18 wwrites
    The 'wwrites' command sets the 'writes' debug level for the samson workers in the cluster.

    Synopsis:
    delilah> wwrites <on>|<off>

2.4.19 wreads
    The 'wreads' command sets the 'reads' debug level for the samson workers in the cluster.

    Synopsis:
    delilah> wreads <on>|<off>

2.4.20 wtrace
    The 'wtrace' command sets the 'trace' level for the samson workers in the cluster.
    
    Synopsis:
    delilah> wtrace <trace level comma-separated ranges>

    The samson workers have 256 trace levels, from 0 to 255.
    Using the command, delilah changes the trace levels of all workers in the cluster.
    The option for 'wtrace' is a comma separated list of ranges, E.g. 0-4,67-99

2.5 local commands
   The category 'local' groups the delilah commands that have no interaction whatsoever with any of the
   workers in the cluster.

2.5.1 ls_local
   The 'ls_local' command shows a list of current directory with relevant information about local data-sets

   Synopsis:
   delilah> ls_local
         /-----------------------------------------\                                                                                     
         | Local files ( * )                       |
         |-----------------------------------------|
         | Name      | Type |        Size | Format | 
         |-----------+------+-------------+--------|
         | dirr      | DIR  |             |        | 
         | test_file | FILE |  2.00 bytes | -      | 
         \-----------------------------------------/

2.5.2 rm_local
   The 'rm_local' command removes a local file or directory (and all its contents).

   Synopsis:
   delilah> rm_local <local filename>

2.5.3 history
   As explained in 1.2.X, delilah keeps the command history on file to be retrieved for reusal
   in the same session or for future sessions of delilah.
   To see the command history, the command 'history' is used.

   Synopsis:
   delilah> history

2.6 module commands
   A module in the samson platform is a shared library that implements functionality for the platform and thus extends it.
   The samson platform allows for modules to be loaded in run-time.
   Detailed information on how to create a new module is found in the document XXX.

2.6.1 ls_modules
   To view a list of all installed modules in the platform, the command 'ls_modules' is used.

   Synopsis:
   delilah> ls_modules
        /----------------------------------------------------------------------\                                                                    
        | ls_modules                                                           |
        |----------------------------------------------------------------------|
        | worker_id | name   | version | #operations | #datas | author         | 
        |-----------+--------+---------+-------------+--------+----------------|
        |         0 | system |     0.2 |       8.00  |  22.0  | Andreu Urruela | 
        |         2 | system |     0.2 |       8.00  |  22.0  | Andreu Urruela | 
        |         1 | system |     0.2 |       8.00  |  22.0  | Andreu Urruela | 
        \----------------------------------------------------------------------/


2.6.2 ls_operations
   An operation in delilah is a ...

   To see all available operations in delilah, the command 'ls_operations' is used.

   Synopsis:
   delilah> ls_operations

   Example output:
        /---------------------------------------\                                                                                                   
        | ls_operations                         |
        |---------------------------------------|
        | worker_id | name          |      type | 
        |-----------+---------------+-----------|
        |         2 | system.lines  |  splitter | 
        |         2 | system.map    |       map | 
        |         2 | system.map2   |       map | 
        |         2 | system.map3   |       map | 
        |         2 | system.parse  |    parser | 
        |         2 | system.reduce |    reduce | 
        |         2 | system.str    | parserOut | 
        |         2 | system.update |    reduce | 
        |         0 | system.lines  |  splitter | 
        |         0 | system.map    |       map | 
        |         0 | system.map2   |       map | 
        |         0 | system.map3   |       map | 
        |         0 | system.parse  |    parser | 
        |         0 | system.reduce |    reduce | 
        |         0 | system.str    | parserOut | 
        |         0 | system.update |    reduce |                                                                                                   
        |         1 | system.lines  |  splitter | 
        |         1 | system.map    |       map | 
        |         1 | system.map2   |       map | 
        |         1 | system.map3   |       map | 
        |         1 | system.parse  |    parser | 
        |         1 | system.reduce |    reduce | 
        |         1 | system.str    | parserOut | 
        |         1 | system.update |    reduce | 
        \---------------------------------------/


2.6.3 ls_datas
   A 'data' in the samson platform is a data-type that can be used in creating samson 

   To view a list of all the datas in delilah, the 'ls_datas' command is used.

   Synopsis:
   delilah> ls_datas

   Example output:
        /-------------------------------------------------------\                                                                                   
        | ls_datas                                              |
        |-------------------------------------------------------|
        | worker_id |                   name | help             | 
        |-----------+------------------------+------------------|
        |         2 | system.ComplexTimeSlot | Help coming soon | 
        |         2 |            system.Date | Help coming soon | 
        |         2 |    system.DateComplete | Help coming soon | 
        |         2 |          system.Double | Help coming soon | 
        |         2 |           system.Float | Help coming soon | 
        |         2 |           system.Int16 | Help coming soon | 
        |         2 |           system.Int32 | Help coming soon | 
        |         2 |            system.Int8 | Help coming soon | 
        |         2 |          system.String | Help coming soon | 
        |         2 |    system.StringVector | Help coming soon | 
        |         2 |            system.Time | Help coming soon | 

        ...

        \-------------------------------------------------------/


2.6.4 push_module
   The 'push_module' command is used to add a new module to the platform.

   Synopsis:
   delilah> push_module <file> <module_name>


2.6.5 reload_modules
   In case a module is changed, it must be reloaded and the delilah cvommand to accomplish this is 'reload_modules'.

   Synopsis:
   delilah> reload_modules


2.7 push&pop commands
   The category 'push&pop' includes the commands to push queues into the samson platform, from local files
   in the file system, to pop them, i.e. create a local file with a copy of the information in the queue,
   as well as commands to manipulate and view queues


2.7.1 push
   The command 'push' pushes the content of a list of local file/directories to a queue in the samson platform.

   Synopsis:
   delilah> push file1/dir1 file2/dir2 file3/dir3 ... fileN/dirN <queue name>


2.7.2 pop
  The command 'pop' copies the content of a samson queue to a local directory.
  This command also works for binary queues.
  To later view the content, the executable samsonCat is used. samsonCat is distributed with the samson platform.

  Synopsis:
  delilah> pop <queue> <local_file_or_dir> [-force] [-show]


2.7.3 connect_to_queue
  Using the command 'connect_to_queue', you can connect to a queue to receive live data from SAMSON.
  Received data will be stored in a local directory called stream_out_<queue>

  Synopsis:
  delilah> connect_to_queue <queue>


2.7.4 disconnect_from_queue
  To stop the flow of 'connect_to_queue', the command 'disconnect_from_queue' is used.

  Synopsis:
  delilah> disconnect_from_queue <queue>


2.7.5 ls_local_queues
   To view a list of local queues (in the current directory), the command 'ls_local_queues' is used.
   These queues have been typically being downloaded with command pop.

   Synopsis:
   delilah> ls_local_queues

   Example output:
        /---------------------------------------------------------------------------------\
        | Local queues ( * )                                                              |
        |---------------------------------------------------------------------------------|
        | Name  | Type         |                         Size | Format                    | 
        |-------+--------------+------------------------------+---------------------------|
        | words | SAMSON queue | (  36.9Kkvs in  2.54Mbytes ) | system.Value-system.Value | 
        \---------------------------------------------------------------------------------/


2.7.6 show_local_queue
   The command 'show_local_queue' shows contents of a queue downloaded using pop. Modules should be installed locally

   Synopsis:
   delilah> show_local_queue <local_dir> [-header] [-limit X]


2.7.7 push_queue
   To push the content of a queue onto another queue (or even various queues), the command 'push_queue' is used.

   Synopsis:
   delilah> push_queue  <from_queue> <to_queue> [ <to_queue2> ... ]

2.8 stream commands

2.8.1 ls_stream_operations
   Show a list of defined stream operations (added with add_stream_operation)

   Synopsis:
   delilah> ls_stream_operations [-in] [-out] [-running] [-properties]
                    -in          Information about data accepted in the operations
                    -out         Information about data emitted
                    -running     Currently running operations and status
                    -properties  Show properties associated to each stream operation


2.8.2 add_stream_operation
   To add a stream operation, the command 'add_stream_operation' is used.
   A stream operation is used to automatically process data from input queues to output queues
   The stream operation will 'silently' work to process all data that comes in on the input-queues
   and push the results to the output queues. It will keep working until it is removed, using either of the
   'rm_stream_operation' or 'cancel_stream_operation' commands.

   The types of the queues (input or output) given as parameters to this command are defined by the operation itself.
   The operation knows how many input queues it is supposed to use and the queues will be read in order and assigned
   accordingly.

   Synopsis:
   delilah> add_stream_operation <name> <operation> <input-queues>  <output-queues> [-forward]
                  -forward      Option that allows to schedule reduce operations without state. Joint against a constant queue


2.8.3 rm_stream_operation
   To remove a stream operation the command 'rm_stream_operation' is used.
   
   Synopsis:
   delilah> rm_stream_operation <name> [-f (silent)]


2.8.4 run
   To manually start an operation, the command 'run' is used.
   This operation will keep running until it is either cancelled or removed, using the commands
   'rm_stream_operation' or 'cancel_stream_operation'.

   Synopsis:
   delilah> run <op_name> [queues...] [-clear_inputs]
                         <op_name>        : Name of the operation. See 'help ls_operations' for more info
                         [queues]         : Name of the queues involved in this operation (inputs and outputs)
                         [-clear_inputs]  : Flag used to remove content from input queues when running this operation


2.8.5 cancel_stream_operation
   To cancel a particular operation, the command 'cancel_stream_operation' is used.

   Synopsis:
   delilah> cancel_stream_operation <op_id>
                         <op_name>        : Identifier of the operation. Usually something like XXXXX_XXX


2.8.6 set_stream_operation_property
   The command 'set_stream_operation_property' sets the value of an enviroment property associated to a stream operation (see add_stream_operation).

   Synopsis:
   delilah> set_stream_operation_property <stream_operation_name> <variable_name> <value>


2.8.7 unset_stream_operation_property
   The command 'unset_stream_operation_property' removes an enviroment property associated to a stream operation (see add_stream_operation).

   Synopsis:
   delilah> unset_stream_operation_property <stream_operation_name> <variable_name>


2.8.8 add_queue_connection
   To connect a queue to a set of queues, the command 'add_queue_connection' is used.
   Data will be automatically redirected to target queues.

   Synopsis:
   delilah> add_queue_connection <source_queue> <target_queue_1> <target_queue_2> ... <target_queue_N>


2.8.9 rm_queue_connection
   To remove a connected queue, previously established with 'add_queue_connection', the command 'rm_queue_connection' is used.

   Synopsis:
   delilah> rm_queue_connection <source_queue> <target_queue>


2.8.10 ls_queues_connections
   To view a list of the queue connections defined with 'add_queue_connection', the command 'ls_queues_connections' is used.

   Synopsis:
   delilah> ls_queues_connections


2.8.11 ps_stream
   To obtainb a list of the stream tasks currently running in all workers, the command 'ps_stream' is used.

   Synopsis:
   delilah> ps_stream


2.8.12 ls_workers
   The command 'ls_workers' produces a list of current workers with current memory/ disk / process status
   Synopsis:
   delilah> ls_workers [-disk] [-engine]
                         [-disk]   Show more information about disk activity in each worker
                         [-engine] Show more information about engine activity in each worker


2.8.13 init_stream
   The command 'init_stream' executes an initialization script to setup some automatic stream operations.

   Synopsis:
   delilah> init_stream [prefix] <script_name>
                    [prefix]         used to name operations and queues
                    <script_name>    name of the script (e.g. module.script)



2.8.14 ps_workers
   The command 'ps_workers' is used to view a list of the commands under execution in each node of the cluster.

   Synopsis:
   delilah> ps_workers <command pattern>


2.8.15 defrag
   The command 'defrag' defragments the content of a particular queue

   Synopsis:
   delilah> defrag <queue> <destination_queue>
