package ss.network;

// ////////////////////////////////////////////////////////////////////////////
//
// EndPoint data
//
message EndPoint
{
	required sint32  port = 1;   // Port
	required sint32  type = 2;   // Endpoint::Type
	required string  ip   = 3;   // Server
	optional string  name = 4;   // Name for debugging
}

message EndPointVector
{
	repeated EndPoint item = 1;
}


// ////////////////////////////////////////////////////////////////////////////
//
// Message from the controller workers
//


message File
{
	required string name=1;		// Name of file
	required uint64 size=2;		// Size of the file in bytes
	required uint64 kvs=3;		// Number of kvs
}

message QueueFiles
{
	required string name =1;	// Name of the queue
	repeated File file = 2;	// Name of the files for this queue
}


// ////////////////////////////////////////////////////////////////////////////
//
// Message from the controller workers
//
message WorkerTask
{
	required int64 task_id		= 1;	// Id of the top level ( controller ) task	
	required string operation 	= 2;	// Name of the operation to run

	repeated QueueFiles input	= 3;    // Input files ( for each queue )
	repeated string output		= 4;    // output queues
}

// ////////////////////////////////////////////////////////////////////////////
//
// Confirmation from workers to the controller
//
message WorkerTaskConfirmation
{
	required int64 task_id  = 1;	       // Id of the opt level (controller ) task
	required bool  error    = 2;  	       // Error in the operation
	optional string error_message = 3;     // Message to debug the error
	required QueueFiles output = 4;	       // Files created as output for this operation ( to be stored at the controller for future operations )
}

// ////////////////////////////////////////////////////////////////////////////
//
// Command from Delilah to controller
//
message Command
{
	optional string  command   = 1;          // optimal string to send a txt command
	optional bool    error     = 2;          // Flag to indicat if there was an error
	optional int32   sender_id = 3;          // Id of the packet sender ( delilah )
}



// ////////////////////////////////////////////////////////////////////////////
//
// Response message from Controller to Delilah
//
message CommandResponse
{
	required string  response    = 1;   // Answer for the command
	required bool    error       = 2;   // Flag to indicat if there was an error
	required bool    finish      = 3;   // Flag to indicate if the command is finished ( with or without error)

	optional int32   sender_id   = 4;   // Id of the packet sender ( delilah )
}



// ////////////////////////////////////////////////////////////////////////////
//
// Message to exchange information between workers
//
message Data
{
	required int64   task_id   = 1;  // Identifier of the controller task
	required string  queue     = 2;  // Name of the queue where we store information
}



// ////////////////////////////////////////////////////////////////////////////
//
// General message
//
message Message
{
	enum Sender
	{
		Worker     = 0x57;
		Controller = 0x43;
		Delilah    = 0x44;
	};


	// ////////////////////////////////////////////////////////////////////////////
	//
	// Message Data (only one of these structures per message
	//
	optional EndPointVector         endPoints                 = 102;  // Vector of endPoints
	optional Command                command	              	  = 103;  // Command message
	optional CommandResponse        command_response 		  = 104;  // Command response message
	optional WorkerTask	            worker_task	          	  = 105;  // Work task message
	optional WorkerTaskConfirmation worker_task_confirmation  = 106;  // Work task confirmation message
	optional Data 			        data                      = 107;  // Exchange of data packets between nodes     
}
