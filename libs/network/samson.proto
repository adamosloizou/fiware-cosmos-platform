package ss.network;

message Hello
{
	required string  name    = 1;  // The name of the endpoint
	required sint32  workers = 2;  // Number of workers connected to endpoint
	required sint32  type    = 3;  // enum Endpoint::Type
	optional string  ip      = 4;  // IP address
	optional sint32  port    = 5;  // Listen port

}


message EndPoint
{
	required string  ip   = 1;   // Server
	required sint32  port = 2;   // Port
	required sint32  type = 3;   // Endpoint::Type
	optional string  name = 4;   // Name for debugging
}



message EndPointVector
{
	repeated EndPoint item = 1;
}




// Message from the controller workers

message WorkerTask
{
	required string command = 1;	// Command to perform by the worker
	required int64 task_id 	= 2;	// Id of the top level ( controller ) task
}

// Confirmation from workers to the controller

message WorkerTaskConfirmation
{
	required int64 task_id = 1;	// Id of the opt level (controller ) task
	required bool error    = 2;	// Error in the operation

	// Additional information ( like queue size changes, etc... )
}

// Command from dalilah to controller

message Command
{
	optional string command           = 1;          // optimal string to send a txt command
	optional bool   error             = 2;          // Flag to indicat if there was an error
	optional int32  sender_id         = 3;          // Id of the packet sender ( delilah )
}

// response from controller to dalilah

message CommandResponse
{
	optional string response          = 1;          // Answer for the command
	optional bool   error             = 2;          // Flag to indicat if there was an error
	optional int32  sender_id         = 3;          // Id of the packet sender ( delilah )
}

// General message

message Message
{
	enum Type
	{
		Hello			        = 1;
		WorkerVector            = 2;
		Command 		        = 3;
		CommandResponse         = 4;
		WorkerTask 		        = 5;
		WorkerTaskConfirmation 	= 6;
	};

	enum Info
	{
		Msg	   = 0x4d;
		Evt    = 0x45;
		Ack    = 0x41;
		Nak    = 0x4e;
	};

	enum Sender
	{
		Worker     = 0x57;
		Controller = 0x43;
		Delilah    = 0x44;
	};



	//
	// Message Header
	//
	required Type    type       = 1;
	required Info    info       = 2;
	optional Sender  sender     = 3;
	required string  sendername = 4;


	//
	// Message Data (only one of these structures per message
	//
	optional Hello                  hello     	              = 101;  // Hello message
	optional EndPointVector         endPoints                 = 102;  // Vector of endPoints
	optional Command                command	              	  = 103;  // Command message
	optional CommandResponse        command_response 		  = 104;  // Command response message
	optional WorkerTask	            worker_task	          	  = 105;  // Work task message
	optional WorkerTaskConfirmation worker_task_confirmation  = 106;  // Work task confirmation message
}


