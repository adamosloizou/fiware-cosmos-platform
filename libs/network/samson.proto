package ss.network;


// ////////////////////////////////////////////////////////////////////////////
//
// Message from the controller workers
//

message File
{
	required string name=1;		// Name of file
	required uint64 size=2;		// Size of the file in bytes
	required uint64 kvs=3;		// Number of kvs
}

message QueueFiles
{
	required string name = 1;	// Name of the queue
	repeated File file = 2;		// Name of the files for this queue
}

message FileList
{
	repeated File file = 1;		// Name of the file
}

message WorkerTask
{
	required int64 task_id		= 1;	// Id of the top level ( controller ) task	
	required string operation 	= 2;	// Name of the operation to run

	repeated QueueFiles input	= 3;    // Input files ( for each queue )
	repeated string output		= 4;    // output queues
}

// ////////////////////////////////////////////////////////////////////////////
//
// Confirmation from workers to the controller
//

message WorkerTaskConfirmation
{
	required int64 task_id  = 1;	       // Id of the opt level (controller ) task
	required bool  error    = 2;  	       // Error in the operation
	optional string error_message = 3;     // Message to debug the error
}

// ////////////////////////////////////////////////////////////////////////////
//
// Command from Delilah to controller
//

message Command
{
	required string  command   = 1;          // optimal string to send a txt command
	required uint64  sender_id = 2;          // Id of the packet sender ( delilah )
}

message Help
{
	required bool queues = 1;
	required bool datas = 2;
	required bool operations = 3;
}

message KVFormat
{
	required string keyFormat=1;
	required string ValueFormat=2;		
}

message KVInfo
{
	required uint64 size=1;
	required uint64 kvs=2;
}

message Queue
{
	required string name = 1;
	required KVFormat format = 2;
	required KVInfo info = 3;

}

message Operation
{
	required string name = 1;		// Name of the operation
	required string help = 2;		// Some help for this opertion
	repeated KVFormat input = 3;		// KV types for inputs
	repeated KVFormat output = 4;		// KV types for output
}

message Data
{
	required string name = 1;	// Name of this data type
	required string help = 2;	// Some string showing help for this data type
}

message HelpResponse
{
	required bool queues = 1;
	required bool datas = 2;
	required bool operations = 3;

	repeated Queue queue = 5;
	repeated Data data = 6;
	repeated Operation operation = 7;
}


// ////////////////////////////////////////////////////////////////////////////
//
// Response message from Controller to Delilah
//
message CommandResponse
{
	required string command	     = 1;   // Copy of the original command
	required string  response    = 2;   // Answer for the command
	required int32   sender_id   = 3;   // Id of the packet sender ( delilah )

	required bool error       = 4;   // Flag to indicat if there was an error
	required bool finish      = 5;   // Flag to indicate if the command is finished ( with or without error)


}



// ////////////////////////////////////////////////////////////////////////////
//
// Message to exchange information between workers
//
message WorkerDataExchange
{
	required int64   task_id   = 1;  // Identifier of the controller task
	required string  queue     = 2;  // Name of the queue where we store information
}


// ////////////////////////////////////////////////////////////////////////////
//
// Loading txt data from Delilah ( Controller & Workers )
//

message LoadTxtData
{
	required uint64 id=1;	// Id of the operation
	
}

message LoadTxtDataResponse
{
	required uint64 id=1;			// Id of the operation ( specified in the LoadTxtData )
	required bool error = 2;		// Flag to indicate if there was an error
	required string fileName=3;		// File name of the uploaded file
}

message LoadTxtDataConfirmation
{
	required uint64 id=1;			// Id of the "load data" operation	
	required string queue=2;		// Name of the queue to upload
	repeated FileList worker=3;		// List of uploaded files per worker
	
}

message LoadTxtDataConfirmationResponse
{
	required uint64 id=1;			// Id of the "load data" operation	
	required bool error=2;			// Flag to indicarte if there was an error				   	
	required string message=3;		// String message to show to the user
}

// ////////////////////////////////////////////////////////////////////////////
//
// General message
//
message Message
{
	enum Sender
	{
		Worker     = 0x57;
		Controller = 0x43;
		Delilah    = 0x44;
	};



	// ////////////////////////////////////////////////////////////////////////////
	//
	// Message Data (only one of these structures per message
	//
	optional Command                command                   = 103;  // Command message
	optional CommandResponse        command_response          = 104;  // Command response message
	optional WorkerTask             worker_task	              = 105;  // Work task message
	optional WorkerTaskConfirmation worker_task_confirmation  = 106;  // Work task confirmation message
	optional WorkerDataExchange     data                      = 107;  // Exchange of data packets between nodes     
	optional Help                   help                      = 108;  // Ask for help ( queues / datas / operations )
	optional HelpResponse           help_response             = 109;  // Response for the ask help message   			     
}
