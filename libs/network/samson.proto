package ss.network;

message EndPoint
{
	required string  ip   = 1;   // Server
	required sint32  port = 2;   // Port
	required sint32  type = 3;   // Port
	optional string  name = 4;   // Name for debugging
}



message EndPointVector
{
	repeated EndPoint item=1;
}



message Hello
{
	required string  name    = 1;  // The name of the endpoint
	required sint32  workers = 2;  // Number of workers connected to endpoint
	required sint32  type    = 3;  // enum Endpoint::Type
	optional string  ip      = 4;  // IP address
	optional sint32  port    = 5;  // Listen port

}


// Message from dalilah to controller

message DalilahCommand
{
	required int64 task_id = 1;	// Local id of this task by dalilah
	required string command = 2;	// Command to perform by the platform

}

// Answer form the controller to dalilah

message DalilahCommandResponse
{
	required int64 task_id = 1;	// Local id of this task by dalilah
	required string answer = 2;	// TXT answer of the command
	required bool error=3;	       	// Flag indicating if there was an error in the command	
}


// Message from the controller workers

message WorkerTask
{
	required string command = 1;	// Command to perform by the worker
	required int64 task_id = 2;	// Id of the top level ( controller ) task
}

// Confirmation from workers to the controller

message WorkerTaskConfirmation
{
	required int64 task_id = 1;	// Id of the opt level (controller ) task
	required bool error=2;	  	// Error in the operation

	// Additional information ( like queue size changes, etc... )
}

message Message
{
	required int32   code               = 1;            // message code
	required int32   msgType            = 2;            // message type (Req, Ack, Nak)
	required string  sender             = 3;            // name of sender
	// required string description    = 4;            // Debug description

	optional EndPointVector endPoints = 300;          // Vector of endPoints ( network interface )
	optional Hello          hello     = 301;          // Hello message

	optional WorkerTask	task	  = 302;	  // Work task message
	optional WorkerTaskConfirmation task_confirmation = 303;  // Work rask confirmation message

	optional string command           = 200;          // optimal string to send a txt command
	optional string answer            = 201;          // optinal string to receive a txt answer
	optional bool   error             = 202;          // Flag to indicat if there was an error
	optional int32  sender_id         = 203;          // Id of the packet sender ( delilah )



}

