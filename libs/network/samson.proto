package ss.network;

// ////////////////////////////////////////////////////////////////////////////
//
// Common 
//
message KVInfo
{
	required uint64 size=1;		// Size in bytes
	required uint64 kvs=2;		// Number of kvs
}

message File
{
	required string name=1;		// Name of file
	required int32 worker=2;	// Worker where this file has been created
	required KVInfo info=3;		// Information about this file
}

message QueueFile
{
	required string queue=1;	// Name of the queue
	required File file=2;		// File with all the info
}

message KVFormat
{
	required string keyFormat=1;	// Format for the key
	required string ValueFormat=2;	// Format for the value
}

message Queue
{
	required string name = 1;
	required KVFormat format = 2;
	optional KVInfo info = 3;
}

message Operation
{
	required string name = 1;		// Name of the operation
	required string help = 2;		// Some help for this opertion
	repeated KVFormat input = 3;		// KV types for inputs
	repeated KVFormat output = 4;		// KV types for output
}

message Data
{
	required string name = 1;	// Name of this data type
	required string help = 2;	// Some string showing help for this data type
}

// ////////////////////////////////////////////////////////////////////////////
//
// Status message request ans answer to interact between delilah and controller/workers
//

message StatusRequest
{
	required string command = 1;	// Some string to clarify the status request
}

message StatusResponse
{
	required string title = 1;	// Title of the status ( Controller / Wroker X / Delailah )
	required string response = 2;	// content of the status to visualize on screen
}

// ////////////////////////////////////////////////////////////////////////////
//
// Message with a task from the controller workers
//

message WorkerTask
{
	required int64 task_id		= 1;	// Id of the top level ( controller ) task	
	required string operation 	= 2;	// Name of the operation to run

	repeated QueueFile input	= 3;    // Input files ( all inputs for each queue )
	repeated Queue output		= 4;    // output queues
}

// ////////////////////////////////////////////////////////////////////////////
//
// Confirmation from workers to the controller
//

message WorkerTaskConfirmation
{
	required int64 task_id	      = 1;	// Id of the opt level (controller ) task
	required bool  error          = 2;      // Error in the operation
	optional string error_message = 3;      // Message to debug the error
	repeated QueueFile file       = 4;      // Files created with this operation
}

// ////////////////////////////////////////////////////////////////////////////
//
// Command from Delilah to controller
//

message Command
{
	required string  command   = 1;          // optimal string to send a txt command
	required uint64  sender_id = 2;          // Id of the packet sender ( delilah )
}

// ////////////////////////////////////////////////////////////////////////////
//
// Response message from Controller to Delilah
//
message CommandResponse
{
	required string command	     = 1;   // Copy of the original command
	required string  response    = 2;   // Answer for the command
	required int32   sender_id   = 3;   // Id of the packet sender ( delilah )


	required bool error       = 4;   // Flag to indicat if there was an error
	required bool finish      = 5;   // Flag to indicate if the command is finished ( with or without error)

}

// ////////////////////////////////////////////////////////////////////////////
//
// Help from Delilah to controller
//

message Help
{
	required bool queues = 1;
	required bool data_queues = 2;
	required bool datas = 3;
	required bool operations = 4;

	// Filters for the operations
	optional string name = 5;	// Optinal parameter to specify the name of the queue/data/operation I would like to be informed
}

// ////////////////////////////////////////////////////////////////////////////
//
// Help response from Controller to Delilah
//

message HelpResponse
{
	required Help help=1;	// Original message to know what request is refering to

	// Information
	repeated Queue queue = 2;
	repeated Queue data_queue = 3;
	repeated Data data = 4;
	repeated Operation operation = 5;
}



// ////////////////////////////////////////////////////////////////////////////
//
// Message to exchange information between workers
//
message WorkerDataExchange
{
	required int64 task_id  = 1;  // Identifier of the controller task
	required Queue queue     = 2;  // Name of the queue where we store information
}

// ////////////////////////////////////////////////////////////////////////////
//
// Message to notify that no more data will be generated for this task
//

message WorkerDataExchangeClose
{
	required int64   task_id   = 1;  // Identifier of the controller task
}

// ////////////////////////////////////////////////////////////////////////////
//
// Message to Load data from Delilah to a Worker and response
//

message LoadData
{
	required uint64 process_id=1;	// Id of the load process
	required uint64 file_id=2;	// Id of the file ( multiple files for the same process)		
}

message LoadDataResponse
{
	required uint64 process_id=1;		// Id of the operation ( specified in the LoadData )
	required uint64 file_id=2;		// Id of the file we are confirming   
	required bool error = 3;		// Flag to indicate if there was an error
	optional string error_message = 4;	// Possible error message ( if error )
	required File file = 5;			// Created file
}

message LoadDataConfirmation
{
	required uint64 process_id=1;		// Id of the "load data" operation	
	required string queue=2;		// Name of the queue to upload
	repeated File   file=3;			// List of uploaded files
}

message LoadDataConfirmationResponse
{
	required uint64 process_id=1;			// Id of the "load data" operation	
	required bool error=2;				// Flag to indicarte if there was an error				   	
	required string error_message=3;		// String message to show to the user
}

// ////////////////////////////////////////////////////////////////////////////
//
// General message
//
message Message
{
	enum Sender
	{
		Worker     = 0x57;
		Controller = 0x43;
		Delilah    = 0x44;
	};



	// ////////////////////////////////////////////////////////////////////////////
	//
	// Message Data (only one of these structures per message
	//
	optional Command                command                   = 103;  // Command message
	optional CommandResponse        command_response          = 104;  // Command response message

	optional WorkerTask             worker_task	          = 105;  // Work task message
	optional WorkerTaskConfirmation worker_task_confirmation  = 106;  // Work task confirmation message

	optional WorkerDataExchange  	data                      = 107;  // Exchange of data packets between nodes     
	optional WorkerDataExchangeClose data_close		  = 108;  // Message to finish data transmission between workers

	optional Help                   help                      = 109;  // Ask for help ( queues / datas / operations )
	optional HelpResponse           help_response             = 110;  // Response for the ask help message   			     

	optional LoadData		load_data		  = 111;  // Load data ( Delilah to Worker )
	optional LoadDataResponse	load_data_response	  = 112;  // Load data ( Worker to Delilah )

	optional LoadDataConfirmation   load_data_confirmation	  = 113;  // Confirmation of a load data process ( Delilah to Controller)
	optional LoadDataConfirmationResponse load_data_confirmation_response = 114; 	  // Reponse of the previous message

	optional StatusRequest status_request = 115; 				      // request for status ( debuggin )
	optional StatusResponse status_response = 116;				      // response of a status request
	
}
