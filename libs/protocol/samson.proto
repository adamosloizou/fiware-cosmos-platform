package ss.protocol;

message Message
{
	required int32 code = 1;
	required string description=2;

	optional string queue=100;		// Name of the queue to send data
	optional string keyFormat=101;	   	// Format of the key
	optional string valueFormat=102;	// Format of the value
	optional uint64 numKVs=103;		// Number of KVs

	optional string command=200;		// optimal string to send a message to the platform
	optional string answer=201;		// optinal string to receive a message from the platform
	optional bool error=202;		// Flag to indicat if there was an error
}

message Format
{
	required string	key=1;			// Format for the key ( this is only for double check )
	required string	value=2;		// Format for the value ( this is only for double check )
}

message KVSetHeader
{
        required int64 num_kvs=1;               // Number of kvs in this set
        required int64 size=2;                  // Size of this KVSet not including this header ( payload size )
        required Format format=3;               // Format for each key-value pair
	required int32 style=4;			// Serialization style (0 default )
	required int32 magic_number=100;	// Magic number format validation

	optional bool txtformat=101;		// To be removed
	optional bool hashFormat=102;		// To be removed	  
}



message Set
{
	required int64	id=1;			// Identifier of the set
	required int64  task_id=2;		// Identifier of the task that created this set
	required int64	size=3;			// Size of this KVSet
	required int64  num_kvs=4;		// Num key-values in this set
	optional Format format=5;		// Format of the Key-value
}


message SetVector
{
	required string queue_name=1;		// Queue to add/remove
	required int32 hash=2;			// Hash code inside this queue   	 
	repeated Set set=3;				// Vector of sets   	
}

message Queue
{
	required string name=1;			// Name of the queue
	optional Format format=2;		// Format of the Key-value
}

message KVManagerOperation
{
	required uint64 task=1;			// Code of the task running this operation (0 is top user-driven command)
	optional uint64 parentTask=2;		// Code of the parent task (only necessary in the begin logs)
	required uint32 task_code=3;		// Tasks begin / action / end

	repeated Queue add_queue=4;		// Add queue elements
	repeated Queue remove_queue=5;		// Remove queue

	repeated SetVector add_sets=100;	// Information about sets added or removed to the queue
	repeated SetVector remove_sets=101;		
	
	repeated uint64 NewSet=200;		// List of sets created by a particular task
	repeated uint64 SavedSet=201;		// List of sets saved to disk
}


message cdr
{
	required uint64 a = 1;
	required uint64 b = 2;
}

message String
{
	required string txt = 1;
}

message Void
{
}
