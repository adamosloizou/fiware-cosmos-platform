// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: samson.proto

#ifndef PROTOBUF_samson_2eproto__INCLUDED
#define PROTOBUF_samson_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace samson {
namespace network {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_samson_2eproto();
void protobuf_AssignDesc_samson_2eproto();
void protobuf_ShutdownFile_samson_2eproto();

class EnvironmentVariable;
class Environment;
class KVInfo;
class File;
class Queue;
class FullQueue;
class QueueFile;
class KVFormat;
class Operation;
class Data;
class JobItem;
class AutomaticOperation;
class Job;
class Error;
class Trace;
class ControllerTask;
class ControllerTaskManagerStatus;
class ControllerStatus;
class WorkerStatus;
class ActiveTask;
class QueueList;
class DataList;
class OperationList;
class JobList;
class AutomaticOperationList;
class SamsonStatus;
class WorkerTask;
class WorkerTaskKill;
class WorkerTaskRemove;
class WorkerTaskConfirmation;
class Command;
class CommandResponse;
class WorkerDataExchange;
class WorkerDataExchangeClose;
class UploadDataInit;
class UploadDataInitResponse;
class UploadDataFile;
class UploadDataFileResponse;
class UploadDataFinish;
class UploadDataFinishResponse;
class DownloadDataInit;
class DownloadDataInitResponse;
class DownloadDataFile;
class DownloadDataFileResponse;
class DownloadDataFinish;
class DownloadDataFinishResponse;
class MessageProcessPlatform;
class MessagePlatformProcess;
class Message;

enum ControllerTask_ControllerTaskState {
  ControllerTask_ControllerTaskState_ControllerTaskInit = 1,
  ControllerTask_ControllerTaskState_ControllerTaskRunning = 4,
  ControllerTask_ControllerTaskState_ControllerTaskFinish = 2,
  ControllerTask_ControllerTaskState_ControllerTaskCompleted = 3
};
bool ControllerTask_ControllerTaskState_IsValid(int value);
const ControllerTask_ControllerTaskState ControllerTask_ControllerTaskState_ControllerTaskState_MIN = ControllerTask_ControllerTaskState_ControllerTaskInit;
const ControllerTask_ControllerTaskState ControllerTask_ControllerTaskState_ControllerTaskState_MAX = ControllerTask_ControllerTaskState_ControllerTaskRunning;
const int ControllerTask_ControllerTaskState_ControllerTaskState_ARRAYSIZE = ControllerTask_ControllerTaskState_ControllerTaskState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ControllerTask_ControllerTaskState_descriptor();
inline const ::std::string& ControllerTask_ControllerTaskState_Name(ControllerTask_ControllerTaskState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ControllerTask_ControllerTaskState_descriptor(), value);
}
inline bool ControllerTask_ControllerTaskState_Parse(
    const ::std::string& name, ControllerTask_ControllerTaskState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ControllerTask_ControllerTaskState>(
    ControllerTask_ControllerTaskState_descriptor(), name, value);
}
enum WorkerTaskConfirmation_WorkerTaskConfirmationType {
  WorkerTaskConfirmation_WorkerTaskConfirmationType_update = 1,
  WorkerTaskConfirmation_WorkerTaskConfirmationType_finish = 2,
  WorkerTaskConfirmation_WorkerTaskConfirmationType_complete = 3,
  WorkerTaskConfirmation_WorkerTaskConfirmationType_error = 4
};
bool WorkerTaskConfirmation_WorkerTaskConfirmationType_IsValid(int value);
const WorkerTaskConfirmation_WorkerTaskConfirmationType WorkerTaskConfirmation_WorkerTaskConfirmationType_WorkerTaskConfirmationType_MIN = WorkerTaskConfirmation_WorkerTaskConfirmationType_update;
const WorkerTaskConfirmation_WorkerTaskConfirmationType WorkerTaskConfirmation_WorkerTaskConfirmationType_WorkerTaskConfirmationType_MAX = WorkerTaskConfirmation_WorkerTaskConfirmationType_error;
const int WorkerTaskConfirmation_WorkerTaskConfirmationType_WorkerTaskConfirmationType_ARRAYSIZE = WorkerTaskConfirmation_WorkerTaskConfirmationType_WorkerTaskConfirmationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* WorkerTaskConfirmation_WorkerTaskConfirmationType_descriptor();
inline const ::std::string& WorkerTaskConfirmation_WorkerTaskConfirmationType_Name(WorkerTaskConfirmation_WorkerTaskConfirmationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    WorkerTaskConfirmation_WorkerTaskConfirmationType_descriptor(), value);
}
inline bool WorkerTaskConfirmation_WorkerTaskConfirmationType_Parse(
    const ::std::string& name, WorkerTaskConfirmation_WorkerTaskConfirmationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WorkerTaskConfirmation_WorkerTaskConfirmationType>(
    WorkerTaskConfirmation_WorkerTaskConfirmationType_descriptor(), name, value);
}
enum MessageProcessPlatform_Code {
  MessageProcessPlatform_Code_code_begin = 1,
  MessageProcessPlatform_Code_code_end = 2,
  MessageProcessPlatform_Code_code_operation = 3,
  MessageProcessPlatform_Code_code_trace = 4,
  MessageProcessPlatform_Code_code_user_error = 5,
  MessageProcessPlatform_Code_code_progress = 6
};
bool MessageProcessPlatform_Code_IsValid(int value);
const MessageProcessPlatform_Code MessageProcessPlatform_Code_Code_MIN = MessageProcessPlatform_Code_code_begin;
const MessageProcessPlatform_Code MessageProcessPlatform_Code_Code_MAX = MessageProcessPlatform_Code_code_progress;
const int MessageProcessPlatform_Code_Code_ARRAYSIZE = MessageProcessPlatform_Code_Code_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageProcessPlatform_Code_descriptor();
inline const ::std::string& MessageProcessPlatform_Code_Name(MessageProcessPlatform_Code value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageProcessPlatform_Code_descriptor(), value);
}
inline bool MessageProcessPlatform_Code_Parse(
    const ::std::string& name, MessageProcessPlatform_Code* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageProcessPlatform_Code>(
    MessageProcessPlatform_Code_descriptor(), name, value);
}
enum MessagePlatformProcess_Code {
  MessagePlatformProcess_Code_code_ok = 1,
  MessagePlatformProcess_Code_code_kill = 2
};
bool MessagePlatformProcess_Code_IsValid(int value);
const MessagePlatformProcess_Code MessagePlatformProcess_Code_Code_MIN = MessagePlatformProcess_Code_code_ok;
const MessagePlatformProcess_Code MessagePlatformProcess_Code_Code_MAX = MessagePlatformProcess_Code_code_kill;
const int MessagePlatformProcess_Code_Code_ARRAYSIZE = MessagePlatformProcess_Code_Code_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessagePlatformProcess_Code_descriptor();
inline const ::std::string& MessagePlatformProcess_Code_Name(MessagePlatformProcess_Code value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessagePlatformProcess_Code_descriptor(), value);
}
inline bool MessagePlatformProcess_Code_Parse(
    const ::std::string& name, MessagePlatformProcess_Code* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessagePlatformProcess_Code>(
    MessagePlatformProcess_Code_descriptor(), name, value);
}
enum Message_Sender {
  Message_Sender_Worker = 87,
  Message_Sender_Controller = 67,
  Message_Sender_Delilah = 68
};
bool Message_Sender_IsValid(int value);
const Message_Sender Message_Sender_Sender_MIN = Message_Sender_Controller;
const Message_Sender Message_Sender_Sender_MAX = Message_Sender_Worker;
const int Message_Sender_Sender_ARRAYSIZE = Message_Sender_Sender_MAX + 1;

const ::google::protobuf::EnumDescriptor* Message_Sender_descriptor();
inline const ::std::string& Message_Sender_Name(Message_Sender value) {
  return ::google::protobuf::internal::NameOfEnum(
    Message_Sender_descriptor(), value);
}
inline bool Message_Sender_Parse(
    const ::std::string& name, Message_Sender* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message_Sender>(
    Message_Sender_descriptor(), name, value);
}
// ===================================================================

class EnvironmentVariable : public ::google::protobuf::Message {
 public:
  EnvironmentVariable();
  virtual ~EnvironmentVariable();
  
  EnvironmentVariable(const EnvironmentVariable& from);
  
  inline EnvironmentVariable& operator=(const EnvironmentVariable& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnvironmentVariable& default_instance();
  
  void Swap(EnvironmentVariable* other);
  
  // implements Message ----------------------------------------------
  
  EnvironmentVariable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnvironmentVariable& from);
  void MergeFrom(const EnvironmentVariable& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  
  // @@protoc_insertion_point(class_scope:samson.network.EnvironmentVariable)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::std::string* value_;
  static const ::std::string _default_value_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static EnvironmentVariable* default_instance_;
};
// -------------------------------------------------------------------

class Environment : public ::google::protobuf::Message {
 public:
  Environment();
  virtual ~Environment();
  
  Environment(const Environment& from);
  
  inline Environment& operator=(const Environment& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Environment& default_instance();
  
  void Swap(Environment* other);
  
  // implements Message ----------------------------------------------
  
  Environment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Environment& from);
  void MergeFrom(const Environment& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .samson.network.EnvironmentVariable variable = 1;
  inline int variable_size() const;
  inline void clear_variable();
  static const int kVariableFieldNumber = 1;
  inline const ::samson::network::EnvironmentVariable& variable(int index) const;
  inline ::samson::network::EnvironmentVariable* mutable_variable(int index);
  inline ::samson::network::EnvironmentVariable* add_variable();
  inline const ::google::protobuf::RepeatedPtrField< ::samson::network::EnvironmentVariable >&
      variable() const;
  inline ::google::protobuf::RepeatedPtrField< ::samson::network::EnvironmentVariable >*
      mutable_variable();
  
  // @@protoc_insertion_point(class_scope:samson.network.Environment)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::samson::network::EnvironmentVariable > variable_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Environment* default_instance_;
};
// -------------------------------------------------------------------

class KVInfo : public ::google::protobuf::Message {
 public:
  KVInfo();
  virtual ~KVInfo();
  
  KVInfo(const KVInfo& from);
  
  inline KVInfo& operator=(const KVInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const KVInfo& default_instance();
  
  void Swap(KVInfo* other);
  
  // implements Message ----------------------------------------------
  
  KVInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KVInfo& from);
  void MergeFrom(const KVInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 size = 1;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 1;
  inline ::google::protobuf::uint64 size() const;
  inline void set_size(::google::protobuf::uint64 value);
  
  // required uint64 kvs = 2;
  inline bool has_kvs() const;
  inline void clear_kvs();
  static const int kKvsFieldNumber = 2;
  inline ::google::protobuf::uint64 kvs() const;
  inline void set_kvs(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:samson.network.KVInfo)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 size_;
  ::google::protobuf::uint64 kvs_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static KVInfo* default_instance_;
};
// -------------------------------------------------------------------

class File : public ::google::protobuf::Message {
 public:
  File();
  virtual ~File();
  
  File(const File& from);
  
  inline File& operator=(const File& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const File& default_instance();
  
  void Swap(File* other);
  
  // implements Message ----------------------------------------------
  
  File* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const File& from);
  void MergeFrom(const File& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // required int32 worker = 2;
  inline bool has_worker() const;
  inline void clear_worker();
  static const int kWorkerFieldNumber = 2;
  inline ::google::protobuf::int32 worker() const;
  inline void set_worker(::google::protobuf::int32 value);
  
  // optional .samson.network.KVInfo info = 3;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::samson::network::KVInfo& info() const;
  inline ::samson::network::KVInfo* mutable_info();
  
  // @@protoc_insertion_point(class_scope:samson.network.File)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::google::protobuf::int32 worker_;
  ::samson::network::KVInfo* info_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static File* default_instance_;
};
// -------------------------------------------------------------------

class Queue : public ::google::protobuf::Message {
 public:
  Queue();
  virtual ~Queue();
  
  Queue(const Queue& from);
  
  inline Queue& operator=(const Queue& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Queue& default_instance();
  
  void Swap(Queue* other);
  
  // implements Message ----------------------------------------------
  
  Queue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Queue& from);
  void MergeFrom(const Queue& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // required .samson.network.KVFormat format = 2;
  inline bool has_format() const;
  inline void clear_format();
  static const int kFormatFieldNumber = 2;
  inline const ::samson::network::KVFormat& format() const;
  inline ::samson::network::KVFormat* mutable_format();
  
  // optional .samson.network.KVInfo info = 3;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::samson::network::KVInfo& info() const;
  inline ::samson::network::KVInfo* mutable_info();
  
  // @@protoc_insertion_point(class_scope:samson.network.Queue)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::samson::network::KVFormat* format_;
  ::samson::network::KVInfo* info_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Queue* default_instance_;
};
// -------------------------------------------------------------------

class FullQueue : public ::google::protobuf::Message {
 public:
  FullQueue();
  virtual ~FullQueue();
  
  FullQueue(const FullQueue& from);
  
  inline FullQueue& operator=(const FullQueue& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FullQueue& default_instance();
  
  void Swap(FullQueue* other);
  
  // implements Message ----------------------------------------------
  
  FullQueue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FullQueue& from);
  void MergeFrom(const FullQueue& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .samson.network.Queue queue = 1;
  inline bool has_queue() const;
  inline void clear_queue();
  static const int kQueueFieldNumber = 1;
  inline const ::samson::network::Queue& queue() const;
  inline ::samson::network::Queue* mutable_queue();
  
  // repeated .samson.network.File file = 2;
  inline int file_size() const;
  inline void clear_file();
  static const int kFileFieldNumber = 2;
  inline const ::samson::network::File& file(int index) const;
  inline ::samson::network::File* mutable_file(int index);
  inline ::samson::network::File* add_file();
  inline const ::google::protobuf::RepeatedPtrField< ::samson::network::File >&
      file() const;
  inline ::google::protobuf::RepeatedPtrField< ::samson::network::File >*
      mutable_file();
  
  // @@protoc_insertion_point(class_scope:samson.network.FullQueue)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::samson::network::Queue* queue_;
  ::google::protobuf::RepeatedPtrField< ::samson::network::File > file_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static FullQueue* default_instance_;
};
// -------------------------------------------------------------------

class QueueFile : public ::google::protobuf::Message {
 public:
  QueueFile();
  virtual ~QueueFile();
  
  QueueFile(const QueueFile& from);
  
  inline QueueFile& operator=(const QueueFile& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueueFile& default_instance();
  
  void Swap(QueueFile* other);
  
  // implements Message ----------------------------------------------
  
  QueueFile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueueFile& from);
  void MergeFrom(const QueueFile& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string queue = 1;
  inline bool has_queue() const;
  inline void clear_queue();
  static const int kQueueFieldNumber = 1;
  inline const ::std::string& queue() const;
  inline void set_queue(const ::std::string& value);
  inline void set_queue(const char* value);
  inline void set_queue(const char* value, size_t size);
  inline ::std::string* mutable_queue();
  
  // required .samson.network.File file = 2;
  inline bool has_file() const;
  inline void clear_file();
  static const int kFileFieldNumber = 2;
  inline const ::samson::network::File& file() const;
  inline ::samson::network::File* mutable_file();
  
  // @@protoc_insertion_point(class_scope:samson.network.QueueFile)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* queue_;
  static const ::std::string _default_queue_;
  ::samson::network::File* file_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static QueueFile* default_instance_;
};
// -------------------------------------------------------------------

class KVFormat : public ::google::protobuf::Message {
 public:
  KVFormat();
  virtual ~KVFormat();
  
  KVFormat(const KVFormat& from);
  
  inline KVFormat& operator=(const KVFormat& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const KVFormat& default_instance();
  
  void Swap(KVFormat* other);
  
  // implements Message ----------------------------------------------
  
  KVFormat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KVFormat& from);
  void MergeFrom(const KVFormat& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string keyFormat = 1;
  inline bool has_keyformat() const;
  inline void clear_keyformat();
  static const int kKeyFormatFieldNumber = 1;
  inline const ::std::string& keyformat() const;
  inline void set_keyformat(const ::std::string& value);
  inline void set_keyformat(const char* value);
  inline void set_keyformat(const char* value, size_t size);
  inline ::std::string* mutable_keyformat();
  
  // required string ValueFormat = 2;
  inline bool has_valueformat() const;
  inline void clear_valueformat();
  static const int kValueFormatFieldNumber = 2;
  inline const ::std::string& valueformat() const;
  inline void set_valueformat(const ::std::string& value);
  inline void set_valueformat(const char* value);
  inline void set_valueformat(const char* value, size_t size);
  inline ::std::string* mutable_valueformat();
  
  // @@protoc_insertion_point(class_scope:samson.network.KVFormat)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* keyformat_;
  static const ::std::string _default_keyformat_;
  ::std::string* valueformat_;
  static const ::std::string _default_valueformat_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static KVFormat* default_instance_;
};
// -------------------------------------------------------------------

class Operation : public ::google::protobuf::Message {
 public:
  Operation();
  virtual ~Operation();
  
  Operation(const Operation& from);
  
  inline Operation& operator=(const Operation& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Operation& default_instance();
  
  void Swap(Operation* other);
  
  // implements Message ----------------------------------------------
  
  Operation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Operation& from);
  void MergeFrom(const Operation& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // required string help = 2;
  inline bool has_help() const;
  inline void clear_help();
  static const int kHelpFieldNumber = 2;
  inline const ::std::string& help() const;
  inline void set_help(const ::std::string& value);
  inline void set_help(const char* value);
  inline void set_help(const char* value, size_t size);
  inline ::std::string* mutable_help();
  
  // required string help_line = 3;
  inline bool has_help_line() const;
  inline void clear_help_line();
  static const int kHelpLineFieldNumber = 3;
  inline const ::std::string& help_line() const;
  inline void set_help_line(const ::std::string& value);
  inline void set_help_line(const char* value);
  inline void set_help_line(const char* value, size_t size);
  inline ::std::string* mutable_help_line();
  
  // repeated .samson.network.KVFormat input = 4;
  inline int input_size() const;
  inline void clear_input();
  static const int kInputFieldNumber = 4;
  inline const ::samson::network::KVFormat& input(int index) const;
  inline ::samson::network::KVFormat* mutable_input(int index);
  inline ::samson::network::KVFormat* add_input();
  inline const ::google::protobuf::RepeatedPtrField< ::samson::network::KVFormat >&
      input() const;
  inline ::google::protobuf::RepeatedPtrField< ::samson::network::KVFormat >*
      mutable_input();
  
  // repeated .samson.network.KVFormat output = 5;
  inline int output_size() const;
  inline void clear_output();
  static const int kOutputFieldNumber = 5;
  inline const ::samson::network::KVFormat& output(int index) const;
  inline ::samson::network::KVFormat* mutable_output(int index);
  inline ::samson::network::KVFormat* add_output();
  inline const ::google::protobuf::RepeatedPtrField< ::samson::network::KVFormat >&
      output() const;
  inline ::google::protobuf::RepeatedPtrField< ::samson::network::KVFormat >*
      mutable_output();
  
  // @@protoc_insertion_point(class_scope:samson.network.Operation)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::std::string* help_;
  static const ::std::string _default_help_;
  ::std::string* help_line_;
  static const ::std::string _default_help_line_;
  ::google::protobuf::RepeatedPtrField< ::samson::network::KVFormat > input_;
  ::google::protobuf::RepeatedPtrField< ::samson::network::KVFormat > output_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Operation* default_instance_;
};
// -------------------------------------------------------------------

class Data : public ::google::protobuf::Message {
 public:
  Data();
  virtual ~Data();
  
  Data(const Data& from);
  
  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Data& default_instance();
  
  void Swap(Data* other);
  
  // implements Message ----------------------------------------------
  
  Data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Data& from);
  void MergeFrom(const Data& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // required string help = 2;
  inline bool has_help() const;
  inline void clear_help();
  static const int kHelpFieldNumber = 2;
  inline const ::std::string& help() const;
  inline void set_help(const ::std::string& value);
  inline void set_help(const char* value);
  inline void set_help(const char* value, size_t size);
  inline ::std::string* mutable_help();
  
  // @@protoc_insertion_point(class_scope:samson.network.Data)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::std::string* help_;
  static const ::std::string _default_help_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Data* default_instance_;
};
// -------------------------------------------------------------------

class JobItem : public ::google::protobuf::Message {
 public:
  JobItem();
  virtual ~JobItem();
  
  JobItem(const JobItem& from);
  
  inline JobItem& operator=(const JobItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const JobItem& default_instance();
  
  void Swap(JobItem* other);
  
  // implements Message ----------------------------------------------
  
  JobItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JobItem& from);
  void MergeFrom(const JobItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string command = 1;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 1;
  inline const ::std::string& command() const;
  inline void set_command(const ::std::string& value);
  inline void set_command(const char* value);
  inline void set_command(const char* value, size_t size);
  inline ::std::string* mutable_command();
  
  // required int32 line = 2;
  inline bool has_line() const;
  inline void clear_line();
  static const int kLineFieldNumber = 2;
  inline ::google::protobuf::int32 line() const;
  inline void set_line(::google::protobuf::int32 value);
  
  // required int32 num_lines = 3;
  inline bool has_num_lines() const;
  inline void clear_num_lines();
  static const int kNumLinesFieldNumber = 3;
  inline ::google::protobuf::int32 num_lines() const;
  inline void set_num_lines(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:samson.network.JobItem)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* command_;
  static const ::std::string _default_command_;
  ::google::protobuf::int32 line_;
  ::google::protobuf::int32 num_lines_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static JobItem* default_instance_;
};
// -------------------------------------------------------------------

class AutomaticOperation : public ::google::protobuf::Message {
 public:
  AutomaticOperation();
  virtual ~AutomaticOperation();
  
  AutomaticOperation(const AutomaticOperation& from);
  
  inline AutomaticOperation& operator=(const AutomaticOperation& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AutomaticOperation& default_instance();
  
  void Swap(AutomaticOperation* other);
  
  // implements Message ----------------------------------------------
  
  AutomaticOperation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AutomaticOperation& from);
  void MergeFrom(const AutomaticOperation& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);
  
  // required string command = 1;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 1;
  inline const ::std::string& command() const;
  inline void set_command(const ::std::string& value);
  inline void set_command(const char* value);
  inline void set_command(const char* value, size_t size);
  inline ::std::string* mutable_command();
  
  // required string thrigger = 2;
  inline bool has_thrigger() const;
  inline void clear_thrigger();
  static const int kThriggerFieldNumber = 2;
  inline const ::std::string& thrigger() const;
  inline void set_thrigger(const ::std::string& value);
  inline void set_thrigger(const char* value);
  inline void set_thrigger(const char* value, size_t size);
  inline ::std::string* mutable_thrigger();
  
  // @@protoc_insertion_point(class_scope:samson.network.AutomaticOperation)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 id_;
  ::std::string* command_;
  static const ::std::string _default_command_;
  ::std::string* thrigger_;
  static const ::std::string _default_thrigger_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static AutomaticOperation* default_instance_;
};
// -------------------------------------------------------------------

class Job : public ::google::protobuf::Message {
 public:
  Job();
  virtual ~Job();
  
  Job(const Job& from);
  
  inline Job& operator=(const Job& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Job& default_instance();
  
  void Swap(Job* other);
  
  // implements Message ----------------------------------------------
  
  Job* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Job& from);
  void MergeFrom(const Job& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);
  
  // required string status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline const ::std::string& status() const;
  inline void set_status(const ::std::string& value);
  inline void set_status(const char* value);
  inline void set_status(const char* value, size_t size);
  inline ::std::string* mutable_status();
  
  // required string main_command = 2;
  inline bool has_main_command() const;
  inline void clear_main_command();
  static const int kMainCommandFieldNumber = 2;
  inline const ::std::string& main_command() const;
  inline void set_main_command(const ::std::string& value);
  inline void set_main_command(const char* value);
  inline void set_main_command(const char* value, size_t size);
  inline ::std::string* mutable_main_command();
  
  // repeated .samson.network.JobItem item = 10;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 10;
  inline const ::samson::network::JobItem& item(int index) const;
  inline ::samson::network::JobItem* mutable_item(int index);
  inline ::samson::network::JobItem* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::samson::network::JobItem >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::samson::network::JobItem >*
      mutable_item();
  
  // @@protoc_insertion_point(class_scope:samson.network.Job)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 id_;
  ::std::string* status_;
  static const ::std::string _default_status_;
  ::std::string* main_command_;
  static const ::std::string _default_main_command_;
  ::google::protobuf::RepeatedPtrField< ::samson::network::JobItem > item_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Job* default_instance_;
};
// -------------------------------------------------------------------

class Error : public ::google::protobuf::Message {
 public:
  Error();
  virtual ~Error();
  
  Error(const Error& from);
  
  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Error& default_instance();
  
  void Swap(Error* other);
  
  // implements Message ----------------------------------------------
  
  Error* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  
  // @@protoc_insertion_point(class_scope:samson.network.Error)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* message_;
  static const ::std::string _default_message_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Error* default_instance_;
};
// -------------------------------------------------------------------

class Trace : public ::google::protobuf::Message {
 public:
  Trace();
  virtual ~Trace();
  
  Trace(const Trace& from);
  
  inline Trace& operator=(const Trace& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Trace& default_instance();
  
  void Swap(Trace* other);
  
  // implements Message ----------------------------------------------
  
  Trace* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Trace& from);
  void MergeFrom(const Trace& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string text = 1;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 1;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  
  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // required string file = 3;
  inline bool has_file() const;
  inline void clear_file();
  static const int kFileFieldNumber = 3;
  inline const ::std::string& file() const;
  inline void set_file(const ::std::string& value);
  inline void set_file(const char* value);
  inline void set_file(const char* value, size_t size);
  inline ::std::string* mutable_file();
  
  // required int32 lineNo = 4;
  inline bool has_lineno() const;
  inline void clear_lineno();
  static const int kLineNoFieldNumber = 4;
  inline ::google::protobuf::int32 lineno() const;
  inline void set_lineno(::google::protobuf::int32 value);
  
  // required string fName = 5;
  inline bool has_fname() const;
  inline void clear_fname();
  static const int kFNameFieldNumber = 5;
  inline const ::std::string& fname() const;
  inline void set_fname(const ::std::string& value);
  inline void set_fname(const char* value);
  inline void set_fname(const char* value, size_t size);
  inline ::std::string* mutable_fname();
  
  // required int32 tLev = 6;
  inline bool has_tlev() const;
  inline void clear_tlev();
  static const int kTLevFieldNumber = 6;
  inline ::google::protobuf::int32 tlev() const;
  inline void set_tlev(::google::protobuf::int32 value);
  
  // required string stre = 7;
  inline bool has_stre() const;
  inline void clear_stre();
  static const int kStreFieldNumber = 7;
  inline const ::std::string& stre() const;
  inline void set_stre(const ::std::string& value);
  inline void set_stre(const char* value);
  inline void set_stre(const char* value, size_t size);
  inline ::std::string* mutable_stre();
  
  // @@protoc_insertion_point(class_scope:samson.network.Trace)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* text_;
  static const ::std::string _default_text_;
  ::google::protobuf::int32 type_;
  ::std::string* file_;
  static const ::std::string _default_file_;
  ::google::protobuf::int32 lineno_;
  ::std::string* fname_;
  static const ::std::string _default_fname_;
  ::google::protobuf::int32 tlev_;
  ::std::string* stre_;
  static const ::std::string _default_stre_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Trace* default_instance_;
};
// -------------------------------------------------------------------

class ControllerTask : public ::google::protobuf::Message {
 public:
  ControllerTask();
  virtual ~ControllerTask();
  
  ControllerTask(const ControllerTask& from);
  
  inline ControllerTask& operator=(const ControllerTask& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ControllerTask& default_instance();
  
  void Swap(ControllerTask* other);
  
  // implements Message ----------------------------------------------
  
  ControllerTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ControllerTask& from);
  void MergeFrom(const ControllerTask& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef ControllerTask_ControllerTaskState ControllerTaskState;
  static const ControllerTaskState ControllerTaskInit = ControllerTask_ControllerTaskState_ControllerTaskInit;
  static const ControllerTaskState ControllerTaskRunning = ControllerTask_ControllerTaskState_ControllerTaskRunning;
  static const ControllerTaskState ControllerTaskFinish = ControllerTask_ControllerTaskState_ControllerTaskFinish;
  static const ControllerTaskState ControllerTaskCompleted = ControllerTask_ControllerTaskState_ControllerTaskCompleted;
  static inline bool ControllerTaskState_IsValid(int value) {
    return ControllerTask_ControllerTaskState_IsValid(value);
  }
  static const ControllerTaskState ControllerTaskState_MIN =
    ControllerTask_ControllerTaskState_ControllerTaskState_MIN;
  static const ControllerTaskState ControllerTaskState_MAX =
    ControllerTask_ControllerTaskState_ControllerTaskState_MAX;
  static const int ControllerTaskState_ARRAYSIZE =
    ControllerTask_ControllerTaskState_ControllerTaskState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ControllerTaskState_descriptor() {
    return ControllerTask_ControllerTaskState_descriptor();
  }
  static inline const ::std::string& ControllerTaskState_Name(ControllerTaskState value) {
    return ControllerTask_ControllerTaskState_Name(value);
  }
  static inline bool ControllerTaskState_Parse(const ::std::string& name,
      ControllerTaskState* value) {
    return ControllerTask_ControllerTaskState_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .samson.network.ControllerTask.ControllerTaskState state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ::samson::network::ControllerTask_ControllerTaskState state() const;
  inline void set_state(::samson::network::ControllerTask_ControllerTaskState value);
  
  // required int64 job_id = 2;
  inline bool has_job_id() const;
  inline void clear_job_id();
  static const int kJobIdFieldNumber = 2;
  inline ::google::protobuf::int64 job_id() const;
  inline void set_job_id(::google::protobuf::int64 value);
  
  // required int64 task_id = 3;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 3;
  inline ::google::protobuf::int64 task_id() const;
  inline void set_task_id(::google::protobuf::int64 value);
  
  // optional .samson.network.Error error = 10;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 10;
  inline const ::samson::network::Error& error() const;
  inline ::samson::network::Error* mutable_error();
  
  // optional .samson.network.KVInfo total_info = 4;
  inline bool has_total_info() const;
  inline void clear_total_info();
  static const int kTotalInfoFieldNumber = 4;
  inline const ::samson::network::KVInfo& total_info() const;
  inline ::samson::network::KVInfo* mutable_total_info();
  
  // optional .samson.network.KVInfo running_info = 5;
  inline bool has_running_info() const;
  inline void clear_running_info();
  static const int kRunningInfoFieldNumber = 5;
  inline const ::samson::network::KVInfo& running_info() const;
  inline ::samson::network::KVInfo* mutable_running_info();
  
  // optional .samson.network.KVInfo processed_info = 6;
  inline bool has_processed_info() const;
  inline void clear_processed_info();
  static const int kProcessedInfoFieldNumber = 6;
  inline const ::samson::network::KVInfo& processed_info() const;
  inline ::samson::network::KVInfo* mutable_processed_info();
  
  // @@protoc_insertion_point(class_scope:samson.network.ControllerTask)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int state_;
  ::google::protobuf::int64 job_id_;
  ::google::protobuf::int64 task_id_;
  ::samson::network::Error* error_;
  ::samson::network::KVInfo* total_info_;
  ::samson::network::KVInfo* running_info_;
  ::samson::network::KVInfo* processed_info_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ControllerTask* default_instance_;
};
// -------------------------------------------------------------------

class ControllerTaskManagerStatus : public ::google::protobuf::Message {
 public:
  ControllerTaskManagerStatus();
  virtual ~ControllerTaskManagerStatus();
  
  ControllerTaskManagerStatus(const ControllerTaskManagerStatus& from);
  
  inline ControllerTaskManagerStatus& operator=(const ControllerTaskManagerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ControllerTaskManagerStatus& default_instance();
  
  void Swap(ControllerTaskManagerStatus* other);
  
  // implements Message ----------------------------------------------
  
  ControllerTaskManagerStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ControllerTaskManagerStatus& from);
  void MergeFrom(const ControllerTaskManagerStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .samson.network.ControllerTask task = 1;
  inline int task_size() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 1;
  inline const ::samson::network::ControllerTask& task(int index) const;
  inline ::samson::network::ControllerTask* mutable_task(int index);
  inline ::samson::network::ControllerTask* add_task();
  inline const ::google::protobuf::RepeatedPtrField< ::samson::network::ControllerTask >&
      task() const;
  inline ::google::protobuf::RepeatedPtrField< ::samson::network::ControllerTask >*
      mutable_task();
  
  // @@protoc_insertion_point(class_scope:samson.network.ControllerTaskManagerStatus)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::samson::network::ControllerTask > task_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ControllerTaskManagerStatus* default_instance_;
};
// -------------------------------------------------------------------

class ControllerStatus : public ::google::protobuf::Message {
 public:
  ControllerStatus();
  virtual ~ControllerStatus();
  
  ControllerStatus(const ControllerStatus& from);
  
  inline ControllerStatus& operator=(const ControllerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ControllerStatus& default_instance();
  
  void Swap(ControllerStatus* other);
  
  // implements Message ----------------------------------------------
  
  ControllerStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ControllerStatus& from);
  void MergeFrom(const ControllerStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 up_time = 8;
  inline bool has_up_time() const;
  inline void clear_up_time();
  static const int kUpTimeFieldNumber = 8;
  inline ::google::protobuf::uint64 up_time() const;
  inline void set_up_time(::google::protobuf::uint64 value);
  
  // optional string job_manager_status = 1;
  inline bool has_job_manager_status() const;
  inline void clear_job_manager_status();
  static const int kJobManagerStatusFieldNumber = 1;
  inline const ::std::string& job_manager_status() const;
  inline void set_job_manager_status(const ::std::string& value);
  inline void set_job_manager_status(const char* value);
  inline void set_job_manager_status(const char* value, size_t size);
  inline ::std::string* mutable_job_manager_status();
  
  // optional string network_status = 3;
  inline bool has_network_status() const;
  inline void clear_network_status();
  static const int kNetworkStatusFieldNumber = 3;
  inline const ::std::string& network_status() const;
  inline void set_network_status(const ::std::string& value);
  inline void set_network_status(const char* value);
  inline void set_network_status(const char* value, size_t size);
  inline ::std::string* mutable_network_status();
  
  // optional .samson.network.ControllerTaskManagerStatus task_manager_status = 4;
  inline bool has_task_manager_status() const;
  inline void clear_task_manager_status();
  static const int kTaskManagerStatusFieldNumber = 4;
  inline const ::samson::network::ControllerTaskManagerStatus& task_manager_status() const;
  inline ::samson::network::ControllerTaskManagerStatus* mutable_task_manager_status();
  
  // @@protoc_insertion_point(class_scope:samson.network.ControllerStatus)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 up_time_;
  ::std::string* job_manager_status_;
  static const ::std::string _default_job_manager_status_;
  ::std::string* network_status_;
  static const ::std::string _default_network_status_;
  ::samson::network::ControllerTaskManagerStatus* task_manager_status_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ControllerStatus* default_instance_;
};
// -------------------------------------------------------------------

class WorkerStatus : public ::google::protobuf::Message {
 public:
  WorkerStatus();
  virtual ~WorkerStatus();
  
  WorkerStatus(const WorkerStatus& from);
  
  inline WorkerStatus& operator=(const WorkerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkerStatus& default_instance();
  
  void Swap(WorkerStatus* other);
  
  // implements Message ----------------------------------------------
  
  WorkerStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorkerStatus& from);
  void MergeFrom(const WorkerStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 up_time = 23;
  inline bool has_up_time() const;
  inline void clear_up_time();
  static const int kUpTimeFieldNumber = 23;
  inline ::google::protobuf::uint64 up_time() const;
  inline void set_up_time(::google::protobuf::uint64 value);
  
  // optional uint64 update_time = 8;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 8;
  inline ::google::protobuf::uint64 update_time() const;
  inline void set_update_time(::google::protobuf::uint64 value);
  
  // optional string task_manager_status = 7;
  inline bool has_task_manager_status() const;
  inline void clear_task_manager_status();
  static const int kTaskManagerStatusFieldNumber = 7;
  inline const ::std::string& task_manager_status() const;
  inline void set_task_manager_status(const ::std::string& value);
  inline void set_task_manager_status(const char* value);
  inline void set_task_manager_status(const char* value, size_t size);
  inline ::std::string* mutable_task_manager_status();
  
  // optional string disk_manager_status = 3;
  inline bool has_disk_manager_status() const;
  inline void clear_disk_manager_status();
  static const int kDiskManagerStatusFieldNumber = 3;
  inline const ::std::string& disk_manager_status() const;
  inline void set_disk_manager_status(const ::std::string& value);
  inline void set_disk_manager_status(const char* value);
  inline void set_disk_manager_status(const char* value, size_t size);
  inline ::std::string* mutable_disk_manager_status();
  
  // optional string load_data_manager_status = 14;
  inline bool has_load_data_manager_status() const;
  inline void clear_load_data_manager_status();
  static const int kLoadDataManagerStatusFieldNumber = 14;
  inline const ::std::string& load_data_manager_status() const;
  inline void set_load_data_manager_status(const ::std::string& value);
  inline void set_load_data_manager_status(const char* value);
  inline void set_load_data_manager_status(const char* value, size_t size);
  inline ::std::string* mutable_load_data_manager_status();
  
  // optional string process_manager_status = 1;
  inline bool has_process_manager_status() const;
  inline void clear_process_manager_status();
  static const int kProcessManagerStatusFieldNumber = 1;
  inline const ::std::string& process_manager_status() const;
  inline void set_process_manager_status(const ::std::string& value);
  inline void set_process_manager_status(const char* value);
  inline void set_process_manager_status(const char* value, size_t size);
  inline ::std::string* mutable_process_manager_status();
  
  // optional string network_status = 20;
  inline bool has_network_status() const;
  inline void clear_network_status();
  static const int kNetworkStatusFieldNumber = 20;
  inline const ::std::string& network_status() const;
  inline void set_network_status(const ::std::string& value);
  inline void set_network_status(const char* value);
  inline void set_network_status(const char* value, size_t size);
  inline ::std::string* mutable_network_status();
  
  // optional string memory_status = 6;
  inline bool has_memory_status() const;
  inline void clear_memory_status();
  static const int kMemoryStatusFieldNumber = 6;
  inline const ::std::string& memory_status() const;
  inline void set_memory_status(const ::std::string& value);
  inline void set_memory_status(const char* value);
  inline void set_memory_status(const char* value, size_t size);
  inline ::std::string* mutable_memory_status();
  
  // optional string shared_memory_status = 22;
  inline bool has_shared_memory_status() const;
  inline void clear_shared_memory_status();
  static const int kSharedMemoryStatusFieldNumber = 22;
  inline const ::std::string& shared_memory_status() const;
  inline void set_shared_memory_status(const ::std::string& value);
  inline void set_shared_memory_status(const char* value);
  inline void set_shared_memory_status(const char* value, size_t size);
  inline ::std::string* mutable_shared_memory_status();
  
  // optional string engine_status = 24;
  inline bool has_engine_status() const;
  inline void clear_engine_status();
  static const int kEngineStatusFieldNumber = 24;
  inline const ::std::string& engine_status() const;
  inline void set_engine_status(const ::std::string& value);
  inline void set_engine_status(const char* value);
  inline void set_engine_status(const char* value, size_t size);
  inline ::std::string* mutable_engine_status();
  
  // optional string queues_status = 25;
  inline bool has_queues_status() const;
  inline void clear_queues_status();
  static const int kQueuesStatusFieldNumber = 25;
  inline const ::std::string& queues_status() const;
  inline void set_queues_status(const ::std::string& value);
  inline void set_queues_status(const char* value);
  inline void set_queues_status(const char* value, size_t size);
  inline ::std::string* mutable_queues_status();
  
  // optional uint64 used_memory = 10;
  inline bool has_used_memory() const;
  inline void clear_used_memory();
  static const int kUsedMemoryFieldNumber = 10;
  inline ::google::protobuf::uint64 used_memory() const;
  inline void set_used_memory(::google::protobuf::uint64 value);
  
  // optional uint64 total_memory = 11;
  inline bool has_total_memory() const;
  inline void clear_total_memory();
  static const int kTotalMemoryFieldNumber = 11;
  inline ::google::protobuf::uint64 total_memory() const;
  inline void set_total_memory(::google::protobuf::uint64 value);
  
  // optional int32 total_cores = 16;
  inline bool has_total_cores() const;
  inline void clear_total_cores();
  static const int kTotalCoresFieldNumber = 16;
  inline ::google::protobuf::int32 total_cores() const;
  inline void set_total_cores(::google::protobuf::int32 value);
  
  // optional int32 used_cores = 13;
  inline bool has_used_cores() const;
  inline void clear_used_cores();
  static const int kUsedCoresFieldNumber = 13;
  inline ::google::protobuf::int32 used_cores() const;
  inline void set_used_cores(::google::protobuf::int32 value);
  
  // optional int32 disk_pending_operations = 17;
  inline bool has_disk_pending_operations() const;
  inline void clear_disk_pending_operations();
  static const int kDiskPendingOperationsFieldNumber = 17;
  inline ::google::protobuf::int32 disk_pending_operations() const;
  inline void set_disk_pending_operations(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:samson.network.WorkerStatus)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 up_time_;
  ::google::protobuf::uint64 update_time_;
  ::std::string* task_manager_status_;
  static const ::std::string _default_task_manager_status_;
  ::std::string* disk_manager_status_;
  static const ::std::string _default_disk_manager_status_;
  ::std::string* load_data_manager_status_;
  static const ::std::string _default_load_data_manager_status_;
  ::std::string* process_manager_status_;
  static const ::std::string _default_process_manager_status_;
  ::std::string* network_status_;
  static const ::std::string _default_network_status_;
  ::std::string* memory_status_;
  static const ::std::string _default_memory_status_;
  ::std::string* shared_memory_status_;
  static const ::std::string _default_shared_memory_status_;
  ::std::string* engine_status_;
  static const ::std::string _default_engine_status_;
  ::std::string* queues_status_;
  static const ::std::string _default_queues_status_;
  ::google::protobuf::uint64 used_memory_;
  ::google::protobuf::uint64 total_memory_;
  ::google::protobuf::int32 total_cores_;
  ::google::protobuf::int32 used_cores_;
  ::google::protobuf::int32 disk_pending_operations_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static WorkerStatus* default_instance_;
};
// -------------------------------------------------------------------

class ActiveTask : public ::google::protobuf::Message {
 public:
  ActiveTask();
  virtual ~ActiveTask();
  
  ActiveTask(const ActiveTask& from);
  
  inline ActiveTask& operator=(const ActiveTask& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ActiveTask& default_instance();
  
  void Swap(ActiveTask* other);
  
  // implements Message ----------------------------------------------
  
  ActiveTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActiveTask& from);
  void MergeFrom(const ActiveTask& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string fileName = 1;
  inline int filename_size() const;
  inline void clear_filename();
  static const int kFileNameFieldNumber = 1;
  inline const ::std::string& filename(int index) const;
  inline ::std::string* mutable_filename(int index);
  inline void set_filename(int index, const ::std::string& value);
  inline void set_filename(int index, const char* value);
  inline void set_filename(int index, const char* value, size_t size);
  inline ::std::string* add_filename();
  inline void add_filename(const ::std::string& value);
  inline void add_filename(const char* value);
  inline void add_filename(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& filename() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_filename();
  
  // @@protoc_insertion_point(class_scope:samson.network.ActiveTask)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> filename_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ActiveTask* default_instance_;
};
// -------------------------------------------------------------------

class QueueList : public ::google::protobuf::Message {
 public:
  QueueList();
  virtual ~QueueList();
  
  QueueList(const QueueList& from);
  
  inline QueueList& operator=(const QueueList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueueList& default_instance();
  
  void Swap(QueueList* other);
  
  // implements Message ----------------------------------------------
  
  QueueList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueueList& from);
  void MergeFrom(const QueueList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .samson.network.FullQueue queue = 1;
  inline int queue_size() const;
  inline void clear_queue();
  static const int kQueueFieldNumber = 1;
  inline const ::samson::network::FullQueue& queue(int index) const;
  inline ::samson::network::FullQueue* mutable_queue(int index);
  inline ::samson::network::FullQueue* add_queue();
  inline const ::google::protobuf::RepeatedPtrField< ::samson::network::FullQueue >&
      queue() const;
  inline ::google::protobuf::RepeatedPtrField< ::samson::network::FullQueue >*
      mutable_queue();
  
  // repeated .samson.network.ActiveTask tasks = 2;
  inline int tasks_size() const;
  inline void clear_tasks();
  static const int kTasksFieldNumber = 2;
  inline const ::samson::network::ActiveTask& tasks(int index) const;
  inline ::samson::network::ActiveTask* mutable_tasks(int index);
  inline ::samson::network::ActiveTask* add_tasks();
  inline const ::google::protobuf::RepeatedPtrField< ::samson::network::ActiveTask >&
      tasks() const;
  inline ::google::protobuf::RepeatedPtrField< ::samson::network::ActiveTask >*
      mutable_tasks();
  
  // repeated uint64 load_id = 3;
  inline int load_id_size() const;
  inline void clear_load_id();
  static const int kLoadIdFieldNumber = 3;
  inline ::google::protobuf::uint64 load_id(int index) const;
  inline void set_load_id(int index, ::google::protobuf::uint64 value);
  inline void add_load_id(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      load_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_load_id();
  
  // @@protoc_insertion_point(class_scope:samson.network.QueueList)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::samson::network::FullQueue > queue_;
  ::google::protobuf::RepeatedPtrField< ::samson::network::ActiveTask > tasks_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > load_id_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static QueueList* default_instance_;
};
// -------------------------------------------------------------------

class DataList : public ::google::protobuf::Message {
 public:
  DataList();
  virtual ~DataList();
  
  DataList(const DataList& from);
  
  inline DataList& operator=(const DataList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataList& default_instance();
  
  void Swap(DataList* other);
  
  // implements Message ----------------------------------------------
  
  DataList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataList& from);
  void MergeFrom(const DataList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .samson.network.Data data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::samson::network::Data& data(int index) const;
  inline ::samson::network::Data* mutable_data(int index);
  inline ::samson::network::Data* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::samson::network::Data >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::samson::network::Data >*
      mutable_data();
  
  // @@protoc_insertion_point(class_scope:samson.network.DataList)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::samson::network::Data > data_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DataList* default_instance_;
};
// -------------------------------------------------------------------

class OperationList : public ::google::protobuf::Message {
 public:
  OperationList();
  virtual ~OperationList();
  
  OperationList(const OperationList& from);
  
  inline OperationList& operator=(const OperationList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OperationList& default_instance();
  
  void Swap(OperationList* other);
  
  // implements Message ----------------------------------------------
  
  OperationList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OperationList& from);
  void MergeFrom(const OperationList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .samson.network.Operation operation = 1;
  inline int operation_size() const;
  inline void clear_operation();
  static const int kOperationFieldNumber = 1;
  inline const ::samson::network::Operation& operation(int index) const;
  inline ::samson::network::Operation* mutable_operation(int index);
  inline ::samson::network::Operation* add_operation();
  inline const ::google::protobuf::RepeatedPtrField< ::samson::network::Operation >&
      operation() const;
  inline ::google::protobuf::RepeatedPtrField< ::samson::network::Operation >*
      mutable_operation();
  
  // @@protoc_insertion_point(class_scope:samson.network.OperationList)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::samson::network::Operation > operation_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static OperationList* default_instance_;
};
// -------------------------------------------------------------------

class JobList : public ::google::protobuf::Message {
 public:
  JobList();
  virtual ~JobList();
  
  JobList(const JobList& from);
  
  inline JobList& operator=(const JobList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const JobList& default_instance();
  
  void Swap(JobList* other);
  
  // implements Message ----------------------------------------------
  
  JobList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JobList& from);
  void MergeFrom(const JobList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .samson.network.Job job = 1;
  inline int job_size() const;
  inline void clear_job();
  static const int kJobFieldNumber = 1;
  inline const ::samson::network::Job& job(int index) const;
  inline ::samson::network::Job* mutable_job(int index);
  inline ::samson::network::Job* add_job();
  inline const ::google::protobuf::RepeatedPtrField< ::samson::network::Job >&
      job() const;
  inline ::google::protobuf::RepeatedPtrField< ::samson::network::Job >*
      mutable_job();
  
  // @@protoc_insertion_point(class_scope:samson.network.JobList)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::samson::network::Job > job_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static JobList* default_instance_;
};
// -------------------------------------------------------------------

class AutomaticOperationList : public ::google::protobuf::Message {
 public:
  AutomaticOperationList();
  virtual ~AutomaticOperationList();
  
  AutomaticOperationList(const AutomaticOperationList& from);
  
  inline AutomaticOperationList& operator=(const AutomaticOperationList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AutomaticOperationList& default_instance();
  
  void Swap(AutomaticOperationList* other);
  
  // implements Message ----------------------------------------------
  
  AutomaticOperationList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AutomaticOperationList& from);
  void MergeFrom(const AutomaticOperationList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .samson.network.AutomaticOperation automatic_operation = 1;
  inline int automatic_operation_size() const;
  inline void clear_automatic_operation();
  static const int kAutomaticOperationFieldNumber = 1;
  inline const ::samson::network::AutomaticOperation& automatic_operation(int index) const;
  inline ::samson::network::AutomaticOperation* mutable_automatic_operation(int index);
  inline ::samson::network::AutomaticOperation* add_automatic_operation();
  inline const ::google::protobuf::RepeatedPtrField< ::samson::network::AutomaticOperation >&
      automatic_operation() const;
  inline ::google::protobuf::RepeatedPtrField< ::samson::network::AutomaticOperation >*
      mutable_automatic_operation();
  
  // @@protoc_insertion_point(class_scope:samson.network.AutomaticOperationList)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::samson::network::AutomaticOperation > automatic_operation_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static AutomaticOperationList* default_instance_;
};
// -------------------------------------------------------------------

class SamsonStatus : public ::google::protobuf::Message {
 public:
  SamsonStatus();
  virtual ~SamsonStatus();
  
  SamsonStatus(const SamsonStatus& from);
  
  inline SamsonStatus& operator=(const SamsonStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SamsonStatus& default_instance();
  
  void Swap(SamsonStatus* other);
  
  // implements Message ----------------------------------------------
  
  SamsonStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SamsonStatus& from);
  void MergeFrom(const SamsonStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .samson.network.ControllerStatus controller_status = 1;
  inline bool has_controller_status() const;
  inline void clear_controller_status();
  static const int kControllerStatusFieldNumber = 1;
  inline const ::samson::network::ControllerStatus& controller_status() const;
  inline ::samson::network::ControllerStatus* mutable_controller_status();
  
  // repeated .samson.network.WorkerStatus worker_status = 2;
  inline int worker_status_size() const;
  inline void clear_worker_status();
  static const int kWorkerStatusFieldNumber = 2;
  inline const ::samson::network::WorkerStatus& worker_status(int index) const;
  inline ::samson::network::WorkerStatus* mutable_worker_status(int index);
  inline ::samson::network::WorkerStatus* add_worker_status();
  inline const ::google::protobuf::RepeatedPtrField< ::samson::network::WorkerStatus >&
      worker_status() const;
  inline ::google::protobuf::RepeatedPtrField< ::samson::network::WorkerStatus >*
      mutable_worker_status();
  
  // @@protoc_insertion_point(class_scope:samson.network.SamsonStatus)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::samson::network::ControllerStatus* controller_status_;
  ::google::protobuf::RepeatedPtrField< ::samson::network::WorkerStatus > worker_status_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SamsonStatus* default_instance_;
};
// -------------------------------------------------------------------

class WorkerTask : public ::google::protobuf::Message {
 public:
  WorkerTask();
  virtual ~WorkerTask();
  
  WorkerTask(const WorkerTask& from);
  
  inline WorkerTask& operator=(const WorkerTask& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkerTask& default_instance();
  
  void Swap(WorkerTask* other);
  
  // implements Message ----------------------------------------------
  
  WorkerTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorkerTask& from);
  void MergeFrom(const WorkerTask& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 job_id = 10;
  inline bool has_job_id() const;
  inline void clear_job_id();
  static const int kJobIdFieldNumber = 10;
  inline ::google::protobuf::uint64 job_id() const;
  inline void set_job_id(::google::protobuf::uint64 value);
  
  // required uint64 task_id = 1;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  inline ::google::protobuf::uint64 task_id() const;
  inline void set_task_id(::google::protobuf::uint64 value);
  
  // required string operation = 2;
  inline bool has_operation() const;
  inline void clear_operation();
  static const int kOperationFieldNumber = 2;
  inline const ::std::string& operation() const;
  inline void set_operation(const ::std::string& value);
  inline void set_operation(const char* value);
  inline void set_operation(const char* value, size_t size);
  inline ::std::string* mutable_operation();
  
  // repeated .samson.network.FullQueue input_queue = 4;
  inline int input_queue_size() const;
  inline void clear_input_queue();
  static const int kInputQueueFieldNumber = 4;
  inline const ::samson::network::FullQueue& input_queue(int index) const;
  inline ::samson::network::FullQueue* mutable_input_queue(int index);
  inline ::samson::network::FullQueue* add_input_queue();
  inline const ::google::protobuf::RepeatedPtrField< ::samson::network::FullQueue >&
      input_queue() const;
  inline ::google::protobuf::RepeatedPtrField< ::samson::network::FullQueue >*
      mutable_input_queue();
  
  // repeated .samson.network.FullQueue output_queue = 5;
  inline int output_queue_size() const;
  inline void clear_output_queue();
  static const int kOutputQueueFieldNumber = 5;
  inline const ::samson::network::FullQueue& output_queue(int index) const;
  inline ::samson::network::FullQueue* mutable_output_queue(int index);
  inline ::samson::network::FullQueue* add_output_queue();
  inline const ::google::protobuf::RepeatedPtrField< ::samson::network::FullQueue >&
      output_queue() const;
  inline ::google::protobuf::RepeatedPtrField< ::samson::network::FullQueue >*
      mutable_output_queue();
  
  // optional int32 servers = 6;
  inline bool has_servers() const;
  inline void clear_servers();
  static const int kServersFieldNumber = 6;
  inline ::google::protobuf::int32 servers() const;
  inline void set_servers(::google::protobuf::int32 value);
  
  // optional bool generator = 7;
  inline bool has_generator() const;
  inline void clear_generator();
  static const int kGeneratorFieldNumber = 7;
  inline bool generator() const;
  inline void set_generator(bool value);
  
  // optional .samson.network.Environment environment = 8;
  inline bool has_environment() const;
  inline void clear_environment();
  static const int kEnvironmentFieldNumber = 8;
  inline const ::samson::network::Environment& environment() const;
  inline ::samson::network::Environment* mutable_environment();
  
  // @@protoc_insertion_point(class_scope:samson.network.WorkerTask)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 job_id_;
  ::google::protobuf::uint64 task_id_;
  ::std::string* operation_;
  static const ::std::string _default_operation_;
  ::google::protobuf::RepeatedPtrField< ::samson::network::FullQueue > input_queue_;
  ::google::protobuf::RepeatedPtrField< ::samson::network::FullQueue > output_queue_;
  ::google::protobuf::int32 servers_;
  bool generator_;
  ::samson::network::Environment* environment_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static WorkerTask* default_instance_;
};
// -------------------------------------------------------------------

class WorkerTaskKill : public ::google::protobuf::Message {
 public:
  WorkerTaskKill();
  virtual ~WorkerTaskKill();
  
  WorkerTaskKill(const WorkerTaskKill& from);
  
  inline WorkerTaskKill& operator=(const WorkerTaskKill& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkerTaskKill& default_instance();
  
  void Swap(WorkerTaskKill* other);
  
  // implements Message ----------------------------------------------
  
  WorkerTaskKill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorkerTaskKill& from);
  void MergeFrom(const WorkerTaskKill& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 task_id = 1;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  inline ::google::protobuf::uint64 task_id() const;
  inline void set_task_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:samson.network.WorkerTaskKill)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 task_id_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static WorkerTaskKill* default_instance_;
};
// -------------------------------------------------------------------

class WorkerTaskRemove : public ::google::protobuf::Message {
 public:
  WorkerTaskRemove();
  virtual ~WorkerTaskRemove();
  
  WorkerTaskRemove(const WorkerTaskRemove& from);
  
  inline WorkerTaskRemove& operator=(const WorkerTaskRemove& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkerTaskRemove& default_instance();
  
  void Swap(WorkerTaskRemove* other);
  
  // implements Message ----------------------------------------------
  
  WorkerTaskRemove* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorkerTaskRemove& from);
  void MergeFrom(const WorkerTaskRemove& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 task_id = 1;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  inline ::google::protobuf::uint64 task_id() const;
  inline void set_task_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:samson.network.WorkerTaskRemove)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 task_id_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static WorkerTaskRemove* default_instance_;
};
// -------------------------------------------------------------------

class WorkerTaskConfirmation : public ::google::protobuf::Message {
 public:
  WorkerTaskConfirmation();
  virtual ~WorkerTaskConfirmation();
  
  WorkerTaskConfirmation(const WorkerTaskConfirmation& from);
  
  inline WorkerTaskConfirmation& operator=(const WorkerTaskConfirmation& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkerTaskConfirmation& default_instance();
  
  void Swap(WorkerTaskConfirmation* other);
  
  // implements Message ----------------------------------------------
  
  WorkerTaskConfirmation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorkerTaskConfirmation& from);
  void MergeFrom(const WorkerTaskConfirmation& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef WorkerTaskConfirmation_WorkerTaskConfirmationType WorkerTaskConfirmationType;
  static const WorkerTaskConfirmationType update = WorkerTaskConfirmation_WorkerTaskConfirmationType_update;
  static const WorkerTaskConfirmationType finish = WorkerTaskConfirmation_WorkerTaskConfirmationType_finish;
  static const WorkerTaskConfirmationType complete = WorkerTaskConfirmation_WorkerTaskConfirmationType_complete;
  static const WorkerTaskConfirmationType error = WorkerTaskConfirmation_WorkerTaskConfirmationType_error;
  static inline bool WorkerTaskConfirmationType_IsValid(int value) {
    return WorkerTaskConfirmation_WorkerTaskConfirmationType_IsValid(value);
  }
  static const WorkerTaskConfirmationType WorkerTaskConfirmationType_MIN =
    WorkerTaskConfirmation_WorkerTaskConfirmationType_WorkerTaskConfirmationType_MIN;
  static const WorkerTaskConfirmationType WorkerTaskConfirmationType_MAX =
    WorkerTaskConfirmation_WorkerTaskConfirmationType_WorkerTaskConfirmationType_MAX;
  static const int WorkerTaskConfirmationType_ARRAYSIZE =
    WorkerTaskConfirmation_WorkerTaskConfirmationType_WorkerTaskConfirmationType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  WorkerTaskConfirmationType_descriptor() {
    return WorkerTaskConfirmation_WorkerTaskConfirmationType_descriptor();
  }
  static inline const ::std::string& WorkerTaskConfirmationType_Name(WorkerTaskConfirmationType value) {
    return WorkerTaskConfirmation_WorkerTaskConfirmationType_Name(value);
  }
  static inline bool WorkerTaskConfirmationType_Parse(const ::std::string& name,
      WorkerTaskConfirmationType* value) {
    return WorkerTaskConfirmation_WorkerTaskConfirmationType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required int64 task_id = 1;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  inline ::google::protobuf::int64 task_id() const;
  inline void set_task_id(::google::protobuf::int64 value);
  
  // required .samson.network.WorkerTaskConfirmation.WorkerTaskConfirmationType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::samson::network::WorkerTaskConfirmation_WorkerTaskConfirmationType type() const;
  inline void set_type(::samson::network::WorkerTaskConfirmation_WorkerTaskConfirmationType value);
  
  // repeated .samson.network.QueueFile add_file = 3;
  inline int add_file_size() const;
  inline void clear_add_file();
  static const int kAddFileFieldNumber = 3;
  inline const ::samson::network::QueueFile& add_file(int index) const;
  inline ::samson::network::QueueFile* mutable_add_file(int index);
  inline ::samson::network::QueueFile* add_add_file();
  inline const ::google::protobuf::RepeatedPtrField< ::samson::network::QueueFile >&
      add_file() const;
  inline ::google::protobuf::RepeatedPtrField< ::samson::network::QueueFile >*
      mutable_add_file();
  
  // repeated .samson.network.QueueFile remove_file = 4;
  inline int remove_file_size() const;
  inline void clear_remove_file();
  static const int kRemoveFileFieldNumber = 4;
  inline const ::samson::network::QueueFile& remove_file(int index) const;
  inline ::samson::network::QueueFile* mutable_remove_file(int index);
  inline ::samson::network::QueueFile* add_remove_file();
  inline const ::google::protobuf::RepeatedPtrField< ::samson::network::QueueFile >&
      remove_file() const;
  inline ::google::protobuf::RepeatedPtrField< ::samson::network::QueueFile >*
      mutable_remove_file();
  
  // optional int32 num_items = 5;
  inline bool has_num_items() const;
  inline void clear_num_items();
  static const int kNumItemsFieldNumber = 5;
  inline ::google::protobuf::int32 num_items() const;
  inline void set_num_items(::google::protobuf::int32 value);
  
  // optional int32 num_finished_items = 6;
  inline bool has_num_finished_items() const;
  inline void clear_num_finished_items();
  static const int kNumFinishedItemsFieldNumber = 6;
  inline ::google::protobuf::int32 num_finished_items() const;
  inline void set_num_finished_items(::google::protobuf::int32 value);
  
  // optional string error_message = 7;
  inline bool has_error_message() const;
  inline void clear_error_message();
  static const int kErrorMessageFieldNumber = 7;
  inline const ::std::string& error_message() const;
  inline void set_error_message(const ::std::string& value);
  inline void set_error_message(const char* value);
  inline void set_error_message(const char* value, size_t size);
  inline ::std::string* mutable_error_message();
  
  // optional .samson.network.KVInfo progressRunning = 8;
  inline bool has_progressrunning() const;
  inline void clear_progressrunning();
  static const int kProgressRunningFieldNumber = 8;
  inline const ::samson::network::KVInfo& progressrunning() const;
  inline ::samson::network::KVInfo* mutable_progressrunning();
  
  // optional .samson.network.KVInfo progressProcessed = 9;
  inline bool has_progressprocessed() const;
  inline void clear_progressprocessed();
  static const int kProgressProcessedFieldNumber = 9;
  inline const ::samson::network::KVInfo& progressprocessed() const;
  inline ::samson::network::KVInfo* mutable_progressprocessed();
  
  // @@protoc_insertion_point(class_scope:samson.network.WorkerTaskConfirmation)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 task_id_;
  int type_;
  ::google::protobuf::RepeatedPtrField< ::samson::network::QueueFile > add_file_;
  ::google::protobuf::RepeatedPtrField< ::samson::network::QueueFile > remove_file_;
  ::google::protobuf::int32 num_items_;
  ::google::protobuf::int32 num_finished_items_;
  ::std::string* error_message_;
  static const ::std::string _default_error_message_;
  ::samson::network::KVInfo* progressrunning_;
  ::samson::network::KVInfo* progressprocessed_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static WorkerTaskConfirmation* default_instance_;
};
// -------------------------------------------------------------------

class Command : public ::google::protobuf::Message {
 public:
  Command();
  virtual ~Command();
  
  Command(const Command& from);
  
  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Command& default_instance();
  
  void Swap(Command* other);
  
  // implements Message ----------------------------------------------
  
  Command* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string command = 1;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 1;
  inline const ::std::string& command() const;
  inline void set_command(const ::std::string& value);
  inline void set_command(const char* value);
  inline void set_command(const char* value, size_t size);
  inline ::std::string* mutable_command();
  
  // optional .samson.network.Environment environment = 3;
  inline bool has_environment() const;
  inline void clear_environment();
  static const int kEnvironmentFieldNumber = 3;
  inline const ::samson::network::Environment& environment() const;
  inline ::samson::network::Environment* mutable_environment();
  
  // @@protoc_insertion_point(class_scope:samson.network.Command)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* command_;
  static const ::std::string _default_command_;
  ::samson::network::Environment* environment_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Command* default_instance_;
};
// -------------------------------------------------------------------

class CommandResponse : public ::google::protobuf::Message {
 public:
  CommandResponse();
  virtual ~CommandResponse();
  
  CommandResponse(const CommandResponse& from);
  
  inline CommandResponse& operator=(const CommandResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandResponse& default_instance();
  
  void Swap(CommandResponse* other);
  
  // implements Message ----------------------------------------------
  
  CommandResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandResponse& from);
  void MergeFrom(const CommandResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string command = 1;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 1;
  inline const ::std::string& command() const;
  inline void set_command(const ::std::string& value);
  inline void set_command(const char* value);
  inline void set_command(const char* value, size_t size);
  inline ::std::string* mutable_command();
  
  // optional uint64 new_job_id = 2;
  inline bool has_new_job_id() const;
  inline void clear_new_job_id();
  static const int kNewJobIdFieldNumber = 2;
  inline ::google::protobuf::uint64 new_job_id() const;
  inline void set_new_job_id(::google::protobuf::uint64 value);
  
  // optional uint64 finish_job_id = 11;
  inline bool has_finish_job_id() const;
  inline void clear_finish_job_id();
  static const int kFinishJobIdFieldNumber = 11;
  inline ::google::protobuf::uint64 finish_job_id() const;
  inline void set_finish_job_id(::google::protobuf::uint64 value);
  
  // optional uint64 error_job_id = 12;
  inline bool has_error_job_id() const;
  inline void clear_error_job_id();
  static const int kErrorJobIdFieldNumber = 12;
  inline ::google::protobuf::uint64 error_job_id() const;
  inline void set_error_job_id(::google::protobuf::uint64 value);
  
  // optional string error_message = 10;
  inline bool has_error_message() const;
  inline void clear_error_message();
  static const int kErrorMessageFieldNumber = 10;
  inline const ::std::string& error_message() const;
  inline void set_error_message(const ::std::string& value);
  inline void set_error_message(const char* value);
  inline void set_error_message(const char* value, size_t size);
  inline ::std::string* mutable_error_message();
  
  // optional int32 ellapsed_seconds = 15;
  inline bool has_ellapsed_seconds() const;
  inline void clear_ellapsed_seconds();
  static const int kEllapsedSecondsFieldNumber = 15;
  inline ::google::protobuf::int32 ellapsed_seconds() const;
  inline void set_ellapsed_seconds(::google::protobuf::int32 value);
  
  // optional bool finish_command = 16;
  inline bool has_finish_command() const;
  inline void clear_finish_command();
  static const int kFinishCommandFieldNumber = 16;
  inline bool finish_command() const;
  inline void set_finish_command(bool value);
  
  // optional .samson.network.JobList job_list = 100;
  inline bool has_job_list() const;
  inline void clear_job_list();
  static const int kJobListFieldNumber = 100;
  inline const ::samson::network::JobList& job_list() const;
  inline ::samson::network::JobList* mutable_job_list();
  
  // optional .samson.network.OperationList operation_list = 101;
  inline bool has_operation_list() const;
  inline void clear_operation_list();
  static const int kOperationListFieldNumber = 101;
  inline const ::samson::network::OperationList& operation_list() const;
  inline ::samson::network::OperationList* mutable_operation_list();
  
  // optional .samson.network.DataList data_list = 102;
  inline bool has_data_list() const;
  inline void clear_data_list();
  static const int kDataListFieldNumber = 102;
  inline const ::samson::network::DataList& data_list() const;
  inline ::samson::network::DataList* mutable_data_list();
  
  // optional .samson.network.QueueList queue_list = 103;
  inline bool has_queue_list() const;
  inline void clear_queue_list();
  static const int kQueueListFieldNumber = 103;
  inline const ::samson::network::QueueList& queue_list() const;
  inline ::samson::network::QueueList* mutable_queue_list();
  
  // optional .samson.network.AutomaticOperationList automatic_operation_list = 107;
  inline bool has_automatic_operation_list() const;
  inline void clear_automatic_operation_list();
  static const int kAutomaticOperationListFieldNumber = 107;
  inline const ::samson::network::AutomaticOperationList& automatic_operation_list() const;
  inline ::samson::network::AutomaticOperationList* mutable_automatic_operation_list();
  
  // optional .samson.network.SamsonStatus samson_status = 104;
  inline bool has_samson_status() const;
  inline void clear_samson_status();
  static const int kSamsonStatusFieldNumber = 104;
  inline const ::samson::network::SamsonStatus& samson_status() const;
  inline ::samson::network::SamsonStatus* mutable_samson_status();
  
  // @@protoc_insertion_point(class_scope:samson.network.CommandResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* command_;
  static const ::std::string _default_command_;
  ::google::protobuf::uint64 new_job_id_;
  ::google::protobuf::uint64 finish_job_id_;
  ::google::protobuf::uint64 error_job_id_;
  ::std::string* error_message_;
  static const ::std::string _default_error_message_;
  ::google::protobuf::int32 ellapsed_seconds_;
  bool finish_command_;
  ::samson::network::JobList* job_list_;
  ::samson::network::OperationList* operation_list_;
  ::samson::network::DataList* data_list_;
  ::samson::network::QueueList* queue_list_;
  ::samson::network::AutomaticOperationList* automatic_operation_list_;
  ::samson::network::SamsonStatus* samson_status_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CommandResponse* default_instance_;
};
// -------------------------------------------------------------------

class WorkerDataExchange : public ::google::protobuf::Message {
 public:
  WorkerDataExchange();
  virtual ~WorkerDataExchange();
  
  WorkerDataExchange(const WorkerDataExchange& from);
  
  inline WorkerDataExchange& operator=(const WorkerDataExchange& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkerDataExchange& default_instance();
  
  void Swap(WorkerDataExchange* other);
  
  // implements Message ----------------------------------------------
  
  WorkerDataExchange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorkerDataExchange& from);
  void MergeFrom(const WorkerDataExchange& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 task_id = 1;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  inline ::google::protobuf::int64 task_id() const;
  inline void set_task_id(::google::protobuf::int64 value);
  
  // required .samson.network.Queue queue = 2;
  inline bool has_queue() const;
  inline void clear_queue();
  static const int kQueueFieldNumber = 2;
  inline const ::samson::network::Queue& queue() const;
  inline ::samson::network::Queue* mutable_queue();
  
  // required bool txt = 3;
  inline bool has_txt() const;
  inline void clear_txt();
  static const int kTxtFieldNumber = 3;
  inline bool txt() const;
  inline void set_txt(bool value);
  
  // required int32 worker = 4;
  inline bool has_worker() const;
  inline void clear_worker();
  static const int kWorkerFieldNumber = 4;
  inline ::google::protobuf::int32 worker() const;
  inline void set_worker(::google::protobuf::int32 value);
  
  // required int32 hg_set = 5;
  inline bool has_hg_set() const;
  inline void clear_hg_set();
  static const int kHgSetFieldNumber = 5;
  inline ::google::protobuf::int32 hg_set() const;
  inline void set_hg_set(::google::protobuf::int32 value);
  
  // required bool finish = 6;
  inline bool has_finish() const;
  inline void clear_finish();
  static const int kFinishFieldNumber = 6;
  inline bool finish() const;
  inline void set_finish(bool value);
  
  // @@protoc_insertion_point(class_scope:samson.network.WorkerDataExchange)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 task_id_;
  ::samson::network::Queue* queue_;
  bool txt_;
  ::google::protobuf::int32 worker_;
  ::google::protobuf::int32 hg_set_;
  bool finish_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static WorkerDataExchange* default_instance_;
};
// -------------------------------------------------------------------

class WorkerDataExchangeClose : public ::google::protobuf::Message {
 public:
  WorkerDataExchangeClose();
  virtual ~WorkerDataExchangeClose();
  
  WorkerDataExchangeClose(const WorkerDataExchangeClose& from);
  
  inline WorkerDataExchangeClose& operator=(const WorkerDataExchangeClose& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkerDataExchangeClose& default_instance();
  
  void Swap(WorkerDataExchangeClose* other);
  
  // implements Message ----------------------------------------------
  
  WorkerDataExchangeClose* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorkerDataExchangeClose& from);
  void MergeFrom(const WorkerDataExchangeClose& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 task_id = 1;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  inline ::google::protobuf::int64 task_id() const;
  inline void set_task_id(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:samson.network.WorkerDataExchangeClose)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 task_id_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static WorkerDataExchangeClose* default_instance_;
};
// -------------------------------------------------------------------

class UploadDataInit : public ::google::protobuf::Message {
 public:
  UploadDataInit();
  virtual ~UploadDataInit();
  
  UploadDataInit(const UploadDataInit& from);
  
  inline UploadDataInit& operator=(const UploadDataInit& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadDataInit& default_instance();
  
  void Swap(UploadDataInit* other);
  
  // implements Message ----------------------------------------------
  
  UploadDataInit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UploadDataInit& from);
  void MergeFrom(const UploadDataInit& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string queue = 1;
  inline bool has_queue() const;
  inline void clear_queue();
  static const int kQueueFieldNumber = 1;
  inline const ::std::string& queue() const;
  inline void set_queue(const ::std::string& value);
  inline void set_queue(const char* value);
  inline void set_queue(const char* value, size_t size);
  inline ::std::string* mutable_queue();
  
  // @@protoc_insertion_point(class_scope:samson.network.UploadDataInit)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* queue_;
  static const ::std::string _default_queue_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static UploadDataInit* default_instance_;
};
// -------------------------------------------------------------------

class UploadDataInitResponse : public ::google::protobuf::Message {
 public:
  UploadDataInitResponse();
  virtual ~UploadDataInitResponse();
  
  UploadDataInitResponse(const UploadDataInitResponse& from);
  
  inline UploadDataInitResponse& operator=(const UploadDataInitResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadDataInitResponse& default_instance();
  
  void Swap(UploadDataInitResponse* other);
  
  // implements Message ----------------------------------------------
  
  UploadDataInitResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UploadDataInitResponse& from);
  void MergeFrom(const UploadDataInitResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .samson.network.UploadDataInit query = 1;
  inline bool has_query() const;
  inline void clear_query();
  static const int kQueryFieldNumber = 1;
  inline const ::samson::network::UploadDataInit& query() const;
  inline ::samson::network::UploadDataInit* mutable_query();
  
  // required uint64 load_id = 3;
  inline bool has_load_id() const;
  inline void clear_load_id();
  static const int kLoadIdFieldNumber = 3;
  inline ::google::protobuf::uint64 load_id() const;
  inline void set_load_id(::google::protobuf::uint64 value);
  
  // optional .samson.network.Error error = 100;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 100;
  inline const ::samson::network::Error& error() const;
  inline ::samson::network::Error* mutable_error();
  
  // @@protoc_insertion_point(class_scope:samson.network.UploadDataInitResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::samson::network::UploadDataInit* query_;
  ::google::protobuf::uint64 load_id_;
  ::samson::network::Error* error_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static UploadDataInitResponse* default_instance_;
};
// -------------------------------------------------------------------

class UploadDataFile : public ::google::protobuf::Message {
 public:
  UploadDataFile();
  virtual ~UploadDataFile();
  
  UploadDataFile(const UploadDataFile& from);
  
  inline UploadDataFile& operator=(const UploadDataFile& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadDataFile& default_instance();
  
  void Swap(UploadDataFile* other);
  
  // implements Message ----------------------------------------------
  
  UploadDataFile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UploadDataFile& from);
  void MergeFrom(const UploadDataFile& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 load_id = 1;
  inline bool has_load_id() const;
  inline void clear_load_id();
  static const int kLoadIdFieldNumber = 1;
  inline ::google::protobuf::uint64 load_id() const;
  inline void set_load_id(::google::protobuf::uint64 value);
  
  // required uint64 file_id = 2;
  inline bool has_file_id() const;
  inline void clear_file_id();
  static const int kFileIdFieldNumber = 2;
  inline ::google::protobuf::uint64 file_id() const;
  inline void set_file_id(::google::protobuf::uint64 value);
  
  // required uint64 file_size = 3;
  inline bool has_file_size() const;
  inline void clear_file_size();
  static const int kFileSizeFieldNumber = 3;
  inline ::google::protobuf::uint64 file_size() const;
  inline void set_file_size(::google::protobuf::uint64 value);
  
  // required string file_ext = 4;
  inline bool has_file_ext() const;
  inline void clear_file_ext();
  static const int kFileExtFieldNumber = 4;
  inline const ::std::string& file_ext() const;
  inline void set_file_ext(const ::std::string& value);
  inline void set_file_ext(const char* value);
  inline void set_file_ext(const char* value, size_t size);
  inline ::std::string* mutable_file_ext();
  
  // @@protoc_insertion_point(class_scope:samson.network.UploadDataFile)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 load_id_;
  ::google::protobuf::uint64 file_id_;
  ::google::protobuf::uint64 file_size_;
  ::std::string* file_ext_;
  static const ::std::string _default_file_ext_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static UploadDataFile* default_instance_;
};
// -------------------------------------------------------------------

class UploadDataFileResponse : public ::google::protobuf::Message {
 public:
  UploadDataFileResponse();
  virtual ~UploadDataFileResponse();
  
  UploadDataFileResponse(const UploadDataFileResponse& from);
  
  inline UploadDataFileResponse& operator=(const UploadDataFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadDataFileResponse& default_instance();
  
  void Swap(UploadDataFileResponse* other);
  
  // implements Message ----------------------------------------------
  
  UploadDataFileResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UploadDataFileResponse& from);
  void MergeFrom(const UploadDataFileResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .samson.network.UploadDataFile query = 1;
  inline bool has_query() const;
  inline void clear_query();
  static const int kQueryFieldNumber = 1;
  inline const ::samson::network::UploadDataFile& query() const;
  inline ::samson::network::UploadDataFile* mutable_query();
  
  // required .samson.network.File file = 2;
  inline bool has_file() const;
  inline void clear_file();
  static const int kFileFieldNumber = 2;
  inline const ::samson::network::File& file() const;
  inline ::samson::network::File* mutable_file();
  
  // optional .samson.network.Error error = 100;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 100;
  inline const ::samson::network::Error& error() const;
  inline ::samson::network::Error* mutable_error();
  
  // @@protoc_insertion_point(class_scope:samson.network.UploadDataFileResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::samson::network::UploadDataFile* query_;
  ::samson::network::File* file_;
  ::samson::network::Error* error_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static UploadDataFileResponse* default_instance_;
};
// -------------------------------------------------------------------

class UploadDataFinish : public ::google::protobuf::Message {
 public:
  UploadDataFinish();
  virtual ~UploadDataFinish();
  
  UploadDataFinish(const UploadDataFinish& from);
  
  inline UploadDataFinish& operator=(const UploadDataFinish& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadDataFinish& default_instance();
  
  void Swap(UploadDataFinish* other);
  
  // implements Message ----------------------------------------------
  
  UploadDataFinish* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UploadDataFinish& from);
  void MergeFrom(const UploadDataFinish& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 load_id = 3;
  inline bool has_load_id() const;
  inline void clear_load_id();
  static const int kLoadIdFieldNumber = 3;
  inline ::google::protobuf::uint64 load_id() const;
  inline void set_load_id(::google::protobuf::uint64 value);
  
  // required string queue = 4;
  inline bool has_queue() const;
  inline void clear_queue();
  static const int kQueueFieldNumber = 4;
  inline const ::std::string& queue() const;
  inline void set_queue(const ::std::string& value);
  inline void set_queue(const char* value);
  inline void set_queue(const char* value, size_t size);
  inline ::std::string* mutable_queue();
  
  // repeated .samson.network.File files = 5;
  inline int files_size() const;
  inline void clear_files();
  static const int kFilesFieldNumber = 5;
  inline const ::samson::network::File& files(int index) const;
  inline ::samson::network::File* mutable_files(int index);
  inline ::samson::network::File* add_files();
  inline const ::google::protobuf::RepeatedPtrField< ::samson::network::File >&
      files() const;
  inline ::google::protobuf::RepeatedPtrField< ::samson::network::File >*
      mutable_files();
  
  // optional .samson.network.Error error = 100;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 100;
  inline const ::samson::network::Error& error() const;
  inline ::samson::network::Error* mutable_error();
  
  // @@protoc_insertion_point(class_scope:samson.network.UploadDataFinish)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 load_id_;
  ::std::string* queue_;
  static const ::std::string _default_queue_;
  ::google::protobuf::RepeatedPtrField< ::samson::network::File > files_;
  ::samson::network::Error* error_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static UploadDataFinish* default_instance_;
};
// -------------------------------------------------------------------

class UploadDataFinishResponse : public ::google::protobuf::Message {
 public:
  UploadDataFinishResponse();
  virtual ~UploadDataFinishResponse();
  
  UploadDataFinishResponse(const UploadDataFinishResponse& from);
  
  inline UploadDataFinishResponse& operator=(const UploadDataFinishResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadDataFinishResponse& default_instance();
  
  void Swap(UploadDataFinishResponse* other);
  
  // implements Message ----------------------------------------------
  
  UploadDataFinishResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UploadDataFinishResponse& from);
  void MergeFrom(const UploadDataFinishResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .samson.network.UploadDataFinish query = 1;
  inline bool has_query() const;
  inline void clear_query();
  static const int kQueryFieldNumber = 1;
  inline const ::samson::network::UploadDataFinish& query() const;
  inline ::samson::network::UploadDataFinish* mutable_query();
  
  // optional .samson.network.Error error = 100;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 100;
  inline const ::samson::network::Error& error() const;
  inline ::samson::network::Error* mutable_error();
  
  // @@protoc_insertion_point(class_scope:samson.network.UploadDataFinishResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::samson::network::UploadDataFinish* query_;
  ::samson::network::Error* error_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static UploadDataFinishResponse* default_instance_;
};
// -------------------------------------------------------------------

class DownloadDataInit : public ::google::protobuf::Message {
 public:
  DownloadDataInit();
  virtual ~DownloadDataInit();
  
  DownloadDataInit(const DownloadDataInit& from);
  
  inline DownloadDataInit& operator=(const DownloadDataInit& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DownloadDataInit& default_instance();
  
  void Swap(DownloadDataInit* other);
  
  // implements Message ----------------------------------------------
  
  DownloadDataInit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DownloadDataInit& from);
  void MergeFrom(const DownloadDataInit& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string queue = 1;
  inline bool has_queue() const;
  inline void clear_queue();
  static const int kQueueFieldNumber = 1;
  inline const ::std::string& queue() const;
  inline void set_queue(const ::std::string& value);
  inline void set_queue(const char* value);
  inline void set_queue(const char* value, size_t size);
  inline ::std::string* mutable_queue();
  
  // @@protoc_insertion_point(class_scope:samson.network.DownloadDataInit)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* queue_;
  static const ::std::string _default_queue_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DownloadDataInit* default_instance_;
};
// -------------------------------------------------------------------

class DownloadDataInitResponse : public ::google::protobuf::Message {
 public:
  DownloadDataInitResponse();
  virtual ~DownloadDataInitResponse();
  
  DownloadDataInitResponse(const DownloadDataInitResponse& from);
  
  inline DownloadDataInitResponse& operator=(const DownloadDataInitResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DownloadDataInitResponse& default_instance();
  
  void Swap(DownloadDataInitResponse* other);
  
  // implements Message ----------------------------------------------
  
  DownloadDataInitResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DownloadDataInitResponse& from);
  void MergeFrom(const DownloadDataInitResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .samson.network.DownloadDataInit query = 1;
  inline bool has_query() const;
  inline void clear_query();
  static const int kQueryFieldNumber = 1;
  inline const ::samson::network::DownloadDataInit& query() const;
  inline ::samson::network::DownloadDataInit* mutable_query();
  
  // required uint64 load_id = 2;
  inline bool has_load_id() const;
  inline void clear_load_id();
  static const int kLoadIdFieldNumber = 2;
  inline ::google::protobuf::uint64 load_id() const;
  inline void set_load_id(::google::protobuf::uint64 value);
  
  // optional .samson.network.FullQueue queue = 3;
  inline bool has_queue() const;
  inline void clear_queue();
  static const int kQueueFieldNumber = 3;
  inline const ::samson::network::FullQueue& queue() const;
  inline ::samson::network::FullQueue* mutable_queue();
  
  // optional .samson.network.Error error = 100;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 100;
  inline const ::samson::network::Error& error() const;
  inline ::samson::network::Error* mutable_error();
  
  // @@protoc_insertion_point(class_scope:samson.network.DownloadDataInitResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::samson::network::DownloadDataInit* query_;
  ::google::protobuf::uint64 load_id_;
  ::samson::network::FullQueue* queue_;
  ::samson::network::Error* error_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DownloadDataInitResponse* default_instance_;
};
// -------------------------------------------------------------------

class DownloadDataFile : public ::google::protobuf::Message {
 public:
  DownloadDataFile();
  virtual ~DownloadDataFile();
  
  DownloadDataFile(const DownloadDataFile& from);
  
  inline DownloadDataFile& operator=(const DownloadDataFile& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DownloadDataFile& default_instance();
  
  void Swap(DownloadDataFile* other);
  
  // implements Message ----------------------------------------------
  
  DownloadDataFile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DownloadDataFile& from);
  void MergeFrom(const DownloadDataFile& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 file_id = 2;
  inline bool has_file_id() const;
  inline void clear_file_id();
  static const int kFileIdFieldNumber = 2;
  inline ::google::protobuf::uint64 file_id() const;
  inline void set_file_id(::google::protobuf::uint64 value);
  
  // required uint64 load_id = 3;
  inline bool has_load_id() const;
  inline void clear_load_id();
  static const int kLoadIdFieldNumber = 3;
  inline ::google::protobuf::uint64 load_id() const;
  inline void set_load_id(::google::protobuf::uint64 value);
  
  // required .samson.network.File file = 4;
  inline bool has_file() const;
  inline void clear_file();
  static const int kFileFieldNumber = 4;
  inline const ::samson::network::File& file() const;
  inline ::samson::network::File* mutable_file();
  
  // @@protoc_insertion_point(class_scope:samson.network.DownloadDataFile)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 file_id_;
  ::google::protobuf::uint64 load_id_;
  ::samson::network::File* file_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DownloadDataFile* default_instance_;
};
// -------------------------------------------------------------------

class DownloadDataFileResponse : public ::google::protobuf::Message {
 public:
  DownloadDataFileResponse();
  virtual ~DownloadDataFileResponse();
  
  DownloadDataFileResponse(const DownloadDataFileResponse& from);
  
  inline DownloadDataFileResponse& operator=(const DownloadDataFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DownloadDataFileResponse& default_instance();
  
  void Swap(DownloadDataFileResponse* other);
  
  // implements Message ----------------------------------------------
  
  DownloadDataFileResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DownloadDataFileResponse& from);
  void MergeFrom(const DownloadDataFileResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .samson.network.DownloadDataFile query = 1;
  inline bool has_query() const;
  inline void clear_query();
  static const int kQueryFieldNumber = 1;
  inline const ::samson::network::DownloadDataFile& query() const;
  inline ::samson::network::DownloadDataFile* mutable_query();
  
  // optional .samson.network.Error error = 100;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 100;
  inline const ::samson::network::Error& error() const;
  inline ::samson::network::Error* mutable_error();
  
  // @@protoc_insertion_point(class_scope:samson.network.DownloadDataFileResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::samson::network::DownloadDataFile* query_;
  ::samson::network::Error* error_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DownloadDataFileResponse* default_instance_;
};
// -------------------------------------------------------------------

class DownloadDataFinish : public ::google::protobuf::Message {
 public:
  DownloadDataFinish();
  virtual ~DownloadDataFinish();
  
  DownloadDataFinish(const DownloadDataFinish& from);
  
  inline DownloadDataFinish& operator=(const DownloadDataFinish& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DownloadDataFinish& default_instance();
  
  void Swap(DownloadDataFinish* other);
  
  // implements Message ----------------------------------------------
  
  DownloadDataFinish* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DownloadDataFinish& from);
  void MergeFrom(const DownloadDataFinish& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 file_id = 2;
  inline bool has_file_id() const;
  inline void clear_file_id();
  static const int kFileIdFieldNumber = 2;
  inline ::google::protobuf::uint64 file_id() const;
  inline void set_file_id(::google::protobuf::uint64 value);
  
  // required uint64 load_id = 3;
  inline bool has_load_id() const;
  inline void clear_load_id();
  static const int kLoadIdFieldNumber = 3;
  inline ::google::protobuf::uint64 load_id() const;
  inline void set_load_id(::google::protobuf::uint64 value);
  
  // optional .samson.network.Error error = 100;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 100;
  inline const ::samson::network::Error& error() const;
  inline ::samson::network::Error* mutable_error();
  
  // @@protoc_insertion_point(class_scope:samson.network.DownloadDataFinish)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 file_id_;
  ::google::protobuf::uint64 load_id_;
  ::samson::network::Error* error_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DownloadDataFinish* default_instance_;
};
// -------------------------------------------------------------------

class DownloadDataFinishResponse : public ::google::protobuf::Message {
 public:
  DownloadDataFinishResponse();
  virtual ~DownloadDataFinishResponse();
  
  DownloadDataFinishResponse(const DownloadDataFinishResponse& from);
  
  inline DownloadDataFinishResponse& operator=(const DownloadDataFinishResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DownloadDataFinishResponse& default_instance();
  
  void Swap(DownloadDataFinishResponse* other);
  
  // implements Message ----------------------------------------------
  
  DownloadDataFinishResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DownloadDataFinishResponse& from);
  void MergeFrom(const DownloadDataFinishResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .samson.network.DownloadDataFinish query = 1;
  inline bool has_query() const;
  inline void clear_query();
  static const int kQueryFieldNumber = 1;
  inline const ::samson::network::DownloadDataFinish& query() const;
  inline ::samson::network::DownloadDataFinish* mutable_query();
  
  // optional .samson.network.Error error = 100;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 100;
  inline const ::samson::network::Error& error() const;
  inline ::samson::network::Error* mutable_error();
  
  // @@protoc_insertion_point(class_scope:samson.network.DownloadDataFinishResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::samson::network::DownloadDataFinish* query_;
  ::samson::network::Error* error_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DownloadDataFinishResponse* default_instance_;
};
// -------------------------------------------------------------------

class MessageProcessPlatform : public ::google::protobuf::Message {
 public:
  MessageProcessPlatform();
  virtual ~MessageProcessPlatform();
  
  MessageProcessPlatform(const MessageProcessPlatform& from);
  
  inline MessageProcessPlatform& operator=(const MessageProcessPlatform& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageProcessPlatform& default_instance();
  
  void Swap(MessageProcessPlatform* other);
  
  // implements Message ----------------------------------------------
  
  MessageProcessPlatform* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageProcessPlatform& from);
  void MergeFrom(const MessageProcessPlatform& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef MessageProcessPlatform_Code Code;
  static const Code code_begin = MessageProcessPlatform_Code_code_begin;
  static const Code code_end = MessageProcessPlatform_Code_code_end;
  static const Code code_operation = MessageProcessPlatform_Code_code_operation;
  static const Code code_trace = MessageProcessPlatform_Code_code_trace;
  static const Code code_user_error = MessageProcessPlatform_Code_code_user_error;
  static const Code code_progress = MessageProcessPlatform_Code_code_progress;
  static inline bool Code_IsValid(int value) {
    return MessageProcessPlatform_Code_IsValid(value);
  }
  static const Code Code_MIN =
    MessageProcessPlatform_Code_Code_MIN;
  static const Code Code_MAX =
    MessageProcessPlatform_Code_Code_MAX;
  static const int Code_ARRAYSIZE =
    MessageProcessPlatform_Code_Code_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Code_descriptor() {
    return MessageProcessPlatform_Code_descriptor();
  }
  static inline const ::std::string& Code_Name(Code value) {
    return MessageProcessPlatform_Code_Name(value);
  }
  static inline bool Code_Parse(const ::std::string& name,
      Code* value) {
    return MessageProcessPlatform_Code_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .samson.network.MessageProcessPlatform.Code code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::samson::network::MessageProcessPlatform_Code code() const;
  inline void set_code(::samson::network::MessageProcessPlatform_Code value);
  
  // optional int32 operation = 2;
  inline bool has_operation() const;
  inline void clear_operation();
  static const int kOperationFieldNumber = 2;
  inline ::google::protobuf::int32 operation() const;
  inline void set_operation(::google::protobuf::int32 value);
  
  // optional .samson.network.Trace trace = 3;
  inline bool has_trace() const;
  inline void clear_trace();
  static const int kTraceFieldNumber = 3;
  inline const ::samson::network::Trace& trace() const;
  inline ::samson::network::Trace* mutable_trace();
  
  // optional double progress = 4;
  inline bool has_progress() const;
  inline void clear_progress();
  static const int kProgressFieldNumber = 4;
  inline double progress() const;
  inline void set_progress(double value);
  
  // optional string error = 5;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 5;
  inline const ::std::string& error() const;
  inline void set_error(const ::std::string& value);
  inline void set_error(const char* value);
  inline void set_error(const char* value, size_t size);
  inline ::std::string* mutable_error();
  
  // @@protoc_insertion_point(class_scope:samson.network.MessageProcessPlatform)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int code_;
  ::google::protobuf::int32 operation_;
  ::samson::network::Trace* trace_;
  double progress_;
  ::std::string* error_;
  static const ::std::string _default_error_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MessageProcessPlatform* default_instance_;
};
// -------------------------------------------------------------------

class MessagePlatformProcess : public ::google::protobuf::Message {
 public:
  MessagePlatformProcess();
  virtual ~MessagePlatformProcess();
  
  MessagePlatformProcess(const MessagePlatformProcess& from);
  
  inline MessagePlatformProcess& operator=(const MessagePlatformProcess& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MessagePlatformProcess& default_instance();
  
  void Swap(MessagePlatformProcess* other);
  
  // implements Message ----------------------------------------------
  
  MessagePlatformProcess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessagePlatformProcess& from);
  void MergeFrom(const MessagePlatformProcess& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef MessagePlatformProcess_Code Code;
  static const Code code_ok = MessagePlatformProcess_Code_code_ok;
  static const Code code_kill = MessagePlatformProcess_Code_code_kill;
  static inline bool Code_IsValid(int value) {
    return MessagePlatformProcess_Code_IsValid(value);
  }
  static const Code Code_MIN =
    MessagePlatformProcess_Code_Code_MIN;
  static const Code Code_MAX =
    MessagePlatformProcess_Code_Code_MAX;
  static const int Code_ARRAYSIZE =
    MessagePlatformProcess_Code_Code_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Code_descriptor() {
    return MessagePlatformProcess_Code_descriptor();
  }
  static inline const ::std::string& Code_Name(Code value) {
    return MessagePlatformProcess_Code_Name(value);
  }
  static inline bool Code_Parse(const ::std::string& name,
      Code* value) {
    return MessagePlatformProcess_Code_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .samson.network.MessagePlatformProcess.Code code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::samson::network::MessagePlatformProcess_Code code() const;
  inline void set_code(::samson::network::MessagePlatformProcess_Code value);
  
  // @@protoc_insertion_point(class_scope:samson.network.MessagePlatformProcess)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int code_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MessagePlatformProcess* default_instance_;
};
// -------------------------------------------------------------------

class Message : public ::google::protobuf::Message {
 public:
  Message();
  virtual ~Message();
  
  Message(const Message& from);
  
  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();
  
  void Swap(Message* other);
  
  // implements Message ----------------------------------------------
  
  Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Message_Sender Sender;
  static const Sender Worker = Message_Sender_Worker;
  static const Sender Controller = Message_Sender_Controller;
  static const Sender Delilah = Message_Sender_Delilah;
  static inline bool Sender_IsValid(int value) {
    return Message_Sender_IsValid(value);
  }
  static const Sender Sender_MIN =
    Message_Sender_Sender_MIN;
  static const Sender Sender_MAX =
    Message_Sender_Sender_MAX;
  static const int Sender_ARRAYSIZE =
    Message_Sender_Sender_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Sender_descriptor() {
    return Message_Sender_descriptor();
  }
  static inline const ::std::string& Sender_Name(Sender value) {
    return Message_Sender_Name(value);
  }
  static inline bool Sender_Parse(const ::std::string& name,
      Sender* value) {
    return Message_Sender_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .samson.network.Command command = 103;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 103;
  inline const ::samson::network::Command& command() const;
  inline ::samson::network::Command* mutable_command();
  
  // optional .samson.network.CommandResponse command_response = 104;
  inline bool has_command_response() const;
  inline void clear_command_response();
  static const int kCommandResponseFieldNumber = 104;
  inline const ::samson::network::CommandResponse& command_response() const;
  inline ::samson::network::CommandResponse* mutable_command_response();
  
  // optional .samson.network.WorkerTask worker_task = 105;
  inline bool has_worker_task() const;
  inline void clear_worker_task();
  static const int kWorkerTaskFieldNumber = 105;
  inline const ::samson::network::WorkerTask& worker_task() const;
  inline ::samson::network::WorkerTask* mutable_worker_task();
  
  // optional .samson.network.WorkerTaskConfirmation worker_task_confirmation = 106;
  inline bool has_worker_task_confirmation() const;
  inline void clear_worker_task_confirmation();
  static const int kWorkerTaskConfirmationFieldNumber = 106;
  inline const ::samson::network::WorkerTaskConfirmation& worker_task_confirmation() const;
  inline ::samson::network::WorkerTaskConfirmation* mutable_worker_task_confirmation();
  
  // optional .samson.network.WorkerTaskKill worker_task_kill = 202;
  inline bool has_worker_task_kill() const;
  inline void clear_worker_task_kill();
  static const int kWorkerTaskKillFieldNumber = 202;
  inline const ::samson::network::WorkerTaskKill& worker_task_kill() const;
  inline ::samson::network::WorkerTaskKill* mutable_worker_task_kill();
  
  // optional .samson.network.WorkerTaskRemove worker_task_remove = 203;
  inline bool has_worker_task_remove() const;
  inline void clear_worker_task_remove();
  static const int kWorkerTaskRemoveFieldNumber = 203;
  inline const ::samson::network::WorkerTaskRemove& worker_task_remove() const;
  inline ::samson::network::WorkerTaskRemove* mutable_worker_task_remove();
  
  // optional .samson.network.WorkerDataExchange data = 107;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 107;
  inline const ::samson::network::WorkerDataExchange& data() const;
  inline ::samson::network::WorkerDataExchange* mutable_data();
  
  // optional .samson.network.WorkerDataExchangeClose data_close = 108;
  inline bool has_data_close() const;
  inline void clear_data_close();
  static const int kDataCloseFieldNumber = 108;
  inline const ::samson::network::WorkerDataExchangeClose& data_close() const;
  inline ::samson::network::WorkerDataExchangeClose* mutable_data_close();
  
  // optional .samson.network.UploadDataInit upload_data_init = 111;
  inline bool has_upload_data_init() const;
  inline void clear_upload_data_init();
  static const int kUploadDataInitFieldNumber = 111;
  inline const ::samson::network::UploadDataInit& upload_data_init() const;
  inline ::samson::network::UploadDataInit* mutable_upload_data_init();
  
  // optional .samson.network.UploadDataInitResponse upload_data_init_response = 112;
  inline bool has_upload_data_init_response() const;
  inline void clear_upload_data_init_response();
  static const int kUploadDataInitResponseFieldNumber = 112;
  inline const ::samson::network::UploadDataInitResponse& upload_data_init_response() const;
  inline ::samson::network::UploadDataInitResponse* mutable_upload_data_init_response();
  
  // optional .samson.network.UploadDataFile upload_data_file = 113;
  inline bool has_upload_data_file() const;
  inline void clear_upload_data_file();
  static const int kUploadDataFileFieldNumber = 113;
  inline const ::samson::network::UploadDataFile& upload_data_file() const;
  inline ::samson::network::UploadDataFile* mutable_upload_data_file();
  
  // optional .samson.network.UploadDataFileResponse upload_data_file_response = 114;
  inline bool has_upload_data_file_response() const;
  inline void clear_upload_data_file_response();
  static const int kUploadDataFileResponseFieldNumber = 114;
  inline const ::samson::network::UploadDataFileResponse& upload_data_file_response() const;
  inline ::samson::network::UploadDataFileResponse* mutable_upload_data_file_response();
  
  // optional .samson.network.UploadDataFinish upload_data_finish = 115;
  inline bool has_upload_data_finish() const;
  inline void clear_upload_data_finish();
  static const int kUploadDataFinishFieldNumber = 115;
  inline const ::samson::network::UploadDataFinish& upload_data_finish() const;
  inline ::samson::network::UploadDataFinish* mutable_upload_data_finish();
  
  // optional .samson.network.UploadDataFinishResponse upload_data_finish_response = 116;
  inline bool has_upload_data_finish_response() const;
  inline void clear_upload_data_finish_response();
  static const int kUploadDataFinishResponseFieldNumber = 116;
  inline const ::samson::network::UploadDataFinishResponse& upload_data_finish_response() const;
  inline ::samson::network::UploadDataFinishResponse* mutable_upload_data_finish_response();
  
  // optional .samson.network.DownloadDataInit download_data_init = 117;
  inline bool has_download_data_init() const;
  inline void clear_download_data_init();
  static const int kDownloadDataInitFieldNumber = 117;
  inline const ::samson::network::DownloadDataInit& download_data_init() const;
  inline ::samson::network::DownloadDataInit* mutable_download_data_init();
  
  // optional .samson.network.DownloadDataInitResponse download_data_init_response = 118;
  inline bool has_download_data_init_response() const;
  inline void clear_download_data_init_response();
  static const int kDownloadDataInitResponseFieldNumber = 118;
  inline const ::samson::network::DownloadDataInitResponse& download_data_init_response() const;
  inline ::samson::network::DownloadDataInitResponse* mutable_download_data_init_response();
  
  // optional .samson.network.DownloadDataFile download_data_file = 119;
  inline bool has_download_data_file() const;
  inline void clear_download_data_file();
  static const int kDownloadDataFileFieldNumber = 119;
  inline const ::samson::network::DownloadDataFile& download_data_file() const;
  inline ::samson::network::DownloadDataFile* mutable_download_data_file();
  
  // optional .samson.network.DownloadDataFileResponse download_data_file_response = 120;
  inline bool has_download_data_file_response() const;
  inline void clear_download_data_file_response();
  static const int kDownloadDataFileResponseFieldNumber = 120;
  inline const ::samson::network::DownloadDataFileResponse& download_data_file_response() const;
  inline ::samson::network::DownloadDataFileResponse* mutable_download_data_file_response();
  
  // optional .samson.network.DownloadDataFinish download_data_finish = 121;
  inline bool has_download_data_finish() const;
  inline void clear_download_data_finish();
  static const int kDownloadDataFinishFieldNumber = 121;
  inline const ::samson::network::DownloadDataFinish& download_data_finish() const;
  inline ::samson::network::DownloadDataFinish* mutable_download_data_finish();
  
  // optional .samson.network.DownloadDataFinishResponse download_data_finish_response = 122;
  inline bool has_download_data_finish_response() const;
  inline void clear_download_data_finish_response();
  static const int kDownloadDataFinishResponseFieldNumber = 122;
  inline const ::samson::network::DownloadDataFinishResponse& download_data_finish_response() const;
  inline ::samson::network::DownloadDataFinishResponse* mutable_download_data_finish_response();
  
  // optional .samson.network.WorkerStatus worker_status = 170;
  inline bool has_worker_status() const;
  inline void clear_worker_status();
  static const int kWorkerStatusFieldNumber = 170;
  inline const ::samson::network::WorkerStatus& worker_status() const;
  inline ::samson::network::WorkerStatus* mutable_worker_status();
  
  // optional .samson.network.Trace trace = 171;
  inline bool has_trace() const;
  inline void clear_trace();
  static const int kTraceFieldNumber = 171;
  inline const ::samson::network::Trace& trace() const;
  inline ::samson::network::Trace* mutable_trace();
  
  // optional uint64 delilah_id = 300;
  inline bool has_delilah_id() const;
  inline void clear_delilah_id();
  static const int kDelilahIdFieldNumber = 300;
  inline ::google::protobuf::uint64 delilah_id() const;
  inline void set_delilah_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:samson.network.Message)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::samson::network::Command* command_;
  ::samson::network::CommandResponse* command_response_;
  ::samson::network::WorkerTask* worker_task_;
  ::samson::network::WorkerTaskConfirmation* worker_task_confirmation_;
  ::samson::network::WorkerTaskKill* worker_task_kill_;
  ::samson::network::WorkerTaskRemove* worker_task_remove_;
  ::samson::network::WorkerDataExchange* data_;
  ::samson::network::WorkerDataExchangeClose* data_close_;
  ::samson::network::UploadDataInit* upload_data_init_;
  ::samson::network::UploadDataInitResponse* upload_data_init_response_;
  ::samson::network::UploadDataFile* upload_data_file_;
  ::samson::network::UploadDataFileResponse* upload_data_file_response_;
  ::samson::network::UploadDataFinish* upload_data_finish_;
  ::samson::network::UploadDataFinishResponse* upload_data_finish_response_;
  ::samson::network::DownloadDataInit* download_data_init_;
  ::samson::network::DownloadDataInitResponse* download_data_init_response_;
  ::samson::network::DownloadDataFile* download_data_file_;
  ::samson::network::DownloadDataFileResponse* download_data_file_response_;
  ::samson::network::DownloadDataFinish* download_data_finish_;
  ::samson::network::DownloadDataFinishResponse* download_data_finish_response_;
  ::samson::network::WorkerStatus* worker_status_;
  ::samson::network::Trace* trace_;
  ::google::protobuf::uint64 delilah_id_;
  friend void  protobuf_AddDesc_samson_2eproto();
  friend void protobuf_AssignDesc_samson_2eproto();
  friend void protobuf_ShutdownFile_samson_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(23 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// ===================================================================


// ===================================================================

// EnvironmentVariable

// required string name = 1;
inline bool EnvironmentVariable::has_name() const {
  return _has_bit(0);
}
inline void EnvironmentVariable::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& EnvironmentVariable::name() const {
  return *name_;
}
inline void EnvironmentVariable::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void EnvironmentVariable::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void EnvironmentVariable::set_name(const char* value, size_t size) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EnvironmentVariable::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// required string value = 2;
inline bool EnvironmentVariable::has_value() const {
  return _has_bit(1);
}
inline void EnvironmentVariable::clear_value() {
  if (value_ != &_default_value_) {
    value_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& EnvironmentVariable::value() const {
  return *value_;
}
inline void EnvironmentVariable::set_value(const ::std::string& value) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void EnvironmentVariable::set_value(const char* value) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void EnvironmentVariable::set_value(const char* value, size_t size) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EnvironmentVariable::mutable_value() {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  return value_;
}

// -------------------------------------------------------------------

// Environment

// repeated .samson.network.EnvironmentVariable variable = 1;
inline int Environment::variable_size() const {
  return variable_.size();
}
inline void Environment::clear_variable() {
  variable_.Clear();
}
inline const ::samson::network::EnvironmentVariable& Environment::variable(int index) const {
  return variable_.Get(index);
}
inline ::samson::network::EnvironmentVariable* Environment::mutable_variable(int index) {
  return variable_.Mutable(index);
}
inline ::samson::network::EnvironmentVariable* Environment::add_variable() {
  return variable_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::samson::network::EnvironmentVariable >&
Environment::variable() const {
  return variable_;
}
inline ::google::protobuf::RepeatedPtrField< ::samson::network::EnvironmentVariable >*
Environment::mutable_variable() {
  return &variable_;
}

// -------------------------------------------------------------------

// KVInfo

// required uint64 size = 1;
inline bool KVInfo::has_size() const {
  return _has_bit(0);
}
inline void KVInfo::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 KVInfo::size() const {
  return size_;
}
inline void KVInfo::set_size(::google::protobuf::uint64 value) {
  _set_bit(0);
  size_ = value;
}

// required uint64 kvs = 2;
inline bool KVInfo::has_kvs() const {
  return _has_bit(1);
}
inline void KVInfo::clear_kvs() {
  kvs_ = GOOGLE_ULONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::uint64 KVInfo::kvs() const {
  return kvs_;
}
inline void KVInfo::set_kvs(::google::protobuf::uint64 value) {
  _set_bit(1);
  kvs_ = value;
}

// -------------------------------------------------------------------

// File

// required string name = 1;
inline bool File::has_name() const {
  return _has_bit(0);
}
inline void File::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& File::name() const {
  return *name_;
}
inline void File::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void File::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void File::set_name(const char* value, size_t size) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* File::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// required int32 worker = 2;
inline bool File::has_worker() const {
  return _has_bit(1);
}
inline void File::clear_worker() {
  worker_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 File::worker() const {
  return worker_;
}
inline void File::set_worker(::google::protobuf::int32 value) {
  _set_bit(1);
  worker_ = value;
}

// optional .samson.network.KVInfo info = 3;
inline bool File::has_info() const {
  return _has_bit(2);
}
inline void File::clear_info() {
  if (info_ != NULL) info_->::samson::network::KVInfo::Clear();
  _clear_bit(2);
}
inline const ::samson::network::KVInfo& File::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::samson::network::KVInfo* File::mutable_info() {
  _set_bit(2);
  if (info_ == NULL) info_ = new ::samson::network::KVInfo;
  return info_;
}

// -------------------------------------------------------------------

// Queue

// required string name = 1;
inline bool Queue::has_name() const {
  return _has_bit(0);
}
inline void Queue::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Queue::name() const {
  return *name_;
}
inline void Queue::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Queue::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Queue::set_name(const char* value, size_t size) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Queue::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// required .samson.network.KVFormat format = 2;
inline bool Queue::has_format() const {
  return _has_bit(1);
}
inline void Queue::clear_format() {
  if (format_ != NULL) format_->::samson::network::KVFormat::Clear();
  _clear_bit(1);
}
inline const ::samson::network::KVFormat& Queue::format() const {
  return format_ != NULL ? *format_ : *default_instance_->format_;
}
inline ::samson::network::KVFormat* Queue::mutable_format() {
  _set_bit(1);
  if (format_ == NULL) format_ = new ::samson::network::KVFormat;
  return format_;
}

// optional .samson.network.KVInfo info = 3;
inline bool Queue::has_info() const {
  return _has_bit(2);
}
inline void Queue::clear_info() {
  if (info_ != NULL) info_->::samson::network::KVInfo::Clear();
  _clear_bit(2);
}
inline const ::samson::network::KVInfo& Queue::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::samson::network::KVInfo* Queue::mutable_info() {
  _set_bit(2);
  if (info_ == NULL) info_ = new ::samson::network::KVInfo;
  return info_;
}

// -------------------------------------------------------------------

// FullQueue

// required .samson.network.Queue queue = 1;
inline bool FullQueue::has_queue() const {
  return _has_bit(0);
}
inline void FullQueue::clear_queue() {
  if (queue_ != NULL) queue_->::samson::network::Queue::Clear();
  _clear_bit(0);
}
inline const ::samson::network::Queue& FullQueue::queue() const {
  return queue_ != NULL ? *queue_ : *default_instance_->queue_;
}
inline ::samson::network::Queue* FullQueue::mutable_queue() {
  _set_bit(0);
  if (queue_ == NULL) queue_ = new ::samson::network::Queue;
  return queue_;
}

// repeated .samson.network.File file = 2;
inline int FullQueue::file_size() const {
  return file_.size();
}
inline void FullQueue::clear_file() {
  file_.Clear();
}
inline const ::samson::network::File& FullQueue::file(int index) const {
  return file_.Get(index);
}
inline ::samson::network::File* FullQueue::mutable_file(int index) {
  return file_.Mutable(index);
}
inline ::samson::network::File* FullQueue::add_file() {
  return file_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::samson::network::File >&
FullQueue::file() const {
  return file_;
}
inline ::google::protobuf::RepeatedPtrField< ::samson::network::File >*
FullQueue::mutable_file() {
  return &file_;
}

// -------------------------------------------------------------------

// QueueFile

// required string queue = 1;
inline bool QueueFile::has_queue() const {
  return _has_bit(0);
}
inline void QueueFile::clear_queue() {
  if (queue_ != &_default_queue_) {
    queue_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& QueueFile::queue() const {
  return *queue_;
}
inline void QueueFile::set_queue(const ::std::string& value) {
  _set_bit(0);
  if (queue_ == &_default_queue_) {
    queue_ = new ::std::string;
  }
  queue_->assign(value);
}
inline void QueueFile::set_queue(const char* value) {
  _set_bit(0);
  if (queue_ == &_default_queue_) {
    queue_ = new ::std::string;
  }
  queue_->assign(value);
}
inline void QueueFile::set_queue(const char* value, size_t size) {
  _set_bit(0);
  if (queue_ == &_default_queue_) {
    queue_ = new ::std::string;
  }
  queue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueueFile::mutable_queue() {
  _set_bit(0);
  if (queue_ == &_default_queue_) {
    queue_ = new ::std::string;
  }
  return queue_;
}

// required .samson.network.File file = 2;
inline bool QueueFile::has_file() const {
  return _has_bit(1);
}
inline void QueueFile::clear_file() {
  if (file_ != NULL) file_->::samson::network::File::Clear();
  _clear_bit(1);
}
inline const ::samson::network::File& QueueFile::file() const {
  return file_ != NULL ? *file_ : *default_instance_->file_;
}
inline ::samson::network::File* QueueFile::mutable_file() {
  _set_bit(1);
  if (file_ == NULL) file_ = new ::samson::network::File;
  return file_;
}

// -------------------------------------------------------------------

// KVFormat

// required string keyFormat = 1;
inline bool KVFormat::has_keyformat() const {
  return _has_bit(0);
}
inline void KVFormat::clear_keyformat() {
  if (keyformat_ != &_default_keyformat_) {
    keyformat_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& KVFormat::keyformat() const {
  return *keyformat_;
}
inline void KVFormat::set_keyformat(const ::std::string& value) {
  _set_bit(0);
  if (keyformat_ == &_default_keyformat_) {
    keyformat_ = new ::std::string;
  }
  keyformat_->assign(value);
}
inline void KVFormat::set_keyformat(const char* value) {
  _set_bit(0);
  if (keyformat_ == &_default_keyformat_) {
    keyformat_ = new ::std::string;
  }
  keyformat_->assign(value);
}
inline void KVFormat::set_keyformat(const char* value, size_t size) {
  _set_bit(0);
  if (keyformat_ == &_default_keyformat_) {
    keyformat_ = new ::std::string;
  }
  keyformat_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KVFormat::mutable_keyformat() {
  _set_bit(0);
  if (keyformat_ == &_default_keyformat_) {
    keyformat_ = new ::std::string;
  }
  return keyformat_;
}

// required string ValueFormat = 2;
inline bool KVFormat::has_valueformat() const {
  return _has_bit(1);
}
inline void KVFormat::clear_valueformat() {
  if (valueformat_ != &_default_valueformat_) {
    valueformat_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& KVFormat::valueformat() const {
  return *valueformat_;
}
inline void KVFormat::set_valueformat(const ::std::string& value) {
  _set_bit(1);
  if (valueformat_ == &_default_valueformat_) {
    valueformat_ = new ::std::string;
  }
  valueformat_->assign(value);
}
inline void KVFormat::set_valueformat(const char* value) {
  _set_bit(1);
  if (valueformat_ == &_default_valueformat_) {
    valueformat_ = new ::std::string;
  }
  valueformat_->assign(value);
}
inline void KVFormat::set_valueformat(const char* value, size_t size) {
  _set_bit(1);
  if (valueformat_ == &_default_valueformat_) {
    valueformat_ = new ::std::string;
  }
  valueformat_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KVFormat::mutable_valueformat() {
  _set_bit(1);
  if (valueformat_ == &_default_valueformat_) {
    valueformat_ = new ::std::string;
  }
  return valueformat_;
}

// -------------------------------------------------------------------

// Operation

// required string name = 1;
inline bool Operation::has_name() const {
  return _has_bit(0);
}
inline void Operation::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Operation::name() const {
  return *name_;
}
inline void Operation::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Operation::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Operation::set_name(const char* value, size_t size) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Operation::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// required string help = 2;
inline bool Operation::has_help() const {
  return _has_bit(1);
}
inline void Operation::clear_help() {
  if (help_ != &_default_help_) {
    help_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Operation::help() const {
  return *help_;
}
inline void Operation::set_help(const ::std::string& value) {
  _set_bit(1);
  if (help_ == &_default_help_) {
    help_ = new ::std::string;
  }
  help_->assign(value);
}
inline void Operation::set_help(const char* value) {
  _set_bit(1);
  if (help_ == &_default_help_) {
    help_ = new ::std::string;
  }
  help_->assign(value);
}
inline void Operation::set_help(const char* value, size_t size) {
  _set_bit(1);
  if (help_ == &_default_help_) {
    help_ = new ::std::string;
  }
  help_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Operation::mutable_help() {
  _set_bit(1);
  if (help_ == &_default_help_) {
    help_ = new ::std::string;
  }
  return help_;
}

// required string help_line = 3;
inline bool Operation::has_help_line() const {
  return _has_bit(2);
}
inline void Operation::clear_help_line() {
  if (help_line_ != &_default_help_line_) {
    help_line_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& Operation::help_line() const {
  return *help_line_;
}
inline void Operation::set_help_line(const ::std::string& value) {
  _set_bit(2);
  if (help_line_ == &_default_help_line_) {
    help_line_ = new ::std::string;
  }
  help_line_->assign(value);
}
inline void Operation::set_help_line(const char* value) {
  _set_bit(2);
  if (help_line_ == &_default_help_line_) {
    help_line_ = new ::std::string;
  }
  help_line_->assign(value);
}
inline void Operation::set_help_line(const char* value, size_t size) {
  _set_bit(2);
  if (help_line_ == &_default_help_line_) {
    help_line_ = new ::std::string;
  }
  help_line_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Operation::mutable_help_line() {
  _set_bit(2);
  if (help_line_ == &_default_help_line_) {
    help_line_ = new ::std::string;
  }
  return help_line_;
}

// repeated .samson.network.KVFormat input = 4;
inline int Operation::input_size() const {
  return input_.size();
}
inline void Operation::clear_input() {
  input_.Clear();
}
inline const ::samson::network::KVFormat& Operation::input(int index) const {
  return input_.Get(index);
}
inline ::samson::network::KVFormat* Operation::mutable_input(int index) {
  return input_.Mutable(index);
}
inline ::samson::network::KVFormat* Operation::add_input() {
  return input_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::samson::network::KVFormat >&
Operation::input() const {
  return input_;
}
inline ::google::protobuf::RepeatedPtrField< ::samson::network::KVFormat >*
Operation::mutable_input() {
  return &input_;
}

// repeated .samson.network.KVFormat output = 5;
inline int Operation::output_size() const {
  return output_.size();
}
inline void Operation::clear_output() {
  output_.Clear();
}
inline const ::samson::network::KVFormat& Operation::output(int index) const {
  return output_.Get(index);
}
inline ::samson::network::KVFormat* Operation::mutable_output(int index) {
  return output_.Mutable(index);
}
inline ::samson::network::KVFormat* Operation::add_output() {
  return output_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::samson::network::KVFormat >&
Operation::output() const {
  return output_;
}
inline ::google::protobuf::RepeatedPtrField< ::samson::network::KVFormat >*
Operation::mutable_output() {
  return &output_;
}

// -------------------------------------------------------------------

// Data

// required string name = 1;
inline bool Data::has_name() const {
  return _has_bit(0);
}
inline void Data::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Data::name() const {
  return *name_;
}
inline void Data::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Data::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Data::set_name(const char* value, size_t size) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// required string help = 2;
inline bool Data::has_help() const {
  return _has_bit(1);
}
inline void Data::clear_help() {
  if (help_ != &_default_help_) {
    help_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Data::help() const {
  return *help_;
}
inline void Data::set_help(const ::std::string& value) {
  _set_bit(1);
  if (help_ == &_default_help_) {
    help_ = new ::std::string;
  }
  help_->assign(value);
}
inline void Data::set_help(const char* value) {
  _set_bit(1);
  if (help_ == &_default_help_) {
    help_ = new ::std::string;
  }
  help_->assign(value);
}
inline void Data::set_help(const char* value, size_t size) {
  _set_bit(1);
  if (help_ == &_default_help_) {
    help_ = new ::std::string;
  }
  help_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_help() {
  _set_bit(1);
  if (help_ == &_default_help_) {
    help_ = new ::std::string;
  }
  return help_;
}

// -------------------------------------------------------------------

// JobItem

// required string command = 1;
inline bool JobItem::has_command() const {
  return _has_bit(0);
}
inline void JobItem::clear_command() {
  if (command_ != &_default_command_) {
    command_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& JobItem::command() const {
  return *command_;
}
inline void JobItem::set_command(const ::std::string& value) {
  _set_bit(0);
  if (command_ == &_default_command_) {
    command_ = new ::std::string;
  }
  command_->assign(value);
}
inline void JobItem::set_command(const char* value) {
  _set_bit(0);
  if (command_ == &_default_command_) {
    command_ = new ::std::string;
  }
  command_->assign(value);
}
inline void JobItem::set_command(const char* value, size_t size) {
  _set_bit(0);
  if (command_ == &_default_command_) {
    command_ = new ::std::string;
  }
  command_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JobItem::mutable_command() {
  _set_bit(0);
  if (command_ == &_default_command_) {
    command_ = new ::std::string;
  }
  return command_;
}

// required int32 line = 2;
inline bool JobItem::has_line() const {
  return _has_bit(1);
}
inline void JobItem::clear_line() {
  line_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 JobItem::line() const {
  return line_;
}
inline void JobItem::set_line(::google::protobuf::int32 value) {
  _set_bit(1);
  line_ = value;
}

// required int32 num_lines = 3;
inline bool JobItem::has_num_lines() const {
  return _has_bit(2);
}
inline void JobItem::clear_num_lines() {
  num_lines_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 JobItem::num_lines() const {
  return num_lines_;
}
inline void JobItem::set_num_lines(::google::protobuf::int32 value) {
  _set_bit(2);
  num_lines_ = value;
}

// -------------------------------------------------------------------

// AutomaticOperation

// required uint64 id = 3;
inline bool AutomaticOperation::has_id() const {
  return _has_bit(0);
}
inline void AutomaticOperation::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 AutomaticOperation::id() const {
  return id_;
}
inline void AutomaticOperation::set_id(::google::protobuf::uint64 value) {
  _set_bit(0);
  id_ = value;
}

// required string command = 1;
inline bool AutomaticOperation::has_command() const {
  return _has_bit(1);
}
inline void AutomaticOperation::clear_command() {
  if (command_ != &_default_command_) {
    command_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& AutomaticOperation::command() const {
  return *command_;
}
inline void AutomaticOperation::set_command(const ::std::string& value) {
  _set_bit(1);
  if (command_ == &_default_command_) {
    command_ = new ::std::string;
  }
  command_->assign(value);
}
inline void AutomaticOperation::set_command(const char* value) {
  _set_bit(1);
  if (command_ == &_default_command_) {
    command_ = new ::std::string;
  }
  command_->assign(value);
}
inline void AutomaticOperation::set_command(const char* value, size_t size) {
  _set_bit(1);
  if (command_ == &_default_command_) {
    command_ = new ::std::string;
  }
  command_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AutomaticOperation::mutable_command() {
  _set_bit(1);
  if (command_ == &_default_command_) {
    command_ = new ::std::string;
  }
  return command_;
}

// required string thrigger = 2;
inline bool AutomaticOperation::has_thrigger() const {
  return _has_bit(2);
}
inline void AutomaticOperation::clear_thrigger() {
  if (thrigger_ != &_default_thrigger_) {
    thrigger_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& AutomaticOperation::thrigger() const {
  return *thrigger_;
}
inline void AutomaticOperation::set_thrigger(const ::std::string& value) {
  _set_bit(2);
  if (thrigger_ == &_default_thrigger_) {
    thrigger_ = new ::std::string;
  }
  thrigger_->assign(value);
}
inline void AutomaticOperation::set_thrigger(const char* value) {
  _set_bit(2);
  if (thrigger_ == &_default_thrigger_) {
    thrigger_ = new ::std::string;
  }
  thrigger_->assign(value);
}
inline void AutomaticOperation::set_thrigger(const char* value, size_t size) {
  _set_bit(2);
  if (thrigger_ == &_default_thrigger_) {
    thrigger_ = new ::std::string;
  }
  thrigger_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AutomaticOperation::mutable_thrigger() {
  _set_bit(2);
  if (thrigger_ == &_default_thrigger_) {
    thrigger_ = new ::std::string;
  }
  return thrigger_;
}

// -------------------------------------------------------------------

// Job

// required uint64 id = 1;
inline bool Job::has_id() const {
  return _has_bit(0);
}
inline void Job::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 Job::id() const {
  return id_;
}
inline void Job::set_id(::google::protobuf::uint64 value) {
  _set_bit(0);
  id_ = value;
}

// required string status = 3;
inline bool Job::has_status() const {
  return _has_bit(1);
}
inline void Job::clear_status() {
  if (status_ != &_default_status_) {
    status_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Job::status() const {
  return *status_;
}
inline void Job::set_status(const ::std::string& value) {
  _set_bit(1);
  if (status_ == &_default_status_) {
    status_ = new ::std::string;
  }
  status_->assign(value);
}
inline void Job::set_status(const char* value) {
  _set_bit(1);
  if (status_ == &_default_status_) {
    status_ = new ::std::string;
  }
  status_->assign(value);
}
inline void Job::set_status(const char* value, size_t size) {
  _set_bit(1);
  if (status_ == &_default_status_) {
    status_ = new ::std::string;
  }
  status_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Job::mutable_status() {
  _set_bit(1);
  if (status_ == &_default_status_) {
    status_ = new ::std::string;
  }
  return status_;
}

// required string main_command = 2;
inline bool Job::has_main_command() const {
  return _has_bit(2);
}
inline void Job::clear_main_command() {
  if (main_command_ != &_default_main_command_) {
    main_command_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& Job::main_command() const {
  return *main_command_;
}
inline void Job::set_main_command(const ::std::string& value) {
  _set_bit(2);
  if (main_command_ == &_default_main_command_) {
    main_command_ = new ::std::string;
  }
  main_command_->assign(value);
}
inline void Job::set_main_command(const char* value) {
  _set_bit(2);
  if (main_command_ == &_default_main_command_) {
    main_command_ = new ::std::string;
  }
  main_command_->assign(value);
}
inline void Job::set_main_command(const char* value, size_t size) {
  _set_bit(2);
  if (main_command_ == &_default_main_command_) {
    main_command_ = new ::std::string;
  }
  main_command_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Job::mutable_main_command() {
  _set_bit(2);
  if (main_command_ == &_default_main_command_) {
    main_command_ = new ::std::string;
  }
  return main_command_;
}

// repeated .samson.network.JobItem item = 10;
inline int Job::item_size() const {
  return item_.size();
}
inline void Job::clear_item() {
  item_.Clear();
}
inline const ::samson::network::JobItem& Job::item(int index) const {
  return item_.Get(index);
}
inline ::samson::network::JobItem* Job::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::samson::network::JobItem* Job::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::samson::network::JobItem >&
Job::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::samson::network::JobItem >*
Job::mutable_item() {
  return &item_;
}

// -------------------------------------------------------------------

// Error

// required string message = 2;
inline bool Error::has_message() const {
  return _has_bit(0);
}
inline void Error::clear_message() {
  if (message_ != &_default_message_) {
    message_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Error::message() const {
  return *message_;
}
inline void Error::set_message(const ::std::string& value) {
  _set_bit(0);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void Error::set_message(const char* value) {
  _set_bit(0);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void Error::set_message(const char* value, size_t size) {
  _set_bit(0);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Error::mutable_message() {
  _set_bit(0);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  return message_;
}

// -------------------------------------------------------------------

// Trace

// required string text = 1;
inline bool Trace::has_text() const {
  return _has_bit(0);
}
inline void Trace::clear_text() {
  if (text_ != &_default_text_) {
    text_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Trace::text() const {
  return *text_;
}
inline void Trace::set_text(const ::std::string& value) {
  _set_bit(0);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void Trace::set_text(const char* value) {
  _set_bit(0);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void Trace::set_text(const char* value, size_t size) {
  _set_bit(0);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Trace::mutable_text() {
  _set_bit(0);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  return text_;
}

// required int32 type = 2;
inline bool Trace::has_type() const {
  return _has_bit(1);
}
inline void Trace::clear_type() {
  type_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 Trace::type() const {
  return type_;
}
inline void Trace::set_type(::google::protobuf::int32 value) {
  _set_bit(1);
  type_ = value;
}

// required string file = 3;
inline bool Trace::has_file() const {
  return _has_bit(2);
}
inline void Trace::clear_file() {
  if (file_ != &_default_file_) {
    file_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& Trace::file() const {
  return *file_;
}
inline void Trace::set_file(const ::std::string& value) {
  _set_bit(2);
  if (file_ == &_default_file_) {
    file_ = new ::std::string;
  }
  file_->assign(value);
}
inline void Trace::set_file(const char* value) {
  _set_bit(2);
  if (file_ == &_default_file_) {
    file_ = new ::std::string;
  }
  file_->assign(value);
}
inline void Trace::set_file(const char* value, size_t size) {
  _set_bit(2);
  if (file_ == &_default_file_) {
    file_ = new ::std::string;
  }
  file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Trace::mutable_file() {
  _set_bit(2);
  if (file_ == &_default_file_) {
    file_ = new ::std::string;
  }
  return file_;
}

// required int32 lineNo = 4;
inline bool Trace::has_lineno() const {
  return _has_bit(3);
}
inline void Trace::clear_lineno() {
  lineno_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 Trace::lineno() const {
  return lineno_;
}
inline void Trace::set_lineno(::google::protobuf::int32 value) {
  _set_bit(3);
  lineno_ = value;
}

// required string fName = 5;
inline bool Trace::has_fname() const {
  return _has_bit(4);
}
inline void Trace::clear_fname() {
  if (fname_ != &_default_fname_) {
    fname_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& Trace::fname() const {
  return *fname_;
}
inline void Trace::set_fname(const ::std::string& value) {
  _set_bit(4);
  if (fname_ == &_default_fname_) {
    fname_ = new ::std::string;
  }
  fname_->assign(value);
}
inline void Trace::set_fname(const char* value) {
  _set_bit(4);
  if (fname_ == &_default_fname_) {
    fname_ = new ::std::string;
  }
  fname_->assign(value);
}
inline void Trace::set_fname(const char* value, size_t size) {
  _set_bit(4);
  if (fname_ == &_default_fname_) {
    fname_ = new ::std::string;
  }
  fname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Trace::mutable_fname() {
  _set_bit(4);
  if (fname_ == &_default_fname_) {
    fname_ = new ::std::string;
  }
  return fname_;
}

// required int32 tLev = 6;
inline bool Trace::has_tlev() const {
  return _has_bit(5);
}
inline void Trace::clear_tlev() {
  tlev_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 Trace::tlev() const {
  return tlev_;
}
inline void Trace::set_tlev(::google::protobuf::int32 value) {
  _set_bit(5);
  tlev_ = value;
}

// required string stre = 7;
inline bool Trace::has_stre() const {
  return _has_bit(6);
}
inline void Trace::clear_stre() {
  if (stre_ != &_default_stre_) {
    stre_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& Trace::stre() const {
  return *stre_;
}
inline void Trace::set_stre(const ::std::string& value) {
  _set_bit(6);
  if (stre_ == &_default_stre_) {
    stre_ = new ::std::string;
  }
  stre_->assign(value);
}
inline void Trace::set_stre(const char* value) {
  _set_bit(6);
  if (stre_ == &_default_stre_) {
    stre_ = new ::std::string;
  }
  stre_->assign(value);
}
inline void Trace::set_stre(const char* value, size_t size) {
  _set_bit(6);
  if (stre_ == &_default_stre_) {
    stre_ = new ::std::string;
  }
  stre_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Trace::mutable_stre() {
  _set_bit(6);
  if (stre_ == &_default_stre_) {
    stre_ = new ::std::string;
  }
  return stre_;
}

// -------------------------------------------------------------------

// ControllerTask

// required .samson.network.ControllerTask.ControllerTaskState state = 1;
inline bool ControllerTask::has_state() const {
  return _has_bit(0);
}
inline void ControllerTask::clear_state() {
  state_ = 1;
  _clear_bit(0);
}
inline ::samson::network::ControllerTask_ControllerTaskState ControllerTask::state() const {
  return static_cast< ::samson::network::ControllerTask_ControllerTaskState >(state_);
}
inline void ControllerTask::set_state(::samson::network::ControllerTask_ControllerTaskState value) {
  GOOGLE_DCHECK(::samson::network::ControllerTask_ControllerTaskState_IsValid(value));
  _set_bit(0);
  state_ = value;
}

// required int64 job_id = 2;
inline bool ControllerTask::has_job_id() const {
  return _has_bit(1);
}
inline void ControllerTask::clear_job_id() {
  job_id_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 ControllerTask::job_id() const {
  return job_id_;
}
inline void ControllerTask::set_job_id(::google::protobuf::int64 value) {
  _set_bit(1);
  job_id_ = value;
}

// required int64 task_id = 3;
inline bool ControllerTask::has_task_id() const {
  return _has_bit(2);
}
inline void ControllerTask::clear_task_id() {
  task_id_ = GOOGLE_LONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::int64 ControllerTask::task_id() const {
  return task_id_;
}
inline void ControllerTask::set_task_id(::google::protobuf::int64 value) {
  _set_bit(2);
  task_id_ = value;
}

// optional .samson.network.Error error = 10;
inline bool ControllerTask::has_error() const {
  return _has_bit(3);
}
inline void ControllerTask::clear_error() {
  if (error_ != NULL) error_->::samson::network::Error::Clear();
  _clear_bit(3);
}
inline const ::samson::network::Error& ControllerTask::error() const {
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::samson::network::Error* ControllerTask::mutable_error() {
  _set_bit(3);
  if (error_ == NULL) error_ = new ::samson::network::Error;
  return error_;
}

// optional .samson.network.KVInfo total_info = 4;
inline bool ControllerTask::has_total_info() const {
  return _has_bit(4);
}
inline void ControllerTask::clear_total_info() {
  if (total_info_ != NULL) total_info_->::samson::network::KVInfo::Clear();
  _clear_bit(4);
}
inline const ::samson::network::KVInfo& ControllerTask::total_info() const {
  return total_info_ != NULL ? *total_info_ : *default_instance_->total_info_;
}
inline ::samson::network::KVInfo* ControllerTask::mutable_total_info() {
  _set_bit(4);
  if (total_info_ == NULL) total_info_ = new ::samson::network::KVInfo;
  return total_info_;
}

// optional .samson.network.KVInfo running_info = 5;
inline bool ControllerTask::has_running_info() const {
  return _has_bit(5);
}
inline void ControllerTask::clear_running_info() {
  if (running_info_ != NULL) running_info_->::samson::network::KVInfo::Clear();
  _clear_bit(5);
}
inline const ::samson::network::KVInfo& ControllerTask::running_info() const {
  return running_info_ != NULL ? *running_info_ : *default_instance_->running_info_;
}
inline ::samson::network::KVInfo* ControllerTask::mutable_running_info() {
  _set_bit(5);
  if (running_info_ == NULL) running_info_ = new ::samson::network::KVInfo;
  return running_info_;
}

// optional .samson.network.KVInfo processed_info = 6;
inline bool ControllerTask::has_processed_info() const {
  return _has_bit(6);
}
inline void ControllerTask::clear_processed_info() {
  if (processed_info_ != NULL) processed_info_->::samson::network::KVInfo::Clear();
  _clear_bit(6);
}
inline const ::samson::network::KVInfo& ControllerTask::processed_info() const {
  return processed_info_ != NULL ? *processed_info_ : *default_instance_->processed_info_;
}
inline ::samson::network::KVInfo* ControllerTask::mutable_processed_info() {
  _set_bit(6);
  if (processed_info_ == NULL) processed_info_ = new ::samson::network::KVInfo;
  return processed_info_;
}

// -------------------------------------------------------------------

// ControllerTaskManagerStatus

// repeated .samson.network.ControllerTask task = 1;
inline int ControllerTaskManagerStatus::task_size() const {
  return task_.size();
}
inline void ControllerTaskManagerStatus::clear_task() {
  task_.Clear();
}
inline const ::samson::network::ControllerTask& ControllerTaskManagerStatus::task(int index) const {
  return task_.Get(index);
}
inline ::samson::network::ControllerTask* ControllerTaskManagerStatus::mutable_task(int index) {
  return task_.Mutable(index);
}
inline ::samson::network::ControllerTask* ControllerTaskManagerStatus::add_task() {
  return task_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::samson::network::ControllerTask >&
ControllerTaskManagerStatus::task() const {
  return task_;
}
inline ::google::protobuf::RepeatedPtrField< ::samson::network::ControllerTask >*
ControllerTaskManagerStatus::mutable_task() {
  return &task_;
}

// -------------------------------------------------------------------

// ControllerStatus

// optional uint64 up_time = 8;
inline bool ControllerStatus::has_up_time() const {
  return _has_bit(0);
}
inline void ControllerStatus::clear_up_time() {
  up_time_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 ControllerStatus::up_time() const {
  return up_time_;
}
inline void ControllerStatus::set_up_time(::google::protobuf::uint64 value) {
  _set_bit(0);
  up_time_ = value;
}

// optional string job_manager_status = 1;
inline bool ControllerStatus::has_job_manager_status() const {
  return _has_bit(1);
}
inline void ControllerStatus::clear_job_manager_status() {
  if (job_manager_status_ != &_default_job_manager_status_) {
    job_manager_status_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& ControllerStatus::job_manager_status() const {
  return *job_manager_status_;
}
inline void ControllerStatus::set_job_manager_status(const ::std::string& value) {
  _set_bit(1);
  if (job_manager_status_ == &_default_job_manager_status_) {
    job_manager_status_ = new ::std::string;
  }
  job_manager_status_->assign(value);
}
inline void ControllerStatus::set_job_manager_status(const char* value) {
  _set_bit(1);
  if (job_manager_status_ == &_default_job_manager_status_) {
    job_manager_status_ = new ::std::string;
  }
  job_manager_status_->assign(value);
}
inline void ControllerStatus::set_job_manager_status(const char* value, size_t size) {
  _set_bit(1);
  if (job_manager_status_ == &_default_job_manager_status_) {
    job_manager_status_ = new ::std::string;
  }
  job_manager_status_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ControllerStatus::mutable_job_manager_status() {
  _set_bit(1);
  if (job_manager_status_ == &_default_job_manager_status_) {
    job_manager_status_ = new ::std::string;
  }
  return job_manager_status_;
}

// optional string network_status = 3;
inline bool ControllerStatus::has_network_status() const {
  return _has_bit(2);
}
inline void ControllerStatus::clear_network_status() {
  if (network_status_ != &_default_network_status_) {
    network_status_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& ControllerStatus::network_status() const {
  return *network_status_;
}
inline void ControllerStatus::set_network_status(const ::std::string& value) {
  _set_bit(2);
  if (network_status_ == &_default_network_status_) {
    network_status_ = new ::std::string;
  }
  network_status_->assign(value);
}
inline void ControllerStatus::set_network_status(const char* value) {
  _set_bit(2);
  if (network_status_ == &_default_network_status_) {
    network_status_ = new ::std::string;
  }
  network_status_->assign(value);
}
inline void ControllerStatus::set_network_status(const char* value, size_t size) {
  _set_bit(2);
  if (network_status_ == &_default_network_status_) {
    network_status_ = new ::std::string;
  }
  network_status_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ControllerStatus::mutable_network_status() {
  _set_bit(2);
  if (network_status_ == &_default_network_status_) {
    network_status_ = new ::std::string;
  }
  return network_status_;
}

// optional .samson.network.ControllerTaskManagerStatus task_manager_status = 4;
inline bool ControllerStatus::has_task_manager_status() const {
  return _has_bit(3);
}
inline void ControllerStatus::clear_task_manager_status() {
  if (task_manager_status_ != NULL) task_manager_status_->::samson::network::ControllerTaskManagerStatus::Clear();
  _clear_bit(3);
}
inline const ::samson::network::ControllerTaskManagerStatus& ControllerStatus::task_manager_status() const {
  return task_manager_status_ != NULL ? *task_manager_status_ : *default_instance_->task_manager_status_;
}
inline ::samson::network::ControllerTaskManagerStatus* ControllerStatus::mutable_task_manager_status() {
  _set_bit(3);
  if (task_manager_status_ == NULL) task_manager_status_ = new ::samson::network::ControllerTaskManagerStatus;
  return task_manager_status_;
}

// -------------------------------------------------------------------

// WorkerStatus

// optional uint64 up_time = 23;
inline bool WorkerStatus::has_up_time() const {
  return _has_bit(0);
}
inline void WorkerStatus::clear_up_time() {
  up_time_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 WorkerStatus::up_time() const {
  return up_time_;
}
inline void WorkerStatus::set_up_time(::google::protobuf::uint64 value) {
  _set_bit(0);
  up_time_ = value;
}

// optional uint64 update_time = 8;
inline bool WorkerStatus::has_update_time() const {
  return _has_bit(1);
}
inline void WorkerStatus::clear_update_time() {
  update_time_ = GOOGLE_ULONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::uint64 WorkerStatus::update_time() const {
  return update_time_;
}
inline void WorkerStatus::set_update_time(::google::protobuf::uint64 value) {
  _set_bit(1);
  update_time_ = value;
}

// optional string task_manager_status = 7;
inline bool WorkerStatus::has_task_manager_status() const {
  return _has_bit(2);
}
inline void WorkerStatus::clear_task_manager_status() {
  if (task_manager_status_ != &_default_task_manager_status_) {
    task_manager_status_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& WorkerStatus::task_manager_status() const {
  return *task_manager_status_;
}
inline void WorkerStatus::set_task_manager_status(const ::std::string& value) {
  _set_bit(2);
  if (task_manager_status_ == &_default_task_manager_status_) {
    task_manager_status_ = new ::std::string;
  }
  task_manager_status_->assign(value);
}
inline void WorkerStatus::set_task_manager_status(const char* value) {
  _set_bit(2);
  if (task_manager_status_ == &_default_task_manager_status_) {
    task_manager_status_ = new ::std::string;
  }
  task_manager_status_->assign(value);
}
inline void WorkerStatus::set_task_manager_status(const char* value, size_t size) {
  _set_bit(2);
  if (task_manager_status_ == &_default_task_manager_status_) {
    task_manager_status_ = new ::std::string;
  }
  task_manager_status_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WorkerStatus::mutable_task_manager_status() {
  _set_bit(2);
  if (task_manager_status_ == &_default_task_manager_status_) {
    task_manager_status_ = new ::std::string;
  }
  return task_manager_status_;
}

// optional string disk_manager_status = 3;
inline bool WorkerStatus::has_disk_manager_status() const {
  return _has_bit(3);
}
inline void WorkerStatus::clear_disk_manager_status() {
  if (disk_manager_status_ != &_default_disk_manager_status_) {
    disk_manager_status_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& WorkerStatus::disk_manager_status() const {
  return *disk_manager_status_;
}
inline void WorkerStatus::set_disk_manager_status(const ::std::string& value) {
  _set_bit(3);
  if (disk_manager_status_ == &_default_disk_manager_status_) {
    disk_manager_status_ = new ::std::string;
  }
  disk_manager_status_->assign(value);
}
inline void WorkerStatus::set_disk_manager_status(const char* value) {
  _set_bit(3);
  if (disk_manager_status_ == &_default_disk_manager_status_) {
    disk_manager_status_ = new ::std::string;
  }
  disk_manager_status_->assign(value);
}
inline void WorkerStatus::set_disk_manager_status(const char* value, size_t size) {
  _set_bit(3);
  if (disk_manager_status_ == &_default_disk_manager_status_) {
    disk_manager_status_ = new ::std::string;
  }
  disk_manager_status_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WorkerStatus::mutable_disk_manager_status() {
  _set_bit(3);
  if (disk_manager_status_ == &_default_disk_manager_status_) {
    disk_manager_status_ = new ::std::string;
  }
  return disk_manager_status_;
}

// optional string load_data_manager_status = 14;
inline bool WorkerStatus::has_load_data_manager_status() const {
  return _has_bit(4);
}
inline void WorkerStatus::clear_load_data_manager_status() {
  if (load_data_manager_status_ != &_default_load_data_manager_status_) {
    load_data_manager_status_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& WorkerStatus::load_data_manager_status() const {
  return *load_data_manager_status_;
}
inline void WorkerStatus::set_load_data_manager_status(const ::std::string& value) {
  _set_bit(4);
  if (load_data_manager_status_ == &_default_load_data_manager_status_) {
    load_data_manager_status_ = new ::std::string;
  }
  load_data_manager_status_->assign(value);
}
inline void WorkerStatus::set_load_data_manager_status(const char* value) {
  _set_bit(4);
  if (load_data_manager_status_ == &_default_load_data_manager_status_) {
    load_data_manager_status_ = new ::std::string;
  }
  load_data_manager_status_->assign(value);
}
inline void WorkerStatus::set_load_data_manager_status(const char* value, size_t size) {
  _set_bit(4);
  if (load_data_manager_status_ == &_default_load_data_manager_status_) {
    load_data_manager_status_ = new ::std::string;
  }
  load_data_manager_status_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WorkerStatus::mutable_load_data_manager_status() {
  _set_bit(4);
  if (load_data_manager_status_ == &_default_load_data_manager_status_) {
    load_data_manager_status_ = new ::std::string;
  }
  return load_data_manager_status_;
}

// optional string process_manager_status = 1;
inline bool WorkerStatus::has_process_manager_status() const {
  return _has_bit(5);
}
inline void WorkerStatus::clear_process_manager_status() {
  if (process_manager_status_ != &_default_process_manager_status_) {
    process_manager_status_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& WorkerStatus::process_manager_status() const {
  return *process_manager_status_;
}
inline void WorkerStatus::set_process_manager_status(const ::std::string& value) {
  _set_bit(5);
  if (process_manager_status_ == &_default_process_manager_status_) {
    process_manager_status_ = new ::std::string;
  }
  process_manager_status_->assign(value);
}
inline void WorkerStatus::set_process_manager_status(const char* value) {
  _set_bit(5);
  if (process_manager_status_ == &_default_process_manager_status_) {
    process_manager_status_ = new ::std::string;
  }
  process_manager_status_->assign(value);
}
inline void WorkerStatus::set_process_manager_status(const char* value, size_t size) {
  _set_bit(5);
  if (process_manager_status_ == &_default_process_manager_status_) {
    process_manager_status_ = new ::std::string;
  }
  process_manager_status_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WorkerStatus::mutable_process_manager_status() {
  _set_bit(5);
  if (process_manager_status_ == &_default_process_manager_status_) {
    process_manager_status_ = new ::std::string;
  }
  return process_manager_status_;
}

// optional string network_status = 20;
inline bool WorkerStatus::has_network_status() const {
  return _has_bit(6);
}
inline void WorkerStatus::clear_network_status() {
  if (network_status_ != &_default_network_status_) {
    network_status_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& WorkerStatus::network_status() const {
  return *network_status_;
}
inline void WorkerStatus::set_network_status(const ::std::string& value) {
  _set_bit(6);
  if (network_status_ == &_default_network_status_) {
    network_status_ = new ::std::string;
  }
  network_status_->assign(value);
}
inline void WorkerStatus::set_network_status(const char* value) {
  _set_bit(6);
  if (network_status_ == &_default_network_status_) {
    network_status_ = new ::std::string;
  }
  network_status_->assign(value);
}
inline void WorkerStatus::set_network_status(const char* value, size_t size) {
  _set_bit(6);
  if (network_status_ == &_default_network_status_) {
    network_status_ = new ::std::string;
  }
  network_status_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WorkerStatus::mutable_network_status() {
  _set_bit(6);
  if (network_status_ == &_default_network_status_) {
    network_status_ = new ::std::string;
  }
  return network_status_;
}

// optional string memory_status = 6;
inline bool WorkerStatus::has_memory_status() const {
  return _has_bit(7);
}
inline void WorkerStatus::clear_memory_status() {
  if (memory_status_ != &_default_memory_status_) {
    memory_status_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& WorkerStatus::memory_status() const {
  return *memory_status_;
}
inline void WorkerStatus::set_memory_status(const ::std::string& value) {
  _set_bit(7);
  if (memory_status_ == &_default_memory_status_) {
    memory_status_ = new ::std::string;
  }
  memory_status_->assign(value);
}
inline void WorkerStatus::set_memory_status(const char* value) {
  _set_bit(7);
  if (memory_status_ == &_default_memory_status_) {
    memory_status_ = new ::std::string;
  }
  memory_status_->assign(value);
}
inline void WorkerStatus::set_memory_status(const char* value, size_t size) {
  _set_bit(7);
  if (memory_status_ == &_default_memory_status_) {
    memory_status_ = new ::std::string;
  }
  memory_status_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WorkerStatus::mutable_memory_status() {
  _set_bit(7);
  if (memory_status_ == &_default_memory_status_) {
    memory_status_ = new ::std::string;
  }
  return memory_status_;
}

// optional string shared_memory_status = 22;
inline bool WorkerStatus::has_shared_memory_status() const {
  return _has_bit(8);
}
inline void WorkerStatus::clear_shared_memory_status() {
  if (shared_memory_status_ != &_default_shared_memory_status_) {
    shared_memory_status_->clear();
  }
  _clear_bit(8);
}
inline const ::std::string& WorkerStatus::shared_memory_status() const {
  return *shared_memory_status_;
}
inline void WorkerStatus::set_shared_memory_status(const ::std::string& value) {
  _set_bit(8);
  if (shared_memory_status_ == &_default_shared_memory_status_) {
    shared_memory_status_ = new ::std::string;
  }
  shared_memory_status_->assign(value);
}
inline void WorkerStatus::set_shared_memory_status(const char* value) {
  _set_bit(8);
  if (shared_memory_status_ == &_default_shared_memory_status_) {
    shared_memory_status_ = new ::std::string;
  }
  shared_memory_status_->assign(value);
}
inline void WorkerStatus::set_shared_memory_status(const char* value, size_t size) {
  _set_bit(8);
  if (shared_memory_status_ == &_default_shared_memory_status_) {
    shared_memory_status_ = new ::std::string;
  }
  shared_memory_status_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WorkerStatus::mutable_shared_memory_status() {
  _set_bit(8);
  if (shared_memory_status_ == &_default_shared_memory_status_) {
    shared_memory_status_ = new ::std::string;
  }
  return shared_memory_status_;
}

// optional string engine_status = 24;
inline bool WorkerStatus::has_engine_status() const {
  return _has_bit(9);
}
inline void WorkerStatus::clear_engine_status() {
  if (engine_status_ != &_default_engine_status_) {
    engine_status_->clear();
  }
  _clear_bit(9);
}
inline const ::std::string& WorkerStatus::engine_status() const {
  return *engine_status_;
}
inline void WorkerStatus::set_engine_status(const ::std::string& value) {
  _set_bit(9);
  if (engine_status_ == &_default_engine_status_) {
    engine_status_ = new ::std::string;
  }
  engine_status_->assign(value);
}
inline void WorkerStatus::set_engine_status(const char* value) {
  _set_bit(9);
  if (engine_status_ == &_default_engine_status_) {
    engine_status_ = new ::std::string;
  }
  engine_status_->assign(value);
}
inline void WorkerStatus::set_engine_status(const char* value, size_t size) {
  _set_bit(9);
  if (engine_status_ == &_default_engine_status_) {
    engine_status_ = new ::std::string;
  }
  engine_status_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WorkerStatus::mutable_engine_status() {
  _set_bit(9);
  if (engine_status_ == &_default_engine_status_) {
    engine_status_ = new ::std::string;
  }
  return engine_status_;
}

// optional string queues_status = 25;
inline bool WorkerStatus::has_queues_status() const {
  return _has_bit(10);
}
inline void WorkerStatus::clear_queues_status() {
  if (queues_status_ != &_default_queues_status_) {
    queues_status_->clear();
  }
  _clear_bit(10);
}
inline const ::std::string& WorkerStatus::queues_status() const {
  return *queues_status_;
}
inline void WorkerStatus::set_queues_status(const ::std::string& value) {
  _set_bit(10);
  if (queues_status_ == &_default_queues_status_) {
    queues_status_ = new ::std::string;
  }
  queues_status_->assign(value);
}
inline void WorkerStatus::set_queues_status(const char* value) {
  _set_bit(10);
  if (queues_status_ == &_default_queues_status_) {
    queues_status_ = new ::std::string;
  }
  queues_status_->assign(value);
}
inline void WorkerStatus::set_queues_status(const char* value, size_t size) {
  _set_bit(10);
  if (queues_status_ == &_default_queues_status_) {
    queues_status_ = new ::std::string;
  }
  queues_status_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WorkerStatus::mutable_queues_status() {
  _set_bit(10);
  if (queues_status_ == &_default_queues_status_) {
    queues_status_ = new ::std::string;
  }
  return queues_status_;
}

// optional uint64 used_memory = 10;
inline bool WorkerStatus::has_used_memory() const {
  return _has_bit(11);
}
inline void WorkerStatus::clear_used_memory() {
  used_memory_ = GOOGLE_ULONGLONG(0);
  _clear_bit(11);
}
inline ::google::protobuf::uint64 WorkerStatus::used_memory() const {
  return used_memory_;
}
inline void WorkerStatus::set_used_memory(::google::protobuf::uint64 value) {
  _set_bit(11);
  used_memory_ = value;
}

// optional uint64 total_memory = 11;
inline bool WorkerStatus::has_total_memory() const {
  return _has_bit(12);
}
inline void WorkerStatus::clear_total_memory() {
  total_memory_ = GOOGLE_ULONGLONG(0);
  _clear_bit(12);
}
inline ::google::protobuf::uint64 WorkerStatus::total_memory() const {
  return total_memory_;
}
inline void WorkerStatus::set_total_memory(::google::protobuf::uint64 value) {
  _set_bit(12);
  total_memory_ = value;
}

// optional int32 total_cores = 16;
inline bool WorkerStatus::has_total_cores() const {
  return _has_bit(13);
}
inline void WorkerStatus::clear_total_cores() {
  total_cores_ = 0;
  _clear_bit(13);
}
inline ::google::protobuf::int32 WorkerStatus::total_cores() const {
  return total_cores_;
}
inline void WorkerStatus::set_total_cores(::google::protobuf::int32 value) {
  _set_bit(13);
  total_cores_ = value;
}

// optional int32 used_cores = 13;
inline bool WorkerStatus::has_used_cores() const {
  return _has_bit(14);
}
inline void WorkerStatus::clear_used_cores() {
  used_cores_ = 0;
  _clear_bit(14);
}
inline ::google::protobuf::int32 WorkerStatus::used_cores() const {
  return used_cores_;
}
inline void WorkerStatus::set_used_cores(::google::protobuf::int32 value) {
  _set_bit(14);
  used_cores_ = value;
}

// optional int32 disk_pending_operations = 17;
inline bool WorkerStatus::has_disk_pending_operations() const {
  return _has_bit(15);
}
inline void WorkerStatus::clear_disk_pending_operations() {
  disk_pending_operations_ = 0;
  _clear_bit(15);
}
inline ::google::protobuf::int32 WorkerStatus::disk_pending_operations() const {
  return disk_pending_operations_;
}
inline void WorkerStatus::set_disk_pending_operations(::google::protobuf::int32 value) {
  _set_bit(15);
  disk_pending_operations_ = value;
}

// -------------------------------------------------------------------

// ActiveTask

// repeated string fileName = 1;
inline int ActiveTask::filename_size() const {
  return filename_.size();
}
inline void ActiveTask::clear_filename() {
  filename_.Clear();
}
inline const ::std::string& ActiveTask::filename(int index) const {
  return filename_.Get(index);
}
inline ::std::string* ActiveTask::mutable_filename(int index) {
  return filename_.Mutable(index);
}
inline void ActiveTask::set_filename(int index, const ::std::string& value) {
  filename_.Mutable(index)->assign(value);
}
inline void ActiveTask::set_filename(int index, const char* value) {
  filename_.Mutable(index)->assign(value);
}
inline void ActiveTask::set_filename(int index, const char* value, size_t size) {
  filename_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ActiveTask::add_filename() {
  return filename_.Add();
}
inline void ActiveTask::add_filename(const ::std::string& value) {
  filename_.Add()->assign(value);
}
inline void ActiveTask::add_filename(const char* value) {
  filename_.Add()->assign(value);
}
inline void ActiveTask::add_filename(const char* value, size_t size) {
  filename_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ActiveTask::filename() const {
  return filename_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ActiveTask::mutable_filename() {
  return &filename_;
}

// -------------------------------------------------------------------

// QueueList

// repeated .samson.network.FullQueue queue = 1;
inline int QueueList::queue_size() const {
  return queue_.size();
}
inline void QueueList::clear_queue() {
  queue_.Clear();
}
inline const ::samson::network::FullQueue& QueueList::queue(int index) const {
  return queue_.Get(index);
}
inline ::samson::network::FullQueue* QueueList::mutable_queue(int index) {
  return queue_.Mutable(index);
}
inline ::samson::network::FullQueue* QueueList::add_queue() {
  return queue_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::samson::network::FullQueue >&
QueueList::queue() const {
  return queue_;
}
inline ::google::protobuf::RepeatedPtrField< ::samson::network::FullQueue >*
QueueList::mutable_queue() {
  return &queue_;
}

// repeated .samson.network.ActiveTask tasks = 2;
inline int QueueList::tasks_size() const {
  return tasks_.size();
}
inline void QueueList::clear_tasks() {
  tasks_.Clear();
}
inline const ::samson::network::ActiveTask& QueueList::tasks(int index) const {
  return tasks_.Get(index);
}
inline ::samson::network::ActiveTask* QueueList::mutable_tasks(int index) {
  return tasks_.Mutable(index);
}
inline ::samson::network::ActiveTask* QueueList::add_tasks() {
  return tasks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::samson::network::ActiveTask >&
QueueList::tasks() const {
  return tasks_;
}
inline ::google::protobuf::RepeatedPtrField< ::samson::network::ActiveTask >*
QueueList::mutable_tasks() {
  return &tasks_;
}

// repeated uint64 load_id = 3;
inline int QueueList::load_id_size() const {
  return load_id_.size();
}
inline void QueueList::clear_load_id() {
  load_id_.Clear();
}
inline ::google::protobuf::uint64 QueueList::load_id(int index) const {
  return load_id_.Get(index);
}
inline void QueueList::set_load_id(int index, ::google::protobuf::uint64 value) {
  load_id_.Set(index, value);
}
inline void QueueList::add_load_id(::google::protobuf::uint64 value) {
  load_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
QueueList::load_id() const {
  return load_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
QueueList::mutable_load_id() {
  return &load_id_;
}

// -------------------------------------------------------------------

// DataList

// repeated .samson.network.Data data = 1;
inline int DataList::data_size() const {
  return data_.size();
}
inline void DataList::clear_data() {
  data_.Clear();
}
inline const ::samson::network::Data& DataList::data(int index) const {
  return data_.Get(index);
}
inline ::samson::network::Data* DataList::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::samson::network::Data* DataList::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::samson::network::Data >&
DataList::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::samson::network::Data >*
DataList::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// OperationList

// repeated .samson.network.Operation operation = 1;
inline int OperationList::operation_size() const {
  return operation_.size();
}
inline void OperationList::clear_operation() {
  operation_.Clear();
}
inline const ::samson::network::Operation& OperationList::operation(int index) const {
  return operation_.Get(index);
}
inline ::samson::network::Operation* OperationList::mutable_operation(int index) {
  return operation_.Mutable(index);
}
inline ::samson::network::Operation* OperationList::add_operation() {
  return operation_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::samson::network::Operation >&
OperationList::operation() const {
  return operation_;
}
inline ::google::protobuf::RepeatedPtrField< ::samson::network::Operation >*
OperationList::mutable_operation() {
  return &operation_;
}

// -------------------------------------------------------------------

// JobList

// repeated .samson.network.Job job = 1;
inline int JobList::job_size() const {
  return job_.size();
}
inline void JobList::clear_job() {
  job_.Clear();
}
inline const ::samson::network::Job& JobList::job(int index) const {
  return job_.Get(index);
}
inline ::samson::network::Job* JobList::mutable_job(int index) {
  return job_.Mutable(index);
}
inline ::samson::network::Job* JobList::add_job() {
  return job_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::samson::network::Job >&
JobList::job() const {
  return job_;
}
inline ::google::protobuf::RepeatedPtrField< ::samson::network::Job >*
JobList::mutable_job() {
  return &job_;
}

// -------------------------------------------------------------------

// AutomaticOperationList

// repeated .samson.network.AutomaticOperation automatic_operation = 1;
inline int AutomaticOperationList::automatic_operation_size() const {
  return automatic_operation_.size();
}
inline void AutomaticOperationList::clear_automatic_operation() {
  automatic_operation_.Clear();
}
inline const ::samson::network::AutomaticOperation& AutomaticOperationList::automatic_operation(int index) const {
  return automatic_operation_.Get(index);
}
inline ::samson::network::AutomaticOperation* AutomaticOperationList::mutable_automatic_operation(int index) {
  return automatic_operation_.Mutable(index);
}
inline ::samson::network::AutomaticOperation* AutomaticOperationList::add_automatic_operation() {
  return automatic_operation_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::samson::network::AutomaticOperation >&
AutomaticOperationList::automatic_operation() const {
  return automatic_operation_;
}
inline ::google::protobuf::RepeatedPtrField< ::samson::network::AutomaticOperation >*
AutomaticOperationList::mutable_automatic_operation() {
  return &automatic_operation_;
}

// -------------------------------------------------------------------

// SamsonStatus

// optional .samson.network.ControllerStatus controller_status = 1;
inline bool SamsonStatus::has_controller_status() const {
  return _has_bit(0);
}
inline void SamsonStatus::clear_controller_status() {
  if (controller_status_ != NULL) controller_status_->::samson::network::ControllerStatus::Clear();
  _clear_bit(0);
}
inline const ::samson::network::ControllerStatus& SamsonStatus::controller_status() const {
  return controller_status_ != NULL ? *controller_status_ : *default_instance_->controller_status_;
}
inline ::samson::network::ControllerStatus* SamsonStatus::mutable_controller_status() {
  _set_bit(0);
  if (controller_status_ == NULL) controller_status_ = new ::samson::network::ControllerStatus;
  return controller_status_;
}

// repeated .samson.network.WorkerStatus worker_status = 2;
inline int SamsonStatus::worker_status_size() const {
  return worker_status_.size();
}
inline void SamsonStatus::clear_worker_status() {
  worker_status_.Clear();
}
inline const ::samson::network::WorkerStatus& SamsonStatus::worker_status(int index) const {
  return worker_status_.Get(index);
}
inline ::samson::network::WorkerStatus* SamsonStatus::mutable_worker_status(int index) {
  return worker_status_.Mutable(index);
}
inline ::samson::network::WorkerStatus* SamsonStatus::add_worker_status() {
  return worker_status_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::samson::network::WorkerStatus >&
SamsonStatus::worker_status() const {
  return worker_status_;
}
inline ::google::protobuf::RepeatedPtrField< ::samson::network::WorkerStatus >*
SamsonStatus::mutable_worker_status() {
  return &worker_status_;
}

// -------------------------------------------------------------------

// WorkerTask

// required uint64 job_id = 10;
inline bool WorkerTask::has_job_id() const {
  return _has_bit(0);
}
inline void WorkerTask::clear_job_id() {
  job_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 WorkerTask::job_id() const {
  return job_id_;
}
inline void WorkerTask::set_job_id(::google::protobuf::uint64 value) {
  _set_bit(0);
  job_id_ = value;
}

// required uint64 task_id = 1;
inline bool WorkerTask::has_task_id() const {
  return _has_bit(1);
}
inline void WorkerTask::clear_task_id() {
  task_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::uint64 WorkerTask::task_id() const {
  return task_id_;
}
inline void WorkerTask::set_task_id(::google::protobuf::uint64 value) {
  _set_bit(1);
  task_id_ = value;
}

// required string operation = 2;
inline bool WorkerTask::has_operation() const {
  return _has_bit(2);
}
inline void WorkerTask::clear_operation() {
  if (operation_ != &_default_operation_) {
    operation_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& WorkerTask::operation() const {
  return *operation_;
}
inline void WorkerTask::set_operation(const ::std::string& value) {
  _set_bit(2);
  if (operation_ == &_default_operation_) {
    operation_ = new ::std::string;
  }
  operation_->assign(value);
}
inline void WorkerTask::set_operation(const char* value) {
  _set_bit(2);
  if (operation_ == &_default_operation_) {
    operation_ = new ::std::string;
  }
  operation_->assign(value);
}
inline void WorkerTask::set_operation(const char* value, size_t size) {
  _set_bit(2);
  if (operation_ == &_default_operation_) {
    operation_ = new ::std::string;
  }
  operation_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WorkerTask::mutable_operation() {
  _set_bit(2);
  if (operation_ == &_default_operation_) {
    operation_ = new ::std::string;
  }
  return operation_;
}

// repeated .samson.network.FullQueue input_queue = 4;
inline int WorkerTask::input_queue_size() const {
  return input_queue_.size();
}
inline void WorkerTask::clear_input_queue() {
  input_queue_.Clear();
}
inline const ::samson::network::FullQueue& WorkerTask::input_queue(int index) const {
  return input_queue_.Get(index);
}
inline ::samson::network::FullQueue* WorkerTask::mutable_input_queue(int index) {
  return input_queue_.Mutable(index);
}
inline ::samson::network::FullQueue* WorkerTask::add_input_queue() {
  return input_queue_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::samson::network::FullQueue >&
WorkerTask::input_queue() const {
  return input_queue_;
}
inline ::google::protobuf::RepeatedPtrField< ::samson::network::FullQueue >*
WorkerTask::mutable_input_queue() {
  return &input_queue_;
}

// repeated .samson.network.FullQueue output_queue = 5;
inline int WorkerTask::output_queue_size() const {
  return output_queue_.size();
}
inline void WorkerTask::clear_output_queue() {
  output_queue_.Clear();
}
inline const ::samson::network::FullQueue& WorkerTask::output_queue(int index) const {
  return output_queue_.Get(index);
}
inline ::samson::network::FullQueue* WorkerTask::mutable_output_queue(int index) {
  return output_queue_.Mutable(index);
}
inline ::samson::network::FullQueue* WorkerTask::add_output_queue() {
  return output_queue_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::samson::network::FullQueue >&
WorkerTask::output_queue() const {
  return output_queue_;
}
inline ::google::protobuf::RepeatedPtrField< ::samson::network::FullQueue >*
WorkerTask::mutable_output_queue() {
  return &output_queue_;
}

// optional int32 servers = 6;
inline bool WorkerTask::has_servers() const {
  return _has_bit(5);
}
inline void WorkerTask::clear_servers() {
  servers_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 WorkerTask::servers() const {
  return servers_;
}
inline void WorkerTask::set_servers(::google::protobuf::int32 value) {
  _set_bit(5);
  servers_ = value;
}

// optional bool generator = 7;
inline bool WorkerTask::has_generator() const {
  return _has_bit(6);
}
inline void WorkerTask::clear_generator() {
  generator_ = false;
  _clear_bit(6);
}
inline bool WorkerTask::generator() const {
  return generator_;
}
inline void WorkerTask::set_generator(bool value) {
  _set_bit(6);
  generator_ = value;
}

// optional .samson.network.Environment environment = 8;
inline bool WorkerTask::has_environment() const {
  return _has_bit(7);
}
inline void WorkerTask::clear_environment() {
  if (environment_ != NULL) environment_->::samson::network::Environment::Clear();
  _clear_bit(7);
}
inline const ::samson::network::Environment& WorkerTask::environment() const {
  return environment_ != NULL ? *environment_ : *default_instance_->environment_;
}
inline ::samson::network::Environment* WorkerTask::mutable_environment() {
  _set_bit(7);
  if (environment_ == NULL) environment_ = new ::samson::network::Environment;
  return environment_;
}

// -------------------------------------------------------------------

// WorkerTaskKill

// required uint64 task_id = 1;
inline bool WorkerTaskKill::has_task_id() const {
  return _has_bit(0);
}
inline void WorkerTaskKill::clear_task_id() {
  task_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 WorkerTaskKill::task_id() const {
  return task_id_;
}
inline void WorkerTaskKill::set_task_id(::google::protobuf::uint64 value) {
  _set_bit(0);
  task_id_ = value;
}

// -------------------------------------------------------------------

// WorkerTaskRemove

// required uint64 task_id = 1;
inline bool WorkerTaskRemove::has_task_id() const {
  return _has_bit(0);
}
inline void WorkerTaskRemove::clear_task_id() {
  task_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 WorkerTaskRemove::task_id() const {
  return task_id_;
}
inline void WorkerTaskRemove::set_task_id(::google::protobuf::uint64 value) {
  _set_bit(0);
  task_id_ = value;
}

// -------------------------------------------------------------------

// WorkerTaskConfirmation

// required int64 task_id = 1;
inline bool WorkerTaskConfirmation::has_task_id() const {
  return _has_bit(0);
}
inline void WorkerTaskConfirmation::clear_task_id() {
  task_id_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 WorkerTaskConfirmation::task_id() const {
  return task_id_;
}
inline void WorkerTaskConfirmation::set_task_id(::google::protobuf::int64 value) {
  _set_bit(0);
  task_id_ = value;
}

// required .samson.network.WorkerTaskConfirmation.WorkerTaskConfirmationType type = 2;
inline bool WorkerTaskConfirmation::has_type() const {
  return _has_bit(1);
}
inline void WorkerTaskConfirmation::clear_type() {
  type_ = 1;
  _clear_bit(1);
}
inline ::samson::network::WorkerTaskConfirmation_WorkerTaskConfirmationType WorkerTaskConfirmation::type() const {
  return static_cast< ::samson::network::WorkerTaskConfirmation_WorkerTaskConfirmationType >(type_);
}
inline void WorkerTaskConfirmation::set_type(::samson::network::WorkerTaskConfirmation_WorkerTaskConfirmationType value) {
  GOOGLE_DCHECK(::samson::network::WorkerTaskConfirmation_WorkerTaskConfirmationType_IsValid(value));
  _set_bit(1);
  type_ = value;
}

// repeated .samson.network.QueueFile add_file = 3;
inline int WorkerTaskConfirmation::add_file_size() const {
  return add_file_.size();
}
inline void WorkerTaskConfirmation::clear_add_file() {
  add_file_.Clear();
}
inline const ::samson::network::QueueFile& WorkerTaskConfirmation::add_file(int index) const {
  return add_file_.Get(index);
}
inline ::samson::network::QueueFile* WorkerTaskConfirmation::mutable_add_file(int index) {
  return add_file_.Mutable(index);
}
inline ::samson::network::QueueFile* WorkerTaskConfirmation::add_add_file() {
  return add_file_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::samson::network::QueueFile >&
WorkerTaskConfirmation::add_file() const {
  return add_file_;
}
inline ::google::protobuf::RepeatedPtrField< ::samson::network::QueueFile >*
WorkerTaskConfirmation::mutable_add_file() {
  return &add_file_;
}

// repeated .samson.network.QueueFile remove_file = 4;
inline int WorkerTaskConfirmation::remove_file_size() const {
  return remove_file_.size();
}
inline void WorkerTaskConfirmation::clear_remove_file() {
  remove_file_.Clear();
}
inline const ::samson::network::QueueFile& WorkerTaskConfirmation::remove_file(int index) const {
  return remove_file_.Get(index);
}
inline ::samson::network::QueueFile* WorkerTaskConfirmation::mutable_remove_file(int index) {
  return remove_file_.Mutable(index);
}
inline ::samson::network::QueueFile* WorkerTaskConfirmation::add_remove_file() {
  return remove_file_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::samson::network::QueueFile >&
WorkerTaskConfirmation::remove_file() const {
  return remove_file_;
}
inline ::google::protobuf::RepeatedPtrField< ::samson::network::QueueFile >*
WorkerTaskConfirmation::mutable_remove_file() {
  return &remove_file_;
}

// optional int32 num_items = 5;
inline bool WorkerTaskConfirmation::has_num_items() const {
  return _has_bit(4);
}
inline void WorkerTaskConfirmation::clear_num_items() {
  num_items_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 WorkerTaskConfirmation::num_items() const {
  return num_items_;
}
inline void WorkerTaskConfirmation::set_num_items(::google::protobuf::int32 value) {
  _set_bit(4);
  num_items_ = value;
}

// optional int32 num_finished_items = 6;
inline bool WorkerTaskConfirmation::has_num_finished_items() const {
  return _has_bit(5);
}
inline void WorkerTaskConfirmation::clear_num_finished_items() {
  num_finished_items_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 WorkerTaskConfirmation::num_finished_items() const {
  return num_finished_items_;
}
inline void WorkerTaskConfirmation::set_num_finished_items(::google::protobuf::int32 value) {
  _set_bit(5);
  num_finished_items_ = value;
}

// optional string error_message = 7;
inline bool WorkerTaskConfirmation::has_error_message() const {
  return _has_bit(6);
}
inline void WorkerTaskConfirmation::clear_error_message() {
  if (error_message_ != &_default_error_message_) {
    error_message_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& WorkerTaskConfirmation::error_message() const {
  return *error_message_;
}
inline void WorkerTaskConfirmation::set_error_message(const ::std::string& value) {
  _set_bit(6);
  if (error_message_ == &_default_error_message_) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(value);
}
inline void WorkerTaskConfirmation::set_error_message(const char* value) {
  _set_bit(6);
  if (error_message_ == &_default_error_message_) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(value);
}
inline void WorkerTaskConfirmation::set_error_message(const char* value, size_t size) {
  _set_bit(6);
  if (error_message_ == &_default_error_message_) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WorkerTaskConfirmation::mutable_error_message() {
  _set_bit(6);
  if (error_message_ == &_default_error_message_) {
    error_message_ = new ::std::string;
  }
  return error_message_;
}

// optional .samson.network.KVInfo progressRunning = 8;
inline bool WorkerTaskConfirmation::has_progressrunning() const {
  return _has_bit(7);
}
inline void WorkerTaskConfirmation::clear_progressrunning() {
  if (progressrunning_ != NULL) progressrunning_->::samson::network::KVInfo::Clear();
  _clear_bit(7);
}
inline const ::samson::network::KVInfo& WorkerTaskConfirmation::progressrunning() const {
  return progressrunning_ != NULL ? *progressrunning_ : *default_instance_->progressrunning_;
}
inline ::samson::network::KVInfo* WorkerTaskConfirmation::mutable_progressrunning() {
  _set_bit(7);
  if (progressrunning_ == NULL) progressrunning_ = new ::samson::network::KVInfo;
  return progressrunning_;
}

// optional .samson.network.KVInfo progressProcessed = 9;
inline bool WorkerTaskConfirmation::has_progressprocessed() const {
  return _has_bit(8);
}
inline void WorkerTaskConfirmation::clear_progressprocessed() {
  if (progressprocessed_ != NULL) progressprocessed_->::samson::network::KVInfo::Clear();
  _clear_bit(8);
}
inline const ::samson::network::KVInfo& WorkerTaskConfirmation::progressprocessed() const {
  return progressprocessed_ != NULL ? *progressprocessed_ : *default_instance_->progressprocessed_;
}
inline ::samson::network::KVInfo* WorkerTaskConfirmation::mutable_progressprocessed() {
  _set_bit(8);
  if (progressprocessed_ == NULL) progressprocessed_ = new ::samson::network::KVInfo;
  return progressprocessed_;
}

// -------------------------------------------------------------------

// Command

// required string command = 1;
inline bool Command::has_command() const {
  return _has_bit(0);
}
inline void Command::clear_command() {
  if (command_ != &_default_command_) {
    command_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Command::command() const {
  return *command_;
}
inline void Command::set_command(const ::std::string& value) {
  _set_bit(0);
  if (command_ == &_default_command_) {
    command_ = new ::std::string;
  }
  command_->assign(value);
}
inline void Command::set_command(const char* value) {
  _set_bit(0);
  if (command_ == &_default_command_) {
    command_ = new ::std::string;
  }
  command_->assign(value);
}
inline void Command::set_command(const char* value, size_t size) {
  _set_bit(0);
  if (command_ == &_default_command_) {
    command_ = new ::std::string;
  }
  command_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Command::mutable_command() {
  _set_bit(0);
  if (command_ == &_default_command_) {
    command_ = new ::std::string;
  }
  return command_;
}

// optional .samson.network.Environment environment = 3;
inline bool Command::has_environment() const {
  return _has_bit(1);
}
inline void Command::clear_environment() {
  if (environment_ != NULL) environment_->::samson::network::Environment::Clear();
  _clear_bit(1);
}
inline const ::samson::network::Environment& Command::environment() const {
  return environment_ != NULL ? *environment_ : *default_instance_->environment_;
}
inline ::samson::network::Environment* Command::mutable_environment() {
  _set_bit(1);
  if (environment_ == NULL) environment_ = new ::samson::network::Environment;
  return environment_;
}

// -------------------------------------------------------------------

// CommandResponse

// required string command = 1;
inline bool CommandResponse::has_command() const {
  return _has_bit(0);
}
inline void CommandResponse::clear_command() {
  if (command_ != &_default_command_) {
    command_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& CommandResponse::command() const {
  return *command_;
}
inline void CommandResponse::set_command(const ::std::string& value) {
  _set_bit(0);
  if (command_ == &_default_command_) {
    command_ = new ::std::string;
  }
  command_->assign(value);
}
inline void CommandResponse::set_command(const char* value) {
  _set_bit(0);
  if (command_ == &_default_command_) {
    command_ = new ::std::string;
  }
  command_->assign(value);
}
inline void CommandResponse::set_command(const char* value, size_t size) {
  _set_bit(0);
  if (command_ == &_default_command_) {
    command_ = new ::std::string;
  }
  command_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommandResponse::mutable_command() {
  _set_bit(0);
  if (command_ == &_default_command_) {
    command_ = new ::std::string;
  }
  return command_;
}

// optional uint64 new_job_id = 2;
inline bool CommandResponse::has_new_job_id() const {
  return _has_bit(1);
}
inline void CommandResponse::clear_new_job_id() {
  new_job_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::uint64 CommandResponse::new_job_id() const {
  return new_job_id_;
}
inline void CommandResponse::set_new_job_id(::google::protobuf::uint64 value) {
  _set_bit(1);
  new_job_id_ = value;
}

// optional uint64 finish_job_id = 11;
inline bool CommandResponse::has_finish_job_id() const {
  return _has_bit(2);
}
inline void CommandResponse::clear_finish_job_id() {
  finish_job_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::uint64 CommandResponse::finish_job_id() const {
  return finish_job_id_;
}
inline void CommandResponse::set_finish_job_id(::google::protobuf::uint64 value) {
  _set_bit(2);
  finish_job_id_ = value;
}

// optional uint64 error_job_id = 12;
inline bool CommandResponse::has_error_job_id() const {
  return _has_bit(3);
}
inline void CommandResponse::clear_error_job_id() {
  error_job_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::uint64 CommandResponse::error_job_id() const {
  return error_job_id_;
}
inline void CommandResponse::set_error_job_id(::google::protobuf::uint64 value) {
  _set_bit(3);
  error_job_id_ = value;
}

// optional string error_message = 10;
inline bool CommandResponse::has_error_message() const {
  return _has_bit(4);
}
inline void CommandResponse::clear_error_message() {
  if (error_message_ != &_default_error_message_) {
    error_message_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& CommandResponse::error_message() const {
  return *error_message_;
}
inline void CommandResponse::set_error_message(const ::std::string& value) {
  _set_bit(4);
  if (error_message_ == &_default_error_message_) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(value);
}
inline void CommandResponse::set_error_message(const char* value) {
  _set_bit(4);
  if (error_message_ == &_default_error_message_) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(value);
}
inline void CommandResponse::set_error_message(const char* value, size_t size) {
  _set_bit(4);
  if (error_message_ == &_default_error_message_) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommandResponse::mutable_error_message() {
  _set_bit(4);
  if (error_message_ == &_default_error_message_) {
    error_message_ = new ::std::string;
  }
  return error_message_;
}

// optional int32 ellapsed_seconds = 15;
inline bool CommandResponse::has_ellapsed_seconds() const {
  return _has_bit(5);
}
inline void CommandResponse::clear_ellapsed_seconds() {
  ellapsed_seconds_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 CommandResponse::ellapsed_seconds() const {
  return ellapsed_seconds_;
}
inline void CommandResponse::set_ellapsed_seconds(::google::protobuf::int32 value) {
  _set_bit(5);
  ellapsed_seconds_ = value;
}

// optional bool finish_command = 16;
inline bool CommandResponse::has_finish_command() const {
  return _has_bit(6);
}
inline void CommandResponse::clear_finish_command() {
  finish_command_ = false;
  _clear_bit(6);
}
inline bool CommandResponse::finish_command() const {
  return finish_command_;
}
inline void CommandResponse::set_finish_command(bool value) {
  _set_bit(6);
  finish_command_ = value;
}

// optional .samson.network.JobList job_list = 100;
inline bool CommandResponse::has_job_list() const {
  return _has_bit(7);
}
inline void CommandResponse::clear_job_list() {
  if (job_list_ != NULL) job_list_->::samson::network::JobList::Clear();
  _clear_bit(7);
}
inline const ::samson::network::JobList& CommandResponse::job_list() const {
  return job_list_ != NULL ? *job_list_ : *default_instance_->job_list_;
}
inline ::samson::network::JobList* CommandResponse::mutable_job_list() {
  _set_bit(7);
  if (job_list_ == NULL) job_list_ = new ::samson::network::JobList;
  return job_list_;
}

// optional .samson.network.OperationList operation_list = 101;
inline bool CommandResponse::has_operation_list() const {
  return _has_bit(8);
}
inline void CommandResponse::clear_operation_list() {
  if (operation_list_ != NULL) operation_list_->::samson::network::OperationList::Clear();
  _clear_bit(8);
}
inline const ::samson::network::OperationList& CommandResponse::operation_list() const {
  return operation_list_ != NULL ? *operation_list_ : *default_instance_->operation_list_;
}
inline ::samson::network::OperationList* CommandResponse::mutable_operation_list() {
  _set_bit(8);
  if (operation_list_ == NULL) operation_list_ = new ::samson::network::OperationList;
  return operation_list_;
}

// optional .samson.network.DataList data_list = 102;
inline bool CommandResponse::has_data_list() const {
  return _has_bit(9);
}
inline void CommandResponse::clear_data_list() {
  if (data_list_ != NULL) data_list_->::samson::network::DataList::Clear();
  _clear_bit(9);
}
inline const ::samson::network::DataList& CommandResponse::data_list() const {
  return data_list_ != NULL ? *data_list_ : *default_instance_->data_list_;
}
inline ::samson::network::DataList* CommandResponse::mutable_data_list() {
  _set_bit(9);
  if (data_list_ == NULL) data_list_ = new ::samson::network::DataList;
  return data_list_;
}

// optional .samson.network.QueueList queue_list = 103;
inline bool CommandResponse::has_queue_list() const {
  return _has_bit(10);
}
inline void CommandResponse::clear_queue_list() {
  if (queue_list_ != NULL) queue_list_->::samson::network::QueueList::Clear();
  _clear_bit(10);
}
inline const ::samson::network::QueueList& CommandResponse::queue_list() const {
  return queue_list_ != NULL ? *queue_list_ : *default_instance_->queue_list_;
}
inline ::samson::network::QueueList* CommandResponse::mutable_queue_list() {
  _set_bit(10);
  if (queue_list_ == NULL) queue_list_ = new ::samson::network::QueueList;
  return queue_list_;
}

// optional .samson.network.AutomaticOperationList automatic_operation_list = 107;
inline bool CommandResponse::has_automatic_operation_list() const {
  return _has_bit(11);
}
inline void CommandResponse::clear_automatic_operation_list() {
  if (automatic_operation_list_ != NULL) automatic_operation_list_->::samson::network::AutomaticOperationList::Clear();
  _clear_bit(11);
}
inline const ::samson::network::AutomaticOperationList& CommandResponse::automatic_operation_list() const {
  return automatic_operation_list_ != NULL ? *automatic_operation_list_ : *default_instance_->automatic_operation_list_;
}
inline ::samson::network::AutomaticOperationList* CommandResponse::mutable_automatic_operation_list() {
  _set_bit(11);
  if (automatic_operation_list_ == NULL) automatic_operation_list_ = new ::samson::network::AutomaticOperationList;
  return automatic_operation_list_;
}

// optional .samson.network.SamsonStatus samson_status = 104;
inline bool CommandResponse::has_samson_status() const {
  return _has_bit(12);
}
inline void CommandResponse::clear_samson_status() {
  if (samson_status_ != NULL) samson_status_->::samson::network::SamsonStatus::Clear();
  _clear_bit(12);
}
inline const ::samson::network::SamsonStatus& CommandResponse::samson_status() const {
  return samson_status_ != NULL ? *samson_status_ : *default_instance_->samson_status_;
}
inline ::samson::network::SamsonStatus* CommandResponse::mutable_samson_status() {
  _set_bit(12);
  if (samson_status_ == NULL) samson_status_ = new ::samson::network::SamsonStatus;
  return samson_status_;
}

// -------------------------------------------------------------------

// WorkerDataExchange

// required int64 task_id = 1;
inline bool WorkerDataExchange::has_task_id() const {
  return _has_bit(0);
}
inline void WorkerDataExchange::clear_task_id() {
  task_id_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 WorkerDataExchange::task_id() const {
  return task_id_;
}
inline void WorkerDataExchange::set_task_id(::google::protobuf::int64 value) {
  _set_bit(0);
  task_id_ = value;
}

// required .samson.network.Queue queue = 2;
inline bool WorkerDataExchange::has_queue() const {
  return _has_bit(1);
}
inline void WorkerDataExchange::clear_queue() {
  if (queue_ != NULL) queue_->::samson::network::Queue::Clear();
  _clear_bit(1);
}
inline const ::samson::network::Queue& WorkerDataExchange::queue() const {
  return queue_ != NULL ? *queue_ : *default_instance_->queue_;
}
inline ::samson::network::Queue* WorkerDataExchange::mutable_queue() {
  _set_bit(1);
  if (queue_ == NULL) queue_ = new ::samson::network::Queue;
  return queue_;
}

// required bool txt = 3;
inline bool WorkerDataExchange::has_txt() const {
  return _has_bit(2);
}
inline void WorkerDataExchange::clear_txt() {
  txt_ = false;
  _clear_bit(2);
}
inline bool WorkerDataExchange::txt() const {
  return txt_;
}
inline void WorkerDataExchange::set_txt(bool value) {
  _set_bit(2);
  txt_ = value;
}

// required int32 worker = 4;
inline bool WorkerDataExchange::has_worker() const {
  return _has_bit(3);
}
inline void WorkerDataExchange::clear_worker() {
  worker_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 WorkerDataExchange::worker() const {
  return worker_;
}
inline void WorkerDataExchange::set_worker(::google::protobuf::int32 value) {
  _set_bit(3);
  worker_ = value;
}

// required int32 hg_set = 5;
inline bool WorkerDataExchange::has_hg_set() const {
  return _has_bit(4);
}
inline void WorkerDataExchange::clear_hg_set() {
  hg_set_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 WorkerDataExchange::hg_set() const {
  return hg_set_;
}
inline void WorkerDataExchange::set_hg_set(::google::protobuf::int32 value) {
  _set_bit(4);
  hg_set_ = value;
}

// required bool finish = 6;
inline bool WorkerDataExchange::has_finish() const {
  return _has_bit(5);
}
inline void WorkerDataExchange::clear_finish() {
  finish_ = false;
  _clear_bit(5);
}
inline bool WorkerDataExchange::finish() const {
  return finish_;
}
inline void WorkerDataExchange::set_finish(bool value) {
  _set_bit(5);
  finish_ = value;
}

// -------------------------------------------------------------------

// WorkerDataExchangeClose

// required int64 task_id = 1;
inline bool WorkerDataExchangeClose::has_task_id() const {
  return _has_bit(0);
}
inline void WorkerDataExchangeClose::clear_task_id() {
  task_id_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 WorkerDataExchangeClose::task_id() const {
  return task_id_;
}
inline void WorkerDataExchangeClose::set_task_id(::google::protobuf::int64 value) {
  _set_bit(0);
  task_id_ = value;
}

// -------------------------------------------------------------------

// UploadDataInit

// required string queue = 1;
inline bool UploadDataInit::has_queue() const {
  return _has_bit(0);
}
inline void UploadDataInit::clear_queue() {
  if (queue_ != &_default_queue_) {
    queue_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& UploadDataInit::queue() const {
  return *queue_;
}
inline void UploadDataInit::set_queue(const ::std::string& value) {
  _set_bit(0);
  if (queue_ == &_default_queue_) {
    queue_ = new ::std::string;
  }
  queue_->assign(value);
}
inline void UploadDataInit::set_queue(const char* value) {
  _set_bit(0);
  if (queue_ == &_default_queue_) {
    queue_ = new ::std::string;
  }
  queue_->assign(value);
}
inline void UploadDataInit::set_queue(const char* value, size_t size) {
  _set_bit(0);
  if (queue_ == &_default_queue_) {
    queue_ = new ::std::string;
  }
  queue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UploadDataInit::mutable_queue() {
  _set_bit(0);
  if (queue_ == &_default_queue_) {
    queue_ = new ::std::string;
  }
  return queue_;
}

// -------------------------------------------------------------------

// UploadDataInitResponse

// required .samson.network.UploadDataInit query = 1;
inline bool UploadDataInitResponse::has_query() const {
  return _has_bit(0);
}
inline void UploadDataInitResponse::clear_query() {
  if (query_ != NULL) query_->::samson::network::UploadDataInit::Clear();
  _clear_bit(0);
}
inline const ::samson::network::UploadDataInit& UploadDataInitResponse::query() const {
  return query_ != NULL ? *query_ : *default_instance_->query_;
}
inline ::samson::network::UploadDataInit* UploadDataInitResponse::mutable_query() {
  _set_bit(0);
  if (query_ == NULL) query_ = new ::samson::network::UploadDataInit;
  return query_;
}

// required uint64 load_id = 3;
inline bool UploadDataInitResponse::has_load_id() const {
  return _has_bit(1);
}
inline void UploadDataInitResponse::clear_load_id() {
  load_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::uint64 UploadDataInitResponse::load_id() const {
  return load_id_;
}
inline void UploadDataInitResponse::set_load_id(::google::protobuf::uint64 value) {
  _set_bit(1);
  load_id_ = value;
}

// optional .samson.network.Error error = 100;
inline bool UploadDataInitResponse::has_error() const {
  return _has_bit(2);
}
inline void UploadDataInitResponse::clear_error() {
  if (error_ != NULL) error_->::samson::network::Error::Clear();
  _clear_bit(2);
}
inline const ::samson::network::Error& UploadDataInitResponse::error() const {
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::samson::network::Error* UploadDataInitResponse::mutable_error() {
  _set_bit(2);
  if (error_ == NULL) error_ = new ::samson::network::Error;
  return error_;
}

// -------------------------------------------------------------------

// UploadDataFile

// required uint64 load_id = 1;
inline bool UploadDataFile::has_load_id() const {
  return _has_bit(0);
}
inline void UploadDataFile::clear_load_id() {
  load_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 UploadDataFile::load_id() const {
  return load_id_;
}
inline void UploadDataFile::set_load_id(::google::protobuf::uint64 value) {
  _set_bit(0);
  load_id_ = value;
}

// required uint64 file_id = 2;
inline bool UploadDataFile::has_file_id() const {
  return _has_bit(1);
}
inline void UploadDataFile::clear_file_id() {
  file_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::uint64 UploadDataFile::file_id() const {
  return file_id_;
}
inline void UploadDataFile::set_file_id(::google::protobuf::uint64 value) {
  _set_bit(1);
  file_id_ = value;
}

// required uint64 file_size = 3;
inline bool UploadDataFile::has_file_size() const {
  return _has_bit(2);
}
inline void UploadDataFile::clear_file_size() {
  file_size_ = GOOGLE_ULONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::uint64 UploadDataFile::file_size() const {
  return file_size_;
}
inline void UploadDataFile::set_file_size(::google::protobuf::uint64 value) {
  _set_bit(2);
  file_size_ = value;
}

// required string file_ext = 4;
inline bool UploadDataFile::has_file_ext() const {
  return _has_bit(3);
}
inline void UploadDataFile::clear_file_ext() {
  if (file_ext_ != &_default_file_ext_) {
    file_ext_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& UploadDataFile::file_ext() const {
  return *file_ext_;
}
inline void UploadDataFile::set_file_ext(const ::std::string& value) {
  _set_bit(3);
  if (file_ext_ == &_default_file_ext_) {
    file_ext_ = new ::std::string;
  }
  file_ext_->assign(value);
}
inline void UploadDataFile::set_file_ext(const char* value) {
  _set_bit(3);
  if (file_ext_ == &_default_file_ext_) {
    file_ext_ = new ::std::string;
  }
  file_ext_->assign(value);
}
inline void UploadDataFile::set_file_ext(const char* value, size_t size) {
  _set_bit(3);
  if (file_ext_ == &_default_file_ext_) {
    file_ext_ = new ::std::string;
  }
  file_ext_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UploadDataFile::mutable_file_ext() {
  _set_bit(3);
  if (file_ext_ == &_default_file_ext_) {
    file_ext_ = new ::std::string;
  }
  return file_ext_;
}

// -------------------------------------------------------------------

// UploadDataFileResponse

// required .samson.network.UploadDataFile query = 1;
inline bool UploadDataFileResponse::has_query() const {
  return _has_bit(0);
}
inline void UploadDataFileResponse::clear_query() {
  if (query_ != NULL) query_->::samson::network::UploadDataFile::Clear();
  _clear_bit(0);
}
inline const ::samson::network::UploadDataFile& UploadDataFileResponse::query() const {
  return query_ != NULL ? *query_ : *default_instance_->query_;
}
inline ::samson::network::UploadDataFile* UploadDataFileResponse::mutable_query() {
  _set_bit(0);
  if (query_ == NULL) query_ = new ::samson::network::UploadDataFile;
  return query_;
}

// required .samson.network.File file = 2;
inline bool UploadDataFileResponse::has_file() const {
  return _has_bit(1);
}
inline void UploadDataFileResponse::clear_file() {
  if (file_ != NULL) file_->::samson::network::File::Clear();
  _clear_bit(1);
}
inline const ::samson::network::File& UploadDataFileResponse::file() const {
  return file_ != NULL ? *file_ : *default_instance_->file_;
}
inline ::samson::network::File* UploadDataFileResponse::mutable_file() {
  _set_bit(1);
  if (file_ == NULL) file_ = new ::samson::network::File;
  return file_;
}

// optional .samson.network.Error error = 100;
inline bool UploadDataFileResponse::has_error() const {
  return _has_bit(2);
}
inline void UploadDataFileResponse::clear_error() {
  if (error_ != NULL) error_->::samson::network::Error::Clear();
  _clear_bit(2);
}
inline const ::samson::network::Error& UploadDataFileResponse::error() const {
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::samson::network::Error* UploadDataFileResponse::mutable_error() {
  _set_bit(2);
  if (error_ == NULL) error_ = new ::samson::network::Error;
  return error_;
}

// -------------------------------------------------------------------

// UploadDataFinish

// required uint64 load_id = 3;
inline bool UploadDataFinish::has_load_id() const {
  return _has_bit(0);
}
inline void UploadDataFinish::clear_load_id() {
  load_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 UploadDataFinish::load_id() const {
  return load_id_;
}
inline void UploadDataFinish::set_load_id(::google::protobuf::uint64 value) {
  _set_bit(0);
  load_id_ = value;
}

// required string queue = 4;
inline bool UploadDataFinish::has_queue() const {
  return _has_bit(1);
}
inline void UploadDataFinish::clear_queue() {
  if (queue_ != &_default_queue_) {
    queue_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& UploadDataFinish::queue() const {
  return *queue_;
}
inline void UploadDataFinish::set_queue(const ::std::string& value) {
  _set_bit(1);
  if (queue_ == &_default_queue_) {
    queue_ = new ::std::string;
  }
  queue_->assign(value);
}
inline void UploadDataFinish::set_queue(const char* value) {
  _set_bit(1);
  if (queue_ == &_default_queue_) {
    queue_ = new ::std::string;
  }
  queue_->assign(value);
}
inline void UploadDataFinish::set_queue(const char* value, size_t size) {
  _set_bit(1);
  if (queue_ == &_default_queue_) {
    queue_ = new ::std::string;
  }
  queue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UploadDataFinish::mutable_queue() {
  _set_bit(1);
  if (queue_ == &_default_queue_) {
    queue_ = new ::std::string;
  }
  return queue_;
}

// repeated .samson.network.File files = 5;
inline int UploadDataFinish::files_size() const {
  return files_.size();
}
inline void UploadDataFinish::clear_files() {
  files_.Clear();
}
inline const ::samson::network::File& UploadDataFinish::files(int index) const {
  return files_.Get(index);
}
inline ::samson::network::File* UploadDataFinish::mutable_files(int index) {
  return files_.Mutable(index);
}
inline ::samson::network::File* UploadDataFinish::add_files() {
  return files_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::samson::network::File >&
UploadDataFinish::files() const {
  return files_;
}
inline ::google::protobuf::RepeatedPtrField< ::samson::network::File >*
UploadDataFinish::mutable_files() {
  return &files_;
}

// optional .samson.network.Error error = 100;
inline bool UploadDataFinish::has_error() const {
  return _has_bit(3);
}
inline void UploadDataFinish::clear_error() {
  if (error_ != NULL) error_->::samson::network::Error::Clear();
  _clear_bit(3);
}
inline const ::samson::network::Error& UploadDataFinish::error() const {
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::samson::network::Error* UploadDataFinish::mutable_error() {
  _set_bit(3);
  if (error_ == NULL) error_ = new ::samson::network::Error;
  return error_;
}

// -------------------------------------------------------------------

// UploadDataFinishResponse

// required .samson.network.UploadDataFinish query = 1;
inline bool UploadDataFinishResponse::has_query() const {
  return _has_bit(0);
}
inline void UploadDataFinishResponse::clear_query() {
  if (query_ != NULL) query_->::samson::network::UploadDataFinish::Clear();
  _clear_bit(0);
}
inline const ::samson::network::UploadDataFinish& UploadDataFinishResponse::query() const {
  return query_ != NULL ? *query_ : *default_instance_->query_;
}
inline ::samson::network::UploadDataFinish* UploadDataFinishResponse::mutable_query() {
  _set_bit(0);
  if (query_ == NULL) query_ = new ::samson::network::UploadDataFinish;
  return query_;
}

// optional .samson.network.Error error = 100;
inline bool UploadDataFinishResponse::has_error() const {
  return _has_bit(1);
}
inline void UploadDataFinishResponse::clear_error() {
  if (error_ != NULL) error_->::samson::network::Error::Clear();
  _clear_bit(1);
}
inline const ::samson::network::Error& UploadDataFinishResponse::error() const {
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::samson::network::Error* UploadDataFinishResponse::mutable_error() {
  _set_bit(1);
  if (error_ == NULL) error_ = new ::samson::network::Error;
  return error_;
}

// -------------------------------------------------------------------

// DownloadDataInit

// required string queue = 1;
inline bool DownloadDataInit::has_queue() const {
  return _has_bit(0);
}
inline void DownloadDataInit::clear_queue() {
  if (queue_ != &_default_queue_) {
    queue_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& DownloadDataInit::queue() const {
  return *queue_;
}
inline void DownloadDataInit::set_queue(const ::std::string& value) {
  _set_bit(0);
  if (queue_ == &_default_queue_) {
    queue_ = new ::std::string;
  }
  queue_->assign(value);
}
inline void DownloadDataInit::set_queue(const char* value) {
  _set_bit(0);
  if (queue_ == &_default_queue_) {
    queue_ = new ::std::string;
  }
  queue_->assign(value);
}
inline void DownloadDataInit::set_queue(const char* value, size_t size) {
  _set_bit(0);
  if (queue_ == &_default_queue_) {
    queue_ = new ::std::string;
  }
  queue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DownloadDataInit::mutable_queue() {
  _set_bit(0);
  if (queue_ == &_default_queue_) {
    queue_ = new ::std::string;
  }
  return queue_;
}

// -------------------------------------------------------------------

// DownloadDataInitResponse

// required .samson.network.DownloadDataInit query = 1;
inline bool DownloadDataInitResponse::has_query() const {
  return _has_bit(0);
}
inline void DownloadDataInitResponse::clear_query() {
  if (query_ != NULL) query_->::samson::network::DownloadDataInit::Clear();
  _clear_bit(0);
}
inline const ::samson::network::DownloadDataInit& DownloadDataInitResponse::query() const {
  return query_ != NULL ? *query_ : *default_instance_->query_;
}
inline ::samson::network::DownloadDataInit* DownloadDataInitResponse::mutable_query() {
  _set_bit(0);
  if (query_ == NULL) query_ = new ::samson::network::DownloadDataInit;
  return query_;
}

// required uint64 load_id = 2;
inline bool DownloadDataInitResponse::has_load_id() const {
  return _has_bit(1);
}
inline void DownloadDataInitResponse::clear_load_id() {
  load_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::uint64 DownloadDataInitResponse::load_id() const {
  return load_id_;
}
inline void DownloadDataInitResponse::set_load_id(::google::protobuf::uint64 value) {
  _set_bit(1);
  load_id_ = value;
}

// optional .samson.network.FullQueue queue = 3;
inline bool DownloadDataInitResponse::has_queue() const {
  return _has_bit(2);
}
inline void DownloadDataInitResponse::clear_queue() {
  if (queue_ != NULL) queue_->::samson::network::FullQueue::Clear();
  _clear_bit(2);
}
inline const ::samson::network::FullQueue& DownloadDataInitResponse::queue() const {
  return queue_ != NULL ? *queue_ : *default_instance_->queue_;
}
inline ::samson::network::FullQueue* DownloadDataInitResponse::mutable_queue() {
  _set_bit(2);
  if (queue_ == NULL) queue_ = new ::samson::network::FullQueue;
  return queue_;
}

// optional .samson.network.Error error = 100;
inline bool DownloadDataInitResponse::has_error() const {
  return _has_bit(3);
}
inline void DownloadDataInitResponse::clear_error() {
  if (error_ != NULL) error_->::samson::network::Error::Clear();
  _clear_bit(3);
}
inline const ::samson::network::Error& DownloadDataInitResponse::error() const {
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::samson::network::Error* DownloadDataInitResponse::mutable_error() {
  _set_bit(3);
  if (error_ == NULL) error_ = new ::samson::network::Error;
  return error_;
}

// -------------------------------------------------------------------

// DownloadDataFile

// required uint64 file_id = 2;
inline bool DownloadDataFile::has_file_id() const {
  return _has_bit(0);
}
inline void DownloadDataFile::clear_file_id() {
  file_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 DownloadDataFile::file_id() const {
  return file_id_;
}
inline void DownloadDataFile::set_file_id(::google::protobuf::uint64 value) {
  _set_bit(0);
  file_id_ = value;
}

// required uint64 load_id = 3;
inline bool DownloadDataFile::has_load_id() const {
  return _has_bit(1);
}
inline void DownloadDataFile::clear_load_id() {
  load_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::uint64 DownloadDataFile::load_id() const {
  return load_id_;
}
inline void DownloadDataFile::set_load_id(::google::protobuf::uint64 value) {
  _set_bit(1);
  load_id_ = value;
}

// required .samson.network.File file = 4;
inline bool DownloadDataFile::has_file() const {
  return _has_bit(2);
}
inline void DownloadDataFile::clear_file() {
  if (file_ != NULL) file_->::samson::network::File::Clear();
  _clear_bit(2);
}
inline const ::samson::network::File& DownloadDataFile::file() const {
  return file_ != NULL ? *file_ : *default_instance_->file_;
}
inline ::samson::network::File* DownloadDataFile::mutable_file() {
  _set_bit(2);
  if (file_ == NULL) file_ = new ::samson::network::File;
  return file_;
}

// -------------------------------------------------------------------

// DownloadDataFileResponse

// required .samson.network.DownloadDataFile query = 1;
inline bool DownloadDataFileResponse::has_query() const {
  return _has_bit(0);
}
inline void DownloadDataFileResponse::clear_query() {
  if (query_ != NULL) query_->::samson::network::DownloadDataFile::Clear();
  _clear_bit(0);
}
inline const ::samson::network::DownloadDataFile& DownloadDataFileResponse::query() const {
  return query_ != NULL ? *query_ : *default_instance_->query_;
}
inline ::samson::network::DownloadDataFile* DownloadDataFileResponse::mutable_query() {
  _set_bit(0);
  if (query_ == NULL) query_ = new ::samson::network::DownloadDataFile;
  return query_;
}

// optional .samson.network.Error error = 100;
inline bool DownloadDataFileResponse::has_error() const {
  return _has_bit(1);
}
inline void DownloadDataFileResponse::clear_error() {
  if (error_ != NULL) error_->::samson::network::Error::Clear();
  _clear_bit(1);
}
inline const ::samson::network::Error& DownloadDataFileResponse::error() const {
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::samson::network::Error* DownloadDataFileResponse::mutable_error() {
  _set_bit(1);
  if (error_ == NULL) error_ = new ::samson::network::Error;
  return error_;
}

// -------------------------------------------------------------------

// DownloadDataFinish

// required uint64 file_id = 2;
inline bool DownloadDataFinish::has_file_id() const {
  return _has_bit(0);
}
inline void DownloadDataFinish::clear_file_id() {
  file_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 DownloadDataFinish::file_id() const {
  return file_id_;
}
inline void DownloadDataFinish::set_file_id(::google::protobuf::uint64 value) {
  _set_bit(0);
  file_id_ = value;
}

// required uint64 load_id = 3;
inline bool DownloadDataFinish::has_load_id() const {
  return _has_bit(1);
}
inline void DownloadDataFinish::clear_load_id() {
  load_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::uint64 DownloadDataFinish::load_id() const {
  return load_id_;
}
inline void DownloadDataFinish::set_load_id(::google::protobuf::uint64 value) {
  _set_bit(1);
  load_id_ = value;
}

// optional .samson.network.Error error = 100;
inline bool DownloadDataFinish::has_error() const {
  return _has_bit(2);
}
inline void DownloadDataFinish::clear_error() {
  if (error_ != NULL) error_->::samson::network::Error::Clear();
  _clear_bit(2);
}
inline const ::samson::network::Error& DownloadDataFinish::error() const {
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::samson::network::Error* DownloadDataFinish::mutable_error() {
  _set_bit(2);
  if (error_ == NULL) error_ = new ::samson::network::Error;
  return error_;
}

// -------------------------------------------------------------------

// DownloadDataFinishResponse

// required .samson.network.DownloadDataFinish query = 1;
inline bool DownloadDataFinishResponse::has_query() const {
  return _has_bit(0);
}
inline void DownloadDataFinishResponse::clear_query() {
  if (query_ != NULL) query_->::samson::network::DownloadDataFinish::Clear();
  _clear_bit(0);
}
inline const ::samson::network::DownloadDataFinish& DownloadDataFinishResponse::query() const {
  return query_ != NULL ? *query_ : *default_instance_->query_;
}
inline ::samson::network::DownloadDataFinish* DownloadDataFinishResponse::mutable_query() {
  _set_bit(0);
  if (query_ == NULL) query_ = new ::samson::network::DownloadDataFinish;
  return query_;
}

// optional .samson.network.Error error = 100;
inline bool DownloadDataFinishResponse::has_error() const {
  return _has_bit(1);
}
inline void DownloadDataFinishResponse::clear_error() {
  if (error_ != NULL) error_->::samson::network::Error::Clear();
  _clear_bit(1);
}
inline const ::samson::network::Error& DownloadDataFinishResponse::error() const {
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::samson::network::Error* DownloadDataFinishResponse::mutable_error() {
  _set_bit(1);
  if (error_ == NULL) error_ = new ::samson::network::Error;
  return error_;
}

// -------------------------------------------------------------------

// MessageProcessPlatform

// required .samson.network.MessageProcessPlatform.Code code = 1;
inline bool MessageProcessPlatform::has_code() const {
  return _has_bit(0);
}
inline void MessageProcessPlatform::clear_code() {
  code_ = 1;
  _clear_bit(0);
}
inline ::samson::network::MessageProcessPlatform_Code MessageProcessPlatform::code() const {
  return static_cast< ::samson::network::MessageProcessPlatform_Code >(code_);
}
inline void MessageProcessPlatform::set_code(::samson::network::MessageProcessPlatform_Code value) {
  GOOGLE_DCHECK(::samson::network::MessageProcessPlatform_Code_IsValid(value));
  _set_bit(0);
  code_ = value;
}

// optional int32 operation = 2;
inline bool MessageProcessPlatform::has_operation() const {
  return _has_bit(1);
}
inline void MessageProcessPlatform::clear_operation() {
  operation_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 MessageProcessPlatform::operation() const {
  return operation_;
}
inline void MessageProcessPlatform::set_operation(::google::protobuf::int32 value) {
  _set_bit(1);
  operation_ = value;
}

// optional .samson.network.Trace trace = 3;
inline bool MessageProcessPlatform::has_trace() const {
  return _has_bit(2);
}
inline void MessageProcessPlatform::clear_trace() {
  if (trace_ != NULL) trace_->::samson::network::Trace::Clear();
  _clear_bit(2);
}
inline const ::samson::network::Trace& MessageProcessPlatform::trace() const {
  return trace_ != NULL ? *trace_ : *default_instance_->trace_;
}
inline ::samson::network::Trace* MessageProcessPlatform::mutable_trace() {
  _set_bit(2);
  if (trace_ == NULL) trace_ = new ::samson::network::Trace;
  return trace_;
}

// optional double progress = 4;
inline bool MessageProcessPlatform::has_progress() const {
  return _has_bit(3);
}
inline void MessageProcessPlatform::clear_progress() {
  progress_ = 0;
  _clear_bit(3);
}
inline double MessageProcessPlatform::progress() const {
  return progress_;
}
inline void MessageProcessPlatform::set_progress(double value) {
  _set_bit(3);
  progress_ = value;
}

// optional string error = 5;
inline bool MessageProcessPlatform::has_error() const {
  return _has_bit(4);
}
inline void MessageProcessPlatform::clear_error() {
  if (error_ != &_default_error_) {
    error_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& MessageProcessPlatform::error() const {
  return *error_;
}
inline void MessageProcessPlatform::set_error(const ::std::string& value) {
  _set_bit(4);
  if (error_ == &_default_error_) {
    error_ = new ::std::string;
  }
  error_->assign(value);
}
inline void MessageProcessPlatform::set_error(const char* value) {
  _set_bit(4);
  if (error_ == &_default_error_) {
    error_ = new ::std::string;
  }
  error_->assign(value);
}
inline void MessageProcessPlatform::set_error(const char* value, size_t size) {
  _set_bit(4);
  if (error_ == &_default_error_) {
    error_ = new ::std::string;
  }
  error_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MessageProcessPlatform::mutable_error() {
  _set_bit(4);
  if (error_ == &_default_error_) {
    error_ = new ::std::string;
  }
  return error_;
}

// -------------------------------------------------------------------

// MessagePlatformProcess

// required .samson.network.MessagePlatformProcess.Code code = 1;
inline bool MessagePlatformProcess::has_code() const {
  return _has_bit(0);
}
inline void MessagePlatformProcess::clear_code() {
  code_ = 1;
  _clear_bit(0);
}
inline ::samson::network::MessagePlatformProcess_Code MessagePlatformProcess::code() const {
  return static_cast< ::samson::network::MessagePlatformProcess_Code >(code_);
}
inline void MessagePlatformProcess::set_code(::samson::network::MessagePlatformProcess_Code value) {
  GOOGLE_DCHECK(::samson::network::MessagePlatformProcess_Code_IsValid(value));
  _set_bit(0);
  code_ = value;
}

// -------------------------------------------------------------------

// Message

// optional .samson.network.Command command = 103;
inline bool Message::has_command() const {
  return _has_bit(0);
}
inline void Message::clear_command() {
  if (command_ != NULL) command_->::samson::network::Command::Clear();
  _clear_bit(0);
}
inline const ::samson::network::Command& Message::command() const {
  return command_ != NULL ? *command_ : *default_instance_->command_;
}
inline ::samson::network::Command* Message::mutable_command() {
  _set_bit(0);
  if (command_ == NULL) command_ = new ::samson::network::Command;
  return command_;
}

// optional .samson.network.CommandResponse command_response = 104;
inline bool Message::has_command_response() const {
  return _has_bit(1);
}
inline void Message::clear_command_response() {
  if (command_response_ != NULL) command_response_->::samson::network::CommandResponse::Clear();
  _clear_bit(1);
}
inline const ::samson::network::CommandResponse& Message::command_response() const {
  return command_response_ != NULL ? *command_response_ : *default_instance_->command_response_;
}
inline ::samson::network::CommandResponse* Message::mutable_command_response() {
  _set_bit(1);
  if (command_response_ == NULL) command_response_ = new ::samson::network::CommandResponse;
  return command_response_;
}

// optional .samson.network.WorkerTask worker_task = 105;
inline bool Message::has_worker_task() const {
  return _has_bit(2);
}
inline void Message::clear_worker_task() {
  if (worker_task_ != NULL) worker_task_->::samson::network::WorkerTask::Clear();
  _clear_bit(2);
}
inline const ::samson::network::WorkerTask& Message::worker_task() const {
  return worker_task_ != NULL ? *worker_task_ : *default_instance_->worker_task_;
}
inline ::samson::network::WorkerTask* Message::mutable_worker_task() {
  _set_bit(2);
  if (worker_task_ == NULL) worker_task_ = new ::samson::network::WorkerTask;
  return worker_task_;
}

// optional .samson.network.WorkerTaskConfirmation worker_task_confirmation = 106;
inline bool Message::has_worker_task_confirmation() const {
  return _has_bit(3);
}
inline void Message::clear_worker_task_confirmation() {
  if (worker_task_confirmation_ != NULL) worker_task_confirmation_->::samson::network::WorkerTaskConfirmation::Clear();
  _clear_bit(3);
}
inline const ::samson::network::WorkerTaskConfirmation& Message::worker_task_confirmation() const {
  return worker_task_confirmation_ != NULL ? *worker_task_confirmation_ : *default_instance_->worker_task_confirmation_;
}
inline ::samson::network::WorkerTaskConfirmation* Message::mutable_worker_task_confirmation() {
  _set_bit(3);
  if (worker_task_confirmation_ == NULL) worker_task_confirmation_ = new ::samson::network::WorkerTaskConfirmation;
  return worker_task_confirmation_;
}

// optional .samson.network.WorkerTaskKill worker_task_kill = 202;
inline bool Message::has_worker_task_kill() const {
  return _has_bit(4);
}
inline void Message::clear_worker_task_kill() {
  if (worker_task_kill_ != NULL) worker_task_kill_->::samson::network::WorkerTaskKill::Clear();
  _clear_bit(4);
}
inline const ::samson::network::WorkerTaskKill& Message::worker_task_kill() const {
  return worker_task_kill_ != NULL ? *worker_task_kill_ : *default_instance_->worker_task_kill_;
}
inline ::samson::network::WorkerTaskKill* Message::mutable_worker_task_kill() {
  _set_bit(4);
  if (worker_task_kill_ == NULL) worker_task_kill_ = new ::samson::network::WorkerTaskKill;
  return worker_task_kill_;
}

// optional .samson.network.WorkerTaskRemove worker_task_remove = 203;
inline bool Message::has_worker_task_remove() const {
  return _has_bit(5);
}
inline void Message::clear_worker_task_remove() {
  if (worker_task_remove_ != NULL) worker_task_remove_->::samson::network::WorkerTaskRemove::Clear();
  _clear_bit(5);
}
inline const ::samson::network::WorkerTaskRemove& Message::worker_task_remove() const {
  return worker_task_remove_ != NULL ? *worker_task_remove_ : *default_instance_->worker_task_remove_;
}
inline ::samson::network::WorkerTaskRemove* Message::mutable_worker_task_remove() {
  _set_bit(5);
  if (worker_task_remove_ == NULL) worker_task_remove_ = new ::samson::network::WorkerTaskRemove;
  return worker_task_remove_;
}

// optional .samson.network.WorkerDataExchange data = 107;
inline bool Message::has_data() const {
  return _has_bit(6);
}
inline void Message::clear_data() {
  if (data_ != NULL) data_->::samson::network::WorkerDataExchange::Clear();
  _clear_bit(6);
}
inline const ::samson::network::WorkerDataExchange& Message::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::samson::network::WorkerDataExchange* Message::mutable_data() {
  _set_bit(6);
  if (data_ == NULL) data_ = new ::samson::network::WorkerDataExchange;
  return data_;
}

// optional .samson.network.WorkerDataExchangeClose data_close = 108;
inline bool Message::has_data_close() const {
  return _has_bit(7);
}
inline void Message::clear_data_close() {
  if (data_close_ != NULL) data_close_->::samson::network::WorkerDataExchangeClose::Clear();
  _clear_bit(7);
}
inline const ::samson::network::WorkerDataExchangeClose& Message::data_close() const {
  return data_close_ != NULL ? *data_close_ : *default_instance_->data_close_;
}
inline ::samson::network::WorkerDataExchangeClose* Message::mutable_data_close() {
  _set_bit(7);
  if (data_close_ == NULL) data_close_ = new ::samson::network::WorkerDataExchangeClose;
  return data_close_;
}

// optional .samson.network.UploadDataInit upload_data_init = 111;
inline bool Message::has_upload_data_init() const {
  return _has_bit(8);
}
inline void Message::clear_upload_data_init() {
  if (upload_data_init_ != NULL) upload_data_init_->::samson::network::UploadDataInit::Clear();
  _clear_bit(8);
}
inline const ::samson::network::UploadDataInit& Message::upload_data_init() const {
  return upload_data_init_ != NULL ? *upload_data_init_ : *default_instance_->upload_data_init_;
}
inline ::samson::network::UploadDataInit* Message::mutable_upload_data_init() {
  _set_bit(8);
  if (upload_data_init_ == NULL) upload_data_init_ = new ::samson::network::UploadDataInit;
  return upload_data_init_;
}

// optional .samson.network.UploadDataInitResponse upload_data_init_response = 112;
inline bool Message::has_upload_data_init_response() const {
  return _has_bit(9);
}
inline void Message::clear_upload_data_init_response() {
  if (upload_data_init_response_ != NULL) upload_data_init_response_->::samson::network::UploadDataInitResponse::Clear();
  _clear_bit(9);
}
inline const ::samson::network::UploadDataInitResponse& Message::upload_data_init_response() const {
  return upload_data_init_response_ != NULL ? *upload_data_init_response_ : *default_instance_->upload_data_init_response_;
}
inline ::samson::network::UploadDataInitResponse* Message::mutable_upload_data_init_response() {
  _set_bit(9);
  if (upload_data_init_response_ == NULL) upload_data_init_response_ = new ::samson::network::UploadDataInitResponse;
  return upload_data_init_response_;
}

// optional .samson.network.UploadDataFile upload_data_file = 113;
inline bool Message::has_upload_data_file() const {
  return _has_bit(10);
}
inline void Message::clear_upload_data_file() {
  if (upload_data_file_ != NULL) upload_data_file_->::samson::network::UploadDataFile::Clear();
  _clear_bit(10);
}
inline const ::samson::network::UploadDataFile& Message::upload_data_file() const {
  return upload_data_file_ != NULL ? *upload_data_file_ : *default_instance_->upload_data_file_;
}
inline ::samson::network::UploadDataFile* Message::mutable_upload_data_file() {
  _set_bit(10);
  if (upload_data_file_ == NULL) upload_data_file_ = new ::samson::network::UploadDataFile;
  return upload_data_file_;
}

// optional .samson.network.UploadDataFileResponse upload_data_file_response = 114;
inline bool Message::has_upload_data_file_response() const {
  return _has_bit(11);
}
inline void Message::clear_upload_data_file_response() {
  if (upload_data_file_response_ != NULL) upload_data_file_response_->::samson::network::UploadDataFileResponse::Clear();
  _clear_bit(11);
}
inline const ::samson::network::UploadDataFileResponse& Message::upload_data_file_response() const {
  return upload_data_file_response_ != NULL ? *upload_data_file_response_ : *default_instance_->upload_data_file_response_;
}
inline ::samson::network::UploadDataFileResponse* Message::mutable_upload_data_file_response() {
  _set_bit(11);
  if (upload_data_file_response_ == NULL) upload_data_file_response_ = new ::samson::network::UploadDataFileResponse;
  return upload_data_file_response_;
}

// optional .samson.network.UploadDataFinish upload_data_finish = 115;
inline bool Message::has_upload_data_finish() const {
  return _has_bit(12);
}
inline void Message::clear_upload_data_finish() {
  if (upload_data_finish_ != NULL) upload_data_finish_->::samson::network::UploadDataFinish::Clear();
  _clear_bit(12);
}
inline const ::samson::network::UploadDataFinish& Message::upload_data_finish() const {
  return upload_data_finish_ != NULL ? *upload_data_finish_ : *default_instance_->upload_data_finish_;
}
inline ::samson::network::UploadDataFinish* Message::mutable_upload_data_finish() {
  _set_bit(12);
  if (upload_data_finish_ == NULL) upload_data_finish_ = new ::samson::network::UploadDataFinish;
  return upload_data_finish_;
}

// optional .samson.network.UploadDataFinishResponse upload_data_finish_response = 116;
inline bool Message::has_upload_data_finish_response() const {
  return _has_bit(13);
}
inline void Message::clear_upload_data_finish_response() {
  if (upload_data_finish_response_ != NULL) upload_data_finish_response_->::samson::network::UploadDataFinishResponse::Clear();
  _clear_bit(13);
}
inline const ::samson::network::UploadDataFinishResponse& Message::upload_data_finish_response() const {
  return upload_data_finish_response_ != NULL ? *upload_data_finish_response_ : *default_instance_->upload_data_finish_response_;
}
inline ::samson::network::UploadDataFinishResponse* Message::mutable_upload_data_finish_response() {
  _set_bit(13);
  if (upload_data_finish_response_ == NULL) upload_data_finish_response_ = new ::samson::network::UploadDataFinishResponse;
  return upload_data_finish_response_;
}

// optional .samson.network.DownloadDataInit download_data_init = 117;
inline bool Message::has_download_data_init() const {
  return _has_bit(14);
}
inline void Message::clear_download_data_init() {
  if (download_data_init_ != NULL) download_data_init_->::samson::network::DownloadDataInit::Clear();
  _clear_bit(14);
}
inline const ::samson::network::DownloadDataInit& Message::download_data_init() const {
  return download_data_init_ != NULL ? *download_data_init_ : *default_instance_->download_data_init_;
}
inline ::samson::network::DownloadDataInit* Message::mutable_download_data_init() {
  _set_bit(14);
  if (download_data_init_ == NULL) download_data_init_ = new ::samson::network::DownloadDataInit;
  return download_data_init_;
}

// optional .samson.network.DownloadDataInitResponse download_data_init_response = 118;
inline bool Message::has_download_data_init_response() const {
  return _has_bit(15);
}
inline void Message::clear_download_data_init_response() {
  if (download_data_init_response_ != NULL) download_data_init_response_->::samson::network::DownloadDataInitResponse::Clear();
  _clear_bit(15);
}
inline const ::samson::network::DownloadDataInitResponse& Message::download_data_init_response() const {
  return download_data_init_response_ != NULL ? *download_data_init_response_ : *default_instance_->download_data_init_response_;
}
inline ::samson::network::DownloadDataInitResponse* Message::mutable_download_data_init_response() {
  _set_bit(15);
  if (download_data_init_response_ == NULL) download_data_init_response_ = new ::samson::network::DownloadDataInitResponse;
  return download_data_init_response_;
}

// optional .samson.network.DownloadDataFile download_data_file = 119;
inline bool Message::has_download_data_file() const {
  return _has_bit(16);
}
inline void Message::clear_download_data_file() {
  if (download_data_file_ != NULL) download_data_file_->::samson::network::DownloadDataFile::Clear();
  _clear_bit(16);
}
inline const ::samson::network::DownloadDataFile& Message::download_data_file() const {
  return download_data_file_ != NULL ? *download_data_file_ : *default_instance_->download_data_file_;
}
inline ::samson::network::DownloadDataFile* Message::mutable_download_data_file() {
  _set_bit(16);
  if (download_data_file_ == NULL) download_data_file_ = new ::samson::network::DownloadDataFile;
  return download_data_file_;
}

// optional .samson.network.DownloadDataFileResponse download_data_file_response = 120;
inline bool Message::has_download_data_file_response() const {
  return _has_bit(17);
}
inline void Message::clear_download_data_file_response() {
  if (download_data_file_response_ != NULL) download_data_file_response_->::samson::network::DownloadDataFileResponse::Clear();
  _clear_bit(17);
}
inline const ::samson::network::DownloadDataFileResponse& Message::download_data_file_response() const {
  return download_data_file_response_ != NULL ? *download_data_file_response_ : *default_instance_->download_data_file_response_;
}
inline ::samson::network::DownloadDataFileResponse* Message::mutable_download_data_file_response() {
  _set_bit(17);
  if (download_data_file_response_ == NULL) download_data_file_response_ = new ::samson::network::DownloadDataFileResponse;
  return download_data_file_response_;
}

// optional .samson.network.DownloadDataFinish download_data_finish = 121;
inline bool Message::has_download_data_finish() const {
  return _has_bit(18);
}
inline void Message::clear_download_data_finish() {
  if (download_data_finish_ != NULL) download_data_finish_->::samson::network::DownloadDataFinish::Clear();
  _clear_bit(18);
}
inline const ::samson::network::DownloadDataFinish& Message::download_data_finish() const {
  return download_data_finish_ != NULL ? *download_data_finish_ : *default_instance_->download_data_finish_;
}
inline ::samson::network::DownloadDataFinish* Message::mutable_download_data_finish() {
  _set_bit(18);
  if (download_data_finish_ == NULL) download_data_finish_ = new ::samson::network::DownloadDataFinish;
  return download_data_finish_;
}

// optional .samson.network.DownloadDataFinishResponse download_data_finish_response = 122;
inline bool Message::has_download_data_finish_response() const {
  return _has_bit(19);
}
inline void Message::clear_download_data_finish_response() {
  if (download_data_finish_response_ != NULL) download_data_finish_response_->::samson::network::DownloadDataFinishResponse::Clear();
  _clear_bit(19);
}
inline const ::samson::network::DownloadDataFinishResponse& Message::download_data_finish_response() const {
  return download_data_finish_response_ != NULL ? *download_data_finish_response_ : *default_instance_->download_data_finish_response_;
}
inline ::samson::network::DownloadDataFinishResponse* Message::mutable_download_data_finish_response() {
  _set_bit(19);
  if (download_data_finish_response_ == NULL) download_data_finish_response_ = new ::samson::network::DownloadDataFinishResponse;
  return download_data_finish_response_;
}

// optional .samson.network.WorkerStatus worker_status = 170;
inline bool Message::has_worker_status() const {
  return _has_bit(20);
}
inline void Message::clear_worker_status() {
  if (worker_status_ != NULL) worker_status_->::samson::network::WorkerStatus::Clear();
  _clear_bit(20);
}
inline const ::samson::network::WorkerStatus& Message::worker_status() const {
  return worker_status_ != NULL ? *worker_status_ : *default_instance_->worker_status_;
}
inline ::samson::network::WorkerStatus* Message::mutable_worker_status() {
  _set_bit(20);
  if (worker_status_ == NULL) worker_status_ = new ::samson::network::WorkerStatus;
  return worker_status_;
}

// optional .samson.network.Trace trace = 171;
inline bool Message::has_trace() const {
  return _has_bit(21);
}
inline void Message::clear_trace() {
  if (trace_ != NULL) trace_->::samson::network::Trace::Clear();
  _clear_bit(21);
}
inline const ::samson::network::Trace& Message::trace() const {
  return trace_ != NULL ? *trace_ : *default_instance_->trace_;
}
inline ::samson::network::Trace* Message::mutable_trace() {
  _set_bit(21);
  if (trace_ == NULL) trace_ = new ::samson::network::Trace;
  return trace_;
}

// optional uint64 delilah_id = 300;
inline bool Message::has_delilah_id() const {
  return _has_bit(22);
}
inline void Message::clear_delilah_id() {
  delilah_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(22);
}
inline ::google::protobuf::uint64 Message::delilah_id() const {
  return delilah_id_;
}
inline void Message::set_delilah_id(::google::protobuf::uint64 value) {
  _set_bit(22);
  delilah_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace network
}  // namespace samson

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::samson::network::ControllerTask_ControllerTaskState>() {
  return ::samson::network::ControllerTask_ControllerTaskState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::samson::network::WorkerTaskConfirmation_WorkerTaskConfirmationType>() {
  return ::samson::network::WorkerTaskConfirmation_WorkerTaskConfirmationType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::samson::network::MessageProcessPlatform_Code>() {
  return ::samson::network::MessageProcessPlatform_Code_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::samson::network::MessagePlatformProcess_Code>() {
  return ::samson::network::MessagePlatformProcess_Code_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::samson::network::Message_Sender>() {
  return ::samson::network::Message_Sender_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_samson_2eproto__INCLUDED
