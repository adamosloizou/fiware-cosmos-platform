// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "samson/common/samson.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace samson {
namespace network {

namespace {

const ::google::protobuf::Descriptor* EnvironmentVariable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnvironmentVariable_reflection_ = NULL;
const ::google::protobuf::Descriptor* Environment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Environment_reflection_ = NULL;
const ::google::protobuf::Descriptor* KVInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KVInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* File_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  File_reflection_ = NULL;
const ::google::protobuf::Descriptor* Queue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Queue_reflection_ = NULL;
const ::google::protobuf::Descriptor* FullQueue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FullQueue_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueueFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueueFile_reflection_ = NULL;
const ::google::protobuf::Descriptor* KVFormat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KVFormat_reflection_ = NULL;
const ::google::protobuf::Descriptor* Operation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Operation_reflection_ = NULL;
const ::google::protobuf::Descriptor* Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* JobItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JobItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* AutomaticOperation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AutomaticOperation_reflection_ = NULL;
const ::google::protobuf::Descriptor* Job_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Job_reflection_ = NULL;
const ::google::protobuf::Descriptor* Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Error_reflection_ = NULL;
const ::google::protobuf::Descriptor* Trace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Trace_reflection_ = NULL;
const ::google::protobuf::Descriptor* ControllerTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ControllerTask_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ControllerTask_ControllerTaskState_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ControllerTaskManagerStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ControllerTaskManagerStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* ControllerStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ControllerStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkerStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkerStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActiveTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActiveTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueueList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueueList_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataList_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperationList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperationList_reflection_ = NULL;
const ::google::protobuf::Descriptor* JobList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JobList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AutomaticOperationList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AutomaticOperationList_reflection_ = NULL;
const ::google::protobuf::Descriptor* SamsonStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SamsonStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkerTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkerTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkerTaskKill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkerTaskKill_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkerTaskRemove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkerTaskRemove_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkerTaskConfirmation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkerTaskConfirmation_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* WorkerTaskConfirmation_WorkerTaskConfirmationType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Command_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkerDataExchange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkerDataExchange_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkerDataExchangeClose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkerDataExchangeClose_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadDataInit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadDataInit_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadDataInitResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadDataInitResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadDataFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadDataFile_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadDataFileResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadDataFileResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadDataFinish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadDataFinish_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadDataFinishResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadDataFinishResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DownloadDataInit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownloadDataInit_reflection_ = NULL;
const ::google::protobuf::Descriptor* DownloadDataInitResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownloadDataInitResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DownloadDataFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownloadDataFile_reflection_ = NULL;
const ::google::protobuf::Descriptor* DownloadDataFileResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownloadDataFileResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DownloadDataFinish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownloadDataFinish_reflection_ = NULL;
const ::google::protobuf::Descriptor* DownloadDataFinishResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownloadDataFinishResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageProcessPlatform_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageProcessPlatform_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageProcessPlatform_Code_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MessagePlatformProcess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessagePlatformProcess_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MessagePlatformProcess_Code_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Message_Sender_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_samson_2eproto() {
  protobuf_AddDesc_samson_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "samson.proto");
  GOOGLE_CHECK(file != NULL);
  EnvironmentVariable_descriptor_ = file->message_type(0);
  static const int EnvironmentVariable_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvironmentVariable, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvironmentVariable, value_),
  };
  EnvironmentVariable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnvironmentVariable_descriptor_,
      EnvironmentVariable::default_instance_,
      EnvironmentVariable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvironmentVariable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvironmentVariable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnvironmentVariable));
  Environment_descriptor_ = file->message_type(1);
  static const int Environment_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Environment, variable_),
  };
  Environment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Environment_descriptor_,
      Environment::default_instance_,
      Environment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Environment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Environment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Environment));
  KVInfo_descriptor_ = file->message_type(2);
  static const int KVInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVInfo, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVInfo, kvs_),
  };
  KVInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KVInfo_descriptor_,
      KVInfo::default_instance_,
      KVInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KVInfo));
  File_descriptor_ = file->message_type(3);
  static const int File_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, worker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, info_),
  };
  File_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      File_descriptor_,
      File::default_instance_,
      File_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(File));
  Queue_descriptor_ = file->message_type(4);
  static const int Queue_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Queue, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Queue, format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Queue, info_),
  };
  Queue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Queue_descriptor_,
      Queue::default_instance_,
      Queue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Queue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Queue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Queue));
  FullQueue_descriptor_ = file->message_type(5);
  static const int FullQueue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullQueue, queue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullQueue, file_),
  };
  FullQueue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FullQueue_descriptor_,
      FullQueue::default_instance_,
      FullQueue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullQueue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullQueue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FullQueue));
  QueueFile_descriptor_ = file->message_type(6);
  static const int QueueFile_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueueFile, queue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueueFile, file_),
  };
  QueueFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueueFile_descriptor_,
      QueueFile::default_instance_,
      QueueFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueueFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueueFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueueFile));
  KVFormat_descriptor_ = file->message_type(7);
  static const int KVFormat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVFormat, keyformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVFormat, valueformat_),
  };
  KVFormat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KVFormat_descriptor_,
      KVFormat::default_instance_,
      KVFormat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVFormat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVFormat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KVFormat));
  Operation_descriptor_ = file->message_type(8);
  static const int Operation_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, help_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, help_line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, output_),
  };
  Operation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Operation_descriptor_,
      Operation::default_instance_,
      Operation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Operation));
  Data_descriptor_ = file->message_type(9);
  static const int Data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, help_),
  };
  Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Data_descriptor_,
      Data::default_instance_,
      Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Data));
  JobItem_descriptor_ = file->message_type(10);
  static const int JobItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobItem, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobItem, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobItem, num_lines_),
  };
  JobItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JobItem_descriptor_,
      JobItem::default_instance_,
      JobItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JobItem));
  AutomaticOperation_descriptor_ = file->message_type(11);
  static const int AutomaticOperation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutomaticOperation, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutomaticOperation, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutomaticOperation, thrigger_),
  };
  AutomaticOperation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AutomaticOperation_descriptor_,
      AutomaticOperation::default_instance_,
      AutomaticOperation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutomaticOperation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutomaticOperation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AutomaticOperation));
  Job_descriptor_ = file->message_type(12);
  static const int Job_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Job, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Job, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Job, main_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Job, item_),
  };
  Job_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Job_descriptor_,
      Job::default_instance_,
      Job_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Job, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Job, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Job));
  Error_descriptor_ = file->message_type(13);
  static const int Error_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, message_),
  };
  Error_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Error_descriptor_,
      Error::default_instance_,
      Error_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Error));
  Trace_descriptor_ = file->message_type(14);
  static const int Trace_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trace, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trace, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trace, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trace, lineno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trace, fname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trace, tlev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trace, stre_),
  };
  Trace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Trace_descriptor_,
      Trace::default_instance_,
      Trace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Trace));
  ControllerTask_descriptor_ = file->message_type(15);
  static const int ControllerTask_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerTask, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerTask, job_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerTask, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerTask, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerTask, total_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerTask, running_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerTask, processed_info_),
  };
  ControllerTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ControllerTask_descriptor_,
      ControllerTask::default_instance_,
      ControllerTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ControllerTask));
  ControllerTask_ControllerTaskState_descriptor_ = ControllerTask_descriptor_->enum_type(0);
  ControllerTaskManagerStatus_descriptor_ = file->message_type(16);
  static const int ControllerTaskManagerStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerTaskManagerStatus, task_),
  };
  ControllerTaskManagerStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ControllerTaskManagerStatus_descriptor_,
      ControllerTaskManagerStatus::default_instance_,
      ControllerTaskManagerStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerTaskManagerStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerTaskManagerStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ControllerTaskManagerStatus));
  ControllerStatus_descriptor_ = file->message_type(17);
  static const int ControllerStatus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerStatus, up_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerStatus, job_manager_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerStatus, network_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerStatus, task_manager_status_),
  };
  ControllerStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ControllerStatus_descriptor_,
      ControllerStatus::default_instance_,
      ControllerStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ControllerStatus));
  WorkerStatus_descriptor_ = file->message_type(18);
  static const int WorkerStatus_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerStatus, up_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerStatus, update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerStatus, task_manager_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerStatus, disk_manager_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerStatus, load_data_manager_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerStatus, process_manager_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerStatus, network_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerStatus, memory_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerStatus, shared_memory_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerStatus, engine_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerStatus, queues_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerStatus, used_memory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerStatus, total_memory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerStatus, total_cores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerStatus, used_cores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerStatus, disk_pending_operations_),
  };
  WorkerStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkerStatus_descriptor_,
      WorkerStatus::default_instance_,
      WorkerStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkerStatus));
  ActiveTask_descriptor_ = file->message_type(19);
  static const int ActiveTask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveTask, filename_),
  };
  ActiveTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActiveTask_descriptor_,
      ActiveTask::default_instance_,
      ActiveTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActiveTask));
  QueueList_descriptor_ = file->message_type(20);
  static const int QueueList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueueList, queue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueueList, tasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueueList, load_id_),
  };
  QueueList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueueList_descriptor_,
      QueueList::default_instance_,
      QueueList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueueList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueueList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueueList));
  DataList_descriptor_ = file->message_type(21);
  static const int DataList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataList, data_),
  };
  DataList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataList_descriptor_,
      DataList::default_instance_,
      DataList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataList));
  OperationList_descriptor_ = file->message_type(22);
  static const int OperationList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationList, operation_),
  };
  OperationList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperationList_descriptor_,
      OperationList::default_instance_,
      OperationList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperationList));
  JobList_descriptor_ = file->message_type(23);
  static const int JobList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobList, job_),
  };
  JobList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JobList_descriptor_,
      JobList::default_instance_,
      JobList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JobList));
  AutomaticOperationList_descriptor_ = file->message_type(24);
  static const int AutomaticOperationList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutomaticOperationList, automatic_operation_),
  };
  AutomaticOperationList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AutomaticOperationList_descriptor_,
      AutomaticOperationList::default_instance_,
      AutomaticOperationList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutomaticOperationList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutomaticOperationList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AutomaticOperationList));
  SamsonStatus_descriptor_ = file->message_type(25);
  static const int SamsonStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SamsonStatus, controller_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SamsonStatus, worker_status_),
  };
  SamsonStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SamsonStatus_descriptor_,
      SamsonStatus::default_instance_,
      SamsonStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SamsonStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SamsonStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SamsonStatus));
  WorkerTask_descriptor_ = file->message_type(26);
  static const int WorkerTask_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerTask, job_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerTask, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerTask, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerTask, input_queue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerTask, output_queue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerTask, servers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerTask, generator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerTask, environment_),
  };
  WorkerTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkerTask_descriptor_,
      WorkerTask::default_instance_,
      WorkerTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkerTask));
  WorkerTaskKill_descriptor_ = file->message_type(27);
  static const int WorkerTaskKill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerTaskKill, task_id_),
  };
  WorkerTaskKill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkerTaskKill_descriptor_,
      WorkerTaskKill::default_instance_,
      WorkerTaskKill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerTaskKill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerTaskKill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkerTaskKill));
  WorkerTaskRemove_descriptor_ = file->message_type(28);
  static const int WorkerTaskRemove_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerTaskRemove, task_id_),
  };
  WorkerTaskRemove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkerTaskRemove_descriptor_,
      WorkerTaskRemove::default_instance_,
      WorkerTaskRemove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerTaskRemove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerTaskRemove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkerTaskRemove));
  WorkerTaskConfirmation_descriptor_ = file->message_type(29);
  static const int WorkerTaskConfirmation_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerTaskConfirmation, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerTaskConfirmation, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerTaskConfirmation, add_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerTaskConfirmation, remove_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerTaskConfirmation, num_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerTaskConfirmation, num_finished_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerTaskConfirmation, error_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerTaskConfirmation, progressrunning_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerTaskConfirmation, progressprocessed_),
  };
  WorkerTaskConfirmation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkerTaskConfirmation_descriptor_,
      WorkerTaskConfirmation::default_instance_,
      WorkerTaskConfirmation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerTaskConfirmation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerTaskConfirmation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkerTaskConfirmation));
  WorkerTaskConfirmation_WorkerTaskConfirmationType_descriptor_ = WorkerTaskConfirmation_descriptor_->enum_type(0);
  Command_descriptor_ = file->message_type(30);
  static const int Command_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, environment_),
  };
  Command_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Command_descriptor_,
      Command::default_instance_,
      Command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Command));
  CommandResponse_descriptor_ = file->message_type(31);
  static const int CommandResponse_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResponse, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResponse, new_job_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResponse, finish_job_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResponse, error_job_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResponse, error_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResponse, ellapsed_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResponse, finish_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResponse, job_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResponse, operation_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResponse, data_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResponse, queue_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResponse, automatic_operation_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResponse, samson_status_),
  };
  CommandResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandResponse_descriptor_,
      CommandResponse::default_instance_,
      CommandResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandResponse));
  WorkerDataExchange_descriptor_ = file->message_type(32);
  static const int WorkerDataExchange_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerDataExchange, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerDataExchange, queue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerDataExchange, txt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerDataExchange, worker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerDataExchange, hg_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerDataExchange, finish_),
  };
  WorkerDataExchange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkerDataExchange_descriptor_,
      WorkerDataExchange::default_instance_,
      WorkerDataExchange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerDataExchange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerDataExchange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkerDataExchange));
  WorkerDataExchangeClose_descriptor_ = file->message_type(33);
  static const int WorkerDataExchangeClose_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerDataExchangeClose, task_id_),
  };
  WorkerDataExchangeClose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkerDataExchangeClose_descriptor_,
      WorkerDataExchangeClose::default_instance_,
      WorkerDataExchangeClose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerDataExchangeClose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerDataExchangeClose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkerDataExchangeClose));
  UploadDataInit_descriptor_ = file->message_type(34);
  static const int UploadDataInit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadDataInit, queue_),
  };
  UploadDataInit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UploadDataInit_descriptor_,
      UploadDataInit::default_instance_,
      UploadDataInit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadDataInit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadDataInit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UploadDataInit));
  UploadDataInitResponse_descriptor_ = file->message_type(35);
  static const int UploadDataInitResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadDataInitResponse, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadDataInitResponse, load_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadDataInitResponse, error_),
  };
  UploadDataInitResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UploadDataInitResponse_descriptor_,
      UploadDataInitResponse::default_instance_,
      UploadDataInitResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadDataInitResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadDataInitResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UploadDataInitResponse));
  UploadDataFile_descriptor_ = file->message_type(36);
  static const int UploadDataFile_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadDataFile, load_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadDataFile, file_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadDataFile, file_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadDataFile, file_ext_),
  };
  UploadDataFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UploadDataFile_descriptor_,
      UploadDataFile::default_instance_,
      UploadDataFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadDataFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadDataFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UploadDataFile));
  UploadDataFileResponse_descriptor_ = file->message_type(37);
  static const int UploadDataFileResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadDataFileResponse, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadDataFileResponse, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadDataFileResponse, error_),
  };
  UploadDataFileResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UploadDataFileResponse_descriptor_,
      UploadDataFileResponse::default_instance_,
      UploadDataFileResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadDataFileResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadDataFileResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UploadDataFileResponse));
  UploadDataFinish_descriptor_ = file->message_type(38);
  static const int UploadDataFinish_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadDataFinish, load_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadDataFinish, queue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadDataFinish, files_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadDataFinish, error_),
  };
  UploadDataFinish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UploadDataFinish_descriptor_,
      UploadDataFinish::default_instance_,
      UploadDataFinish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadDataFinish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadDataFinish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UploadDataFinish));
  UploadDataFinishResponse_descriptor_ = file->message_type(39);
  static const int UploadDataFinishResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadDataFinishResponse, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadDataFinishResponse, error_),
  };
  UploadDataFinishResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UploadDataFinishResponse_descriptor_,
      UploadDataFinishResponse::default_instance_,
      UploadDataFinishResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadDataFinishResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadDataFinishResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UploadDataFinishResponse));
  DownloadDataInit_descriptor_ = file->message_type(40);
  static const int DownloadDataInit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadDataInit, queue_),
  };
  DownloadDataInit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DownloadDataInit_descriptor_,
      DownloadDataInit::default_instance_,
      DownloadDataInit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadDataInit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadDataInit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DownloadDataInit));
  DownloadDataInitResponse_descriptor_ = file->message_type(41);
  static const int DownloadDataInitResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadDataInitResponse, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadDataInitResponse, load_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadDataInitResponse, queue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadDataInitResponse, error_),
  };
  DownloadDataInitResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DownloadDataInitResponse_descriptor_,
      DownloadDataInitResponse::default_instance_,
      DownloadDataInitResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadDataInitResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadDataInitResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DownloadDataInitResponse));
  DownloadDataFile_descriptor_ = file->message_type(42);
  static const int DownloadDataFile_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadDataFile, file_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadDataFile, load_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadDataFile, file_),
  };
  DownloadDataFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DownloadDataFile_descriptor_,
      DownloadDataFile::default_instance_,
      DownloadDataFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadDataFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadDataFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DownloadDataFile));
  DownloadDataFileResponse_descriptor_ = file->message_type(43);
  static const int DownloadDataFileResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadDataFileResponse, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadDataFileResponse, error_),
  };
  DownloadDataFileResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DownloadDataFileResponse_descriptor_,
      DownloadDataFileResponse::default_instance_,
      DownloadDataFileResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadDataFileResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadDataFileResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DownloadDataFileResponse));
  DownloadDataFinish_descriptor_ = file->message_type(44);
  static const int DownloadDataFinish_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadDataFinish, file_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadDataFinish, load_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadDataFinish, error_),
  };
  DownloadDataFinish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DownloadDataFinish_descriptor_,
      DownloadDataFinish::default_instance_,
      DownloadDataFinish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadDataFinish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadDataFinish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DownloadDataFinish));
  DownloadDataFinishResponse_descriptor_ = file->message_type(45);
  static const int DownloadDataFinishResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadDataFinishResponse, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadDataFinishResponse, error_),
  };
  DownloadDataFinishResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DownloadDataFinishResponse_descriptor_,
      DownloadDataFinishResponse::default_instance_,
      DownloadDataFinishResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadDataFinishResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadDataFinishResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DownloadDataFinishResponse));
  MessageProcessPlatform_descriptor_ = file->message_type(46);
  static const int MessageProcessPlatform_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageProcessPlatform, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageProcessPlatform, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageProcessPlatform, trace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageProcessPlatform, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageProcessPlatform, error_),
  };
  MessageProcessPlatform_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageProcessPlatform_descriptor_,
      MessageProcessPlatform::default_instance_,
      MessageProcessPlatform_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageProcessPlatform, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageProcessPlatform, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageProcessPlatform));
  MessageProcessPlatform_Code_descriptor_ = MessageProcessPlatform_descriptor_->enum_type(0);
  MessagePlatformProcess_descriptor_ = file->message_type(47);
  static const int MessagePlatformProcess_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePlatformProcess, code_),
  };
  MessagePlatformProcess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessagePlatformProcess_descriptor_,
      MessagePlatformProcess::default_instance_,
      MessagePlatformProcess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePlatformProcess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePlatformProcess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessagePlatformProcess));
  MessagePlatformProcess_Code_descriptor_ = MessagePlatformProcess_descriptor_->enum_type(0);
  Message_descriptor_ = file->message_type(48);
  static const int Message_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, command_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, worker_task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, worker_task_confirmation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, worker_task_kill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, worker_task_remove_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, data_close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, upload_data_init_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, upload_data_init_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, upload_data_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, upload_data_file_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, upload_data_finish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, upload_data_finish_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, download_data_init_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, download_data_init_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, download_data_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, download_data_file_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, download_data_finish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, download_data_finish_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, worker_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, trace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, delilah_id_),
  };
  Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message));
  Message_Sender_descriptor_ = Message_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_samson_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnvironmentVariable_descriptor_, &EnvironmentVariable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Environment_descriptor_, &Environment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KVInfo_descriptor_, &KVInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    File_descriptor_, &File::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Queue_descriptor_, &Queue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FullQueue_descriptor_, &FullQueue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueueFile_descriptor_, &QueueFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KVFormat_descriptor_, &KVFormat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Operation_descriptor_, &Operation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Data_descriptor_, &Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JobItem_descriptor_, &JobItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AutomaticOperation_descriptor_, &AutomaticOperation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Job_descriptor_, &Job::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Error_descriptor_, &Error::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Trace_descriptor_, &Trace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ControllerTask_descriptor_, &ControllerTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ControllerTaskManagerStatus_descriptor_, &ControllerTaskManagerStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ControllerStatus_descriptor_, &ControllerStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkerStatus_descriptor_, &WorkerStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActiveTask_descriptor_, &ActiveTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueueList_descriptor_, &QueueList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataList_descriptor_, &DataList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperationList_descriptor_, &OperationList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JobList_descriptor_, &JobList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AutomaticOperationList_descriptor_, &AutomaticOperationList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SamsonStatus_descriptor_, &SamsonStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkerTask_descriptor_, &WorkerTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkerTaskKill_descriptor_, &WorkerTaskKill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkerTaskRemove_descriptor_, &WorkerTaskRemove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkerTaskConfirmation_descriptor_, &WorkerTaskConfirmation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Command_descriptor_, &Command::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandResponse_descriptor_, &CommandResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkerDataExchange_descriptor_, &WorkerDataExchange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkerDataExchangeClose_descriptor_, &WorkerDataExchangeClose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UploadDataInit_descriptor_, &UploadDataInit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UploadDataInitResponse_descriptor_, &UploadDataInitResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UploadDataFile_descriptor_, &UploadDataFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UploadDataFileResponse_descriptor_, &UploadDataFileResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UploadDataFinish_descriptor_, &UploadDataFinish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UploadDataFinishResponse_descriptor_, &UploadDataFinishResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DownloadDataInit_descriptor_, &DownloadDataInit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DownloadDataInitResponse_descriptor_, &DownloadDataInitResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DownloadDataFile_descriptor_, &DownloadDataFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DownloadDataFileResponse_descriptor_, &DownloadDataFileResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DownloadDataFinish_descriptor_, &DownloadDataFinish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DownloadDataFinishResponse_descriptor_, &DownloadDataFinishResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageProcessPlatform_descriptor_, &MessageProcessPlatform::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessagePlatformProcess_descriptor_, &MessagePlatformProcess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_descriptor_, &Message::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_samson_2eproto() {
  delete EnvironmentVariable::default_instance_;
  delete EnvironmentVariable_reflection_;
  delete Environment::default_instance_;
  delete Environment_reflection_;
  delete KVInfo::default_instance_;
  delete KVInfo_reflection_;
  delete File::default_instance_;
  delete File_reflection_;
  delete Queue::default_instance_;
  delete Queue_reflection_;
  delete FullQueue::default_instance_;
  delete FullQueue_reflection_;
  delete QueueFile::default_instance_;
  delete QueueFile_reflection_;
  delete KVFormat::default_instance_;
  delete KVFormat_reflection_;
  delete Operation::default_instance_;
  delete Operation_reflection_;
  delete Data::default_instance_;
  delete Data_reflection_;
  delete JobItem::default_instance_;
  delete JobItem_reflection_;
  delete AutomaticOperation::default_instance_;
  delete AutomaticOperation_reflection_;
  delete Job::default_instance_;
  delete Job_reflection_;
  delete Error::default_instance_;
  delete Error_reflection_;
  delete Trace::default_instance_;
  delete Trace_reflection_;
  delete ControllerTask::default_instance_;
  delete ControllerTask_reflection_;
  delete ControllerTaskManagerStatus::default_instance_;
  delete ControllerTaskManagerStatus_reflection_;
  delete ControllerStatus::default_instance_;
  delete ControllerStatus_reflection_;
  delete WorkerStatus::default_instance_;
  delete WorkerStatus_reflection_;
  delete ActiveTask::default_instance_;
  delete ActiveTask_reflection_;
  delete QueueList::default_instance_;
  delete QueueList_reflection_;
  delete DataList::default_instance_;
  delete DataList_reflection_;
  delete OperationList::default_instance_;
  delete OperationList_reflection_;
  delete JobList::default_instance_;
  delete JobList_reflection_;
  delete AutomaticOperationList::default_instance_;
  delete AutomaticOperationList_reflection_;
  delete SamsonStatus::default_instance_;
  delete SamsonStatus_reflection_;
  delete WorkerTask::default_instance_;
  delete WorkerTask_reflection_;
  delete WorkerTaskKill::default_instance_;
  delete WorkerTaskKill_reflection_;
  delete WorkerTaskRemove::default_instance_;
  delete WorkerTaskRemove_reflection_;
  delete WorkerTaskConfirmation::default_instance_;
  delete WorkerTaskConfirmation_reflection_;
  delete Command::default_instance_;
  delete Command_reflection_;
  delete CommandResponse::default_instance_;
  delete CommandResponse_reflection_;
  delete WorkerDataExchange::default_instance_;
  delete WorkerDataExchange_reflection_;
  delete WorkerDataExchangeClose::default_instance_;
  delete WorkerDataExchangeClose_reflection_;
  delete UploadDataInit::default_instance_;
  delete UploadDataInit_reflection_;
  delete UploadDataInitResponse::default_instance_;
  delete UploadDataInitResponse_reflection_;
  delete UploadDataFile::default_instance_;
  delete UploadDataFile_reflection_;
  delete UploadDataFileResponse::default_instance_;
  delete UploadDataFileResponse_reflection_;
  delete UploadDataFinish::default_instance_;
  delete UploadDataFinish_reflection_;
  delete UploadDataFinishResponse::default_instance_;
  delete UploadDataFinishResponse_reflection_;
  delete DownloadDataInit::default_instance_;
  delete DownloadDataInit_reflection_;
  delete DownloadDataInitResponse::default_instance_;
  delete DownloadDataInitResponse_reflection_;
  delete DownloadDataFile::default_instance_;
  delete DownloadDataFile_reflection_;
  delete DownloadDataFileResponse::default_instance_;
  delete DownloadDataFileResponse_reflection_;
  delete DownloadDataFinish::default_instance_;
  delete DownloadDataFinish_reflection_;
  delete DownloadDataFinishResponse::default_instance_;
  delete DownloadDataFinishResponse_reflection_;
  delete MessageProcessPlatform::default_instance_;
  delete MessageProcessPlatform_reflection_;
  delete MessagePlatformProcess::default_instance_;
  delete MessagePlatformProcess_reflection_;
  delete Message::default_instance_;
  delete Message_reflection_;
}

void protobuf_AddDesc_samson_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014samson.proto\022\016samson.network\"2\n\023Enviro"
    "nmentVariable\022\014\n\004name\030\001 \002(\t\022\r\n\005value\030\002 \002"
    "(\t\"D\n\013Environment\0225\n\010variable\030\001 \003(\0132#.sa"
    "mson.network.EnvironmentVariable\"#\n\006KVIn"
    "fo\022\014\n\004size\030\001 \002(\004\022\013\n\003kvs\030\002 \002(\004\"J\n\004File\022\014\n"
    "\004name\030\001 \002(\t\022\016\n\006worker\030\002 \002(\005\022$\n\004info\030\003 \001("
    "\0132\026.samson.network.KVInfo\"e\n\005Queue\022\014\n\004na"
    "me\030\001 \002(\t\022(\n\006format\030\002 \002(\0132\030.samson.networ"
    "k.KVFormat\022$\n\004info\030\003 \001(\0132\026.samson.networ"
    "k.KVInfo\"U\n\tFullQueue\022$\n\005queue\030\001 \002(\0132\025.s"
    "amson.network.Queue\022\"\n\004file\030\002 \003(\0132\024.sams"
    "on.network.File\">\n\tQueueFile\022\r\n\005queue\030\001 "
    "\002(\t\022\"\n\004file\030\002 \002(\0132\024.samson.network.File\""
    "2\n\010KVFormat\022\021\n\tkeyFormat\030\001 \002(\t\022\023\n\013ValueF"
    "ormat\030\002 \002(\t\"\215\001\n\tOperation\022\014\n\004name\030\001 \002(\t\022"
    "\014\n\004help\030\002 \002(\t\022\021\n\thelp_line\030\003 \002(\t\022\'\n\005inpu"
    "t\030\004 \003(\0132\030.samson.network.KVFormat\022(\n\006out"
    "put\030\005 \003(\0132\030.samson.network.KVFormat\"\"\n\004D"
    "ata\022\014\n\004name\030\001 \002(\t\022\014\n\004help\030\002 \002(\t\";\n\007JobIt"
    "em\022\017\n\007command\030\001 \002(\t\022\014\n\004line\030\002 \002(\005\022\021\n\tnum"
    "_lines\030\003 \002(\005\"C\n\022AutomaticOperation\022\n\n\002id"
    "\030\003 \002(\004\022\017\n\007command\030\001 \002(\t\022\020\n\010thrigger\030\002 \002("
    "\t\"^\n\003Job\022\n\n\002id\030\001 \002(\004\022\016\n\006status\030\003 \002(\t\022\024\n\014"
    "main_command\030\002 \002(\t\022%\n\004item\030\n \003(\0132\027.samso"
    "n.network.JobItem\"\030\n\005Error\022\017\n\007message\030\002 "
    "\002(\t\"l\n\005Trace\022\014\n\004text\030\001 \002(\t\022\014\n\004type\030\002 \002(\005"
    "\022\014\n\004file\030\003 \002(\t\022\016\n\006lineNo\030\004 \002(\005\022\r\n\005fName\030"
    "\005 \002(\t\022\014\n\004tLev\030\006 \002(\005\022\014\n\004stre\030\007 \002(\t\"\245\003\n\016Co"
    "ntrollerTask\022A\n\005state\030\001 \002(\01622.samson.net"
    "work.ControllerTask.ControllerTaskState\022"
    "\016\n\006job_id\030\002 \002(\003\022\017\n\007task_id\030\003 \002(\003\022$\n\005erro"
    "r\030\n \001(\0132\025.samson.network.Error\022*\n\ntotal_"
    "info\030\004 \001(\0132\026.samson.network.KVInfo\022,\n\014ru"
    "nning_info\030\005 \001(\0132\026.samson.network.KVInfo"
    "\022.\n\016processed_info\030\006 \001(\0132\026.samson.networ"
    "k.KVInfo\"\177\n\023ControllerTaskState\022\026\n\022Contr"
    "ollerTaskInit\020\001\022\031\n\025ControllerTaskRunning"
    "\020\004\022\030\n\024ControllerTaskFinish\020\002\022\033\n\027Controll"
    "erTaskCompleted\020\003\"K\n\033ControllerTaskManag"
    "erStatus\022,\n\004task\030\001 \003(\0132\036.samson.network."
    "ControllerTask\"\241\001\n\020ControllerStatus\022\017\n\007u"
    "p_time\030\010 \001(\004\022\032\n\022job_manager_status\030\001 \001(\t"
    "\022\026\n\016network_status\030\003 \001(\t\022H\n\023task_manager"
    "_status\030\004 \001(\0132+.samson.network.Controlle"
    "rTaskManagerStatus\"\240\003\n\014WorkerStatus\022\017\n\007u"
    "p_time\030\027 \001(\004\022\023\n\013update_time\030\010 \001(\004\022\033\n\023tas"
    "k_manager_status\030\007 \001(\t\022\033\n\023disk_manager_s"
    "tatus\030\003 \001(\t\022 \n\030load_data_manager_status\030"
    "\016 \001(\t\022\036\n\026process_manager_status\030\001 \001(\t\022\026\n"
    "\016network_status\030\024 \001(\t\022\025\n\rmemory_status\030\006"
    " \001(\t\022\034\n\024shared_memory_status\030\026 \001(\t\022\025\n\ren"
    "gine_status\030\030 \001(\t\022\025\n\rqueues_status\030\031 \001(\t"
    "\022\023\n\013used_memory\030\n \001(\004\022\024\n\014total_memory\030\013 "
    "\001(\004\022\023\n\013total_cores\030\020 \001(\005\022\022\n\nused_cores\030\r"
    " \001(\005\022\037\n\027disk_pending_operations\030\021 \001(\005\"\036\n"
    "\nActiveTask\022\020\n\010fileName\030\001 \003(\t\"q\n\tQueueLi"
    "st\022(\n\005queue\030\001 \003(\0132\031.samson.network.FullQ"
    "ueue\022)\n\005tasks\030\002 \003(\0132\032.samson.network.Act"
    "iveTask\022\017\n\007load_id\030\003 \003(\004\".\n\010DataList\022\"\n\004"
    "data\030\001 \003(\0132\024.samson.network.Data\"=\n\rOper"
    "ationList\022,\n\toperation\030\001 \003(\0132\031.samson.ne"
    "twork.Operation\"+\n\007JobList\022 \n\003job\030\001 \003(\0132"
    "\023.samson.network.Job\"Y\n\026AutomaticOperati"
    "onList\022?\n\023automatic_operation\030\001 \003(\0132\".sa"
    "mson.network.AutomaticOperation\"\200\001\n\014Sams"
    "onStatus\022;\n\021controller_status\030\001 \001(\0132 .sa"
    "mson.network.ControllerStatus\0223\n\rworker_"
    "status\030\002 \003(\0132\034.samson.network.WorkerStat"
    "us\"\367\001\n\nWorkerTask\022\016\n\006job_id\030\n \002(\004\022\017\n\007tas"
    "k_id\030\001 \002(\004\022\021\n\toperation\030\002 \002(\t\022.\n\013input_q"
    "ueue\030\004 \003(\0132\031.samson.network.FullQueue\022/\n"
    "\014output_queue\030\005 \003(\0132\031.samson.network.Ful"
    "lQueue\022\017\n\007servers\030\006 \001(\005\022\021\n\tgenerator\030\007 \001"
    "(\010\0220\n\013environment\030\010 \001(\0132\033.samson.network"
    ".Environment\"!\n\016WorkerTaskKill\022\017\n\007task_i"
    "d\030\001 \002(\004\"#\n\020WorkerTaskRemove\022\017\n\007task_id\030\001"
    " \002(\004\"\320\003\n\026WorkerTaskConfirmation\022\017\n\007task_"
    "id\030\001 \002(\003\022O\n\004type\030\002 \002(\0162A.samson.network."
    "WorkerTaskConfirmation.WorkerTaskConfirm"
    "ationType\022+\n\010add_file\030\003 \003(\0132\031.samson.net"
    "work.QueueFile\022.\n\013remove_file\030\004 \003(\0132\031.sa"
    "mson.network.QueueFile\022\021\n\tnum_items\030\005 \001("
    "\005\022\032\n\022num_finished_items\030\006 \001(\005\022\025\n\rerror_m"
    "essage\030\007 \001(\t\022/\n\017progressRunning\030\010 \001(\0132\026."
    "samson.network.KVInfo\0221\n\021progressProcess"
    "ed\030\t \001(\0132\026.samson.network.KVInfo\"M\n\032Work"
    "erTaskConfirmationType\022\n\n\006update\020\001\022\n\n\006fi"
    "nish\020\002\022\014\n\010complete\020\003\022\t\n\005error\020\004\"L\n\007Comma"
    "nd\022\017\n\007command\030\001 \002(\t\0220\n\013environment\030\003 \001(\013"
    "2\033.samson.network.Environment\"\351\003\n\017Comman"
    "dResponse\022\017\n\007command\030\001 \002(\t\022\022\n\nnew_job_id"
    "\030\002 \001(\004\022\025\n\rfinish_job_id\030\013 \001(\004\022\024\n\014error_j"
    "ob_id\030\014 \001(\004\022\025\n\rerror_message\030\n \001(\t\022\030\n\020el"
    "lapsed_seconds\030\017 \001(\005\022\026\n\016finish_command\030\020"
    " \001(\010\022)\n\010job_list\030d \001(\0132\027.samson.network."
    "JobList\0225\n\016operation_list\030e \001(\0132\035.samson"
    ".network.OperationList\022+\n\tdata_list\030f \001("
    "\0132\030.samson.network.DataList\022-\n\nqueue_lis"
    "t\030g \001(\0132\031.samson.network.QueueList\022H\n\030au"
    "tomatic_operation_list\030k \001(\0132&.samson.ne"
    "twork.AutomaticOperationList\0223\n\rsamson_s"
    "tatus\030h \001(\0132\034.samson.network.SamsonStatu"
    "s\"\210\001\n\022WorkerDataExchange\022\017\n\007task_id\030\001 \002("
    "\003\022$\n\005queue\030\002 \002(\0132\025.samson.network.Queue\022"
    "\013\n\003txt\030\003 \002(\010\022\016\n\006worker\030\004 \002(\005\022\016\n\006hg_set\030\005"
    " \002(\005\022\016\n\006finish\030\006 \002(\010\"*\n\027WorkerDataExchan"
    "geClose\022\017\n\007task_id\030\001 \002(\003\"\037\n\016UploadDataIn"
    "it\022\r\n\005queue\030\001 \002(\t\"~\n\026UploadDataInitRespo"
    "nse\022-\n\005query\030\001 \002(\0132\036.samson.network.Uplo"
    "adDataInit\022\017\n\007load_id\030\003 \002(\004\022$\n\005error\030d \001"
    "(\0132\025.samson.network.Error\"W\n\016UploadDataF"
    "ile\022\017\n\007load_id\030\001 \002(\004\022\017\n\007file_id\030\002 \002(\004\022\021\n"
    "\tfile_size\030\003 \002(\004\022\020\n\010file_ext\030\004 \002(\t\"\221\001\n\026U"
    "ploadDataFileResponse\022-\n\005query\030\001 \002(\0132\036.s"
    "amson.network.UploadDataFile\022\"\n\004file\030\002 \002"
    "(\0132\024.samson.network.File\022$\n\005error\030d \001(\0132"
    "\025.samson.network.Error\"}\n\020UploadDataFini"
    "sh\022\017\n\007load_id\030\003 \002(\004\022\r\n\005queue\030\004 \002(\t\022#\n\005fi"
    "les\030\005 \003(\0132\024.samson.network.File\022$\n\005error"
    "\030d \001(\0132\025.samson.network.Error\"q\n\030UploadD"
    "ataFinishResponse\022/\n\005query\030\001 \002(\0132 .samso"
    "n.network.UploadDataFinish\022$\n\005error\030d \001("
    "\0132\025.samson.network.Error\"!\n\020DownloadData"
    "Init\022\r\n\005queue\030\001 \002(\t\"\254\001\n\030DownloadDataInit"
    "Response\022/\n\005query\030\001 \002(\0132 .samson.network"
    ".DownloadDataInit\022\017\n\007load_id\030\002 \002(\004\022(\n\005qu"
    "eue\030\003 \001(\0132\031.samson.network.FullQueue\022$\n\005"
    "error\030d \001(\0132\025.samson.network.Error\"X\n\020Do"
    "wnloadDataFile\022\017\n\007file_id\030\002 \002(\004\022\017\n\007load_"
    "id\030\003 \002(\004\022\"\n\004file\030\004 \002(\0132\024.samson.network."
    "File\"q\n\030DownloadDataFileResponse\022/\n\005quer"
    "y\030\001 \002(\0132 .samson.network.DownloadDataFil"
    "e\022$\n\005error\030d \001(\0132\025.samson.network.Error\""
    "\\\n\022DownloadDataFinish\022\017\n\007file_id\030\002 \002(\004\022\017"
    "\n\007load_id\030\003 \002(\004\022$\n\005error\030d \001(\0132\025.samson."
    "network.Error\"u\n\032DownloadDataFinishRespo"
    "nse\0221\n\005query\030\001 \002(\0132\".samson.network.Down"
    "loadDataFinish\022$\n\005error\030d \001(\0132\025.samson.n"
    "etwork.Error\"\237\002\n\026MessageProcessPlatform\022"
    "9\n\004code\030\001 \002(\0162+.samson.network.MessagePr"
    "ocessPlatform.Code\022\021\n\toperation\030\002 \001(\005\022$\n"
    "\005trace\030\003 \001(\0132\025.samson.network.Trace\022\020\n\010p"
    "rogress\030\004 \001(\001\022\r\n\005error\030\005 \001(\t\"p\n\004Code\022\016\n\n"
    "code_begin\020\001\022\014\n\010code_end\020\002\022\022\n\016code_opera"
    "tion\020\003\022\016\n\ncode_trace\020\004\022\023\n\017code_user_erro"
    "r\020\005\022\021\n\rcode_progress\020\006\"w\n\026MessagePlatfor"
    "mProcess\0229\n\004code\030\001 \002(\0162+.samson.network."
    "MessagePlatformProcess.Code\"\"\n\004Code\022\013\n\007c"
    "ode_ok\020\001\022\r\n\tcode_kill\020\002\"\275\013\n\007Message\022(\n\007c"
    "ommand\030g \001(\0132\027.samson.network.Command\0229\n"
    "\020command_response\030h \001(\0132\037.samson.network"
    ".CommandResponse\022/\n\013worker_task\030i \001(\0132\032."
    "samson.network.WorkerTask\022H\n\030worker_task"
    "_confirmation\030j \001(\0132&.samson.network.Wor"
    "kerTaskConfirmation\0229\n\020worker_task_kill\030"
    "\312\001 \001(\0132\036.samson.network.WorkerTaskKill\022="
    "\n\022worker_task_remove\030\313\001 \001(\0132 .samson.net"
    "work.WorkerTaskRemove\0220\n\004data\030k \001(\0132\".sa"
    "mson.network.WorkerDataExchange\022;\n\ndata_"
    "close\030l \001(\0132\'.samson.network.WorkerDataE"
    "xchangeClose\0228\n\020upload_data_init\030o \001(\0132\036"
    ".samson.network.UploadDataInit\022I\n\031upload"
    "_data_init_response\030p \001(\0132&.samson.netwo"
    "rk.UploadDataInitResponse\0228\n\020upload_data"
    "_file\030q \001(\0132\036.samson.network.UploadDataF"
    "ile\022I\n\031upload_data_file_response\030r \001(\0132&"
    ".samson.network.UploadDataFileResponse\022<"
    "\n\022upload_data_finish\030s \001(\0132 .samson.netw"
    "ork.UploadDataFinish\022M\n\033upload_data_fini"
    "sh_response\030t \001(\0132(.samson.network.Uploa"
    "dDataFinishResponse\022<\n\022download_data_ini"
    "t\030u \001(\0132 .samson.network.DownloadDataIni"
    "t\022M\n\033download_data_init_response\030v \001(\0132("
    ".samson.network.DownloadDataInitResponse"
    "\022<\n\022download_data_file\030w \001(\0132 .samson.ne"
    "twork.DownloadDataFile\022M\n\033download_data_"
    "file_response\030x \001(\0132(.samson.network.Dow"
    "nloadDataFileResponse\022@\n\024download_data_f"
    "inish\030y \001(\0132\".samson.network.DownloadDat"
    "aFinish\022Q\n\035download_data_finish_response"
    "\030z \001(\0132*.samson.network.DownloadDataFini"
    "shResponse\0224\n\rworker_status\030\252\001 \001(\0132\034.sam"
    "son.network.WorkerStatus\022%\n\005trace\030\253\001 \001(\013"
    "2\025.samson.network.Trace\022\023\n\ndelilah_id\030\254\002"
    " \001(\004\"1\n\006Sender\022\n\n\006Worker\020W\022\016\n\nController"
    "\020C\022\013\n\007Delilah\020D", 7415);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "samson.proto", &protobuf_RegisterTypes);
  EnvironmentVariable::default_instance_ = new EnvironmentVariable();
  Environment::default_instance_ = new Environment();
  KVInfo::default_instance_ = new KVInfo();
  File::default_instance_ = new File();
  Queue::default_instance_ = new Queue();
  FullQueue::default_instance_ = new FullQueue();
  QueueFile::default_instance_ = new QueueFile();
  KVFormat::default_instance_ = new KVFormat();
  Operation::default_instance_ = new Operation();
  Data::default_instance_ = new Data();
  JobItem::default_instance_ = new JobItem();
  AutomaticOperation::default_instance_ = new AutomaticOperation();
  Job::default_instance_ = new Job();
  Error::default_instance_ = new Error();
  Trace::default_instance_ = new Trace();
  ControllerTask::default_instance_ = new ControllerTask();
  ControllerTaskManagerStatus::default_instance_ = new ControllerTaskManagerStatus();
  ControllerStatus::default_instance_ = new ControllerStatus();
  WorkerStatus::default_instance_ = new WorkerStatus();
  ActiveTask::default_instance_ = new ActiveTask();
  QueueList::default_instance_ = new QueueList();
  DataList::default_instance_ = new DataList();
  OperationList::default_instance_ = new OperationList();
  JobList::default_instance_ = new JobList();
  AutomaticOperationList::default_instance_ = new AutomaticOperationList();
  SamsonStatus::default_instance_ = new SamsonStatus();
  WorkerTask::default_instance_ = new WorkerTask();
  WorkerTaskKill::default_instance_ = new WorkerTaskKill();
  WorkerTaskRemove::default_instance_ = new WorkerTaskRemove();
  WorkerTaskConfirmation::default_instance_ = new WorkerTaskConfirmation();
  Command::default_instance_ = new Command();
  CommandResponse::default_instance_ = new CommandResponse();
  WorkerDataExchange::default_instance_ = new WorkerDataExchange();
  WorkerDataExchangeClose::default_instance_ = new WorkerDataExchangeClose();
  UploadDataInit::default_instance_ = new UploadDataInit();
  UploadDataInitResponse::default_instance_ = new UploadDataInitResponse();
  UploadDataFile::default_instance_ = new UploadDataFile();
  UploadDataFileResponse::default_instance_ = new UploadDataFileResponse();
  UploadDataFinish::default_instance_ = new UploadDataFinish();
  UploadDataFinishResponse::default_instance_ = new UploadDataFinishResponse();
  DownloadDataInit::default_instance_ = new DownloadDataInit();
  DownloadDataInitResponse::default_instance_ = new DownloadDataInitResponse();
  DownloadDataFile::default_instance_ = new DownloadDataFile();
  DownloadDataFileResponse::default_instance_ = new DownloadDataFileResponse();
  DownloadDataFinish::default_instance_ = new DownloadDataFinish();
  DownloadDataFinishResponse::default_instance_ = new DownloadDataFinishResponse();
  MessageProcessPlatform::default_instance_ = new MessageProcessPlatform();
  MessagePlatformProcess::default_instance_ = new MessagePlatformProcess();
  Message::default_instance_ = new Message();
  EnvironmentVariable::default_instance_->InitAsDefaultInstance();
  Environment::default_instance_->InitAsDefaultInstance();
  KVInfo::default_instance_->InitAsDefaultInstance();
  File::default_instance_->InitAsDefaultInstance();
  Queue::default_instance_->InitAsDefaultInstance();
  FullQueue::default_instance_->InitAsDefaultInstance();
  QueueFile::default_instance_->InitAsDefaultInstance();
  KVFormat::default_instance_->InitAsDefaultInstance();
  Operation::default_instance_->InitAsDefaultInstance();
  Data::default_instance_->InitAsDefaultInstance();
  JobItem::default_instance_->InitAsDefaultInstance();
  AutomaticOperation::default_instance_->InitAsDefaultInstance();
  Job::default_instance_->InitAsDefaultInstance();
  Error::default_instance_->InitAsDefaultInstance();
  Trace::default_instance_->InitAsDefaultInstance();
  ControllerTask::default_instance_->InitAsDefaultInstance();
  ControllerTaskManagerStatus::default_instance_->InitAsDefaultInstance();
  ControllerStatus::default_instance_->InitAsDefaultInstance();
  WorkerStatus::default_instance_->InitAsDefaultInstance();
  ActiveTask::default_instance_->InitAsDefaultInstance();
  QueueList::default_instance_->InitAsDefaultInstance();
  DataList::default_instance_->InitAsDefaultInstance();
  OperationList::default_instance_->InitAsDefaultInstance();
  JobList::default_instance_->InitAsDefaultInstance();
  AutomaticOperationList::default_instance_->InitAsDefaultInstance();
  SamsonStatus::default_instance_->InitAsDefaultInstance();
  WorkerTask::default_instance_->InitAsDefaultInstance();
  WorkerTaskKill::default_instance_->InitAsDefaultInstance();
  WorkerTaskRemove::default_instance_->InitAsDefaultInstance();
  WorkerTaskConfirmation::default_instance_->InitAsDefaultInstance();
  Command::default_instance_->InitAsDefaultInstance();
  CommandResponse::default_instance_->InitAsDefaultInstance();
  WorkerDataExchange::default_instance_->InitAsDefaultInstance();
  WorkerDataExchangeClose::default_instance_->InitAsDefaultInstance();
  UploadDataInit::default_instance_->InitAsDefaultInstance();
  UploadDataInitResponse::default_instance_->InitAsDefaultInstance();
  UploadDataFile::default_instance_->InitAsDefaultInstance();
  UploadDataFileResponse::default_instance_->InitAsDefaultInstance();
  UploadDataFinish::default_instance_->InitAsDefaultInstance();
  UploadDataFinishResponse::default_instance_->InitAsDefaultInstance();
  DownloadDataInit::default_instance_->InitAsDefaultInstance();
  DownloadDataInitResponse::default_instance_->InitAsDefaultInstance();
  DownloadDataFile::default_instance_->InitAsDefaultInstance();
  DownloadDataFileResponse::default_instance_->InitAsDefaultInstance();
  DownloadDataFinish::default_instance_->InitAsDefaultInstance();
  DownloadDataFinishResponse::default_instance_->InitAsDefaultInstance();
  MessageProcessPlatform::default_instance_->InitAsDefaultInstance();
  MessagePlatformProcess::default_instance_->InitAsDefaultInstance();
  Message::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_samson_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_samson_2eproto {
  StaticDescriptorInitializer_samson_2eproto() {
    protobuf_AddDesc_samson_2eproto();
  }
} static_descriptor_initializer_samson_2eproto_;


// ===================================================================

const ::std::string EnvironmentVariable::_default_name_;
const ::std::string EnvironmentVariable::_default_value_;
#ifndef _MSC_VER
const int EnvironmentVariable::kNameFieldNumber;
const int EnvironmentVariable::kValueFieldNumber;
#endif  // !_MSC_VER

EnvironmentVariable::EnvironmentVariable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnvironmentVariable::InitAsDefaultInstance() {
}

EnvironmentVariable::EnvironmentVariable(const EnvironmentVariable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnvironmentVariable::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  value_ = const_cast< ::std::string*>(&_default_value_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnvironmentVariable::~EnvironmentVariable() {
  SharedDtor();
}

void EnvironmentVariable::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (value_ != &_default_value_) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void EnvironmentVariable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnvironmentVariable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnvironmentVariable_descriptor_;
}

const EnvironmentVariable& EnvironmentVariable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

EnvironmentVariable* EnvironmentVariable::default_instance_ = NULL;

EnvironmentVariable* EnvironmentVariable::New() const {
  return new EnvironmentVariable;
}

void EnvironmentVariable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (value_ != &_default_value_) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnvironmentVariable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnvironmentVariable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required string value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnvironmentVariable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required string value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnvironmentVariable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnvironmentVariable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnvironmentVariable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnvironmentVariable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnvironmentVariable::MergeFrom(const EnvironmentVariable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnvironmentVariable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvironmentVariable::CopyFrom(const EnvironmentVariable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvironmentVariable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void EnvironmentVariable::Swap(EnvironmentVariable* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnvironmentVariable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnvironmentVariable_descriptor_;
  metadata.reflection = EnvironmentVariable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Environment::kVariableFieldNumber;
#endif  // !_MSC_VER

Environment::Environment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Environment::InitAsDefaultInstance() {
}

Environment::Environment(const Environment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Environment::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Environment::~Environment() {
  SharedDtor();
}

void Environment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Environment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Environment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Environment_descriptor_;
}

const Environment& Environment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

Environment* Environment::default_instance_ = NULL;

Environment* Environment::New() const {
  return new Environment;
}

void Environment::Clear() {
  variable_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Environment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .samson.network.EnvironmentVariable variable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_variable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_variable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_variable;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Environment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .samson.network.EnvironmentVariable variable = 1;
  for (int i = 0; i < this->variable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->variable(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Environment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .samson.network.EnvironmentVariable variable = 1;
  for (int i = 0; i < this->variable_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->variable(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Environment::ByteSize() const {
  int total_size = 0;
  
  // repeated .samson.network.EnvironmentVariable variable = 1;
  total_size += 1 * this->variable_size();
  for (int i = 0; i < this->variable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->variable(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Environment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Environment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Environment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Environment::MergeFrom(const Environment& from) {
  GOOGLE_CHECK_NE(&from, this);
  variable_.MergeFrom(from.variable_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Environment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Environment::CopyFrom(const Environment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Environment::IsInitialized() const {
  
  for (int i = 0; i < variable_size(); i++) {
    if (!this->variable(i).IsInitialized()) return false;
  }
  return true;
}

void Environment::Swap(Environment* other) {
  if (other != this) {
    variable_.Swap(&other->variable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Environment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Environment_descriptor_;
  metadata.reflection = Environment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KVInfo::kSizeFieldNumber;
const int KVInfo::kKvsFieldNumber;
#endif  // !_MSC_VER

KVInfo::KVInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KVInfo::InitAsDefaultInstance() {
}

KVInfo::KVInfo(const KVInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KVInfo::SharedCtor() {
  _cached_size_ = 0;
  size_ = GOOGLE_ULONGLONG(0);
  kvs_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KVInfo::~KVInfo() {
  SharedDtor();
}

void KVInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KVInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KVInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KVInfo_descriptor_;
}

const KVInfo& KVInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

KVInfo* KVInfo::default_instance_ = NULL;

KVInfo* KVInfo::New() const {
  return new KVInfo;
}

void KVInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    size_ = GOOGLE_ULONGLONG(0);
    kvs_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KVInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kvs;
        break;
      }
      
      // required uint64 kvs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kvs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &kvs_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KVInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 size = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->size(), output);
  }
  
  // required uint64 kvs = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->kvs(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KVInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 size = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->size(), target);
  }
  
  // required uint64 kvs = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->kvs(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KVInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 size = 1;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }
    
    // required uint64 kvs = 2;
    if (has_kvs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->kvs());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KVInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KVInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KVInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KVInfo::MergeFrom(const KVInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_size(from.size());
    }
    if (from._has_bit(1)) {
      set_kvs(from.kvs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KVInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KVInfo::CopyFrom(const KVInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void KVInfo::Swap(KVInfo* other) {
  if (other != this) {
    std::swap(size_, other->size_);
    std::swap(kvs_, other->kvs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KVInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KVInfo_descriptor_;
  metadata.reflection = KVInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string File::_default_name_;
#ifndef _MSC_VER
const int File::kNameFieldNumber;
const int File::kWorkerFieldNumber;
const int File::kInfoFieldNumber;
#endif  // !_MSC_VER

File::File()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void File::InitAsDefaultInstance() {
  info_ = const_cast< ::samson::network::KVInfo*>(&::samson::network::KVInfo::default_instance());
}

File::File(const File& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void File::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  worker_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

File::~File() {
  SharedDtor();
}

void File::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
    delete info_;
  }
}

void File::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* File::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return File_descriptor_;
}

const File& File::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

File* File::default_instance_ = NULL;

File* File::New() const {
  return new File;
}

void File::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    worker_ = 0;
    if (_has_bit(2)) {
      if (info_ != NULL) info_->::samson::network::KVInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool File::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_worker;
        break;
      }
      
      // required int32 worker = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_worker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &worker_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }
      
      // optional .samson.network.KVInfo info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void File::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required int32 worker = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->worker(), output);
  }
  
  // optional .samson.network.KVInfo info = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* File::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required int32 worker = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->worker(), target);
  }
  
  // optional .samson.network.KVInfo info = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int File::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 worker = 2;
    if (has_worker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->worker());
    }
    
    // optional .samson.network.KVInfo info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void File::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const File* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const File*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void File::MergeFrom(const File& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_worker(from.worker());
    }
    if (from._has_bit(2)) {
      mutable_info()->::samson::network::KVInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void File::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void File::CopyFrom(const File& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool File::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void File::Swap(File* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(worker_, other->worker_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata File::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = File_descriptor_;
  metadata.reflection = File_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Queue::_default_name_;
#ifndef _MSC_VER
const int Queue::kNameFieldNumber;
const int Queue::kFormatFieldNumber;
const int Queue::kInfoFieldNumber;
#endif  // !_MSC_VER

Queue::Queue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Queue::InitAsDefaultInstance() {
  format_ = const_cast< ::samson::network::KVFormat*>(&::samson::network::KVFormat::default_instance());
  info_ = const_cast< ::samson::network::KVInfo*>(&::samson::network::KVInfo::default_instance());
}

Queue::Queue(const Queue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Queue::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  format_ = NULL;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Queue::~Queue() {
  SharedDtor();
}

void Queue::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
    delete format_;
    delete info_;
  }
}

void Queue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Queue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Queue_descriptor_;
}

const Queue& Queue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

Queue* Queue::default_instance_ = NULL;

Queue* Queue::New() const {
  return new Queue;
}

void Queue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (format_ != NULL) format_->::samson::network::KVFormat::Clear();
    }
    if (_has_bit(2)) {
      if (info_ != NULL) info_->::samson::network::KVInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Queue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_format;
        break;
      }
      
      // required .samson.network.KVFormat format = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_format()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }
      
      // optional .samson.network.KVInfo info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Queue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required .samson.network.KVFormat format = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->format(), output);
  }
  
  // optional .samson.network.KVInfo info = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Queue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required .samson.network.KVFormat format = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->format(), target);
  }
  
  // optional .samson.network.KVInfo info = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Queue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required .samson.network.KVFormat format = 2;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->format());
    }
    
    // optional .samson.network.KVInfo info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Queue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Queue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Queue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Queue::MergeFrom(const Queue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      mutable_format()->::samson::network::KVFormat::MergeFrom(from.format());
    }
    if (from._has_bit(2)) {
      mutable_info()->::samson::network::KVInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Queue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Queue::CopyFrom(const Queue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Queue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_format()) {
    if (!this->format().IsInitialized()) return false;
  }
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void Queue::Swap(Queue* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(format_, other->format_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Queue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Queue_descriptor_;
  metadata.reflection = Queue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FullQueue::kQueueFieldNumber;
const int FullQueue::kFileFieldNumber;
#endif  // !_MSC_VER

FullQueue::FullQueue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FullQueue::InitAsDefaultInstance() {
  queue_ = const_cast< ::samson::network::Queue*>(&::samson::network::Queue::default_instance());
}

FullQueue::FullQueue(const FullQueue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FullQueue::SharedCtor() {
  _cached_size_ = 0;
  queue_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FullQueue::~FullQueue() {
  SharedDtor();
}

void FullQueue::SharedDtor() {
  if (this != default_instance_) {
    delete queue_;
  }
}

void FullQueue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FullQueue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FullQueue_descriptor_;
}

const FullQueue& FullQueue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

FullQueue* FullQueue::default_instance_ = NULL;

FullQueue* FullQueue::New() const {
  return new FullQueue;
}

void FullQueue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (queue_ != NULL) queue_->::samson::network::Queue::Clear();
    }
  }
  file_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FullQueue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .samson.network.Queue queue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file;
        break;
      }
      
      // repeated .samson.network.File file = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FullQueue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .samson.network.Queue queue = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->queue(), output);
  }
  
  // repeated .samson.network.File file = 2;
  for (int i = 0; i < this->file_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->file(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FullQueue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .samson.network.Queue queue = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->queue(), target);
  }
  
  // repeated .samson.network.File file = 2;
  for (int i = 0; i < this->file_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->file(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FullQueue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .samson.network.Queue queue = 1;
    if (has_queue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queue());
    }
    
  }
  // repeated .samson.network.File file = 2;
  total_size += 1 * this->file_size();
  for (int i = 0; i < this->file_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->file(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FullQueue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FullQueue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FullQueue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FullQueue::MergeFrom(const FullQueue& from) {
  GOOGLE_CHECK_NE(&from, this);
  file_.MergeFrom(from.file_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_queue()->::samson::network::Queue::MergeFrom(from.queue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FullQueue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FullQueue::CopyFrom(const FullQueue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullQueue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_queue()) {
    if (!this->queue().IsInitialized()) return false;
  }
  for (int i = 0; i < file_size(); i++) {
    if (!this->file(i).IsInitialized()) return false;
  }
  return true;
}

void FullQueue::Swap(FullQueue* other) {
  if (other != this) {
    std::swap(queue_, other->queue_);
    file_.Swap(&other->file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FullQueue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FullQueue_descriptor_;
  metadata.reflection = FullQueue_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string QueueFile::_default_queue_;
#ifndef _MSC_VER
const int QueueFile::kQueueFieldNumber;
const int QueueFile::kFileFieldNumber;
#endif  // !_MSC_VER

QueueFile::QueueFile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueueFile::InitAsDefaultInstance() {
  file_ = const_cast< ::samson::network::File*>(&::samson::network::File::default_instance());
}

QueueFile::QueueFile(const QueueFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueueFile::SharedCtor() {
  _cached_size_ = 0;
  queue_ = const_cast< ::std::string*>(&_default_queue_);
  file_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueueFile::~QueueFile() {
  SharedDtor();
}

void QueueFile::SharedDtor() {
  if (queue_ != &_default_queue_) {
    delete queue_;
  }
  if (this != default_instance_) {
    delete file_;
  }
}

void QueueFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueueFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueueFile_descriptor_;
}

const QueueFile& QueueFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

QueueFile* QueueFile::default_instance_ = NULL;

QueueFile* QueueFile::New() const {
  return new QueueFile;
}

void QueueFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (queue_ != &_default_queue_) {
        queue_->clear();
      }
    }
    if (_has_bit(1)) {
      if (file_ != NULL) file_->::samson::network::File::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueueFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string queue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->queue().data(), this->queue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file;
        break;
      }
      
      // required .samson.network.File file = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueueFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string queue = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->queue().data(), this->queue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->queue(), output);
  }
  
  // required .samson.network.File file = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->file(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueueFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string queue = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->queue().data(), this->queue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->queue(), target);
  }
  
  // required .samson.network.File file = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->file(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueueFile::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string queue = 1;
    if (has_queue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->queue());
    }
    
    // required .samson.network.File file = 2;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->file());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueueFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueueFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueueFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueueFile::MergeFrom(const QueueFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_queue(from.queue());
    }
    if (from._has_bit(1)) {
      mutable_file()->::samson::network::File::MergeFrom(from.file());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueueFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueueFile::CopyFrom(const QueueFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueueFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_file()) {
    if (!this->file().IsInitialized()) return false;
  }
  return true;
}

void QueueFile::Swap(QueueFile* other) {
  if (other != this) {
    std::swap(queue_, other->queue_);
    std::swap(file_, other->file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueueFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueueFile_descriptor_;
  metadata.reflection = QueueFile_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string KVFormat::_default_keyformat_;
const ::std::string KVFormat::_default_valueformat_;
#ifndef _MSC_VER
const int KVFormat::kKeyFormatFieldNumber;
const int KVFormat::kValueFormatFieldNumber;
#endif  // !_MSC_VER

KVFormat::KVFormat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KVFormat::InitAsDefaultInstance() {
}

KVFormat::KVFormat(const KVFormat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KVFormat::SharedCtor() {
  _cached_size_ = 0;
  keyformat_ = const_cast< ::std::string*>(&_default_keyformat_);
  valueformat_ = const_cast< ::std::string*>(&_default_valueformat_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KVFormat::~KVFormat() {
  SharedDtor();
}

void KVFormat::SharedDtor() {
  if (keyformat_ != &_default_keyformat_) {
    delete keyformat_;
  }
  if (valueformat_ != &_default_valueformat_) {
    delete valueformat_;
  }
  if (this != default_instance_) {
  }
}

void KVFormat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KVFormat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KVFormat_descriptor_;
}

const KVFormat& KVFormat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

KVFormat* KVFormat::default_instance_ = NULL;

KVFormat* KVFormat::New() const {
  return new KVFormat;
}

void KVFormat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (keyformat_ != &_default_keyformat_) {
        keyformat_->clear();
      }
    }
    if (_has_bit(1)) {
      if (valueformat_ != &_default_valueformat_) {
        valueformat_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KVFormat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string keyFormat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keyformat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keyformat().data(), this->keyformat().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ValueFormat;
        break;
      }
      
      // required string ValueFormat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ValueFormat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_valueformat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->valueformat().data(), this->valueformat().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KVFormat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string keyFormat = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keyformat().data(), this->keyformat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->keyformat(), output);
  }
  
  // required string ValueFormat = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->valueformat().data(), this->valueformat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->valueformat(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KVFormat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string keyFormat = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keyformat().data(), this->keyformat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->keyformat(), target);
  }
  
  // required string ValueFormat = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->valueformat().data(), this->valueformat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->valueformat(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KVFormat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string keyFormat = 1;
    if (has_keyformat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keyformat());
    }
    
    // required string ValueFormat = 2;
    if (has_valueformat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->valueformat());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KVFormat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KVFormat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KVFormat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KVFormat::MergeFrom(const KVFormat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_keyformat(from.keyformat());
    }
    if (from._has_bit(1)) {
      set_valueformat(from.valueformat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KVFormat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KVFormat::CopyFrom(const KVFormat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVFormat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void KVFormat::Swap(KVFormat* other) {
  if (other != this) {
    std::swap(keyformat_, other->keyformat_);
    std::swap(valueformat_, other->valueformat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KVFormat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KVFormat_descriptor_;
  metadata.reflection = KVFormat_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Operation::_default_name_;
const ::std::string Operation::_default_help_;
const ::std::string Operation::_default_help_line_;
#ifndef _MSC_VER
const int Operation::kNameFieldNumber;
const int Operation::kHelpFieldNumber;
const int Operation::kHelpLineFieldNumber;
const int Operation::kInputFieldNumber;
const int Operation::kOutputFieldNumber;
#endif  // !_MSC_VER

Operation::Operation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Operation::InitAsDefaultInstance() {
}

Operation::Operation(const Operation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Operation::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  help_ = const_cast< ::std::string*>(&_default_help_);
  help_line_ = const_cast< ::std::string*>(&_default_help_line_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Operation::~Operation() {
  SharedDtor();
}

void Operation::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (help_ != &_default_help_) {
    delete help_;
  }
  if (help_line_ != &_default_help_line_) {
    delete help_line_;
  }
  if (this != default_instance_) {
  }
}

void Operation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Operation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Operation_descriptor_;
}

const Operation& Operation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

Operation* Operation::default_instance_ = NULL;

Operation* Operation::New() const {
  return new Operation;
}

void Operation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (help_ != &_default_help_) {
        help_->clear();
      }
    }
    if (_has_bit(2)) {
      if (help_line_ != &_default_help_line_) {
        help_line_->clear();
      }
    }
  }
  input_.Clear();
  output_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Operation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_help;
        break;
      }
      
      // required string help = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_help:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_help()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->help().data(), this->help().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_help_line;
        break;
      }
      
      // required string help_line = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_help_line:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_help_line()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->help_line().data(), this->help_line().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_input;
        break;
      }
      
      // repeated .samson.network.KVFormat input = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_input()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_input;
        if (input->ExpectTag(42)) goto parse_output;
        break;
      }
      
      // repeated .samson.network.KVFormat output = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_output()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_output;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Operation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required string help = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->help().data(), this->help().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->help(), output);
  }
  
  // required string help_line = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->help_line().data(), this->help_line().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->help_line(), output);
  }
  
  // repeated .samson.network.KVFormat input = 4;
  for (int i = 0; i < this->input_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->input(i), output);
  }
  
  // repeated .samson.network.KVFormat output = 5;
  for (int i = 0; i < this->output_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->output(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Operation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required string help = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->help().data(), this->help().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->help(), target);
  }
  
  // required string help_line = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->help_line().data(), this->help_line().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->help_line(), target);
  }
  
  // repeated .samson.network.KVFormat input = 4;
  for (int i = 0; i < this->input_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->input(i), target);
  }
  
  // repeated .samson.network.KVFormat output = 5;
  for (int i = 0; i < this->output_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->output(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Operation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string help = 2;
    if (has_help()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->help());
    }
    
    // required string help_line = 3;
    if (has_help_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->help_line());
    }
    
  }
  // repeated .samson.network.KVFormat input = 4;
  total_size += 1 * this->input_size();
  for (int i = 0; i < this->input_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->input(i));
  }
  
  // repeated .samson.network.KVFormat output = 5;
  total_size += 1 * this->output_size();
  for (int i = 0; i < this->output_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->output(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Operation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Operation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Operation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Operation::MergeFrom(const Operation& from) {
  GOOGLE_CHECK_NE(&from, this);
  input_.MergeFrom(from.input_);
  output_.MergeFrom(from.output_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_help(from.help());
    }
    if (from._has_bit(2)) {
      set_help_line(from.help_line());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Operation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Operation::CopyFrom(const Operation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < input_size(); i++) {
    if (!this->input(i).IsInitialized()) return false;
  }
  for (int i = 0; i < output_size(); i++) {
    if (!this->output(i).IsInitialized()) return false;
  }
  return true;
}

void Operation::Swap(Operation* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(help_, other->help_);
    std::swap(help_line_, other->help_line_);
    input_.Swap(&other->input_);
    output_.Swap(&other->output_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Operation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Operation_descriptor_;
  metadata.reflection = Operation_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Data::_default_name_;
const ::std::string Data::_default_help_;
#ifndef _MSC_VER
const int Data::kNameFieldNumber;
const int Data::kHelpFieldNumber;
#endif  // !_MSC_VER

Data::Data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Data::InitAsDefaultInstance() {
}

Data::Data(const Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Data::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  help_ = const_cast< ::std::string*>(&_default_help_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Data::~Data() {
  SharedDtor();
}

void Data::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (help_ != &_default_help_) {
    delete help_;
  }
  if (this != default_instance_) {
  }
}

void Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Data_descriptor_;
}

const Data& Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

Data* Data::default_instance_ = NULL;

Data* Data::New() const {
  return new Data;
}

void Data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (help_ != &_default_help_) {
        help_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_help;
        break;
      }
      
      // required string help = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_help:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_help()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->help().data(), this->help().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required string help = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->help().data(), this->help().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->help(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required string help = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->help().data(), this->help().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->help(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Data::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string help = 2;
    if (has_help()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->help());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Data::MergeFrom(const Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_help(from.help());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data::CopyFrom(const Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Data::Swap(Data* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(help_, other->help_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Data_descriptor_;
  metadata.reflection = Data_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string JobItem::_default_command_;
#ifndef _MSC_VER
const int JobItem::kCommandFieldNumber;
const int JobItem::kLineFieldNumber;
const int JobItem::kNumLinesFieldNumber;
#endif  // !_MSC_VER

JobItem::JobItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JobItem::InitAsDefaultInstance() {
}

JobItem::JobItem(const JobItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JobItem::SharedCtor() {
  _cached_size_ = 0;
  command_ = const_cast< ::std::string*>(&_default_command_);
  line_ = 0;
  num_lines_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JobItem::~JobItem() {
  SharedDtor();
}

void JobItem::SharedDtor() {
  if (command_ != &_default_command_) {
    delete command_;
  }
  if (this != default_instance_) {
  }
}

void JobItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JobItem_descriptor_;
}

const JobItem& JobItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

JobItem* JobItem::default_instance_ = NULL;

JobItem* JobItem::New() const {
  return new JobItem;
}

void JobItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (command_ != &_default_command_) {
        command_->clear();
      }
    }
    line_ = 0;
    num_lines_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JobItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->command().data(), this->command().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_line;
        break;
      }
      
      // required int32 line = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num_lines;
        break;
      }
      
      // required int32 num_lines = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_lines:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_lines_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JobItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string command = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->command(), output);
  }
  
  // required int32 line = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->line(), output);
  }
  
  // required int32 num_lines = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_lines(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JobItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string command = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->command(), target);
  }
  
  // required int32 line = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->line(), target);
  }
  
  // required int32 num_lines = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_lines(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JobItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command());
    }
    
    // required int32 line = 2;
    if (has_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->line());
    }
    
    // required int32 num_lines = 3;
    if (has_num_lines()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_lines());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JobItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JobItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JobItem::MergeFrom(const JobItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_command(from.command());
    }
    if (from._has_bit(1)) {
      set_line(from.line());
    }
    if (from._has_bit(2)) {
      set_num_lines(from.num_lines());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JobItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobItem::CopyFrom(const JobItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void JobItem::Swap(JobItem* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(line_, other->line_);
    std::swap(num_lines_, other->num_lines_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JobItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JobItem_descriptor_;
  metadata.reflection = JobItem_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string AutomaticOperation::_default_command_;
const ::std::string AutomaticOperation::_default_thrigger_;
#ifndef _MSC_VER
const int AutomaticOperation::kIdFieldNumber;
const int AutomaticOperation::kCommandFieldNumber;
const int AutomaticOperation::kThriggerFieldNumber;
#endif  // !_MSC_VER

AutomaticOperation::AutomaticOperation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AutomaticOperation::InitAsDefaultInstance() {
}

AutomaticOperation::AutomaticOperation(const AutomaticOperation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AutomaticOperation::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  command_ = const_cast< ::std::string*>(&_default_command_);
  thrigger_ = const_cast< ::std::string*>(&_default_thrigger_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutomaticOperation::~AutomaticOperation() {
  SharedDtor();
}

void AutomaticOperation::SharedDtor() {
  if (command_ != &_default_command_) {
    delete command_;
  }
  if (thrigger_ != &_default_thrigger_) {
    delete thrigger_;
  }
  if (this != default_instance_) {
  }
}

void AutomaticOperation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutomaticOperation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AutomaticOperation_descriptor_;
}

const AutomaticOperation& AutomaticOperation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

AutomaticOperation* AutomaticOperation::default_instance_ = NULL;

AutomaticOperation* AutomaticOperation::New() const {
  return new AutomaticOperation;
}

void AutomaticOperation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(1)) {
      if (command_ != &_default_command_) {
        command_->clear();
      }
    }
    if (_has_bit(2)) {
      if (thrigger_ != &_default_thrigger_) {
        thrigger_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AutomaticOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->command().data(), this->command().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_thrigger;
        break;
      }
      
      // required string thrigger = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_thrigger:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thrigger()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->thrigger().data(), this->thrigger().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }
      
      // required uint64 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AutomaticOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string command = 1;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->command(), output);
  }
  
  // required string thrigger = 2;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->thrigger().data(), this->thrigger().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->thrigger(), output);
  }
  
  // required uint64 id = 3;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AutomaticOperation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string command = 1;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->command(), target);
  }
  
  // required string thrigger = 2;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->thrigger().data(), this->thrigger().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->thrigger(), target);
  }
  
  // required uint64 id = 3;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AutomaticOperation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }
    
    // required string command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command());
    }
    
    // required string thrigger = 2;
    if (has_thrigger()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thrigger());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutomaticOperation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AutomaticOperation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AutomaticOperation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AutomaticOperation::MergeFrom(const AutomaticOperation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_command(from.command());
    }
    if (from._has_bit(2)) {
      set_thrigger(from.thrigger());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AutomaticOperation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutomaticOperation::CopyFrom(const AutomaticOperation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutomaticOperation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void AutomaticOperation::Swap(AutomaticOperation* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(command_, other->command_);
    std::swap(thrigger_, other->thrigger_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AutomaticOperation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AutomaticOperation_descriptor_;
  metadata.reflection = AutomaticOperation_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Job::_default_status_;
const ::std::string Job::_default_main_command_;
#ifndef _MSC_VER
const int Job::kIdFieldNumber;
const int Job::kStatusFieldNumber;
const int Job::kMainCommandFieldNumber;
const int Job::kItemFieldNumber;
#endif  // !_MSC_VER

Job::Job()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Job::InitAsDefaultInstance() {
}

Job::Job(const Job& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Job::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  status_ = const_cast< ::std::string*>(&_default_status_);
  main_command_ = const_cast< ::std::string*>(&_default_main_command_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Job::~Job() {
  SharedDtor();
}

void Job::SharedDtor() {
  if (status_ != &_default_status_) {
    delete status_;
  }
  if (main_command_ != &_default_main_command_) {
    delete main_command_;
  }
  if (this != default_instance_) {
  }
}

void Job::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Job::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Job_descriptor_;
}

const Job& Job::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

Job* Job::default_instance_ = NULL;

Job* Job::New() const {
  return new Job;
}

void Job::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(1)) {
      if (status_ != &_default_status_) {
        status_->clear();
      }
    }
    if (_has_bit(2)) {
      if (main_command_ != &_default_main_command_) {
        main_command_->clear();
      }
    }
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Job::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_main_command;
        break;
      }
      
      // required string main_command = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_main_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_main_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->main_command().data(), this->main_command().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_status;
        break;
      }
      
      // required string status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_item;
        break;
      }
      
      // repeated .samson.network.JobItem item = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Job::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }
  
  // required string main_command = 2;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->main_command().data(), this->main_command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->main_command(), output);
  }
  
  // required string status = 3;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->status(), output);
  }
  
  // repeated .samson.network.JobItem item = 10;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->item(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Job::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }
  
  // required string main_command = 2;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->main_command().data(), this->main_command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->main_command(), target);
  }
  
  // required string status = 3;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->status(), target);
  }
  
  // repeated .samson.network.JobItem item = 10;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->item(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Job::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }
    
    // required string status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status());
    }
    
    // required string main_command = 2;
    if (has_main_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->main_command());
    }
    
  }
  // repeated .samson.network.JobItem item = 10;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Job::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Job* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Job*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Job::MergeFrom(const Job& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_status(from.status());
    }
    if (from._has_bit(2)) {
      set_main_command(from.main_command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Job::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Job::CopyFrom(const Job& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Job::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void Job::Swap(Job* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    std::swap(main_command_, other->main_command_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Job::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Job_descriptor_;
  metadata.reflection = Job_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Error::_default_message_;
#ifndef _MSC_VER
const int Error::kMessageFieldNumber;
#endif  // !_MSC_VER

Error::Error()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Error::InitAsDefaultInstance() {
}

Error::Error(const Error& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Error::SharedCtor() {
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&_default_message_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Error::~Error() {
  SharedDtor();
}

void Error::SharedDtor() {
  if (message_ != &_default_message_) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_descriptor_;
}

const Error& Error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

Error* Error::default_instance_ = NULL;

Error* Error::New() const {
  return new Error;
}

void Error::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (message_ != &_default_message_) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string message = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Error::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string message = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Error::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Error* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Error*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Error::Swap(Error* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Error_descriptor_;
  metadata.reflection = Error_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Trace::_default_text_;
const ::std::string Trace::_default_file_;
const ::std::string Trace::_default_fname_;
const ::std::string Trace::_default_stre_;
#ifndef _MSC_VER
const int Trace::kTextFieldNumber;
const int Trace::kTypeFieldNumber;
const int Trace::kFileFieldNumber;
const int Trace::kLineNoFieldNumber;
const int Trace::kFNameFieldNumber;
const int Trace::kTLevFieldNumber;
const int Trace::kStreFieldNumber;
#endif  // !_MSC_VER

Trace::Trace()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Trace::InitAsDefaultInstance() {
}

Trace::Trace(const Trace& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Trace::SharedCtor() {
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&_default_text_);
  type_ = 0;
  file_ = const_cast< ::std::string*>(&_default_file_);
  lineno_ = 0;
  fname_ = const_cast< ::std::string*>(&_default_fname_);
  tlev_ = 0;
  stre_ = const_cast< ::std::string*>(&_default_stre_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Trace::~Trace() {
  SharedDtor();
}

void Trace::SharedDtor() {
  if (text_ != &_default_text_) {
    delete text_;
  }
  if (file_ != &_default_file_) {
    delete file_;
  }
  if (fname_ != &_default_fname_) {
    delete fname_;
  }
  if (stre_ != &_default_stre_) {
    delete stre_;
  }
  if (this != default_instance_) {
  }
}

void Trace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Trace_descriptor_;
}

const Trace& Trace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

Trace* Trace::default_instance_ = NULL;

Trace* Trace::New() const {
  return new Trace;
}

void Trace::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (text_ != &_default_text_) {
        text_->clear();
      }
    }
    type_ = 0;
    if (_has_bit(2)) {
      if (file_ != &_default_file_) {
        file_->clear();
      }
    }
    lineno_ = 0;
    if (_has_bit(4)) {
      if (fname_ != &_default_fname_) {
        fname_->clear();
      }
    }
    tlev_ = 0;
    if (_has_bit(6)) {
      if (stre_ != &_default_stre_) {
        stre_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Trace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_file;
        break;
      }
      
      // required string file = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file().data(), this->file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lineNo;
        break;
      }
      
      // required int32 lineNo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lineno_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_fName;
        break;
      }
      
      // required string fName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fname().data(), this->fname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tLev;
        break;
      }
      
      // required int32 tLev = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tLev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tlev_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_stre;
        break;
      }
      
      // required string stre = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stre:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stre()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stre().data(), this->stre().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Trace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string text = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->text(), output);
  }
  
  // required int32 type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // required string file = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->file(), output);
  }
  
  // required int32 lineNo = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lineno(), output);
  }
  
  // required string fName = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fname().data(), this->fname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->fname(), output);
  }
  
  // required int32 tLev = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tlev(), output);
  }
  
  // required string stre = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stre().data(), this->stre().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->stre(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Trace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string text = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }
  
  // required int32 type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // required string file = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->file(), target);
  }
  
  // required int32 lineNo = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lineno(), target);
  }
  
  // required string fName = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fname().data(), this->fname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->fname(), target);
  }
  
  // required int32 tLev = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tlev(), target);
  }
  
  // required string stre = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stre().data(), this->stre().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->stre(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Trace::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }
    
    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required string file = 3;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file());
    }
    
    // required int32 lineNo = 4;
    if (has_lineno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lineno());
    }
    
    // required string fName = 5;
    if (has_fname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fname());
    }
    
    // required int32 tLev = 6;
    if (has_tlev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tlev());
    }
    
    // required string stre = 7;
    if (has_stre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stre());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Trace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Trace*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Trace::MergeFrom(const Trace& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_text(from.text());
    }
    if (from._has_bit(1)) {
      set_type(from.type());
    }
    if (from._has_bit(2)) {
      set_file(from.file());
    }
    if (from._has_bit(3)) {
      set_lineno(from.lineno());
    }
    if (from._has_bit(4)) {
      set_fname(from.fname());
    }
    if (from._has_bit(5)) {
      set_tlev(from.tlev());
    }
    if (from._has_bit(6)) {
      set_stre(from.stre());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Trace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trace::CopyFrom(const Trace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trace::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void Trace::Swap(Trace* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(type_, other->type_);
    std::swap(file_, other->file_);
    std::swap(lineno_, other->lineno_);
    std::swap(fname_, other->fname_);
    std::swap(tlev_, other->tlev_);
    std::swap(stre_, other->stre_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Trace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Trace_descriptor_;
  metadata.reflection = Trace_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ControllerTask_ControllerTaskState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControllerTask_ControllerTaskState_descriptor_;
}
bool ControllerTask_ControllerTaskState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ControllerTask_ControllerTaskState ControllerTask::ControllerTaskInit;
const ControllerTask_ControllerTaskState ControllerTask::ControllerTaskRunning;
const ControllerTask_ControllerTaskState ControllerTask::ControllerTaskFinish;
const ControllerTask_ControllerTaskState ControllerTask::ControllerTaskCompleted;
const ControllerTask_ControllerTaskState ControllerTask::ControllerTaskState_MIN;
const ControllerTask_ControllerTaskState ControllerTask::ControllerTaskState_MAX;
const int ControllerTask::ControllerTaskState_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ControllerTask::kStateFieldNumber;
const int ControllerTask::kJobIdFieldNumber;
const int ControllerTask::kTaskIdFieldNumber;
const int ControllerTask::kErrorFieldNumber;
const int ControllerTask::kTotalInfoFieldNumber;
const int ControllerTask::kRunningInfoFieldNumber;
const int ControllerTask::kProcessedInfoFieldNumber;
#endif  // !_MSC_VER

ControllerTask::ControllerTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ControllerTask::InitAsDefaultInstance() {
  error_ = const_cast< ::samson::network::Error*>(&::samson::network::Error::default_instance());
  total_info_ = const_cast< ::samson::network::KVInfo*>(&::samson::network::KVInfo::default_instance());
  running_info_ = const_cast< ::samson::network::KVInfo*>(&::samson::network::KVInfo::default_instance());
  processed_info_ = const_cast< ::samson::network::KVInfo*>(&::samson::network::KVInfo::default_instance());
}

ControllerTask::ControllerTask(const ControllerTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ControllerTask::SharedCtor() {
  _cached_size_ = 0;
  state_ = 1;
  job_id_ = GOOGLE_LONGLONG(0);
  task_id_ = GOOGLE_LONGLONG(0);
  error_ = NULL;
  total_info_ = NULL;
  running_info_ = NULL;
  processed_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ControllerTask::~ControllerTask() {
  SharedDtor();
}

void ControllerTask::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
    delete total_info_;
    delete running_info_;
    delete processed_info_;
  }
}

void ControllerTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControllerTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControllerTask_descriptor_;
}

const ControllerTask& ControllerTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

ControllerTask* ControllerTask::default_instance_ = NULL;

ControllerTask* ControllerTask::New() const {
  return new ControllerTask;
}

void ControllerTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 1;
    job_id_ = GOOGLE_LONGLONG(0);
    task_id_ = GOOGLE_LONGLONG(0);
    if (_has_bit(3)) {
      if (error_ != NULL) error_->::samson::network::Error::Clear();
    }
    if (_has_bit(4)) {
      if (total_info_ != NULL) total_info_->::samson::network::KVInfo::Clear();
    }
    if (_has_bit(5)) {
      if (running_info_ != NULL) running_info_->::samson::network::KVInfo::Clear();
    }
    if (_has_bit(6)) {
      if (processed_info_ != NULL) processed_info_->::samson::network::KVInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ControllerTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .samson.network.ControllerTask.ControllerTaskState state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::samson::network::ControllerTask_ControllerTaskState_IsValid(value)) {
            set_state(static_cast< ::samson::network::ControllerTask_ControllerTaskState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_job_id;
        break;
      }
      
      // required int64 job_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &job_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_task_id;
        break;
      }
      
      // required int64 task_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &task_id_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_total_info;
        break;
      }
      
      // optional .samson.network.KVInfo total_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_total_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_total_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_running_info;
        break;
      }
      
      // optional .samson.network.KVInfo running_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_running_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_running_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_processed_info;
        break;
      }
      
      // optional .samson.network.KVInfo processed_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_processed_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_processed_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_error;
        break;
      }
      
      // optional .samson.network.Error error = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ControllerTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .samson.network.ControllerTask.ControllerTaskState state = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }
  
  // required int64 job_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->job_id(), output);
  }
  
  // required int64 task_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->task_id(), output);
  }
  
  // optional .samson.network.KVInfo total_info = 4;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->total_info(), output);
  }
  
  // optional .samson.network.KVInfo running_info = 5;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->running_info(), output);
  }
  
  // optional .samson.network.KVInfo processed_info = 6;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->processed_info(), output);
  }
  
  // optional .samson.network.Error error = 10;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ControllerTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .samson.network.ControllerTask.ControllerTaskState state = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }
  
  // required int64 job_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->job_id(), target);
  }
  
  // required int64 task_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->task_id(), target);
  }
  
  // optional .samson.network.KVInfo total_info = 4;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->total_info(), target);
  }
  
  // optional .samson.network.KVInfo running_info = 5;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->running_info(), target);
  }
  
  // optional .samson.network.KVInfo processed_info = 6;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->processed_info(), target);
  }
  
  // optional .samson.network.Error error = 10;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ControllerTask::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .samson.network.ControllerTask.ControllerTaskState state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
    // required int64 job_id = 2;
    if (has_job_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->job_id());
    }
    
    // required int64 task_id = 3;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->task_id());
    }
    
    // optional .samson.network.Error error = 10;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
    // optional .samson.network.KVInfo total_info = 4;
    if (has_total_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->total_info());
    }
    
    // optional .samson.network.KVInfo running_info = 5;
    if (has_running_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->running_info());
    }
    
    // optional .samson.network.KVInfo processed_info = 6;
    if (has_processed_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->processed_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControllerTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ControllerTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ControllerTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ControllerTask::MergeFrom(const ControllerTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_state(from.state());
    }
    if (from._has_bit(1)) {
      set_job_id(from.job_id());
    }
    if (from._has_bit(2)) {
      set_task_id(from.task_id());
    }
    if (from._has_bit(3)) {
      mutable_error()->::samson::network::Error::MergeFrom(from.error());
    }
    if (from._has_bit(4)) {
      mutable_total_info()->::samson::network::KVInfo::MergeFrom(from.total_info());
    }
    if (from._has_bit(5)) {
      mutable_running_info()->::samson::network::KVInfo::MergeFrom(from.running_info());
    }
    if (from._has_bit(6)) {
      mutable_processed_info()->::samson::network::KVInfo::MergeFrom(from.processed_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ControllerTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerTask::CopyFrom(const ControllerTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  if (has_total_info()) {
    if (!this->total_info().IsInitialized()) return false;
  }
  if (has_running_info()) {
    if (!this->running_info().IsInitialized()) return false;
  }
  if (has_processed_info()) {
    if (!this->processed_info().IsInitialized()) return false;
  }
  return true;
}

void ControllerTask::Swap(ControllerTask* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(job_id_, other->job_id_);
    std::swap(task_id_, other->task_id_);
    std::swap(error_, other->error_);
    std::swap(total_info_, other->total_info_);
    std::swap(running_info_, other->running_info_);
    std::swap(processed_info_, other->processed_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ControllerTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ControllerTask_descriptor_;
  metadata.reflection = ControllerTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ControllerTaskManagerStatus::kTaskFieldNumber;
#endif  // !_MSC_VER

ControllerTaskManagerStatus::ControllerTaskManagerStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ControllerTaskManagerStatus::InitAsDefaultInstance() {
}

ControllerTaskManagerStatus::ControllerTaskManagerStatus(const ControllerTaskManagerStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ControllerTaskManagerStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ControllerTaskManagerStatus::~ControllerTaskManagerStatus() {
  SharedDtor();
}

void ControllerTaskManagerStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ControllerTaskManagerStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControllerTaskManagerStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControllerTaskManagerStatus_descriptor_;
}

const ControllerTaskManagerStatus& ControllerTaskManagerStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

ControllerTaskManagerStatus* ControllerTaskManagerStatus::default_instance_ = NULL;

ControllerTaskManagerStatus* ControllerTaskManagerStatus::New() const {
  return new ControllerTaskManagerStatus;
}

void ControllerTaskManagerStatus::Clear() {
  task_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ControllerTaskManagerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .samson.network.ControllerTask task = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_task;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ControllerTaskManagerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .samson.network.ControllerTask task = 1;
  for (int i = 0; i < this->task_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ControllerTaskManagerStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .samson.network.ControllerTask task = 1;
  for (int i = 0; i < this->task_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ControllerTaskManagerStatus::ByteSize() const {
  int total_size = 0;
  
  // repeated .samson.network.ControllerTask task = 1;
  total_size += 1 * this->task_size();
  for (int i = 0; i < this->task_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControllerTaskManagerStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ControllerTaskManagerStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ControllerTaskManagerStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ControllerTaskManagerStatus::MergeFrom(const ControllerTaskManagerStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_.MergeFrom(from.task_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ControllerTaskManagerStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerTaskManagerStatus::CopyFrom(const ControllerTaskManagerStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerTaskManagerStatus::IsInitialized() const {
  
  for (int i = 0; i < task_size(); i++) {
    if (!this->task(i).IsInitialized()) return false;
  }
  return true;
}

void ControllerTaskManagerStatus::Swap(ControllerTaskManagerStatus* other) {
  if (other != this) {
    task_.Swap(&other->task_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ControllerTaskManagerStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ControllerTaskManagerStatus_descriptor_;
  metadata.reflection = ControllerTaskManagerStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string ControllerStatus::_default_job_manager_status_;
const ::std::string ControllerStatus::_default_network_status_;
#ifndef _MSC_VER
const int ControllerStatus::kUpTimeFieldNumber;
const int ControllerStatus::kJobManagerStatusFieldNumber;
const int ControllerStatus::kNetworkStatusFieldNumber;
const int ControllerStatus::kTaskManagerStatusFieldNumber;
#endif  // !_MSC_VER

ControllerStatus::ControllerStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ControllerStatus::InitAsDefaultInstance() {
  task_manager_status_ = const_cast< ::samson::network::ControllerTaskManagerStatus*>(&::samson::network::ControllerTaskManagerStatus::default_instance());
}

ControllerStatus::ControllerStatus(const ControllerStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ControllerStatus::SharedCtor() {
  _cached_size_ = 0;
  up_time_ = GOOGLE_ULONGLONG(0);
  job_manager_status_ = const_cast< ::std::string*>(&_default_job_manager_status_);
  network_status_ = const_cast< ::std::string*>(&_default_network_status_);
  task_manager_status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ControllerStatus::~ControllerStatus() {
  SharedDtor();
}

void ControllerStatus::SharedDtor() {
  if (job_manager_status_ != &_default_job_manager_status_) {
    delete job_manager_status_;
  }
  if (network_status_ != &_default_network_status_) {
    delete network_status_;
  }
  if (this != default_instance_) {
    delete task_manager_status_;
  }
}

void ControllerStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControllerStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControllerStatus_descriptor_;
}

const ControllerStatus& ControllerStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

ControllerStatus* ControllerStatus::default_instance_ = NULL;

ControllerStatus* ControllerStatus::New() const {
  return new ControllerStatus;
}

void ControllerStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    up_time_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(1)) {
      if (job_manager_status_ != &_default_job_manager_status_) {
        job_manager_status_->clear();
      }
    }
    if (_has_bit(2)) {
      if (network_status_ != &_default_network_status_) {
        network_status_->clear();
      }
    }
    if (_has_bit(3)) {
      if (task_manager_status_ != NULL) task_manager_status_->::samson::network::ControllerTaskManagerStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ControllerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string job_manager_status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_job_manager_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->job_manager_status().data(), this->job_manager_status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_network_status;
        break;
      }
      
      // optional string network_status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_network_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->network_status().data(), this->network_status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_task_manager_status;
        break;
      }
      
      // optional .samson.network.ControllerTaskManagerStatus task_manager_status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_manager_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task_manager_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_up_time;
        break;
      }
      
      // optional uint64 up_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_up_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &up_time_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ControllerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string job_manager_status = 1;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->job_manager_status().data(), this->job_manager_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->job_manager_status(), output);
  }
  
  // optional string network_status = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network_status().data(), this->network_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->network_status(), output);
  }
  
  // optional .samson.network.ControllerTaskManagerStatus task_manager_status = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->task_manager_status(), output);
  }
  
  // optional uint64 up_time = 8;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->up_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ControllerStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string job_manager_status = 1;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->job_manager_status().data(), this->job_manager_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->job_manager_status(), target);
  }
  
  // optional string network_status = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network_status().data(), this->network_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->network_status(), target);
  }
  
  // optional .samson.network.ControllerTaskManagerStatus task_manager_status = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->task_manager_status(), target);
  }
  
  // optional uint64 up_time = 8;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->up_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ControllerStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 up_time = 8;
    if (has_up_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->up_time());
    }
    
    // optional string job_manager_status = 1;
    if (has_job_manager_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->job_manager_status());
    }
    
    // optional string network_status = 3;
    if (has_network_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->network_status());
    }
    
    // optional .samson.network.ControllerTaskManagerStatus task_manager_status = 4;
    if (has_task_manager_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task_manager_status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControllerStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ControllerStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ControllerStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ControllerStatus::MergeFrom(const ControllerStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_up_time(from.up_time());
    }
    if (from._has_bit(1)) {
      set_job_manager_status(from.job_manager_status());
    }
    if (from._has_bit(2)) {
      set_network_status(from.network_status());
    }
    if (from._has_bit(3)) {
      mutable_task_manager_status()->::samson::network::ControllerTaskManagerStatus::MergeFrom(from.task_manager_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ControllerStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerStatus::CopyFrom(const ControllerStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerStatus::IsInitialized() const {
  
  if (has_task_manager_status()) {
    if (!this->task_manager_status().IsInitialized()) return false;
  }
  return true;
}

void ControllerStatus::Swap(ControllerStatus* other) {
  if (other != this) {
    std::swap(up_time_, other->up_time_);
    std::swap(job_manager_status_, other->job_manager_status_);
    std::swap(network_status_, other->network_status_);
    std::swap(task_manager_status_, other->task_manager_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ControllerStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ControllerStatus_descriptor_;
  metadata.reflection = ControllerStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string WorkerStatus::_default_task_manager_status_;
const ::std::string WorkerStatus::_default_disk_manager_status_;
const ::std::string WorkerStatus::_default_load_data_manager_status_;
const ::std::string WorkerStatus::_default_process_manager_status_;
const ::std::string WorkerStatus::_default_network_status_;
const ::std::string WorkerStatus::_default_memory_status_;
const ::std::string WorkerStatus::_default_shared_memory_status_;
const ::std::string WorkerStatus::_default_engine_status_;
const ::std::string WorkerStatus::_default_queues_status_;
#ifndef _MSC_VER
const int WorkerStatus::kUpTimeFieldNumber;
const int WorkerStatus::kUpdateTimeFieldNumber;
const int WorkerStatus::kTaskManagerStatusFieldNumber;
const int WorkerStatus::kDiskManagerStatusFieldNumber;
const int WorkerStatus::kLoadDataManagerStatusFieldNumber;
const int WorkerStatus::kProcessManagerStatusFieldNumber;
const int WorkerStatus::kNetworkStatusFieldNumber;
const int WorkerStatus::kMemoryStatusFieldNumber;
const int WorkerStatus::kSharedMemoryStatusFieldNumber;
const int WorkerStatus::kEngineStatusFieldNumber;
const int WorkerStatus::kQueuesStatusFieldNumber;
const int WorkerStatus::kUsedMemoryFieldNumber;
const int WorkerStatus::kTotalMemoryFieldNumber;
const int WorkerStatus::kTotalCoresFieldNumber;
const int WorkerStatus::kUsedCoresFieldNumber;
const int WorkerStatus::kDiskPendingOperationsFieldNumber;
#endif  // !_MSC_VER

WorkerStatus::WorkerStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorkerStatus::InitAsDefaultInstance() {
}

WorkerStatus::WorkerStatus(const WorkerStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorkerStatus::SharedCtor() {
  _cached_size_ = 0;
  up_time_ = GOOGLE_ULONGLONG(0);
  update_time_ = GOOGLE_ULONGLONG(0);
  task_manager_status_ = const_cast< ::std::string*>(&_default_task_manager_status_);
  disk_manager_status_ = const_cast< ::std::string*>(&_default_disk_manager_status_);
  load_data_manager_status_ = const_cast< ::std::string*>(&_default_load_data_manager_status_);
  process_manager_status_ = const_cast< ::std::string*>(&_default_process_manager_status_);
  network_status_ = const_cast< ::std::string*>(&_default_network_status_);
  memory_status_ = const_cast< ::std::string*>(&_default_memory_status_);
  shared_memory_status_ = const_cast< ::std::string*>(&_default_shared_memory_status_);
  engine_status_ = const_cast< ::std::string*>(&_default_engine_status_);
  queues_status_ = const_cast< ::std::string*>(&_default_queues_status_);
  used_memory_ = GOOGLE_ULONGLONG(0);
  total_memory_ = GOOGLE_ULONGLONG(0);
  total_cores_ = 0;
  used_cores_ = 0;
  disk_pending_operations_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkerStatus::~WorkerStatus() {
  SharedDtor();
}

void WorkerStatus::SharedDtor() {
  if (task_manager_status_ != &_default_task_manager_status_) {
    delete task_manager_status_;
  }
  if (disk_manager_status_ != &_default_disk_manager_status_) {
    delete disk_manager_status_;
  }
  if (load_data_manager_status_ != &_default_load_data_manager_status_) {
    delete load_data_manager_status_;
  }
  if (process_manager_status_ != &_default_process_manager_status_) {
    delete process_manager_status_;
  }
  if (network_status_ != &_default_network_status_) {
    delete network_status_;
  }
  if (memory_status_ != &_default_memory_status_) {
    delete memory_status_;
  }
  if (shared_memory_status_ != &_default_shared_memory_status_) {
    delete shared_memory_status_;
  }
  if (engine_status_ != &_default_engine_status_) {
    delete engine_status_;
  }
  if (queues_status_ != &_default_queues_status_) {
    delete queues_status_;
  }
  if (this != default_instance_) {
  }
}

void WorkerStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkerStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkerStatus_descriptor_;
}

const WorkerStatus& WorkerStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

WorkerStatus* WorkerStatus::default_instance_ = NULL;

WorkerStatus* WorkerStatus::New() const {
  return new WorkerStatus;
}

void WorkerStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    up_time_ = GOOGLE_ULONGLONG(0);
    update_time_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(2)) {
      if (task_manager_status_ != &_default_task_manager_status_) {
        task_manager_status_->clear();
      }
    }
    if (_has_bit(3)) {
      if (disk_manager_status_ != &_default_disk_manager_status_) {
        disk_manager_status_->clear();
      }
    }
    if (_has_bit(4)) {
      if (load_data_manager_status_ != &_default_load_data_manager_status_) {
        load_data_manager_status_->clear();
      }
    }
    if (_has_bit(5)) {
      if (process_manager_status_ != &_default_process_manager_status_) {
        process_manager_status_->clear();
      }
    }
    if (_has_bit(6)) {
      if (network_status_ != &_default_network_status_) {
        network_status_->clear();
      }
    }
    if (_has_bit(7)) {
      if (memory_status_ != &_default_memory_status_) {
        memory_status_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (shared_memory_status_ != &_default_shared_memory_status_) {
        shared_memory_status_->clear();
      }
    }
    if (_has_bit(9)) {
      if (engine_status_ != &_default_engine_status_) {
        engine_status_->clear();
      }
    }
    if (_has_bit(10)) {
      if (queues_status_ != &_default_queues_status_) {
        queues_status_->clear();
      }
    }
    used_memory_ = GOOGLE_ULONGLONG(0);
    total_memory_ = GOOGLE_ULONGLONG(0);
    total_cores_ = 0;
    used_cores_ = 0;
    disk_pending_operations_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string process_manager_status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_process_manager_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->process_manager_status().data(), this->process_manager_status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_disk_manager_status;
        break;
      }
      
      // optional string disk_manager_status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_disk_manager_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_disk_manager_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->disk_manager_status().data(), this->disk_manager_status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_memory_status;
        break;
      }
      
      // optional string memory_status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_memory_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_memory_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->memory_status().data(), this->memory_status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_task_manager_status;
        break;
      }
      
      // optional string task_manager_status = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_manager_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_manager_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->task_manager_status().data(), this->task_manager_status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_update_time;
        break;
      }
      
      // optional uint64 update_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_time_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_used_memory;
        break;
      }
      
      // optional uint64 used_memory = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used_memory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &used_memory_)));
          _set_bit(11);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_total_memory;
        break;
      }
      
      // optional uint64 total_memory = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_memory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_memory_)));
          _set_bit(12);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_used_cores;
        break;
      }
      
      // optional int32 used_cores = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used_cores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &used_cores_)));
          _set_bit(14);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_load_data_manager_status;
        break;
      }
      
      // optional string load_data_manager_status = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_load_data_manager_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_load_data_manager_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->load_data_manager_status().data(), this->load_data_manager_status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_total_cores;
        break;
      }
      
      // optional int32 total_cores = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_cores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_cores_)));
          _set_bit(13);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_disk_pending_operations;
        break;
      }
      
      // optional int32 disk_pending_operations = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disk_pending_operations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &disk_pending_operations_)));
          _set_bit(15);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_network_status;
        break;
      }
      
      // optional string network_status = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_network_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->network_status().data(), this->network_status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_shared_memory_status;
        break;
      }
      
      // optional string shared_memory_status = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shared_memory_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shared_memory_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->shared_memory_status().data(), this->shared_memory_status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_up_time;
        break;
      }
      
      // optional uint64 up_time = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_up_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &up_time_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_engine_status;
        break;
      }
      
      // optional string engine_status = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_engine_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_engine_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->engine_status().data(), this->engine_status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_queues_status;
        break;
      }
      
      // optional string queues_status = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_queues_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queues_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->queues_status().data(), this->queues_status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorkerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string process_manager_status = 1;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->process_manager_status().data(), this->process_manager_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->process_manager_status(), output);
  }
  
  // optional string disk_manager_status = 3;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disk_manager_status().data(), this->disk_manager_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->disk_manager_status(), output);
  }
  
  // optional string memory_status = 6;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->memory_status().data(), this->memory_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->memory_status(), output);
  }
  
  // optional string task_manager_status = 7;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_manager_status().data(), this->task_manager_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->task_manager_status(), output);
  }
  
  // optional uint64 update_time = 8;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->update_time(), output);
  }
  
  // optional uint64 used_memory = 10;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->used_memory(), output);
  }
  
  // optional uint64 total_memory = 11;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->total_memory(), output);
  }
  
  // optional int32 used_cores = 13;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->used_cores(), output);
  }
  
  // optional string load_data_manager_status = 14;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->load_data_manager_status().data(), this->load_data_manager_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->load_data_manager_status(), output);
  }
  
  // optional int32 total_cores = 16;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->total_cores(), output);
  }
  
  // optional int32 disk_pending_operations = 17;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->disk_pending_operations(), output);
  }
  
  // optional string network_status = 20;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network_status().data(), this->network_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->network_status(), output);
  }
  
  // optional string shared_memory_status = 22;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shared_memory_status().data(), this->shared_memory_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->shared_memory_status(), output);
  }
  
  // optional uint64 up_time = 23;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(23, this->up_time(), output);
  }
  
  // optional string engine_status = 24;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->engine_status().data(), this->engine_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->engine_status(), output);
  }
  
  // optional string queues_status = 25;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->queues_status().data(), this->queues_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->queues_status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorkerStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string process_manager_status = 1;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->process_manager_status().data(), this->process_manager_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->process_manager_status(), target);
  }
  
  // optional string disk_manager_status = 3;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disk_manager_status().data(), this->disk_manager_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->disk_manager_status(), target);
  }
  
  // optional string memory_status = 6;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->memory_status().data(), this->memory_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->memory_status(), target);
  }
  
  // optional string task_manager_status = 7;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_manager_status().data(), this->task_manager_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->task_manager_status(), target);
  }
  
  // optional uint64 update_time = 8;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->update_time(), target);
  }
  
  // optional uint64 used_memory = 10;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->used_memory(), target);
  }
  
  // optional uint64 total_memory = 11;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->total_memory(), target);
  }
  
  // optional int32 used_cores = 13;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->used_cores(), target);
  }
  
  // optional string load_data_manager_status = 14;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->load_data_manager_status().data(), this->load_data_manager_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->load_data_manager_status(), target);
  }
  
  // optional int32 total_cores = 16;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->total_cores(), target);
  }
  
  // optional int32 disk_pending_operations = 17;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->disk_pending_operations(), target);
  }
  
  // optional string network_status = 20;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network_status().data(), this->network_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->network_status(), target);
  }
  
  // optional string shared_memory_status = 22;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shared_memory_status().data(), this->shared_memory_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->shared_memory_status(), target);
  }
  
  // optional uint64 up_time = 23;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(23, this->up_time(), target);
  }
  
  // optional string engine_status = 24;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->engine_status().data(), this->engine_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->engine_status(), target);
  }
  
  // optional string queues_status = 25;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->queues_status().data(), this->queues_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->queues_status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorkerStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 up_time = 23;
    if (has_up_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->up_time());
    }
    
    // optional uint64 update_time = 8;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_time());
    }
    
    // optional string task_manager_status = 7;
    if (has_task_manager_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_manager_status());
    }
    
    // optional string disk_manager_status = 3;
    if (has_disk_manager_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->disk_manager_status());
    }
    
    // optional string load_data_manager_status = 14;
    if (has_load_data_manager_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->load_data_manager_status());
    }
    
    // optional string process_manager_status = 1;
    if (has_process_manager_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->process_manager_status());
    }
    
    // optional string network_status = 20;
    if (has_network_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->network_status());
    }
    
    // optional string memory_status = 6;
    if (has_memory_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->memory_status());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string shared_memory_status = 22;
    if (has_shared_memory_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shared_memory_status());
    }
    
    // optional string engine_status = 24;
    if (has_engine_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->engine_status());
    }
    
    // optional string queues_status = 25;
    if (has_queues_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->queues_status());
    }
    
    // optional uint64 used_memory = 10;
    if (has_used_memory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->used_memory());
    }
    
    // optional uint64 total_memory = 11;
    if (has_total_memory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_memory());
    }
    
    // optional int32 total_cores = 16;
    if (has_total_cores()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_cores());
    }
    
    // optional int32 used_cores = 13;
    if (has_used_cores()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->used_cores());
    }
    
    // optional int32 disk_pending_operations = 17;
    if (has_disk_pending_operations()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->disk_pending_operations());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkerStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkerStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkerStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkerStatus::MergeFrom(const WorkerStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_up_time(from.up_time());
    }
    if (from._has_bit(1)) {
      set_update_time(from.update_time());
    }
    if (from._has_bit(2)) {
      set_task_manager_status(from.task_manager_status());
    }
    if (from._has_bit(3)) {
      set_disk_manager_status(from.disk_manager_status());
    }
    if (from._has_bit(4)) {
      set_load_data_manager_status(from.load_data_manager_status());
    }
    if (from._has_bit(5)) {
      set_process_manager_status(from.process_manager_status());
    }
    if (from._has_bit(6)) {
      set_network_status(from.network_status());
    }
    if (from._has_bit(7)) {
      set_memory_status(from.memory_status());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_shared_memory_status(from.shared_memory_status());
    }
    if (from._has_bit(9)) {
      set_engine_status(from.engine_status());
    }
    if (from._has_bit(10)) {
      set_queues_status(from.queues_status());
    }
    if (from._has_bit(11)) {
      set_used_memory(from.used_memory());
    }
    if (from._has_bit(12)) {
      set_total_memory(from.total_memory());
    }
    if (from._has_bit(13)) {
      set_total_cores(from.total_cores());
    }
    if (from._has_bit(14)) {
      set_used_cores(from.used_cores());
    }
    if (from._has_bit(15)) {
      set_disk_pending_operations(from.disk_pending_operations());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkerStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerStatus::CopyFrom(const WorkerStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerStatus::IsInitialized() const {
  
  return true;
}

void WorkerStatus::Swap(WorkerStatus* other) {
  if (other != this) {
    std::swap(up_time_, other->up_time_);
    std::swap(update_time_, other->update_time_);
    std::swap(task_manager_status_, other->task_manager_status_);
    std::swap(disk_manager_status_, other->disk_manager_status_);
    std::swap(load_data_manager_status_, other->load_data_manager_status_);
    std::swap(process_manager_status_, other->process_manager_status_);
    std::swap(network_status_, other->network_status_);
    std::swap(memory_status_, other->memory_status_);
    std::swap(shared_memory_status_, other->shared_memory_status_);
    std::swap(engine_status_, other->engine_status_);
    std::swap(queues_status_, other->queues_status_);
    std::swap(used_memory_, other->used_memory_);
    std::swap(total_memory_, other->total_memory_);
    std::swap(total_cores_, other->total_cores_);
    std::swap(used_cores_, other->used_cores_);
    std::swap(disk_pending_operations_, other->disk_pending_operations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkerStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkerStatus_descriptor_;
  metadata.reflection = WorkerStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActiveTask::kFileNameFieldNumber;
#endif  // !_MSC_VER

ActiveTask::ActiveTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActiveTask::InitAsDefaultInstance() {
}

ActiveTask::ActiveTask(const ActiveTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActiveTask::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActiveTask::~ActiveTask() {
  SharedDtor();
}

void ActiveTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActiveTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActiveTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActiveTask_descriptor_;
}

const ActiveTask& ActiveTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

ActiveTask* ActiveTask::default_instance_ = NULL;

ActiveTask* ActiveTask::New() const {
  return new ActiveTask;
}

void ActiveTask::Clear() {
  filename_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActiveTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string fileName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename(0).data(), this->filename(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fileName;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActiveTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string fileName = 1;
  for (int i = 0; i < this->filename_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->filename(i).data(), this->filename(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filename(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActiveTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string fileName = 1;
  for (int i = 0; i < this->filename_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename(i).data(), this->filename(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->filename(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActiveTask::ByteSize() const {
  int total_size = 0;
  
  // repeated string fileName = 1;
  total_size += 1 * this->filename_size();
  for (int i = 0; i < this->filename_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->filename(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActiveTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActiveTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActiveTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActiveTask::MergeFrom(const ActiveTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  filename_.MergeFrom(from.filename_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActiveTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActiveTask::CopyFrom(const ActiveTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveTask::IsInitialized() const {
  
  return true;
}

void ActiveTask::Swap(ActiveTask* other) {
  if (other != this) {
    filename_.Swap(&other->filename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActiveTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActiveTask_descriptor_;
  metadata.reflection = ActiveTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueueList::kQueueFieldNumber;
const int QueueList::kTasksFieldNumber;
const int QueueList::kLoadIdFieldNumber;
#endif  // !_MSC_VER

QueueList::QueueList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueueList::InitAsDefaultInstance() {
}

QueueList::QueueList(const QueueList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueueList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueueList::~QueueList() {
  SharedDtor();
}

void QueueList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueueList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueueList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueueList_descriptor_;
}

const QueueList& QueueList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

QueueList* QueueList::default_instance_ = NULL;

QueueList* QueueList::New() const {
  return new QueueList;
}

void QueueList::Clear() {
  queue_.Clear();
  tasks_.Clear();
  load_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueueList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .samson.network.FullQueue queue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_queue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_queue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_queue;
        if (input->ExpectTag(18)) goto parse_tasks;
        break;
      }
      
      // repeated .samson.network.ActiveTask tasks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tasks;
        if (input->ExpectTag(24)) goto parse_load_id;
        break;
      }
      
      // repeated uint64 load_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_load_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_load_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_load_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_load_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueueList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .samson.network.FullQueue queue = 1;
  for (int i = 0; i < this->queue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->queue(i), output);
  }
  
  // repeated .samson.network.ActiveTask tasks = 2;
  for (int i = 0; i < this->tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tasks(i), output);
  }
  
  // repeated uint64 load_id = 3;
  for (int i = 0; i < this->load_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->load_id(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueueList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .samson.network.FullQueue queue = 1;
  for (int i = 0; i < this->queue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->queue(i), target);
  }
  
  // repeated .samson.network.ActiveTask tasks = 2;
  for (int i = 0; i < this->tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tasks(i), target);
  }
  
  // repeated uint64 load_id = 3;
  for (int i = 0; i < this->load_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->load_id(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueueList::ByteSize() const {
  int total_size = 0;
  
  // repeated .samson.network.FullQueue queue = 1;
  total_size += 1 * this->queue_size();
  for (int i = 0; i < this->queue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->queue(i));
  }
  
  // repeated .samson.network.ActiveTask tasks = 2;
  total_size += 1 * this->tasks_size();
  for (int i = 0; i < this->tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tasks(i));
  }
  
  // repeated uint64 load_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->load_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->load_id(i));
    }
    total_size += 1 * this->load_id_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueueList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueueList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueueList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueueList::MergeFrom(const QueueList& from) {
  GOOGLE_CHECK_NE(&from, this);
  queue_.MergeFrom(from.queue_);
  tasks_.MergeFrom(from.tasks_);
  load_id_.MergeFrom(from.load_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueueList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueueList::CopyFrom(const QueueList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueueList::IsInitialized() const {
  
  for (int i = 0; i < queue_size(); i++) {
    if (!this->queue(i).IsInitialized()) return false;
  }
  return true;
}

void QueueList::Swap(QueueList* other) {
  if (other != this) {
    queue_.Swap(&other->queue_);
    tasks_.Swap(&other->tasks_);
    load_id_.Swap(&other->load_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueueList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueueList_descriptor_;
  metadata.reflection = QueueList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataList::kDataFieldNumber;
#endif  // !_MSC_VER

DataList::DataList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataList::InitAsDefaultInstance() {
}

DataList::DataList(const DataList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataList::~DataList() {
  SharedDtor();
}

void DataList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataList_descriptor_;
}

const DataList& DataList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

DataList* DataList::default_instance_ = NULL;

DataList* DataList::New() const {
  return new DataList;
}

void DataList::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .samson.network.Data data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .samson.network.Data data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .samson.network.Data data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataList::ByteSize() const {
  int total_size = 0;
  
  // repeated .samson.network.Data data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataList::MergeFrom(const DataList& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataList::CopyFrom(const DataList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataList::IsInitialized() const {
  
  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void DataList::Swap(DataList* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataList_descriptor_;
  metadata.reflection = DataList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperationList::kOperationFieldNumber;
#endif  // !_MSC_VER

OperationList::OperationList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OperationList::InitAsDefaultInstance() {
}

OperationList::OperationList(const OperationList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OperationList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperationList::~OperationList() {
  SharedDtor();
}

void OperationList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OperationList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperationList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperationList_descriptor_;
}

const OperationList& OperationList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

OperationList* OperationList::default_instance_ = NULL;

OperationList* OperationList::New() const {
  return new OperationList;
}

void OperationList::Clear() {
  operation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .samson.network.Operation operation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_operation;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OperationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .samson.network.Operation operation = 1;
  for (int i = 0; i < this->operation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->operation(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OperationList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .samson.network.Operation operation = 1;
  for (int i = 0; i < this->operation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->operation(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OperationList::ByteSize() const {
  int total_size = 0;
  
  // repeated .samson.network.Operation operation = 1;
  total_size += 1 * this->operation_size();
  for (int i = 0; i < this->operation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->operation(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperationList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperationList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperationList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperationList::MergeFrom(const OperationList& from) {
  GOOGLE_CHECK_NE(&from, this);
  operation_.MergeFrom(from.operation_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperationList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationList::CopyFrom(const OperationList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationList::IsInitialized() const {
  
  for (int i = 0; i < operation_size(); i++) {
    if (!this->operation(i).IsInitialized()) return false;
  }
  return true;
}

void OperationList::Swap(OperationList* other) {
  if (other != this) {
    operation_.Swap(&other->operation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperationList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperationList_descriptor_;
  metadata.reflection = OperationList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JobList::kJobFieldNumber;
#endif  // !_MSC_VER

JobList::JobList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JobList::InitAsDefaultInstance() {
}

JobList::JobList(const JobList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JobList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JobList::~JobList() {
  SharedDtor();
}

void JobList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JobList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JobList_descriptor_;
}

const JobList& JobList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

JobList* JobList::default_instance_ = NULL;

JobList* JobList::New() const {
  return new JobList;
}

void JobList::Clear() {
  job_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JobList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .samson.network.Job job = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_job:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_job()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_job;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JobList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .samson.network.Job job = 1;
  for (int i = 0; i < this->job_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->job(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JobList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .samson.network.Job job = 1;
  for (int i = 0; i < this->job_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->job(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JobList::ByteSize() const {
  int total_size = 0;
  
  // repeated .samson.network.Job job = 1;
  total_size += 1 * this->job_size();
  for (int i = 0; i < this->job_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->job(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JobList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JobList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JobList::MergeFrom(const JobList& from) {
  GOOGLE_CHECK_NE(&from, this);
  job_.MergeFrom(from.job_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JobList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobList::CopyFrom(const JobList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobList::IsInitialized() const {
  
  for (int i = 0; i < job_size(); i++) {
    if (!this->job(i).IsInitialized()) return false;
  }
  return true;
}

void JobList::Swap(JobList* other) {
  if (other != this) {
    job_.Swap(&other->job_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JobList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JobList_descriptor_;
  metadata.reflection = JobList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AutomaticOperationList::kAutomaticOperationFieldNumber;
#endif  // !_MSC_VER

AutomaticOperationList::AutomaticOperationList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AutomaticOperationList::InitAsDefaultInstance() {
}

AutomaticOperationList::AutomaticOperationList(const AutomaticOperationList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AutomaticOperationList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutomaticOperationList::~AutomaticOperationList() {
  SharedDtor();
}

void AutomaticOperationList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AutomaticOperationList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutomaticOperationList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AutomaticOperationList_descriptor_;
}

const AutomaticOperationList& AutomaticOperationList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

AutomaticOperationList* AutomaticOperationList::default_instance_ = NULL;

AutomaticOperationList* AutomaticOperationList::New() const {
  return new AutomaticOperationList;
}

void AutomaticOperationList::Clear() {
  automatic_operation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AutomaticOperationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .samson.network.AutomaticOperation automatic_operation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_automatic_operation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_automatic_operation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_automatic_operation;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AutomaticOperationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .samson.network.AutomaticOperation automatic_operation = 1;
  for (int i = 0; i < this->automatic_operation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->automatic_operation(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AutomaticOperationList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .samson.network.AutomaticOperation automatic_operation = 1;
  for (int i = 0; i < this->automatic_operation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->automatic_operation(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AutomaticOperationList::ByteSize() const {
  int total_size = 0;
  
  // repeated .samson.network.AutomaticOperation automatic_operation = 1;
  total_size += 1 * this->automatic_operation_size();
  for (int i = 0; i < this->automatic_operation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->automatic_operation(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutomaticOperationList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AutomaticOperationList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AutomaticOperationList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AutomaticOperationList::MergeFrom(const AutomaticOperationList& from) {
  GOOGLE_CHECK_NE(&from, this);
  automatic_operation_.MergeFrom(from.automatic_operation_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AutomaticOperationList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutomaticOperationList::CopyFrom(const AutomaticOperationList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutomaticOperationList::IsInitialized() const {
  
  for (int i = 0; i < automatic_operation_size(); i++) {
    if (!this->automatic_operation(i).IsInitialized()) return false;
  }
  return true;
}

void AutomaticOperationList::Swap(AutomaticOperationList* other) {
  if (other != this) {
    automatic_operation_.Swap(&other->automatic_operation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AutomaticOperationList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AutomaticOperationList_descriptor_;
  metadata.reflection = AutomaticOperationList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SamsonStatus::kControllerStatusFieldNumber;
const int SamsonStatus::kWorkerStatusFieldNumber;
#endif  // !_MSC_VER

SamsonStatus::SamsonStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SamsonStatus::InitAsDefaultInstance() {
  controller_status_ = const_cast< ::samson::network::ControllerStatus*>(&::samson::network::ControllerStatus::default_instance());
}

SamsonStatus::SamsonStatus(const SamsonStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SamsonStatus::SharedCtor() {
  _cached_size_ = 0;
  controller_status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SamsonStatus::~SamsonStatus() {
  SharedDtor();
}

void SamsonStatus::SharedDtor() {
  if (this != default_instance_) {
    delete controller_status_;
  }
}

void SamsonStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SamsonStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SamsonStatus_descriptor_;
}

const SamsonStatus& SamsonStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

SamsonStatus* SamsonStatus::default_instance_ = NULL;

SamsonStatus* SamsonStatus::New() const {
  return new SamsonStatus;
}

void SamsonStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (controller_status_ != NULL) controller_status_->::samson::network::ControllerStatus::Clear();
    }
  }
  worker_status_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SamsonStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .samson.network.ControllerStatus controller_status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_controller_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_worker_status;
        break;
      }
      
      // repeated .samson.network.WorkerStatus worker_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_worker_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_worker_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_worker_status;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SamsonStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .samson.network.ControllerStatus controller_status = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->controller_status(), output);
  }
  
  // repeated .samson.network.WorkerStatus worker_status = 2;
  for (int i = 0; i < this->worker_status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->worker_status(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SamsonStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .samson.network.ControllerStatus controller_status = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->controller_status(), target);
  }
  
  // repeated .samson.network.WorkerStatus worker_status = 2;
  for (int i = 0; i < this->worker_status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->worker_status(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SamsonStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .samson.network.ControllerStatus controller_status = 1;
    if (has_controller_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->controller_status());
    }
    
  }
  // repeated .samson.network.WorkerStatus worker_status = 2;
  total_size += 1 * this->worker_status_size();
  for (int i = 0; i < this->worker_status_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->worker_status(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SamsonStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SamsonStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SamsonStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SamsonStatus::MergeFrom(const SamsonStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  worker_status_.MergeFrom(from.worker_status_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_controller_status()->::samson::network::ControllerStatus::MergeFrom(from.controller_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SamsonStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SamsonStatus::CopyFrom(const SamsonStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SamsonStatus::IsInitialized() const {
  
  if (has_controller_status()) {
    if (!this->controller_status().IsInitialized()) return false;
  }
  return true;
}

void SamsonStatus::Swap(SamsonStatus* other) {
  if (other != this) {
    std::swap(controller_status_, other->controller_status_);
    worker_status_.Swap(&other->worker_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SamsonStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SamsonStatus_descriptor_;
  metadata.reflection = SamsonStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string WorkerTask::_default_operation_;
#ifndef _MSC_VER
const int WorkerTask::kJobIdFieldNumber;
const int WorkerTask::kTaskIdFieldNumber;
const int WorkerTask::kOperationFieldNumber;
const int WorkerTask::kInputQueueFieldNumber;
const int WorkerTask::kOutputQueueFieldNumber;
const int WorkerTask::kServersFieldNumber;
const int WorkerTask::kGeneratorFieldNumber;
const int WorkerTask::kEnvironmentFieldNumber;
#endif  // !_MSC_VER

WorkerTask::WorkerTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorkerTask::InitAsDefaultInstance() {
  environment_ = const_cast< ::samson::network::Environment*>(&::samson::network::Environment::default_instance());
}

WorkerTask::WorkerTask(const WorkerTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorkerTask::SharedCtor() {
  _cached_size_ = 0;
  job_id_ = GOOGLE_ULONGLONG(0);
  task_id_ = GOOGLE_ULONGLONG(0);
  operation_ = const_cast< ::std::string*>(&_default_operation_);
  servers_ = 0;
  generator_ = false;
  environment_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkerTask::~WorkerTask() {
  SharedDtor();
}

void WorkerTask::SharedDtor() {
  if (operation_ != &_default_operation_) {
    delete operation_;
  }
  if (this != default_instance_) {
    delete environment_;
  }
}

void WorkerTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkerTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkerTask_descriptor_;
}

const WorkerTask& WorkerTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

WorkerTask* WorkerTask::default_instance_ = NULL;

WorkerTask* WorkerTask::New() const {
  return new WorkerTask;
}

void WorkerTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    job_id_ = GOOGLE_ULONGLONG(0);
    task_id_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(2)) {
      if (operation_ != &_default_operation_) {
        operation_->clear();
      }
    }
    servers_ = 0;
    generator_ = false;
    if (_has_bit(7)) {
      if (environment_ != NULL) environment_->::samson::network::Environment::Clear();
    }
  }
  input_queue_.Clear();
  output_queue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkerTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &task_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_operation;
        break;
      }
      
      // required string operation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->operation().data(), this->operation().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_input_queue;
        break;
      }
      
      // repeated .samson.network.FullQueue input_queue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_input_queue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_input_queue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_input_queue;
        if (input->ExpectTag(42)) goto parse_output_queue;
        break;
      }
      
      // repeated .samson.network.FullQueue output_queue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_output_queue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_output_queue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_output_queue;
        if (input->ExpectTag(48)) goto parse_servers;
        break;
      }
      
      // optional int32 servers = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_servers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &servers_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_generator;
        break;
      }
      
      // optional bool generator = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_generator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &generator_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_environment;
        break;
      }
      
      // optional .samson.network.Environment environment = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_environment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_environment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_job_id;
        break;
      }
      
      // required uint64 job_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &job_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorkerTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 task_id = 1;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->task_id(), output);
  }
  
  // required string operation = 2;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operation().data(), this->operation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->operation(), output);
  }
  
  // repeated .samson.network.FullQueue input_queue = 4;
  for (int i = 0; i < this->input_queue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->input_queue(i), output);
  }
  
  // repeated .samson.network.FullQueue output_queue = 5;
  for (int i = 0; i < this->output_queue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->output_queue(i), output);
  }
  
  // optional int32 servers = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->servers(), output);
  }
  
  // optional bool generator = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->generator(), output);
  }
  
  // optional .samson.network.Environment environment = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->environment(), output);
  }
  
  // required uint64 job_id = 10;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->job_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorkerTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 task_id = 1;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->task_id(), target);
  }
  
  // required string operation = 2;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operation().data(), this->operation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->operation(), target);
  }
  
  // repeated .samson.network.FullQueue input_queue = 4;
  for (int i = 0; i < this->input_queue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->input_queue(i), target);
  }
  
  // repeated .samson.network.FullQueue output_queue = 5;
  for (int i = 0; i < this->output_queue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->output_queue(i), target);
  }
  
  // optional int32 servers = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->servers(), target);
  }
  
  // optional bool generator = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->generator(), target);
  }
  
  // optional .samson.network.Environment environment = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->environment(), target);
  }
  
  // required uint64 job_id = 10;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->job_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorkerTask::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 job_id = 10;
    if (has_job_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->job_id());
    }
    
    // required uint64 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->task_id());
    }
    
    // required string operation = 2;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operation());
    }
    
    // optional int32 servers = 6;
    if (has_servers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->servers());
    }
    
    // optional bool generator = 7;
    if (has_generator()) {
      total_size += 1 + 1;
    }
    
    // optional .samson.network.Environment environment = 8;
    if (has_environment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->environment());
    }
    
  }
  // repeated .samson.network.FullQueue input_queue = 4;
  total_size += 1 * this->input_queue_size();
  for (int i = 0; i < this->input_queue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->input_queue(i));
  }
  
  // repeated .samson.network.FullQueue output_queue = 5;
  total_size += 1 * this->output_queue_size();
  for (int i = 0; i < this->output_queue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->output_queue(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkerTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkerTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkerTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkerTask::MergeFrom(const WorkerTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  input_queue_.MergeFrom(from.input_queue_);
  output_queue_.MergeFrom(from.output_queue_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_job_id(from.job_id());
    }
    if (from._has_bit(1)) {
      set_task_id(from.task_id());
    }
    if (from._has_bit(2)) {
      set_operation(from.operation());
    }
    if (from._has_bit(5)) {
      set_servers(from.servers());
    }
    if (from._has_bit(6)) {
      set_generator(from.generator());
    }
    if (from._has_bit(7)) {
      mutable_environment()->::samson::network::Environment::MergeFrom(from.environment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkerTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerTask::CopyFrom(const WorkerTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < input_queue_size(); i++) {
    if (!this->input_queue(i).IsInitialized()) return false;
  }
  for (int i = 0; i < output_queue_size(); i++) {
    if (!this->output_queue(i).IsInitialized()) return false;
  }
  if (has_environment()) {
    if (!this->environment().IsInitialized()) return false;
  }
  return true;
}

void WorkerTask::Swap(WorkerTask* other) {
  if (other != this) {
    std::swap(job_id_, other->job_id_);
    std::swap(task_id_, other->task_id_);
    std::swap(operation_, other->operation_);
    input_queue_.Swap(&other->input_queue_);
    output_queue_.Swap(&other->output_queue_);
    std::swap(servers_, other->servers_);
    std::swap(generator_, other->generator_);
    std::swap(environment_, other->environment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkerTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkerTask_descriptor_;
  metadata.reflection = WorkerTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorkerTaskKill::kTaskIdFieldNumber;
#endif  // !_MSC_VER

WorkerTaskKill::WorkerTaskKill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorkerTaskKill::InitAsDefaultInstance() {
}

WorkerTaskKill::WorkerTaskKill(const WorkerTaskKill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorkerTaskKill::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkerTaskKill::~WorkerTaskKill() {
  SharedDtor();
}

void WorkerTaskKill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorkerTaskKill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkerTaskKill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkerTaskKill_descriptor_;
}

const WorkerTaskKill& WorkerTaskKill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

WorkerTaskKill* WorkerTaskKill::default_instance_ = NULL;

WorkerTaskKill* WorkerTaskKill::New() const {
  return new WorkerTaskKill;
}

void WorkerTaskKill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkerTaskKill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &task_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorkerTaskKill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 task_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->task_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorkerTaskKill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 task_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->task_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorkerTaskKill::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->task_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkerTaskKill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkerTaskKill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkerTaskKill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkerTaskKill::MergeFrom(const WorkerTaskKill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_task_id(from.task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkerTaskKill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerTaskKill::CopyFrom(const WorkerTaskKill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerTaskKill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void WorkerTaskKill::Swap(WorkerTaskKill* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkerTaskKill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkerTaskKill_descriptor_;
  metadata.reflection = WorkerTaskKill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorkerTaskRemove::kTaskIdFieldNumber;
#endif  // !_MSC_VER

WorkerTaskRemove::WorkerTaskRemove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorkerTaskRemove::InitAsDefaultInstance() {
}

WorkerTaskRemove::WorkerTaskRemove(const WorkerTaskRemove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorkerTaskRemove::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkerTaskRemove::~WorkerTaskRemove() {
  SharedDtor();
}

void WorkerTaskRemove::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorkerTaskRemove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkerTaskRemove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkerTaskRemove_descriptor_;
}

const WorkerTaskRemove& WorkerTaskRemove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

WorkerTaskRemove* WorkerTaskRemove::default_instance_ = NULL;

WorkerTaskRemove* WorkerTaskRemove::New() const {
  return new WorkerTaskRemove;
}

void WorkerTaskRemove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkerTaskRemove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &task_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorkerTaskRemove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 task_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->task_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorkerTaskRemove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 task_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->task_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorkerTaskRemove::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->task_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkerTaskRemove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkerTaskRemove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkerTaskRemove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkerTaskRemove::MergeFrom(const WorkerTaskRemove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_task_id(from.task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkerTaskRemove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerTaskRemove::CopyFrom(const WorkerTaskRemove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerTaskRemove::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void WorkerTaskRemove::Swap(WorkerTaskRemove* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkerTaskRemove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkerTaskRemove_descriptor_;
  metadata.reflection = WorkerTaskRemove_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* WorkerTaskConfirmation_WorkerTaskConfirmationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkerTaskConfirmation_WorkerTaskConfirmationType_descriptor_;
}
bool WorkerTaskConfirmation_WorkerTaskConfirmationType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const WorkerTaskConfirmation_WorkerTaskConfirmationType WorkerTaskConfirmation::update;
const WorkerTaskConfirmation_WorkerTaskConfirmationType WorkerTaskConfirmation::finish;
const WorkerTaskConfirmation_WorkerTaskConfirmationType WorkerTaskConfirmation::complete;
const WorkerTaskConfirmation_WorkerTaskConfirmationType WorkerTaskConfirmation::error;
const WorkerTaskConfirmation_WorkerTaskConfirmationType WorkerTaskConfirmation::WorkerTaskConfirmationType_MIN;
const WorkerTaskConfirmation_WorkerTaskConfirmationType WorkerTaskConfirmation::WorkerTaskConfirmationType_MAX;
const int WorkerTaskConfirmation::WorkerTaskConfirmationType_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string WorkerTaskConfirmation::_default_error_message_;
#ifndef _MSC_VER
const int WorkerTaskConfirmation::kTaskIdFieldNumber;
const int WorkerTaskConfirmation::kTypeFieldNumber;
const int WorkerTaskConfirmation::kAddFileFieldNumber;
const int WorkerTaskConfirmation::kRemoveFileFieldNumber;
const int WorkerTaskConfirmation::kNumItemsFieldNumber;
const int WorkerTaskConfirmation::kNumFinishedItemsFieldNumber;
const int WorkerTaskConfirmation::kErrorMessageFieldNumber;
const int WorkerTaskConfirmation::kProgressRunningFieldNumber;
const int WorkerTaskConfirmation::kProgressProcessedFieldNumber;
#endif  // !_MSC_VER

WorkerTaskConfirmation::WorkerTaskConfirmation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorkerTaskConfirmation::InitAsDefaultInstance() {
  progressrunning_ = const_cast< ::samson::network::KVInfo*>(&::samson::network::KVInfo::default_instance());
  progressprocessed_ = const_cast< ::samson::network::KVInfo*>(&::samson::network::KVInfo::default_instance());
}

WorkerTaskConfirmation::WorkerTaskConfirmation(const WorkerTaskConfirmation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorkerTaskConfirmation::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = GOOGLE_LONGLONG(0);
  type_ = 1;
  num_items_ = 0;
  num_finished_items_ = 0;
  error_message_ = const_cast< ::std::string*>(&_default_error_message_);
  progressrunning_ = NULL;
  progressprocessed_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkerTaskConfirmation::~WorkerTaskConfirmation() {
  SharedDtor();
}

void WorkerTaskConfirmation::SharedDtor() {
  if (error_message_ != &_default_error_message_) {
    delete error_message_;
  }
  if (this != default_instance_) {
    delete progressrunning_;
    delete progressprocessed_;
  }
}

void WorkerTaskConfirmation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkerTaskConfirmation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkerTaskConfirmation_descriptor_;
}

const WorkerTaskConfirmation& WorkerTaskConfirmation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

WorkerTaskConfirmation* WorkerTaskConfirmation::default_instance_ = NULL;

WorkerTaskConfirmation* WorkerTaskConfirmation::New() const {
  return new WorkerTaskConfirmation;
}

void WorkerTaskConfirmation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = GOOGLE_LONGLONG(0);
    type_ = 1;
    num_items_ = 0;
    num_finished_items_ = 0;
    if (_has_bit(6)) {
      if (error_message_ != &_default_error_message_) {
        error_message_->clear();
      }
    }
    if (_has_bit(7)) {
      if (progressrunning_ != NULL) progressrunning_->::samson::network::KVInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (progressprocessed_ != NULL) progressprocessed_->::samson::network::KVInfo::Clear();
    }
  }
  add_file_.Clear();
  remove_file_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkerTaskConfirmation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &task_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required .samson.network.WorkerTaskConfirmation.WorkerTaskConfirmationType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::samson::network::WorkerTaskConfirmation_WorkerTaskConfirmationType_IsValid(value)) {
            set_type(static_cast< ::samson::network::WorkerTaskConfirmation_WorkerTaskConfirmationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_add_file;
        break;
      }
      
      // repeated .samson.network.QueueFile add_file = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_add_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_add_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_add_file;
        if (input->ExpectTag(34)) goto parse_remove_file;
        break;
      }
      
      // repeated .samson.network.QueueFile remove_file = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remove_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_remove_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_remove_file;
        if (input->ExpectTag(40)) goto parse_num_items;
        break;
      }
      
      // optional int32 num_items = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_items:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_items_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_num_finished_items;
        break;
      }
      
      // optional int32 num_finished_items = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_finished_items:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_finished_items_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_error_message;
        break;
      }
      
      // optional string error_message = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_message().data(), this->error_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_progressRunning;
        break;
      }
      
      // optional .samson.network.KVInfo progressRunning = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_progressRunning:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_progressrunning()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_progressProcessed;
        break;
      }
      
      // optional .samson.network.KVInfo progressProcessed = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_progressProcessed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_progressprocessed()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorkerTaskConfirmation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 task_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->task_id(), output);
  }
  
  // required .samson.network.WorkerTaskConfirmation.WorkerTaskConfirmationType type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  // repeated .samson.network.QueueFile add_file = 3;
  for (int i = 0; i < this->add_file_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->add_file(i), output);
  }
  
  // repeated .samson.network.QueueFile remove_file = 4;
  for (int i = 0; i < this->remove_file_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->remove_file(i), output);
  }
  
  // optional int32 num_items = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->num_items(), output);
  }
  
  // optional int32 num_finished_items = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->num_finished_items(), output);
  }
  
  // optional string error_message = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->error_message(), output);
  }
  
  // optional .samson.network.KVInfo progressRunning = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->progressrunning(), output);
  }
  
  // optional .samson.network.KVInfo progressProcessed = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->progressprocessed(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorkerTaskConfirmation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 task_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->task_id(), target);
  }
  
  // required .samson.network.WorkerTaskConfirmation.WorkerTaskConfirmationType type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  // repeated .samson.network.QueueFile add_file = 3;
  for (int i = 0; i < this->add_file_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->add_file(i), target);
  }
  
  // repeated .samson.network.QueueFile remove_file = 4;
  for (int i = 0; i < this->remove_file_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->remove_file(i), target);
  }
  
  // optional int32 num_items = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->num_items(), target);
  }
  
  // optional int32 num_finished_items = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->num_finished_items(), target);
  }
  
  // optional string error_message = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->error_message(), target);
  }
  
  // optional .samson.network.KVInfo progressRunning = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->progressrunning(), target);
  }
  
  // optional .samson.network.KVInfo progressProcessed = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->progressprocessed(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorkerTaskConfirmation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->task_id());
    }
    
    // required .samson.network.WorkerTaskConfirmation.WorkerTaskConfirmationType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional int32 num_items = 5;
    if (has_num_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_items());
    }
    
    // optional int32 num_finished_items = 6;
    if (has_num_finished_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_finished_items());
    }
    
    // optional string error_message = 7;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }
    
    // optional .samson.network.KVInfo progressRunning = 8;
    if (has_progressrunning()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->progressrunning());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .samson.network.KVInfo progressProcessed = 9;
    if (has_progressprocessed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->progressprocessed());
    }
    
  }
  // repeated .samson.network.QueueFile add_file = 3;
  total_size += 1 * this->add_file_size();
  for (int i = 0; i < this->add_file_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->add_file(i));
  }
  
  // repeated .samson.network.QueueFile remove_file = 4;
  total_size += 1 * this->remove_file_size();
  for (int i = 0; i < this->remove_file_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->remove_file(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkerTaskConfirmation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkerTaskConfirmation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkerTaskConfirmation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkerTaskConfirmation::MergeFrom(const WorkerTaskConfirmation& from) {
  GOOGLE_CHECK_NE(&from, this);
  add_file_.MergeFrom(from.add_file_);
  remove_file_.MergeFrom(from.remove_file_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_task_id(from.task_id());
    }
    if (from._has_bit(1)) {
      set_type(from.type());
    }
    if (from._has_bit(4)) {
      set_num_items(from.num_items());
    }
    if (from._has_bit(5)) {
      set_num_finished_items(from.num_finished_items());
    }
    if (from._has_bit(6)) {
      set_error_message(from.error_message());
    }
    if (from._has_bit(7)) {
      mutable_progressrunning()->::samson::network::KVInfo::MergeFrom(from.progressrunning());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      mutable_progressprocessed()->::samson::network::KVInfo::MergeFrom(from.progressprocessed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkerTaskConfirmation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerTaskConfirmation::CopyFrom(const WorkerTaskConfirmation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerTaskConfirmation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < add_file_size(); i++) {
    if (!this->add_file(i).IsInitialized()) return false;
  }
  for (int i = 0; i < remove_file_size(); i++) {
    if (!this->remove_file(i).IsInitialized()) return false;
  }
  if (has_progressrunning()) {
    if (!this->progressrunning().IsInitialized()) return false;
  }
  if (has_progressprocessed()) {
    if (!this->progressprocessed().IsInitialized()) return false;
  }
  return true;
}

void WorkerTaskConfirmation::Swap(WorkerTaskConfirmation* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(type_, other->type_);
    add_file_.Swap(&other->add_file_);
    remove_file_.Swap(&other->remove_file_);
    std::swap(num_items_, other->num_items_);
    std::swap(num_finished_items_, other->num_finished_items_);
    std::swap(error_message_, other->error_message_);
    std::swap(progressrunning_, other->progressrunning_);
    std::swap(progressprocessed_, other->progressprocessed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkerTaskConfirmation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkerTaskConfirmation_descriptor_;
  metadata.reflection = WorkerTaskConfirmation_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Command::_default_command_;
#ifndef _MSC_VER
const int Command::kCommandFieldNumber;
const int Command::kEnvironmentFieldNumber;
#endif  // !_MSC_VER

Command::Command()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Command::InitAsDefaultInstance() {
  environment_ = const_cast< ::samson::network::Environment*>(&::samson::network::Environment::default_instance());
}

Command::Command(const Command& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Command::SharedCtor() {
  _cached_size_ = 0;
  command_ = const_cast< ::std::string*>(&_default_command_);
  environment_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Command::~Command() {
  SharedDtor();
}

void Command::SharedDtor() {
  if (command_ != &_default_command_) {
    delete command_;
  }
  if (this != default_instance_) {
    delete environment_;
  }
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_descriptor_;
}

const Command& Command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

Command* Command::default_instance_ = NULL;

Command* Command::New() const {
  return new Command;
}

void Command::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (command_ != &_default_command_) {
        command_->clear();
      }
    }
    if (_has_bit(1)) {
      if (environment_ != NULL) environment_->::samson::network::Environment::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->command().data(), this->command().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_environment;
        break;
      }
      
      // optional .samson.network.Environment environment = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_environment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_environment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string command = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->command(), output);
  }
  
  // optional .samson.network.Environment environment = 3;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->environment(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Command::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string command = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->command(), target);
  }
  
  // optional .samson.network.Environment environment = 3;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->environment(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Command::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command());
    }
    
    // optional .samson.network.Environment environment = 3;
    if (has_environment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->environment());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Command* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Command*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_command(from.command());
    }
    if (from._has_bit(1)) {
      mutable_environment()->::samson::network::Environment::MergeFrom(from.environment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_environment()) {
    if (!this->environment().IsInitialized()) return false;
  }
  return true;
}

void Command::Swap(Command* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(environment_, other->environment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Command_descriptor_;
  metadata.reflection = Command_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CommandResponse::_default_command_;
const ::std::string CommandResponse::_default_error_message_;
#ifndef _MSC_VER
const int CommandResponse::kCommandFieldNumber;
const int CommandResponse::kNewJobIdFieldNumber;
const int CommandResponse::kFinishJobIdFieldNumber;
const int CommandResponse::kErrorJobIdFieldNumber;
const int CommandResponse::kErrorMessageFieldNumber;
const int CommandResponse::kEllapsedSecondsFieldNumber;
const int CommandResponse::kFinishCommandFieldNumber;
const int CommandResponse::kJobListFieldNumber;
const int CommandResponse::kOperationListFieldNumber;
const int CommandResponse::kDataListFieldNumber;
const int CommandResponse::kQueueListFieldNumber;
const int CommandResponse::kAutomaticOperationListFieldNumber;
const int CommandResponse::kSamsonStatusFieldNumber;
#endif  // !_MSC_VER

CommandResponse::CommandResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandResponse::InitAsDefaultInstance() {
  job_list_ = const_cast< ::samson::network::JobList*>(&::samson::network::JobList::default_instance());
  operation_list_ = const_cast< ::samson::network::OperationList*>(&::samson::network::OperationList::default_instance());
  data_list_ = const_cast< ::samson::network::DataList*>(&::samson::network::DataList::default_instance());
  queue_list_ = const_cast< ::samson::network::QueueList*>(&::samson::network::QueueList::default_instance());
  automatic_operation_list_ = const_cast< ::samson::network::AutomaticOperationList*>(&::samson::network::AutomaticOperationList::default_instance());
  samson_status_ = const_cast< ::samson::network::SamsonStatus*>(&::samson::network::SamsonStatus::default_instance());
}

CommandResponse::CommandResponse(const CommandResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandResponse::SharedCtor() {
  _cached_size_ = 0;
  command_ = const_cast< ::std::string*>(&_default_command_);
  new_job_id_ = GOOGLE_ULONGLONG(0);
  finish_job_id_ = GOOGLE_ULONGLONG(0);
  error_job_id_ = GOOGLE_ULONGLONG(0);
  error_message_ = const_cast< ::std::string*>(&_default_error_message_);
  ellapsed_seconds_ = 0;
  finish_command_ = false;
  job_list_ = NULL;
  operation_list_ = NULL;
  data_list_ = NULL;
  queue_list_ = NULL;
  automatic_operation_list_ = NULL;
  samson_status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandResponse::~CommandResponse() {
  SharedDtor();
}

void CommandResponse::SharedDtor() {
  if (command_ != &_default_command_) {
    delete command_;
  }
  if (error_message_ != &_default_error_message_) {
    delete error_message_;
  }
  if (this != default_instance_) {
    delete job_list_;
    delete operation_list_;
    delete data_list_;
    delete queue_list_;
    delete automatic_operation_list_;
    delete samson_status_;
  }
}

void CommandResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandResponse_descriptor_;
}

const CommandResponse& CommandResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

CommandResponse* CommandResponse::default_instance_ = NULL;

CommandResponse* CommandResponse::New() const {
  return new CommandResponse;
}

void CommandResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (command_ != &_default_command_) {
        command_->clear();
      }
    }
    new_job_id_ = GOOGLE_ULONGLONG(0);
    finish_job_id_ = GOOGLE_ULONGLONG(0);
    error_job_id_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(4)) {
      if (error_message_ != &_default_error_message_) {
        error_message_->clear();
      }
    }
    ellapsed_seconds_ = 0;
    finish_command_ = false;
    if (_has_bit(7)) {
      if (job_list_ != NULL) job_list_->::samson::network::JobList::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (operation_list_ != NULL) operation_list_->::samson::network::OperationList::Clear();
    }
    if (_has_bit(9)) {
      if (data_list_ != NULL) data_list_->::samson::network::DataList::Clear();
    }
    if (_has_bit(10)) {
      if (queue_list_ != NULL) queue_list_->::samson::network::QueueList::Clear();
    }
    if (_has_bit(11)) {
      if (automatic_operation_list_ != NULL) automatic_operation_list_->::samson::network::AutomaticOperationList::Clear();
    }
    if (_has_bit(12)) {
      if (samson_status_ != NULL) samson_status_->::samson::network::SamsonStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->command().data(), this->command().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_new_job_id;
        break;
      }
      
      // optional uint64 new_job_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_job_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &new_job_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_error_message;
        break;
      }
      
      // optional string error_message = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_message().data(), this->error_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_finish_job_id;
        break;
      }
      
      // optional uint64 finish_job_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish_job_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &finish_job_id_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_error_job_id;
        break;
      }
      
      // optional uint64 error_job_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_job_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &error_job_id_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_ellapsed_seconds;
        break;
      }
      
      // optional int32 ellapsed_seconds = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ellapsed_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ellapsed_seconds_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_finish_command;
        break;
      }
      
      // optional bool finish_command = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish_command:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finish_command_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_job_list;
        break;
      }
      
      // optional .samson.network.JobList job_list = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_job_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_job_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(810)) goto parse_operation_list;
        break;
      }
      
      // optional .samson.network.OperationList operation_list = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operation_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operation_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_data_list;
        break;
      }
      
      // optional .samson.network.DataList data_list = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(826)) goto parse_queue_list;
        break;
      }
      
      // optional .samson.network.QueueList queue_list = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_queue_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queue_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(834)) goto parse_samson_status;
        break;
      }
      
      // optional .samson.network.SamsonStatus samson_status = 104;
      case 104: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_samson_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_samson_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(858)) goto parse_automatic_operation_list;
        break;
      }
      
      // optional .samson.network.AutomaticOperationList automatic_operation_list = 107;
      case 107: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_automatic_operation_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_automatic_operation_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string command = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->command(), output);
  }
  
  // optional uint64 new_job_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->new_job_id(), output);
  }
  
  // optional string error_message = 10;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->error_message(), output);
  }
  
  // optional uint64 finish_job_id = 11;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->finish_job_id(), output);
  }
  
  // optional uint64 error_job_id = 12;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->error_job_id(), output);
  }
  
  // optional int32 ellapsed_seconds = 15;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->ellapsed_seconds(), output);
  }
  
  // optional bool finish_command = 16;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->finish_command(), output);
  }
  
  // optional .samson.network.JobList job_list = 100;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->job_list(), output);
  }
  
  // optional .samson.network.OperationList operation_list = 101;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->operation_list(), output);
  }
  
  // optional .samson.network.DataList data_list = 102;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, this->data_list(), output);
  }
  
  // optional .samson.network.QueueList queue_list = 103;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, this->queue_list(), output);
  }
  
  // optional .samson.network.SamsonStatus samson_status = 104;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      104, this->samson_status(), output);
  }
  
  // optional .samson.network.AutomaticOperationList automatic_operation_list = 107;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      107, this->automatic_operation_list(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string command = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->command(), target);
  }
  
  // optional uint64 new_job_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->new_job_id(), target);
  }
  
  // optional string error_message = 10;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->error_message(), target);
  }
  
  // optional uint64 finish_job_id = 11;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->finish_job_id(), target);
  }
  
  // optional uint64 error_job_id = 12;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->error_job_id(), target);
  }
  
  // optional int32 ellapsed_seconds = 15;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->ellapsed_seconds(), target);
  }
  
  // optional bool finish_command = 16;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->finish_command(), target);
  }
  
  // optional .samson.network.JobList job_list = 100;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->job_list(), target);
  }
  
  // optional .samson.network.OperationList operation_list = 101;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->operation_list(), target);
  }
  
  // optional .samson.network.DataList data_list = 102;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        102, this->data_list(), target);
  }
  
  // optional .samson.network.QueueList queue_list = 103;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        103, this->queue_list(), target);
  }
  
  // optional .samson.network.SamsonStatus samson_status = 104;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        104, this->samson_status(), target);
  }
  
  // optional .samson.network.AutomaticOperationList automatic_operation_list = 107;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        107, this->automatic_operation_list(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command());
    }
    
    // optional uint64 new_job_id = 2;
    if (has_new_job_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->new_job_id());
    }
    
    // optional uint64 finish_job_id = 11;
    if (has_finish_job_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->finish_job_id());
    }
    
    // optional uint64 error_job_id = 12;
    if (has_error_job_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->error_job_id());
    }
    
    // optional string error_message = 10;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }
    
    // optional int32 ellapsed_seconds = 15;
    if (has_ellapsed_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ellapsed_seconds());
    }
    
    // optional bool finish_command = 16;
    if (has_finish_command()) {
      total_size += 2 + 1;
    }
    
    // optional .samson.network.JobList job_list = 100;
    if (has_job_list()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->job_list());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .samson.network.OperationList operation_list = 101;
    if (has_operation_list()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->operation_list());
    }
    
    // optional .samson.network.DataList data_list = 102;
    if (has_data_list()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data_list());
    }
    
    // optional .samson.network.QueueList queue_list = 103;
    if (has_queue_list()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queue_list());
    }
    
    // optional .samson.network.AutomaticOperationList automatic_operation_list = 107;
    if (has_automatic_operation_list()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->automatic_operation_list());
    }
    
    // optional .samson.network.SamsonStatus samson_status = 104;
    if (has_samson_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->samson_status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandResponse::MergeFrom(const CommandResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_command(from.command());
    }
    if (from._has_bit(1)) {
      set_new_job_id(from.new_job_id());
    }
    if (from._has_bit(2)) {
      set_finish_job_id(from.finish_job_id());
    }
    if (from._has_bit(3)) {
      set_error_job_id(from.error_job_id());
    }
    if (from._has_bit(4)) {
      set_error_message(from.error_message());
    }
    if (from._has_bit(5)) {
      set_ellapsed_seconds(from.ellapsed_seconds());
    }
    if (from._has_bit(6)) {
      set_finish_command(from.finish_command());
    }
    if (from._has_bit(7)) {
      mutable_job_list()->::samson::network::JobList::MergeFrom(from.job_list());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      mutable_operation_list()->::samson::network::OperationList::MergeFrom(from.operation_list());
    }
    if (from._has_bit(9)) {
      mutable_data_list()->::samson::network::DataList::MergeFrom(from.data_list());
    }
    if (from._has_bit(10)) {
      mutable_queue_list()->::samson::network::QueueList::MergeFrom(from.queue_list());
    }
    if (from._has_bit(11)) {
      mutable_automatic_operation_list()->::samson::network::AutomaticOperationList::MergeFrom(from.automatic_operation_list());
    }
    if (from._has_bit(12)) {
      mutable_samson_status()->::samson::network::SamsonStatus::MergeFrom(from.samson_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandResponse::CopyFrom(const CommandResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_job_list()) {
    if (!this->job_list().IsInitialized()) return false;
  }
  if (has_operation_list()) {
    if (!this->operation_list().IsInitialized()) return false;
  }
  if (has_data_list()) {
    if (!this->data_list().IsInitialized()) return false;
  }
  if (has_queue_list()) {
    if (!this->queue_list().IsInitialized()) return false;
  }
  if (has_automatic_operation_list()) {
    if (!this->automatic_operation_list().IsInitialized()) return false;
  }
  if (has_samson_status()) {
    if (!this->samson_status().IsInitialized()) return false;
  }
  return true;
}

void CommandResponse::Swap(CommandResponse* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(new_job_id_, other->new_job_id_);
    std::swap(finish_job_id_, other->finish_job_id_);
    std::swap(error_job_id_, other->error_job_id_);
    std::swap(error_message_, other->error_message_);
    std::swap(ellapsed_seconds_, other->ellapsed_seconds_);
    std::swap(finish_command_, other->finish_command_);
    std::swap(job_list_, other->job_list_);
    std::swap(operation_list_, other->operation_list_);
    std::swap(data_list_, other->data_list_);
    std::swap(queue_list_, other->queue_list_);
    std::swap(automatic_operation_list_, other->automatic_operation_list_);
    std::swap(samson_status_, other->samson_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandResponse_descriptor_;
  metadata.reflection = CommandResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorkerDataExchange::kTaskIdFieldNumber;
const int WorkerDataExchange::kQueueFieldNumber;
const int WorkerDataExchange::kTxtFieldNumber;
const int WorkerDataExchange::kWorkerFieldNumber;
const int WorkerDataExchange::kHgSetFieldNumber;
const int WorkerDataExchange::kFinishFieldNumber;
#endif  // !_MSC_VER

WorkerDataExchange::WorkerDataExchange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorkerDataExchange::InitAsDefaultInstance() {
  queue_ = const_cast< ::samson::network::Queue*>(&::samson::network::Queue::default_instance());
}

WorkerDataExchange::WorkerDataExchange(const WorkerDataExchange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorkerDataExchange::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = GOOGLE_LONGLONG(0);
  queue_ = NULL;
  txt_ = false;
  worker_ = 0;
  hg_set_ = 0;
  finish_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkerDataExchange::~WorkerDataExchange() {
  SharedDtor();
}

void WorkerDataExchange::SharedDtor() {
  if (this != default_instance_) {
    delete queue_;
  }
}

void WorkerDataExchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkerDataExchange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkerDataExchange_descriptor_;
}

const WorkerDataExchange& WorkerDataExchange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

WorkerDataExchange* WorkerDataExchange::default_instance_ = NULL;

WorkerDataExchange* WorkerDataExchange::New() const {
  return new WorkerDataExchange;
}

void WorkerDataExchange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = GOOGLE_LONGLONG(0);
    if (_has_bit(1)) {
      if (queue_ != NULL) queue_->::samson::network::Queue::Clear();
    }
    txt_ = false;
    worker_ = 0;
    hg_set_ = 0;
    finish_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkerDataExchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &task_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_queue;
        break;
      }
      
      // required .samson.network.Queue queue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_queue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_txt;
        break;
      }
      
      // required bool txt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_txt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &txt_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_worker;
        break;
      }
      
      // required int32 worker = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_worker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &worker_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hg_set;
        break;
      }
      
      // required int32 hg_set = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hg_set:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hg_set_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_finish;
        break;
      }
      
      // required bool finish = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finish_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorkerDataExchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 task_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->task_id(), output);
  }
  
  // required .samson.network.Queue queue = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->queue(), output);
  }
  
  // required bool txt = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->txt(), output);
  }
  
  // required int32 worker = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->worker(), output);
  }
  
  // required int32 hg_set = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hg_set(), output);
  }
  
  // required bool finish = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->finish(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorkerDataExchange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 task_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->task_id(), target);
  }
  
  // required .samson.network.Queue queue = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->queue(), target);
  }
  
  // required bool txt = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->txt(), target);
  }
  
  // required int32 worker = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->worker(), target);
  }
  
  // required int32 hg_set = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hg_set(), target);
  }
  
  // required bool finish = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->finish(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorkerDataExchange::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->task_id());
    }
    
    // required .samson.network.Queue queue = 2;
    if (has_queue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queue());
    }
    
    // required bool txt = 3;
    if (has_txt()) {
      total_size += 1 + 1;
    }
    
    // required int32 worker = 4;
    if (has_worker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->worker());
    }
    
    // required int32 hg_set = 5;
    if (has_hg_set()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hg_set());
    }
    
    // required bool finish = 6;
    if (has_finish()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkerDataExchange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkerDataExchange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkerDataExchange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkerDataExchange::MergeFrom(const WorkerDataExchange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_task_id(from.task_id());
    }
    if (from._has_bit(1)) {
      mutable_queue()->::samson::network::Queue::MergeFrom(from.queue());
    }
    if (from._has_bit(2)) {
      set_txt(from.txt());
    }
    if (from._has_bit(3)) {
      set_worker(from.worker());
    }
    if (from._has_bit(4)) {
      set_hg_set(from.hg_set());
    }
    if (from._has_bit(5)) {
      set_finish(from.finish());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkerDataExchange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerDataExchange::CopyFrom(const WorkerDataExchange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerDataExchange::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  if (has_queue()) {
    if (!this->queue().IsInitialized()) return false;
  }
  return true;
}

void WorkerDataExchange::Swap(WorkerDataExchange* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(queue_, other->queue_);
    std::swap(txt_, other->txt_);
    std::swap(worker_, other->worker_);
    std::swap(hg_set_, other->hg_set_);
    std::swap(finish_, other->finish_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkerDataExchange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkerDataExchange_descriptor_;
  metadata.reflection = WorkerDataExchange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorkerDataExchangeClose::kTaskIdFieldNumber;
#endif  // !_MSC_VER

WorkerDataExchangeClose::WorkerDataExchangeClose()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorkerDataExchangeClose::InitAsDefaultInstance() {
}

WorkerDataExchangeClose::WorkerDataExchangeClose(const WorkerDataExchangeClose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorkerDataExchangeClose::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkerDataExchangeClose::~WorkerDataExchangeClose() {
  SharedDtor();
}

void WorkerDataExchangeClose::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorkerDataExchangeClose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkerDataExchangeClose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkerDataExchangeClose_descriptor_;
}

const WorkerDataExchangeClose& WorkerDataExchangeClose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

WorkerDataExchangeClose* WorkerDataExchangeClose::default_instance_ = NULL;

WorkerDataExchangeClose* WorkerDataExchangeClose::New() const {
  return new WorkerDataExchangeClose;
}

void WorkerDataExchangeClose::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkerDataExchangeClose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &task_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorkerDataExchangeClose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 task_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->task_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorkerDataExchangeClose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 task_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->task_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorkerDataExchangeClose::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->task_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkerDataExchangeClose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkerDataExchangeClose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkerDataExchangeClose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkerDataExchangeClose::MergeFrom(const WorkerDataExchangeClose& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_task_id(from.task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkerDataExchangeClose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerDataExchangeClose::CopyFrom(const WorkerDataExchangeClose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerDataExchangeClose::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void WorkerDataExchangeClose::Swap(WorkerDataExchangeClose* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkerDataExchangeClose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkerDataExchangeClose_descriptor_;
  metadata.reflection = WorkerDataExchangeClose_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string UploadDataInit::_default_queue_;
#ifndef _MSC_VER
const int UploadDataInit::kQueueFieldNumber;
#endif  // !_MSC_VER

UploadDataInit::UploadDataInit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UploadDataInit::InitAsDefaultInstance() {
}

UploadDataInit::UploadDataInit(const UploadDataInit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UploadDataInit::SharedCtor() {
  _cached_size_ = 0;
  queue_ = const_cast< ::std::string*>(&_default_queue_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadDataInit::~UploadDataInit() {
  SharedDtor();
}

void UploadDataInit::SharedDtor() {
  if (queue_ != &_default_queue_) {
    delete queue_;
  }
  if (this != default_instance_) {
  }
}

void UploadDataInit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadDataInit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadDataInit_descriptor_;
}

const UploadDataInit& UploadDataInit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

UploadDataInit* UploadDataInit::default_instance_ = NULL;

UploadDataInit* UploadDataInit::New() const {
  return new UploadDataInit;
}

void UploadDataInit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (queue_ != &_default_queue_) {
        queue_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UploadDataInit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string queue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->queue().data(), this->queue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UploadDataInit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string queue = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->queue().data(), this->queue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->queue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UploadDataInit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string queue = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->queue().data(), this->queue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->queue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UploadDataInit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string queue = 1;
    if (has_queue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->queue());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadDataInit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UploadDataInit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadDataInit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadDataInit::MergeFrom(const UploadDataInit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_queue(from.queue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UploadDataInit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadDataInit::CopyFrom(const UploadDataInit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadDataInit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void UploadDataInit::Swap(UploadDataInit* other) {
  if (other != this) {
    std::swap(queue_, other->queue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UploadDataInit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadDataInit_descriptor_;
  metadata.reflection = UploadDataInit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UploadDataInitResponse::kQueryFieldNumber;
const int UploadDataInitResponse::kLoadIdFieldNumber;
const int UploadDataInitResponse::kErrorFieldNumber;
#endif  // !_MSC_VER

UploadDataInitResponse::UploadDataInitResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UploadDataInitResponse::InitAsDefaultInstance() {
  query_ = const_cast< ::samson::network::UploadDataInit*>(&::samson::network::UploadDataInit::default_instance());
  error_ = const_cast< ::samson::network::Error*>(&::samson::network::Error::default_instance());
}

UploadDataInitResponse::UploadDataInitResponse(const UploadDataInitResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UploadDataInitResponse::SharedCtor() {
  _cached_size_ = 0;
  query_ = NULL;
  load_id_ = GOOGLE_ULONGLONG(0);
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadDataInitResponse::~UploadDataInitResponse() {
  SharedDtor();
}

void UploadDataInitResponse::SharedDtor() {
  if (this != default_instance_) {
    delete query_;
    delete error_;
  }
}

void UploadDataInitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadDataInitResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadDataInitResponse_descriptor_;
}

const UploadDataInitResponse& UploadDataInitResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

UploadDataInitResponse* UploadDataInitResponse::default_instance_ = NULL;

UploadDataInitResponse* UploadDataInitResponse::New() const {
  return new UploadDataInitResponse;
}

void UploadDataInitResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (query_ != NULL) query_->::samson::network::UploadDataInit::Clear();
    }
    load_id_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(2)) {
      if (error_ != NULL) error_->::samson::network::Error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UploadDataInitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .samson.network.UploadDataInit query = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_load_id;
        break;
      }
      
      // required uint64 load_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_load_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &load_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_error;
        break;
      }
      
      // optional .samson.network.Error error = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UploadDataInitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .samson.network.UploadDataInit query = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->query(), output);
  }
  
  // required uint64 load_id = 3;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->load_id(), output);
  }
  
  // optional .samson.network.Error error = 100;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UploadDataInitResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .samson.network.UploadDataInit query = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->query(), target);
  }
  
  // required uint64 load_id = 3;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->load_id(), target);
  }
  
  // optional .samson.network.Error error = 100;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UploadDataInitResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .samson.network.UploadDataInit query = 1;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->query());
    }
    
    // required uint64 load_id = 3;
    if (has_load_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->load_id());
    }
    
    // optional .samson.network.Error error = 100;
    if (has_error()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadDataInitResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UploadDataInitResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadDataInitResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadDataInitResponse::MergeFrom(const UploadDataInitResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_query()->::samson::network::UploadDataInit::MergeFrom(from.query());
    }
    if (from._has_bit(1)) {
      set_load_id(from.load_id());
    }
    if (from._has_bit(2)) {
      mutable_error()->::samson::network::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UploadDataInitResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadDataInitResponse::CopyFrom(const UploadDataInitResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadDataInitResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_query()) {
    if (!this->query().IsInitialized()) return false;
  }
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void UploadDataInitResponse::Swap(UploadDataInitResponse* other) {
  if (other != this) {
    std::swap(query_, other->query_);
    std::swap(load_id_, other->load_id_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UploadDataInitResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadDataInitResponse_descriptor_;
  metadata.reflection = UploadDataInitResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string UploadDataFile::_default_file_ext_;
#ifndef _MSC_VER
const int UploadDataFile::kLoadIdFieldNumber;
const int UploadDataFile::kFileIdFieldNumber;
const int UploadDataFile::kFileSizeFieldNumber;
const int UploadDataFile::kFileExtFieldNumber;
#endif  // !_MSC_VER

UploadDataFile::UploadDataFile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UploadDataFile::InitAsDefaultInstance() {
}

UploadDataFile::UploadDataFile(const UploadDataFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UploadDataFile::SharedCtor() {
  _cached_size_ = 0;
  load_id_ = GOOGLE_ULONGLONG(0);
  file_id_ = GOOGLE_ULONGLONG(0);
  file_size_ = GOOGLE_ULONGLONG(0);
  file_ext_ = const_cast< ::std::string*>(&_default_file_ext_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadDataFile::~UploadDataFile() {
  SharedDtor();
}

void UploadDataFile::SharedDtor() {
  if (file_ext_ != &_default_file_ext_) {
    delete file_ext_;
  }
  if (this != default_instance_) {
  }
}

void UploadDataFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadDataFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadDataFile_descriptor_;
}

const UploadDataFile& UploadDataFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

UploadDataFile* UploadDataFile::default_instance_ = NULL;

UploadDataFile* UploadDataFile::New() const {
  return new UploadDataFile;
}

void UploadDataFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    load_id_ = GOOGLE_ULONGLONG(0);
    file_id_ = GOOGLE_ULONGLONG(0);
    file_size_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(3)) {
      if (file_ext_ != &_default_file_ext_) {
        file_ext_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UploadDataFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 load_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &load_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_file_id;
        break;
      }
      
      // required uint64 file_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_file_size;
        break;
      }
      
      // required uint64 file_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_size_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_file_ext;
        break;
      }
      
      // required string file_ext = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_ext:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_ext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_ext().data(), this->file_ext().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UploadDataFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 load_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->load_id(), output);
  }
  
  // required uint64 file_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->file_id(), output);
  }
  
  // required uint64 file_size = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->file_size(), output);
  }
  
  // required string file_ext = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_ext().data(), this->file_ext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->file_ext(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UploadDataFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 load_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->load_id(), target);
  }
  
  // required uint64 file_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->file_id(), target);
  }
  
  // required uint64 file_size = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->file_size(), target);
  }
  
  // required string file_ext = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_ext().data(), this->file_ext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->file_ext(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UploadDataFile::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 load_id = 1;
    if (has_load_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->load_id());
    }
    
    // required uint64 file_id = 2;
    if (has_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->file_id());
    }
    
    // required uint64 file_size = 3;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->file_size());
    }
    
    // required string file_ext = 4;
    if (has_file_ext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_ext());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadDataFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UploadDataFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadDataFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadDataFile::MergeFrom(const UploadDataFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_load_id(from.load_id());
    }
    if (from._has_bit(1)) {
      set_file_id(from.file_id());
    }
    if (from._has_bit(2)) {
      set_file_size(from.file_size());
    }
    if (from._has_bit(3)) {
      set_file_ext(from.file_ext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UploadDataFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadDataFile::CopyFrom(const UploadDataFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadDataFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void UploadDataFile::Swap(UploadDataFile* other) {
  if (other != this) {
    std::swap(load_id_, other->load_id_);
    std::swap(file_id_, other->file_id_);
    std::swap(file_size_, other->file_size_);
    std::swap(file_ext_, other->file_ext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UploadDataFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadDataFile_descriptor_;
  metadata.reflection = UploadDataFile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UploadDataFileResponse::kQueryFieldNumber;
const int UploadDataFileResponse::kFileFieldNumber;
const int UploadDataFileResponse::kErrorFieldNumber;
#endif  // !_MSC_VER

UploadDataFileResponse::UploadDataFileResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UploadDataFileResponse::InitAsDefaultInstance() {
  query_ = const_cast< ::samson::network::UploadDataFile*>(&::samson::network::UploadDataFile::default_instance());
  file_ = const_cast< ::samson::network::File*>(&::samson::network::File::default_instance());
  error_ = const_cast< ::samson::network::Error*>(&::samson::network::Error::default_instance());
}

UploadDataFileResponse::UploadDataFileResponse(const UploadDataFileResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UploadDataFileResponse::SharedCtor() {
  _cached_size_ = 0;
  query_ = NULL;
  file_ = NULL;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadDataFileResponse::~UploadDataFileResponse() {
  SharedDtor();
}

void UploadDataFileResponse::SharedDtor() {
  if (this != default_instance_) {
    delete query_;
    delete file_;
    delete error_;
  }
}

void UploadDataFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadDataFileResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadDataFileResponse_descriptor_;
}

const UploadDataFileResponse& UploadDataFileResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

UploadDataFileResponse* UploadDataFileResponse::default_instance_ = NULL;

UploadDataFileResponse* UploadDataFileResponse::New() const {
  return new UploadDataFileResponse;
}

void UploadDataFileResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (query_ != NULL) query_->::samson::network::UploadDataFile::Clear();
    }
    if (_has_bit(1)) {
      if (file_ != NULL) file_->::samson::network::File::Clear();
    }
    if (_has_bit(2)) {
      if (error_ != NULL) error_->::samson::network::Error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UploadDataFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .samson.network.UploadDataFile query = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file;
        break;
      }
      
      // required .samson.network.File file = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_error;
        break;
      }
      
      // optional .samson.network.Error error = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UploadDataFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .samson.network.UploadDataFile query = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->query(), output);
  }
  
  // required .samson.network.File file = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->file(), output);
  }
  
  // optional .samson.network.Error error = 100;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UploadDataFileResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .samson.network.UploadDataFile query = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->query(), target);
  }
  
  // required .samson.network.File file = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->file(), target);
  }
  
  // optional .samson.network.Error error = 100;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UploadDataFileResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .samson.network.UploadDataFile query = 1;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->query());
    }
    
    // required .samson.network.File file = 2;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->file());
    }
    
    // optional .samson.network.Error error = 100;
    if (has_error()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadDataFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UploadDataFileResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadDataFileResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadDataFileResponse::MergeFrom(const UploadDataFileResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_query()->::samson::network::UploadDataFile::MergeFrom(from.query());
    }
    if (from._has_bit(1)) {
      mutable_file()->::samson::network::File::MergeFrom(from.file());
    }
    if (from._has_bit(2)) {
      mutable_error()->::samson::network::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UploadDataFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadDataFileResponse::CopyFrom(const UploadDataFileResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadDataFileResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_query()) {
    if (!this->query().IsInitialized()) return false;
  }
  if (has_file()) {
    if (!this->file().IsInitialized()) return false;
  }
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void UploadDataFileResponse::Swap(UploadDataFileResponse* other) {
  if (other != this) {
    std::swap(query_, other->query_);
    std::swap(file_, other->file_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UploadDataFileResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadDataFileResponse_descriptor_;
  metadata.reflection = UploadDataFileResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string UploadDataFinish::_default_queue_;
#ifndef _MSC_VER
const int UploadDataFinish::kLoadIdFieldNumber;
const int UploadDataFinish::kQueueFieldNumber;
const int UploadDataFinish::kFilesFieldNumber;
const int UploadDataFinish::kErrorFieldNumber;
#endif  // !_MSC_VER

UploadDataFinish::UploadDataFinish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UploadDataFinish::InitAsDefaultInstance() {
  error_ = const_cast< ::samson::network::Error*>(&::samson::network::Error::default_instance());
}

UploadDataFinish::UploadDataFinish(const UploadDataFinish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UploadDataFinish::SharedCtor() {
  _cached_size_ = 0;
  load_id_ = GOOGLE_ULONGLONG(0);
  queue_ = const_cast< ::std::string*>(&_default_queue_);
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadDataFinish::~UploadDataFinish() {
  SharedDtor();
}

void UploadDataFinish::SharedDtor() {
  if (queue_ != &_default_queue_) {
    delete queue_;
  }
  if (this != default_instance_) {
    delete error_;
  }
}

void UploadDataFinish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadDataFinish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadDataFinish_descriptor_;
}

const UploadDataFinish& UploadDataFinish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

UploadDataFinish* UploadDataFinish::default_instance_ = NULL;

UploadDataFinish* UploadDataFinish::New() const {
  return new UploadDataFinish;
}

void UploadDataFinish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    load_id_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(1)) {
      if (queue_ != &_default_queue_) {
        queue_->clear();
      }
    }
    if (_has_bit(3)) {
      if (error_ != NULL) error_->::samson::network::Error::Clear();
    }
  }
  files_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UploadDataFinish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 load_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &load_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_queue;
        break;
      }
      
      // required string queue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_queue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->queue().data(), this->queue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_files;
        break;
      }
      
      // repeated .samson.network.File files = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_files()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_files;
        if (input->ExpectTag(802)) goto parse_error;
        break;
      }
      
      // optional .samson.network.Error error = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UploadDataFinish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 load_id = 3;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->load_id(), output);
  }
  
  // required string queue = 4;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->queue().data(), this->queue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->queue(), output);
  }
  
  // repeated .samson.network.File files = 5;
  for (int i = 0; i < this->files_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->files(i), output);
  }
  
  // optional .samson.network.Error error = 100;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UploadDataFinish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 load_id = 3;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->load_id(), target);
  }
  
  // required string queue = 4;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->queue().data(), this->queue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->queue(), target);
  }
  
  // repeated .samson.network.File files = 5;
  for (int i = 0; i < this->files_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->files(i), target);
  }
  
  // optional .samson.network.Error error = 100;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UploadDataFinish::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 load_id = 3;
    if (has_load_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->load_id());
    }
    
    // required string queue = 4;
    if (has_queue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->queue());
    }
    
    // optional .samson.network.Error error = 100;
    if (has_error()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  // repeated .samson.network.File files = 5;
  total_size += 1 * this->files_size();
  for (int i = 0; i < this->files_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->files(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadDataFinish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UploadDataFinish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadDataFinish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadDataFinish::MergeFrom(const UploadDataFinish& from) {
  GOOGLE_CHECK_NE(&from, this);
  files_.MergeFrom(from.files_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_load_id(from.load_id());
    }
    if (from._has_bit(1)) {
      set_queue(from.queue());
    }
    if (from._has_bit(3)) {
      mutable_error()->::samson::network::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UploadDataFinish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadDataFinish::CopyFrom(const UploadDataFinish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadDataFinish::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < files_size(); i++) {
    if (!this->files(i).IsInitialized()) return false;
  }
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void UploadDataFinish::Swap(UploadDataFinish* other) {
  if (other != this) {
    std::swap(load_id_, other->load_id_);
    std::swap(queue_, other->queue_);
    files_.Swap(&other->files_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UploadDataFinish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadDataFinish_descriptor_;
  metadata.reflection = UploadDataFinish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UploadDataFinishResponse::kQueryFieldNumber;
const int UploadDataFinishResponse::kErrorFieldNumber;
#endif  // !_MSC_VER

UploadDataFinishResponse::UploadDataFinishResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UploadDataFinishResponse::InitAsDefaultInstance() {
  query_ = const_cast< ::samson::network::UploadDataFinish*>(&::samson::network::UploadDataFinish::default_instance());
  error_ = const_cast< ::samson::network::Error*>(&::samson::network::Error::default_instance());
}

UploadDataFinishResponse::UploadDataFinishResponse(const UploadDataFinishResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UploadDataFinishResponse::SharedCtor() {
  _cached_size_ = 0;
  query_ = NULL;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadDataFinishResponse::~UploadDataFinishResponse() {
  SharedDtor();
}

void UploadDataFinishResponse::SharedDtor() {
  if (this != default_instance_) {
    delete query_;
    delete error_;
  }
}

void UploadDataFinishResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadDataFinishResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadDataFinishResponse_descriptor_;
}

const UploadDataFinishResponse& UploadDataFinishResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

UploadDataFinishResponse* UploadDataFinishResponse::default_instance_ = NULL;

UploadDataFinishResponse* UploadDataFinishResponse::New() const {
  return new UploadDataFinishResponse;
}

void UploadDataFinishResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (query_ != NULL) query_->::samson::network::UploadDataFinish::Clear();
    }
    if (_has_bit(1)) {
      if (error_ != NULL) error_->::samson::network::Error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UploadDataFinishResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .samson.network.UploadDataFinish query = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_error;
        break;
      }
      
      // optional .samson.network.Error error = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UploadDataFinishResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .samson.network.UploadDataFinish query = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->query(), output);
  }
  
  // optional .samson.network.Error error = 100;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UploadDataFinishResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .samson.network.UploadDataFinish query = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->query(), target);
  }
  
  // optional .samson.network.Error error = 100;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UploadDataFinishResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .samson.network.UploadDataFinish query = 1;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->query());
    }
    
    // optional .samson.network.Error error = 100;
    if (has_error()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadDataFinishResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UploadDataFinishResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadDataFinishResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadDataFinishResponse::MergeFrom(const UploadDataFinishResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_query()->::samson::network::UploadDataFinish::MergeFrom(from.query());
    }
    if (from._has_bit(1)) {
      mutable_error()->::samson::network::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UploadDataFinishResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadDataFinishResponse::CopyFrom(const UploadDataFinishResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadDataFinishResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_query()) {
    if (!this->query().IsInitialized()) return false;
  }
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void UploadDataFinishResponse::Swap(UploadDataFinishResponse* other) {
  if (other != this) {
    std::swap(query_, other->query_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UploadDataFinishResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadDataFinishResponse_descriptor_;
  metadata.reflection = UploadDataFinishResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DownloadDataInit::_default_queue_;
#ifndef _MSC_VER
const int DownloadDataInit::kQueueFieldNumber;
#endif  // !_MSC_VER

DownloadDataInit::DownloadDataInit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DownloadDataInit::InitAsDefaultInstance() {
}

DownloadDataInit::DownloadDataInit(const DownloadDataInit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DownloadDataInit::SharedCtor() {
  _cached_size_ = 0;
  queue_ = const_cast< ::std::string*>(&_default_queue_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownloadDataInit::~DownloadDataInit() {
  SharedDtor();
}

void DownloadDataInit::SharedDtor() {
  if (queue_ != &_default_queue_) {
    delete queue_;
  }
  if (this != default_instance_) {
  }
}

void DownloadDataInit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownloadDataInit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownloadDataInit_descriptor_;
}

const DownloadDataInit& DownloadDataInit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

DownloadDataInit* DownloadDataInit::default_instance_ = NULL;

DownloadDataInit* DownloadDataInit::New() const {
  return new DownloadDataInit;
}

void DownloadDataInit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (queue_ != &_default_queue_) {
        queue_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DownloadDataInit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string queue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->queue().data(), this->queue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DownloadDataInit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string queue = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->queue().data(), this->queue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->queue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DownloadDataInit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string queue = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->queue().data(), this->queue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->queue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DownloadDataInit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string queue = 1;
    if (has_queue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->queue());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadDataInit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DownloadDataInit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DownloadDataInit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DownloadDataInit::MergeFrom(const DownloadDataInit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_queue(from.queue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DownloadDataInit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadDataInit::CopyFrom(const DownloadDataInit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadDataInit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DownloadDataInit::Swap(DownloadDataInit* other) {
  if (other != this) {
    std::swap(queue_, other->queue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DownloadDataInit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DownloadDataInit_descriptor_;
  metadata.reflection = DownloadDataInit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DownloadDataInitResponse::kQueryFieldNumber;
const int DownloadDataInitResponse::kLoadIdFieldNumber;
const int DownloadDataInitResponse::kQueueFieldNumber;
const int DownloadDataInitResponse::kErrorFieldNumber;
#endif  // !_MSC_VER

DownloadDataInitResponse::DownloadDataInitResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DownloadDataInitResponse::InitAsDefaultInstance() {
  query_ = const_cast< ::samson::network::DownloadDataInit*>(&::samson::network::DownloadDataInit::default_instance());
  queue_ = const_cast< ::samson::network::FullQueue*>(&::samson::network::FullQueue::default_instance());
  error_ = const_cast< ::samson::network::Error*>(&::samson::network::Error::default_instance());
}

DownloadDataInitResponse::DownloadDataInitResponse(const DownloadDataInitResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DownloadDataInitResponse::SharedCtor() {
  _cached_size_ = 0;
  query_ = NULL;
  load_id_ = GOOGLE_ULONGLONG(0);
  queue_ = NULL;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownloadDataInitResponse::~DownloadDataInitResponse() {
  SharedDtor();
}

void DownloadDataInitResponse::SharedDtor() {
  if (this != default_instance_) {
    delete query_;
    delete queue_;
    delete error_;
  }
}

void DownloadDataInitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownloadDataInitResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownloadDataInitResponse_descriptor_;
}

const DownloadDataInitResponse& DownloadDataInitResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

DownloadDataInitResponse* DownloadDataInitResponse::default_instance_ = NULL;

DownloadDataInitResponse* DownloadDataInitResponse::New() const {
  return new DownloadDataInitResponse;
}

void DownloadDataInitResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (query_ != NULL) query_->::samson::network::DownloadDataInit::Clear();
    }
    load_id_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(2)) {
      if (queue_ != NULL) queue_->::samson::network::FullQueue::Clear();
    }
    if (_has_bit(3)) {
      if (error_ != NULL) error_->::samson::network::Error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DownloadDataInitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .samson.network.DownloadDataInit query = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_load_id;
        break;
      }
      
      // required uint64 load_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_load_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &load_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_queue;
        break;
      }
      
      // optional .samson.network.FullQueue queue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_queue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_error;
        break;
      }
      
      // optional .samson.network.Error error = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DownloadDataInitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .samson.network.DownloadDataInit query = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->query(), output);
  }
  
  // required uint64 load_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->load_id(), output);
  }
  
  // optional .samson.network.FullQueue queue = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->queue(), output);
  }
  
  // optional .samson.network.Error error = 100;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DownloadDataInitResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .samson.network.DownloadDataInit query = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->query(), target);
  }
  
  // required uint64 load_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->load_id(), target);
  }
  
  // optional .samson.network.FullQueue queue = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->queue(), target);
  }
  
  // optional .samson.network.Error error = 100;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DownloadDataInitResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .samson.network.DownloadDataInit query = 1;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->query());
    }
    
    // required uint64 load_id = 2;
    if (has_load_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->load_id());
    }
    
    // optional .samson.network.FullQueue queue = 3;
    if (has_queue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queue());
    }
    
    // optional .samson.network.Error error = 100;
    if (has_error()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadDataInitResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DownloadDataInitResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DownloadDataInitResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DownloadDataInitResponse::MergeFrom(const DownloadDataInitResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_query()->::samson::network::DownloadDataInit::MergeFrom(from.query());
    }
    if (from._has_bit(1)) {
      set_load_id(from.load_id());
    }
    if (from._has_bit(2)) {
      mutable_queue()->::samson::network::FullQueue::MergeFrom(from.queue());
    }
    if (from._has_bit(3)) {
      mutable_error()->::samson::network::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DownloadDataInitResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadDataInitResponse::CopyFrom(const DownloadDataInitResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadDataInitResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_query()) {
    if (!this->query().IsInitialized()) return false;
  }
  if (has_queue()) {
    if (!this->queue().IsInitialized()) return false;
  }
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void DownloadDataInitResponse::Swap(DownloadDataInitResponse* other) {
  if (other != this) {
    std::swap(query_, other->query_);
    std::swap(load_id_, other->load_id_);
    std::swap(queue_, other->queue_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DownloadDataInitResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DownloadDataInitResponse_descriptor_;
  metadata.reflection = DownloadDataInitResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DownloadDataFile::kFileIdFieldNumber;
const int DownloadDataFile::kLoadIdFieldNumber;
const int DownloadDataFile::kFileFieldNumber;
#endif  // !_MSC_VER

DownloadDataFile::DownloadDataFile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DownloadDataFile::InitAsDefaultInstance() {
  file_ = const_cast< ::samson::network::File*>(&::samson::network::File::default_instance());
}

DownloadDataFile::DownloadDataFile(const DownloadDataFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DownloadDataFile::SharedCtor() {
  _cached_size_ = 0;
  file_id_ = GOOGLE_ULONGLONG(0);
  load_id_ = GOOGLE_ULONGLONG(0);
  file_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownloadDataFile::~DownloadDataFile() {
  SharedDtor();
}

void DownloadDataFile::SharedDtor() {
  if (this != default_instance_) {
    delete file_;
  }
}

void DownloadDataFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownloadDataFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownloadDataFile_descriptor_;
}

const DownloadDataFile& DownloadDataFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

DownloadDataFile* DownloadDataFile::default_instance_ = NULL;

DownloadDataFile* DownloadDataFile::New() const {
  return new DownloadDataFile;
}

void DownloadDataFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    file_id_ = GOOGLE_ULONGLONG(0);
    load_id_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(2)) {
      if (file_ != NULL) file_->::samson::network::File::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DownloadDataFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 file_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_load_id;
        break;
      }
      
      // required uint64 load_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_load_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &load_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_file;
        break;
      }
      
      // required .samson.network.File file = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DownloadDataFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 file_id = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->file_id(), output);
  }
  
  // required uint64 load_id = 3;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->load_id(), output);
  }
  
  // required .samson.network.File file = 4;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->file(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DownloadDataFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 file_id = 2;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->file_id(), target);
  }
  
  // required uint64 load_id = 3;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->load_id(), target);
  }
  
  // required .samson.network.File file = 4;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->file(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DownloadDataFile::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 file_id = 2;
    if (has_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->file_id());
    }
    
    // required uint64 load_id = 3;
    if (has_load_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->load_id());
    }
    
    // required .samson.network.File file = 4;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->file());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadDataFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DownloadDataFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DownloadDataFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DownloadDataFile::MergeFrom(const DownloadDataFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_file_id(from.file_id());
    }
    if (from._has_bit(1)) {
      set_load_id(from.load_id());
    }
    if (from._has_bit(2)) {
      mutable_file()->::samson::network::File::MergeFrom(from.file());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DownloadDataFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadDataFile::CopyFrom(const DownloadDataFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadDataFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_file()) {
    if (!this->file().IsInitialized()) return false;
  }
  return true;
}

void DownloadDataFile::Swap(DownloadDataFile* other) {
  if (other != this) {
    std::swap(file_id_, other->file_id_);
    std::swap(load_id_, other->load_id_);
    std::swap(file_, other->file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DownloadDataFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DownloadDataFile_descriptor_;
  metadata.reflection = DownloadDataFile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DownloadDataFileResponse::kQueryFieldNumber;
const int DownloadDataFileResponse::kErrorFieldNumber;
#endif  // !_MSC_VER

DownloadDataFileResponse::DownloadDataFileResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DownloadDataFileResponse::InitAsDefaultInstance() {
  query_ = const_cast< ::samson::network::DownloadDataFile*>(&::samson::network::DownloadDataFile::default_instance());
  error_ = const_cast< ::samson::network::Error*>(&::samson::network::Error::default_instance());
}

DownloadDataFileResponse::DownloadDataFileResponse(const DownloadDataFileResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DownloadDataFileResponse::SharedCtor() {
  _cached_size_ = 0;
  query_ = NULL;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownloadDataFileResponse::~DownloadDataFileResponse() {
  SharedDtor();
}

void DownloadDataFileResponse::SharedDtor() {
  if (this != default_instance_) {
    delete query_;
    delete error_;
  }
}

void DownloadDataFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownloadDataFileResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownloadDataFileResponse_descriptor_;
}

const DownloadDataFileResponse& DownloadDataFileResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

DownloadDataFileResponse* DownloadDataFileResponse::default_instance_ = NULL;

DownloadDataFileResponse* DownloadDataFileResponse::New() const {
  return new DownloadDataFileResponse;
}

void DownloadDataFileResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (query_ != NULL) query_->::samson::network::DownloadDataFile::Clear();
    }
    if (_has_bit(1)) {
      if (error_ != NULL) error_->::samson::network::Error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DownloadDataFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .samson.network.DownloadDataFile query = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_error;
        break;
      }
      
      // optional .samson.network.Error error = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DownloadDataFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .samson.network.DownloadDataFile query = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->query(), output);
  }
  
  // optional .samson.network.Error error = 100;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DownloadDataFileResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .samson.network.DownloadDataFile query = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->query(), target);
  }
  
  // optional .samson.network.Error error = 100;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DownloadDataFileResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .samson.network.DownloadDataFile query = 1;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->query());
    }
    
    // optional .samson.network.Error error = 100;
    if (has_error()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadDataFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DownloadDataFileResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DownloadDataFileResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DownloadDataFileResponse::MergeFrom(const DownloadDataFileResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_query()->::samson::network::DownloadDataFile::MergeFrom(from.query());
    }
    if (from._has_bit(1)) {
      mutable_error()->::samson::network::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DownloadDataFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadDataFileResponse::CopyFrom(const DownloadDataFileResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadDataFileResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_query()) {
    if (!this->query().IsInitialized()) return false;
  }
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void DownloadDataFileResponse::Swap(DownloadDataFileResponse* other) {
  if (other != this) {
    std::swap(query_, other->query_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DownloadDataFileResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DownloadDataFileResponse_descriptor_;
  metadata.reflection = DownloadDataFileResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DownloadDataFinish::kFileIdFieldNumber;
const int DownloadDataFinish::kLoadIdFieldNumber;
const int DownloadDataFinish::kErrorFieldNumber;
#endif  // !_MSC_VER

DownloadDataFinish::DownloadDataFinish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DownloadDataFinish::InitAsDefaultInstance() {
  error_ = const_cast< ::samson::network::Error*>(&::samson::network::Error::default_instance());
}

DownloadDataFinish::DownloadDataFinish(const DownloadDataFinish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DownloadDataFinish::SharedCtor() {
  _cached_size_ = 0;
  file_id_ = GOOGLE_ULONGLONG(0);
  load_id_ = GOOGLE_ULONGLONG(0);
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownloadDataFinish::~DownloadDataFinish() {
  SharedDtor();
}

void DownloadDataFinish::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void DownloadDataFinish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownloadDataFinish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownloadDataFinish_descriptor_;
}

const DownloadDataFinish& DownloadDataFinish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

DownloadDataFinish* DownloadDataFinish::default_instance_ = NULL;

DownloadDataFinish* DownloadDataFinish::New() const {
  return new DownloadDataFinish;
}

void DownloadDataFinish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    file_id_ = GOOGLE_ULONGLONG(0);
    load_id_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(2)) {
      if (error_ != NULL) error_->::samson::network::Error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DownloadDataFinish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 file_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_load_id;
        break;
      }
      
      // required uint64 load_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_load_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &load_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_error;
        break;
      }
      
      // optional .samson.network.Error error = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DownloadDataFinish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 file_id = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->file_id(), output);
  }
  
  // required uint64 load_id = 3;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->load_id(), output);
  }
  
  // optional .samson.network.Error error = 100;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DownloadDataFinish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 file_id = 2;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->file_id(), target);
  }
  
  // required uint64 load_id = 3;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->load_id(), target);
  }
  
  // optional .samson.network.Error error = 100;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DownloadDataFinish::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 file_id = 2;
    if (has_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->file_id());
    }
    
    // required uint64 load_id = 3;
    if (has_load_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->load_id());
    }
    
    // optional .samson.network.Error error = 100;
    if (has_error()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadDataFinish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DownloadDataFinish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DownloadDataFinish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DownloadDataFinish::MergeFrom(const DownloadDataFinish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_file_id(from.file_id());
    }
    if (from._has_bit(1)) {
      set_load_id(from.load_id());
    }
    if (from._has_bit(2)) {
      mutable_error()->::samson::network::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DownloadDataFinish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadDataFinish::CopyFrom(const DownloadDataFinish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadDataFinish::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void DownloadDataFinish::Swap(DownloadDataFinish* other) {
  if (other != this) {
    std::swap(file_id_, other->file_id_);
    std::swap(load_id_, other->load_id_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DownloadDataFinish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DownloadDataFinish_descriptor_;
  metadata.reflection = DownloadDataFinish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DownloadDataFinishResponse::kQueryFieldNumber;
const int DownloadDataFinishResponse::kErrorFieldNumber;
#endif  // !_MSC_VER

DownloadDataFinishResponse::DownloadDataFinishResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DownloadDataFinishResponse::InitAsDefaultInstance() {
  query_ = const_cast< ::samson::network::DownloadDataFinish*>(&::samson::network::DownloadDataFinish::default_instance());
  error_ = const_cast< ::samson::network::Error*>(&::samson::network::Error::default_instance());
}

DownloadDataFinishResponse::DownloadDataFinishResponse(const DownloadDataFinishResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DownloadDataFinishResponse::SharedCtor() {
  _cached_size_ = 0;
  query_ = NULL;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownloadDataFinishResponse::~DownloadDataFinishResponse() {
  SharedDtor();
}

void DownloadDataFinishResponse::SharedDtor() {
  if (this != default_instance_) {
    delete query_;
    delete error_;
  }
}

void DownloadDataFinishResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownloadDataFinishResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownloadDataFinishResponse_descriptor_;
}

const DownloadDataFinishResponse& DownloadDataFinishResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

DownloadDataFinishResponse* DownloadDataFinishResponse::default_instance_ = NULL;

DownloadDataFinishResponse* DownloadDataFinishResponse::New() const {
  return new DownloadDataFinishResponse;
}

void DownloadDataFinishResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (query_ != NULL) query_->::samson::network::DownloadDataFinish::Clear();
    }
    if (_has_bit(1)) {
      if (error_ != NULL) error_->::samson::network::Error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DownloadDataFinishResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .samson.network.DownloadDataFinish query = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_error;
        break;
      }
      
      // optional .samson.network.Error error = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DownloadDataFinishResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .samson.network.DownloadDataFinish query = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->query(), output);
  }
  
  // optional .samson.network.Error error = 100;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DownloadDataFinishResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .samson.network.DownloadDataFinish query = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->query(), target);
  }
  
  // optional .samson.network.Error error = 100;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DownloadDataFinishResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .samson.network.DownloadDataFinish query = 1;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->query());
    }
    
    // optional .samson.network.Error error = 100;
    if (has_error()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadDataFinishResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DownloadDataFinishResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DownloadDataFinishResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DownloadDataFinishResponse::MergeFrom(const DownloadDataFinishResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_query()->::samson::network::DownloadDataFinish::MergeFrom(from.query());
    }
    if (from._has_bit(1)) {
      mutable_error()->::samson::network::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DownloadDataFinishResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadDataFinishResponse::CopyFrom(const DownloadDataFinishResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadDataFinishResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_query()) {
    if (!this->query().IsInitialized()) return false;
  }
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void DownloadDataFinishResponse::Swap(DownloadDataFinishResponse* other) {
  if (other != this) {
    std::swap(query_, other->query_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DownloadDataFinishResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DownloadDataFinishResponse_descriptor_;
  metadata.reflection = DownloadDataFinishResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MessageProcessPlatform_Code_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageProcessPlatform_Code_descriptor_;
}
bool MessageProcessPlatform_Code_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MessageProcessPlatform_Code MessageProcessPlatform::code_begin;
const MessageProcessPlatform_Code MessageProcessPlatform::code_end;
const MessageProcessPlatform_Code MessageProcessPlatform::code_operation;
const MessageProcessPlatform_Code MessageProcessPlatform::code_trace;
const MessageProcessPlatform_Code MessageProcessPlatform::code_user_error;
const MessageProcessPlatform_Code MessageProcessPlatform::code_progress;
const MessageProcessPlatform_Code MessageProcessPlatform::Code_MIN;
const MessageProcessPlatform_Code MessageProcessPlatform::Code_MAX;
const int MessageProcessPlatform::Code_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string MessageProcessPlatform::_default_error_;
#ifndef _MSC_VER
const int MessageProcessPlatform::kCodeFieldNumber;
const int MessageProcessPlatform::kOperationFieldNumber;
const int MessageProcessPlatform::kTraceFieldNumber;
const int MessageProcessPlatform::kProgressFieldNumber;
const int MessageProcessPlatform::kErrorFieldNumber;
#endif  // !_MSC_VER

MessageProcessPlatform::MessageProcessPlatform()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MessageProcessPlatform::InitAsDefaultInstance() {
  trace_ = const_cast< ::samson::network::Trace*>(&::samson::network::Trace::default_instance());
}

MessageProcessPlatform::MessageProcessPlatform(const MessageProcessPlatform& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MessageProcessPlatform::SharedCtor() {
  _cached_size_ = 0;
  code_ = 1;
  operation_ = 0;
  trace_ = NULL;
  progress_ = 0;
  error_ = const_cast< ::std::string*>(&_default_error_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageProcessPlatform::~MessageProcessPlatform() {
  SharedDtor();
}

void MessageProcessPlatform::SharedDtor() {
  if (error_ != &_default_error_) {
    delete error_;
  }
  if (this != default_instance_) {
    delete trace_;
  }
}

void MessageProcessPlatform::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageProcessPlatform::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageProcessPlatform_descriptor_;
}

const MessageProcessPlatform& MessageProcessPlatform::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

MessageProcessPlatform* MessageProcessPlatform::default_instance_ = NULL;

MessageProcessPlatform* MessageProcessPlatform::New() const {
  return new MessageProcessPlatform;
}

void MessageProcessPlatform::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 1;
    operation_ = 0;
    if (_has_bit(2)) {
      if (trace_ != NULL) trace_->::samson::network::Trace::Clear();
    }
    progress_ = 0;
    if (_has_bit(4)) {
      if (error_ != &_default_error_) {
        error_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageProcessPlatform::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .samson.network.MessageProcessPlatform.Code code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::samson::network::MessageProcessPlatform_Code_IsValid(value)) {
            set_code(static_cast< ::samson::network::MessageProcessPlatform_Code >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_operation;
        break;
      }
      
      // optional int32 operation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operation_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_trace;
        break;
      }
      
      // optional .samson.network.Trace trace = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trace()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_progress;
        break;
      }
      
      // optional double progress = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &progress_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_error;
        break;
      }
      
      // optional string error = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MessageProcessPlatform::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .samson.network.MessageProcessPlatform.Code code = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }
  
  // optional int32 operation = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->operation(), output);
  }
  
  // optional .samson.network.Trace trace = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->trace(), output);
  }
  
  // optional double progress = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->progress(), output);
  }
  
  // optional string error = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MessageProcessPlatform::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .samson.network.MessageProcessPlatform.Code code = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }
  
  // optional int32 operation = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->operation(), target);
  }
  
  // optional .samson.network.Trace trace = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->trace(), target);
  }
  
  // optional double progress = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->progress(), target);
  }
  
  // optional string error = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MessageProcessPlatform::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .samson.network.MessageProcessPlatform.Code code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }
    
    // optional int32 operation = 2;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operation());
    }
    
    // optional .samson.network.Trace trace = 3;
    if (has_trace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trace());
    }
    
    // optional double progress = 4;
    if (has_progress()) {
      total_size += 1 + 8;
    }
    
    // optional string error = 5;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageProcessPlatform::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageProcessPlatform* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageProcessPlatform*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageProcessPlatform::MergeFrom(const MessageProcessPlatform& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_code(from.code());
    }
    if (from._has_bit(1)) {
      set_operation(from.operation());
    }
    if (from._has_bit(2)) {
      mutable_trace()->::samson::network::Trace::MergeFrom(from.trace());
    }
    if (from._has_bit(3)) {
      set_progress(from.progress());
    }
    if (from._has_bit(4)) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageProcessPlatform::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageProcessPlatform::CopyFrom(const MessageProcessPlatform& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageProcessPlatform::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_trace()) {
    if (!this->trace().IsInitialized()) return false;
  }
  return true;
}

void MessageProcessPlatform::Swap(MessageProcessPlatform* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(operation_, other->operation_);
    std::swap(trace_, other->trace_);
    std::swap(progress_, other->progress_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageProcessPlatform::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageProcessPlatform_descriptor_;
  metadata.reflection = MessageProcessPlatform_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MessagePlatformProcess_Code_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessagePlatformProcess_Code_descriptor_;
}
bool MessagePlatformProcess_Code_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MessagePlatformProcess_Code MessagePlatformProcess::code_ok;
const MessagePlatformProcess_Code MessagePlatformProcess::code_kill;
const MessagePlatformProcess_Code MessagePlatformProcess::Code_MIN;
const MessagePlatformProcess_Code MessagePlatformProcess::Code_MAX;
const int MessagePlatformProcess::Code_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MessagePlatformProcess::kCodeFieldNumber;
#endif  // !_MSC_VER

MessagePlatformProcess::MessagePlatformProcess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MessagePlatformProcess::InitAsDefaultInstance() {
}

MessagePlatformProcess::MessagePlatformProcess(const MessagePlatformProcess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MessagePlatformProcess::SharedCtor() {
  _cached_size_ = 0;
  code_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessagePlatformProcess::~MessagePlatformProcess() {
  SharedDtor();
}

void MessagePlatformProcess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessagePlatformProcess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessagePlatformProcess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessagePlatformProcess_descriptor_;
}

const MessagePlatformProcess& MessagePlatformProcess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

MessagePlatformProcess* MessagePlatformProcess::default_instance_ = NULL;

MessagePlatformProcess* MessagePlatformProcess::New() const {
  return new MessagePlatformProcess;
}

void MessagePlatformProcess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessagePlatformProcess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .samson.network.MessagePlatformProcess.Code code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::samson::network::MessagePlatformProcess_Code_IsValid(value)) {
            set_code(static_cast< ::samson::network::MessagePlatformProcess_Code >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MessagePlatformProcess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .samson.network.MessagePlatformProcess.Code code = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MessagePlatformProcess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .samson.network.MessagePlatformProcess.Code code = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MessagePlatformProcess::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .samson.network.MessagePlatformProcess.Code code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessagePlatformProcess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessagePlatformProcess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessagePlatformProcess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessagePlatformProcess::MergeFrom(const MessagePlatformProcess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessagePlatformProcess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessagePlatformProcess::CopyFrom(const MessagePlatformProcess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessagePlatformProcess::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MessagePlatformProcess::Swap(MessagePlatformProcess* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessagePlatformProcess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessagePlatformProcess_descriptor_;
  metadata.reflection = MessagePlatformProcess_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Message_Sender_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_Sender_descriptor_;
}
bool Message_Sender_IsValid(int value) {
  switch(value) {
    case 67:
    case 68:
    case 87:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Message_Sender Message::Worker;
const Message_Sender Message::Controller;
const Message_Sender Message::Delilah;
const Message_Sender Message::Sender_MIN;
const Message_Sender Message::Sender_MAX;
const int Message::Sender_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Message::kCommandFieldNumber;
const int Message::kCommandResponseFieldNumber;
const int Message::kWorkerTaskFieldNumber;
const int Message::kWorkerTaskConfirmationFieldNumber;
const int Message::kWorkerTaskKillFieldNumber;
const int Message::kWorkerTaskRemoveFieldNumber;
const int Message::kDataFieldNumber;
const int Message::kDataCloseFieldNumber;
const int Message::kUploadDataInitFieldNumber;
const int Message::kUploadDataInitResponseFieldNumber;
const int Message::kUploadDataFileFieldNumber;
const int Message::kUploadDataFileResponseFieldNumber;
const int Message::kUploadDataFinishFieldNumber;
const int Message::kUploadDataFinishResponseFieldNumber;
const int Message::kDownloadDataInitFieldNumber;
const int Message::kDownloadDataInitResponseFieldNumber;
const int Message::kDownloadDataFileFieldNumber;
const int Message::kDownloadDataFileResponseFieldNumber;
const int Message::kDownloadDataFinishFieldNumber;
const int Message::kDownloadDataFinishResponseFieldNumber;
const int Message::kWorkerStatusFieldNumber;
const int Message::kTraceFieldNumber;
const int Message::kDelilahIdFieldNumber;
#endif  // !_MSC_VER

Message::Message()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Message::InitAsDefaultInstance() {
  command_ = const_cast< ::samson::network::Command*>(&::samson::network::Command::default_instance());
  command_response_ = const_cast< ::samson::network::CommandResponse*>(&::samson::network::CommandResponse::default_instance());
  worker_task_ = const_cast< ::samson::network::WorkerTask*>(&::samson::network::WorkerTask::default_instance());
  worker_task_confirmation_ = const_cast< ::samson::network::WorkerTaskConfirmation*>(&::samson::network::WorkerTaskConfirmation::default_instance());
  worker_task_kill_ = const_cast< ::samson::network::WorkerTaskKill*>(&::samson::network::WorkerTaskKill::default_instance());
  worker_task_remove_ = const_cast< ::samson::network::WorkerTaskRemove*>(&::samson::network::WorkerTaskRemove::default_instance());
  data_ = const_cast< ::samson::network::WorkerDataExchange*>(&::samson::network::WorkerDataExchange::default_instance());
  data_close_ = const_cast< ::samson::network::WorkerDataExchangeClose*>(&::samson::network::WorkerDataExchangeClose::default_instance());
  upload_data_init_ = const_cast< ::samson::network::UploadDataInit*>(&::samson::network::UploadDataInit::default_instance());
  upload_data_init_response_ = const_cast< ::samson::network::UploadDataInitResponse*>(&::samson::network::UploadDataInitResponse::default_instance());
  upload_data_file_ = const_cast< ::samson::network::UploadDataFile*>(&::samson::network::UploadDataFile::default_instance());
  upload_data_file_response_ = const_cast< ::samson::network::UploadDataFileResponse*>(&::samson::network::UploadDataFileResponse::default_instance());
  upload_data_finish_ = const_cast< ::samson::network::UploadDataFinish*>(&::samson::network::UploadDataFinish::default_instance());
  upload_data_finish_response_ = const_cast< ::samson::network::UploadDataFinishResponse*>(&::samson::network::UploadDataFinishResponse::default_instance());
  download_data_init_ = const_cast< ::samson::network::DownloadDataInit*>(&::samson::network::DownloadDataInit::default_instance());
  download_data_init_response_ = const_cast< ::samson::network::DownloadDataInitResponse*>(&::samson::network::DownloadDataInitResponse::default_instance());
  download_data_file_ = const_cast< ::samson::network::DownloadDataFile*>(&::samson::network::DownloadDataFile::default_instance());
  download_data_file_response_ = const_cast< ::samson::network::DownloadDataFileResponse*>(&::samson::network::DownloadDataFileResponse::default_instance());
  download_data_finish_ = const_cast< ::samson::network::DownloadDataFinish*>(&::samson::network::DownloadDataFinish::default_instance());
  download_data_finish_response_ = const_cast< ::samson::network::DownloadDataFinishResponse*>(&::samson::network::DownloadDataFinishResponse::default_instance());
  worker_status_ = const_cast< ::samson::network::WorkerStatus*>(&::samson::network::WorkerStatus::default_instance());
  trace_ = const_cast< ::samson::network::Trace*>(&::samson::network::Trace::default_instance());
}

Message::Message(const Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  command_ = NULL;
  command_response_ = NULL;
  worker_task_ = NULL;
  worker_task_confirmation_ = NULL;
  worker_task_kill_ = NULL;
  worker_task_remove_ = NULL;
  data_ = NULL;
  data_close_ = NULL;
  upload_data_init_ = NULL;
  upload_data_init_response_ = NULL;
  upload_data_file_ = NULL;
  upload_data_file_response_ = NULL;
  upload_data_finish_ = NULL;
  upload_data_finish_response_ = NULL;
  download_data_init_ = NULL;
  download_data_init_response_ = NULL;
  download_data_file_ = NULL;
  download_data_file_response_ = NULL;
  download_data_finish_ = NULL;
  download_data_finish_response_ = NULL;
  worker_status_ = NULL;
  trace_ = NULL;
  delilah_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  SharedDtor();
}

void Message::SharedDtor() {
  if (this != default_instance_) {
    delete command_;
    delete command_response_;
    delete worker_task_;
    delete worker_task_confirmation_;
    delete worker_task_kill_;
    delete worker_task_remove_;
    delete data_;
    delete data_close_;
    delete upload_data_init_;
    delete upload_data_init_response_;
    delete upload_data_file_;
    delete upload_data_file_response_;
    delete upload_data_finish_;
    delete upload_data_finish_response_;
    delete download_data_init_;
    delete download_data_init_response_;
    delete download_data_file_;
    delete download_data_file_response_;
    delete download_data_finish_;
    delete download_data_finish_response_;
    delete worker_status_;
    delete trace_;
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_samson_2eproto();  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New() const {
  return new Message;
}

void Message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (command_ != NULL) command_->::samson::network::Command::Clear();
    }
    if (_has_bit(1)) {
      if (command_response_ != NULL) command_response_->::samson::network::CommandResponse::Clear();
    }
    if (_has_bit(2)) {
      if (worker_task_ != NULL) worker_task_->::samson::network::WorkerTask::Clear();
    }
    if (_has_bit(3)) {
      if (worker_task_confirmation_ != NULL) worker_task_confirmation_->::samson::network::WorkerTaskConfirmation::Clear();
    }
    if (_has_bit(4)) {
      if (worker_task_kill_ != NULL) worker_task_kill_->::samson::network::WorkerTaskKill::Clear();
    }
    if (_has_bit(5)) {
      if (worker_task_remove_ != NULL) worker_task_remove_->::samson::network::WorkerTaskRemove::Clear();
    }
    if (_has_bit(6)) {
      if (data_ != NULL) data_->::samson::network::WorkerDataExchange::Clear();
    }
    if (_has_bit(7)) {
      if (data_close_ != NULL) data_close_->::samson::network::WorkerDataExchangeClose::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (upload_data_init_ != NULL) upload_data_init_->::samson::network::UploadDataInit::Clear();
    }
    if (_has_bit(9)) {
      if (upload_data_init_response_ != NULL) upload_data_init_response_->::samson::network::UploadDataInitResponse::Clear();
    }
    if (_has_bit(10)) {
      if (upload_data_file_ != NULL) upload_data_file_->::samson::network::UploadDataFile::Clear();
    }
    if (_has_bit(11)) {
      if (upload_data_file_response_ != NULL) upload_data_file_response_->::samson::network::UploadDataFileResponse::Clear();
    }
    if (_has_bit(12)) {
      if (upload_data_finish_ != NULL) upload_data_finish_->::samson::network::UploadDataFinish::Clear();
    }
    if (_has_bit(13)) {
      if (upload_data_finish_response_ != NULL) upload_data_finish_response_->::samson::network::UploadDataFinishResponse::Clear();
    }
    if (_has_bit(14)) {
      if (download_data_init_ != NULL) download_data_init_->::samson::network::DownloadDataInit::Clear();
    }
    if (_has_bit(15)) {
      if (download_data_init_response_ != NULL) download_data_init_response_->::samson::network::DownloadDataInitResponse::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (_has_bit(16)) {
      if (download_data_file_ != NULL) download_data_file_->::samson::network::DownloadDataFile::Clear();
    }
    if (_has_bit(17)) {
      if (download_data_file_response_ != NULL) download_data_file_response_->::samson::network::DownloadDataFileResponse::Clear();
    }
    if (_has_bit(18)) {
      if (download_data_finish_ != NULL) download_data_finish_->::samson::network::DownloadDataFinish::Clear();
    }
    if (_has_bit(19)) {
      if (download_data_finish_response_ != NULL) download_data_finish_response_->::samson::network::DownloadDataFinishResponse::Clear();
    }
    if (_has_bit(20)) {
      if (worker_status_ != NULL) worker_status_->::samson::network::WorkerStatus::Clear();
    }
    if (_has_bit(21)) {
      if (trace_ != NULL) trace_->::samson::network::Trace::Clear();
    }
    delilah_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .samson.network.Command command = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(834)) goto parse_command_response;
        break;
      }
      
      // optional .samson.network.CommandResponse command_response = 104;
      case 104: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(842)) goto parse_worker_task;
        break;
      }
      
      // optional .samson.network.WorkerTask worker_task = 105;
      case 105: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_worker_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_worker_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(850)) goto parse_worker_task_confirmation;
        break;
      }
      
      // optional .samson.network.WorkerTaskConfirmation worker_task_confirmation = 106;
      case 106: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_worker_task_confirmation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_worker_task_confirmation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(858)) goto parse_data;
        break;
      }
      
      // optional .samson.network.WorkerDataExchange data = 107;
      case 107: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(866)) goto parse_data_close;
        break;
      }
      
      // optional .samson.network.WorkerDataExchangeClose data_close = 108;
      case 108: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_close:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_close()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(890)) goto parse_upload_data_init;
        break;
      }
      
      // optional .samson.network.UploadDataInit upload_data_init = 111;
      case 111: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_upload_data_init:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upload_data_init()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(898)) goto parse_upload_data_init_response;
        break;
      }
      
      // optional .samson.network.UploadDataInitResponse upload_data_init_response = 112;
      case 112: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_upload_data_init_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upload_data_init_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(906)) goto parse_upload_data_file;
        break;
      }
      
      // optional .samson.network.UploadDataFile upload_data_file = 113;
      case 113: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_upload_data_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upload_data_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(914)) goto parse_upload_data_file_response;
        break;
      }
      
      // optional .samson.network.UploadDataFileResponse upload_data_file_response = 114;
      case 114: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_upload_data_file_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upload_data_file_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(922)) goto parse_upload_data_finish;
        break;
      }
      
      // optional .samson.network.UploadDataFinish upload_data_finish = 115;
      case 115: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_upload_data_finish:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upload_data_finish()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(930)) goto parse_upload_data_finish_response;
        break;
      }
      
      // optional .samson.network.UploadDataFinishResponse upload_data_finish_response = 116;
      case 116: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_upload_data_finish_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upload_data_finish_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(938)) goto parse_download_data_init;
        break;
      }
      
      // optional .samson.network.DownloadDataInit download_data_init = 117;
      case 117: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_download_data_init:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_download_data_init()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(946)) goto parse_download_data_init_response;
        break;
      }
      
      // optional .samson.network.DownloadDataInitResponse download_data_init_response = 118;
      case 118: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_download_data_init_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_download_data_init_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(954)) goto parse_download_data_file;
        break;
      }
      
      // optional .samson.network.DownloadDataFile download_data_file = 119;
      case 119: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_download_data_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_download_data_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(962)) goto parse_download_data_file_response;
        break;
      }
      
      // optional .samson.network.DownloadDataFileResponse download_data_file_response = 120;
      case 120: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_download_data_file_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_download_data_file_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(970)) goto parse_download_data_finish;
        break;
      }
      
      // optional .samson.network.DownloadDataFinish download_data_finish = 121;
      case 121: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_download_data_finish:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_download_data_finish()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(978)) goto parse_download_data_finish_response;
        break;
      }
      
      // optional .samson.network.DownloadDataFinishResponse download_data_finish_response = 122;
      case 122: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_download_data_finish_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_download_data_finish_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1362)) goto parse_worker_status;
        break;
      }
      
      // optional .samson.network.WorkerStatus worker_status = 170;
      case 170: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_worker_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_worker_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1370)) goto parse_trace;
        break;
      }
      
      // optional .samson.network.Trace trace = 171;
      case 171: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trace()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1618)) goto parse_worker_task_kill;
        break;
      }
      
      // optional .samson.network.WorkerTaskKill worker_task_kill = 202;
      case 202: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_worker_task_kill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_worker_task_kill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1626)) goto parse_worker_task_remove;
        break;
      }
      
      // optional .samson.network.WorkerTaskRemove worker_task_remove = 203;
      case 203: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_worker_task_remove:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_worker_task_remove()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2400)) goto parse_delilah_id;
        break;
      }
      
      // optional uint64 delilah_id = 300;
      case 300: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delilah_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &delilah_id_)));
          _set_bit(22);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .samson.network.Command command = 103;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, this->command(), output);
  }
  
  // optional .samson.network.CommandResponse command_response = 104;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      104, this->command_response(), output);
  }
  
  // optional .samson.network.WorkerTask worker_task = 105;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      105, this->worker_task(), output);
  }
  
  // optional .samson.network.WorkerTaskConfirmation worker_task_confirmation = 106;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      106, this->worker_task_confirmation(), output);
  }
  
  // optional .samson.network.WorkerDataExchange data = 107;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      107, this->data(), output);
  }
  
  // optional .samson.network.WorkerDataExchangeClose data_close = 108;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      108, this->data_close(), output);
  }
  
  // optional .samson.network.UploadDataInit upload_data_init = 111;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      111, this->upload_data_init(), output);
  }
  
  // optional .samson.network.UploadDataInitResponse upload_data_init_response = 112;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      112, this->upload_data_init_response(), output);
  }
  
  // optional .samson.network.UploadDataFile upload_data_file = 113;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      113, this->upload_data_file(), output);
  }
  
  // optional .samson.network.UploadDataFileResponse upload_data_file_response = 114;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      114, this->upload_data_file_response(), output);
  }
  
  // optional .samson.network.UploadDataFinish upload_data_finish = 115;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      115, this->upload_data_finish(), output);
  }
  
  // optional .samson.network.UploadDataFinishResponse upload_data_finish_response = 116;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      116, this->upload_data_finish_response(), output);
  }
  
  // optional .samson.network.DownloadDataInit download_data_init = 117;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      117, this->download_data_init(), output);
  }
  
  // optional .samson.network.DownloadDataInitResponse download_data_init_response = 118;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      118, this->download_data_init_response(), output);
  }
  
  // optional .samson.network.DownloadDataFile download_data_file = 119;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      119, this->download_data_file(), output);
  }
  
  // optional .samson.network.DownloadDataFileResponse download_data_file_response = 120;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      120, this->download_data_file_response(), output);
  }
  
  // optional .samson.network.DownloadDataFinish download_data_finish = 121;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      121, this->download_data_finish(), output);
  }
  
  // optional .samson.network.DownloadDataFinishResponse download_data_finish_response = 122;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      122, this->download_data_finish_response(), output);
  }
  
  // optional .samson.network.WorkerStatus worker_status = 170;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      170, this->worker_status(), output);
  }
  
  // optional .samson.network.Trace trace = 171;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      171, this->trace(), output);
  }
  
  // optional .samson.network.WorkerTaskKill worker_task_kill = 202;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      202, this->worker_task_kill(), output);
  }
  
  // optional .samson.network.WorkerTaskRemove worker_task_remove = 203;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      203, this->worker_task_remove(), output);
  }
  
  // optional uint64 delilah_id = 300;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(300, this->delilah_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .samson.network.Command command = 103;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        103, this->command(), target);
  }
  
  // optional .samson.network.CommandResponse command_response = 104;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        104, this->command_response(), target);
  }
  
  // optional .samson.network.WorkerTask worker_task = 105;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        105, this->worker_task(), target);
  }
  
  // optional .samson.network.WorkerTaskConfirmation worker_task_confirmation = 106;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        106, this->worker_task_confirmation(), target);
  }
  
  // optional .samson.network.WorkerDataExchange data = 107;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        107, this->data(), target);
  }
  
  // optional .samson.network.WorkerDataExchangeClose data_close = 108;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        108, this->data_close(), target);
  }
  
  // optional .samson.network.UploadDataInit upload_data_init = 111;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        111, this->upload_data_init(), target);
  }
  
  // optional .samson.network.UploadDataInitResponse upload_data_init_response = 112;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        112, this->upload_data_init_response(), target);
  }
  
  // optional .samson.network.UploadDataFile upload_data_file = 113;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        113, this->upload_data_file(), target);
  }
  
  // optional .samson.network.UploadDataFileResponse upload_data_file_response = 114;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        114, this->upload_data_file_response(), target);
  }
  
  // optional .samson.network.UploadDataFinish upload_data_finish = 115;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        115, this->upload_data_finish(), target);
  }
  
  // optional .samson.network.UploadDataFinishResponse upload_data_finish_response = 116;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        116, this->upload_data_finish_response(), target);
  }
  
  // optional .samson.network.DownloadDataInit download_data_init = 117;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        117, this->download_data_init(), target);
  }
  
  // optional .samson.network.DownloadDataInitResponse download_data_init_response = 118;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        118, this->download_data_init_response(), target);
  }
  
  // optional .samson.network.DownloadDataFile download_data_file = 119;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        119, this->download_data_file(), target);
  }
  
  // optional .samson.network.DownloadDataFileResponse download_data_file_response = 120;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        120, this->download_data_file_response(), target);
  }
  
  // optional .samson.network.DownloadDataFinish download_data_finish = 121;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        121, this->download_data_finish(), target);
  }
  
  // optional .samson.network.DownloadDataFinishResponse download_data_finish_response = 122;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        122, this->download_data_finish_response(), target);
  }
  
  // optional .samson.network.WorkerStatus worker_status = 170;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        170, this->worker_status(), target);
  }
  
  // optional .samson.network.Trace trace = 171;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        171, this->trace(), target);
  }
  
  // optional .samson.network.WorkerTaskKill worker_task_kill = 202;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        202, this->worker_task_kill(), target);
  }
  
  // optional .samson.network.WorkerTaskRemove worker_task_remove = 203;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        203, this->worker_task_remove(), target);
  }
  
  // optional uint64 delilah_id = 300;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(300, this->delilah_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Message::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .samson.network.Command command = 103;
    if (has_command()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->command());
    }
    
    // optional .samson.network.CommandResponse command_response = 104;
    if (has_command_response()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->command_response());
    }
    
    // optional .samson.network.WorkerTask worker_task = 105;
    if (has_worker_task()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->worker_task());
    }
    
    // optional .samson.network.WorkerTaskConfirmation worker_task_confirmation = 106;
    if (has_worker_task_confirmation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->worker_task_confirmation());
    }
    
    // optional .samson.network.WorkerTaskKill worker_task_kill = 202;
    if (has_worker_task_kill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->worker_task_kill());
    }
    
    // optional .samson.network.WorkerTaskRemove worker_task_remove = 203;
    if (has_worker_task_remove()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->worker_task_remove());
    }
    
    // optional .samson.network.WorkerDataExchange data = 107;
    if (has_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }
    
    // optional .samson.network.WorkerDataExchangeClose data_close = 108;
    if (has_data_close()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data_close());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .samson.network.UploadDataInit upload_data_init = 111;
    if (has_upload_data_init()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->upload_data_init());
    }
    
    // optional .samson.network.UploadDataInitResponse upload_data_init_response = 112;
    if (has_upload_data_init_response()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->upload_data_init_response());
    }
    
    // optional .samson.network.UploadDataFile upload_data_file = 113;
    if (has_upload_data_file()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->upload_data_file());
    }
    
    // optional .samson.network.UploadDataFileResponse upload_data_file_response = 114;
    if (has_upload_data_file_response()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->upload_data_file_response());
    }
    
    // optional .samson.network.UploadDataFinish upload_data_finish = 115;
    if (has_upload_data_finish()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->upload_data_finish());
    }
    
    // optional .samson.network.UploadDataFinishResponse upload_data_finish_response = 116;
    if (has_upload_data_finish_response()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->upload_data_finish_response());
    }
    
    // optional .samson.network.DownloadDataInit download_data_init = 117;
    if (has_download_data_init()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->download_data_init());
    }
    
    // optional .samson.network.DownloadDataInitResponse download_data_init_response = 118;
    if (has_download_data_init_response()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->download_data_init_response());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .samson.network.DownloadDataFile download_data_file = 119;
    if (has_download_data_file()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->download_data_file());
    }
    
    // optional .samson.network.DownloadDataFileResponse download_data_file_response = 120;
    if (has_download_data_file_response()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->download_data_file_response());
    }
    
    // optional .samson.network.DownloadDataFinish download_data_finish = 121;
    if (has_download_data_finish()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->download_data_finish());
    }
    
    // optional .samson.network.DownloadDataFinishResponse download_data_finish_response = 122;
    if (has_download_data_finish_response()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->download_data_finish_response());
    }
    
    // optional .samson.network.WorkerStatus worker_status = 170;
    if (has_worker_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->worker_status());
    }
    
    // optional .samson.network.Trace trace = 171;
    if (has_trace()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trace());
    }
    
    // optional uint64 delilah_id = 300;
    if (has_delilah_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->delilah_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_command()->::samson::network::Command::MergeFrom(from.command());
    }
    if (from._has_bit(1)) {
      mutable_command_response()->::samson::network::CommandResponse::MergeFrom(from.command_response());
    }
    if (from._has_bit(2)) {
      mutable_worker_task()->::samson::network::WorkerTask::MergeFrom(from.worker_task());
    }
    if (from._has_bit(3)) {
      mutable_worker_task_confirmation()->::samson::network::WorkerTaskConfirmation::MergeFrom(from.worker_task_confirmation());
    }
    if (from._has_bit(4)) {
      mutable_worker_task_kill()->::samson::network::WorkerTaskKill::MergeFrom(from.worker_task_kill());
    }
    if (from._has_bit(5)) {
      mutable_worker_task_remove()->::samson::network::WorkerTaskRemove::MergeFrom(from.worker_task_remove());
    }
    if (from._has_bit(6)) {
      mutable_data()->::samson::network::WorkerDataExchange::MergeFrom(from.data());
    }
    if (from._has_bit(7)) {
      mutable_data_close()->::samson::network::WorkerDataExchangeClose::MergeFrom(from.data_close());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      mutable_upload_data_init()->::samson::network::UploadDataInit::MergeFrom(from.upload_data_init());
    }
    if (from._has_bit(9)) {
      mutable_upload_data_init_response()->::samson::network::UploadDataInitResponse::MergeFrom(from.upload_data_init_response());
    }
    if (from._has_bit(10)) {
      mutable_upload_data_file()->::samson::network::UploadDataFile::MergeFrom(from.upload_data_file());
    }
    if (from._has_bit(11)) {
      mutable_upload_data_file_response()->::samson::network::UploadDataFileResponse::MergeFrom(from.upload_data_file_response());
    }
    if (from._has_bit(12)) {
      mutable_upload_data_finish()->::samson::network::UploadDataFinish::MergeFrom(from.upload_data_finish());
    }
    if (from._has_bit(13)) {
      mutable_upload_data_finish_response()->::samson::network::UploadDataFinishResponse::MergeFrom(from.upload_data_finish_response());
    }
    if (from._has_bit(14)) {
      mutable_download_data_init()->::samson::network::DownloadDataInit::MergeFrom(from.download_data_init());
    }
    if (from._has_bit(15)) {
      mutable_download_data_init_response()->::samson::network::DownloadDataInitResponse::MergeFrom(from.download_data_init_response());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      mutable_download_data_file()->::samson::network::DownloadDataFile::MergeFrom(from.download_data_file());
    }
    if (from._has_bit(17)) {
      mutable_download_data_file_response()->::samson::network::DownloadDataFileResponse::MergeFrom(from.download_data_file_response());
    }
    if (from._has_bit(18)) {
      mutable_download_data_finish()->::samson::network::DownloadDataFinish::MergeFrom(from.download_data_finish());
    }
    if (from._has_bit(19)) {
      mutable_download_data_finish_response()->::samson::network::DownloadDataFinishResponse::MergeFrom(from.download_data_finish_response());
    }
    if (from._has_bit(20)) {
      mutable_worker_status()->::samson::network::WorkerStatus::MergeFrom(from.worker_status());
    }
    if (from._has_bit(21)) {
      mutable_trace()->::samson::network::Trace::MergeFrom(from.trace());
    }
    if (from._has_bit(22)) {
      set_delilah_id(from.delilah_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  
  if (has_command()) {
    if (!this->command().IsInitialized()) return false;
  }
  if (has_command_response()) {
    if (!this->command_response().IsInitialized()) return false;
  }
  if (has_worker_task()) {
    if (!this->worker_task().IsInitialized()) return false;
  }
  if (has_worker_task_confirmation()) {
    if (!this->worker_task_confirmation().IsInitialized()) return false;
  }
  if (has_worker_task_kill()) {
    if (!this->worker_task_kill().IsInitialized()) return false;
  }
  if (has_worker_task_remove()) {
    if (!this->worker_task_remove().IsInitialized()) return false;
  }
  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  if (has_data_close()) {
    if (!this->data_close().IsInitialized()) return false;
  }
  if (has_upload_data_init()) {
    if (!this->upload_data_init().IsInitialized()) return false;
  }
  if (has_upload_data_init_response()) {
    if (!this->upload_data_init_response().IsInitialized()) return false;
  }
  if (has_upload_data_file()) {
    if (!this->upload_data_file().IsInitialized()) return false;
  }
  if (has_upload_data_file_response()) {
    if (!this->upload_data_file_response().IsInitialized()) return false;
  }
  if (has_upload_data_finish()) {
    if (!this->upload_data_finish().IsInitialized()) return false;
  }
  if (has_upload_data_finish_response()) {
    if (!this->upload_data_finish_response().IsInitialized()) return false;
  }
  if (has_download_data_init()) {
    if (!this->download_data_init().IsInitialized()) return false;
  }
  if (has_download_data_init_response()) {
    if (!this->download_data_init_response().IsInitialized()) return false;
  }
  if (has_download_data_file()) {
    if (!this->download_data_file().IsInitialized()) return false;
  }
  if (has_download_data_file_response()) {
    if (!this->download_data_file_response().IsInitialized()) return false;
  }
  if (has_download_data_finish()) {
    if (!this->download_data_finish().IsInitialized()) return false;
  }
  if (has_download_data_finish_response()) {
    if (!this->download_data_finish_response().IsInitialized()) return false;
  }
  if (has_trace()) {
    if (!this->trace().IsInitialized()) return false;
  }
  return true;
}

void Message::Swap(Message* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(command_response_, other->command_response_);
    std::swap(worker_task_, other->worker_task_);
    std::swap(worker_task_confirmation_, other->worker_task_confirmation_);
    std::swap(worker_task_kill_, other->worker_task_kill_);
    std::swap(worker_task_remove_, other->worker_task_remove_);
    std::swap(data_, other->data_);
    std::swap(data_close_, other->data_close_);
    std::swap(upload_data_init_, other->upload_data_init_);
    std::swap(upload_data_init_response_, other->upload_data_init_response_);
    std::swap(upload_data_file_, other->upload_data_file_);
    std::swap(upload_data_file_response_, other->upload_data_file_response_);
    std::swap(upload_data_finish_, other->upload_data_finish_);
    std::swap(upload_data_finish_response_, other->upload_data_finish_response_);
    std::swap(download_data_init_, other->download_data_init_);
    std::swap(download_data_init_response_, other->download_data_init_response_);
    std::swap(download_data_file_, other->download_data_file_);
    std::swap(download_data_file_response_, other->download_data_file_response_);
    std::swap(download_data_finish_, other->download_data_finish_);
    std::swap(download_data_finish_response_, other->download_data_finish_response_);
    std::swap(worker_status_, other->worker_status_);
    std::swap(trace_, other->trace_);
    std::swap(delilah_id_, other->delilah_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace network
}  // namespace samson

// @@protoc_insertion_point(global_scope)
