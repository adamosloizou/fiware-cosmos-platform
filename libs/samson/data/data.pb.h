// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#ifndef PROTOBUF_data_2eproto__INCLUDED
#define PROTOBUF_data_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace samson {
namespace data {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_data_2eproto();
void protobuf_AssignDesc_data_2eproto();
void protobuf_ShutdownFile_data_2eproto();

class Command;

enum Command_Action {
  Command_Action_Begin = 1,
  Command_Action_Operation = 2,
  Command_Action_Comment = 3,
  Command_Action_Finish = 4,
  Command_Action_Cancel = 5,
  Command_Action_Session = 6
};
bool Command_Action_IsValid(int value);
const Command_Action Command_Action_Action_MIN = Command_Action_Begin;
const Command_Action Command_Action_Action_MAX = Command_Action_Session;
const int Command_Action_Action_ARRAYSIZE = Command_Action_Action_MAX + 1;

const ::google::protobuf::EnumDescriptor* Command_Action_descriptor();
inline const ::std::string& Command_Action_Name(Command_Action value) {
  return ::google::protobuf::internal::NameOfEnum(
    Command_Action_descriptor(), value);
}
inline bool Command_Action_Parse(
    const ::std::string& name, Command_Action* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Command_Action>(
    Command_Action_descriptor(), name, value);
}
// ===================================================================

class Command : public ::google::protobuf::Message {
 public:
  Command();
  virtual ~Command();
  
  Command(const Command& from);
  
  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Command& default_instance();
  
  void Swap(Command* other);
  
  // implements Message ----------------------------------------------
  
  Command* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Command_Action Action;
  static const Action Begin = Command_Action_Begin;
  static const Action Operation = Command_Action_Operation;
  static const Action Comment = Command_Action_Comment;
  static const Action Finish = Command_Action_Finish;
  static const Action Cancel = Command_Action_Cancel;
  static const Action Session = Command_Action_Session;
  static inline bool Action_IsValid(int value) {
    return Command_Action_IsValid(value);
  }
  static const Action Action_MIN =
    Command_Action_Action_MIN;
  static const Action Action_MAX =
    Command_Action_Action_MAX;
  static const int Action_ARRAYSIZE =
    Command_Action_Action_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Action_descriptor() {
    return Command_Action_descriptor();
  }
  static inline const ::std::string& Action_Name(Action value) {
    return Command_Action_Name(value);
  }
  static inline bool Action_Parse(const ::std::string& name,
      Action* value) {
    return Command_Action_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required uint64 task_id = 1;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  inline ::google::protobuf::uint64 task_id() const;
  inline void set_task_id(::google::protobuf::uint64 value);
  
  // required string command = 2;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 2;
  inline const ::std::string& command() const;
  inline void set_command(const ::std::string& value);
  inline void set_command(const char* value);
  inline void set_command(const char* value, size_t size);
  inline ::std::string* mutable_command();
  
  // required .ss.data.Command.Action action = 3;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 3;
  inline ::samson::data::Command_Action action() const;
  inline void set_action(::samson::data::Command_Action value);
  
  // optional uint64 time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ss.data.Command)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 task_id_;
  ::std::string* command_;
  static const ::std::string _default_command_;
  int action_;
  ::google::protobuf::uint64 time_;
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Command* default_instance_;
};
// ===================================================================


// ===================================================================

// Command

// required uint64 task_id = 1;
inline bool Command::has_task_id() const {
  return _has_bit(0);
}
inline void Command::clear_task_id() {
  task_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 Command::task_id() const {
  return task_id_;
}
inline void Command::set_task_id(::google::protobuf::uint64 value) {
  _set_bit(0);
  task_id_ = value;
}

// required string command = 2;
inline bool Command::has_command() const {
  return _has_bit(1);
}
inline void Command::clear_command() {
  if (command_ != &_default_command_) {
    command_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Command::command() const {
  return *command_;
}
inline void Command::set_command(const ::std::string& value) {
  _set_bit(1);
  if (command_ == &_default_command_) {
    command_ = new ::std::string;
  }
  command_->assign(value);
}
inline void Command::set_command(const char* value) {
  _set_bit(1);
  if (command_ == &_default_command_) {
    command_ = new ::std::string;
  }
  command_->assign(value);
}
inline void Command::set_command(const char* value, size_t size) {
  _set_bit(1);
  if (command_ == &_default_command_) {
    command_ = new ::std::string;
  }
  command_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Command::mutable_command() {
  _set_bit(1);
  if (command_ == &_default_command_) {
    command_ = new ::std::string;
  }
  return command_;
}

// required .ss.data.Command.Action action = 3;
inline bool Command::has_action() const {
  return _has_bit(2);
}
inline void Command::clear_action() {
  action_ = 1;
  _clear_bit(2);
}
inline ::samson::data::Command_Action Command::action() const {
  return static_cast< ::samson::data::Command_Action >(action_);
}
inline void Command::set_action(::samson::data::Command_Action value) {
  GOOGLE_DCHECK(::samson::data::Command_Action_IsValid(value));
  _set_bit(2);
  action_ = value;
}

// optional uint64 time = 4;
inline bool Command::has_time() const {
  return _has_bit(3);
}
inline void Command::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::uint64 Command::time() const {
  return time_;
}
inline void Command::set_time(::google::protobuf::uint64 value) {
  _set_bit(3);
  time_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace samson

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::samson::data::Command_Action>() {
  return ::samson::data::Command_Action_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_data_2eproto__INCLUDED
