package ss.network;

// ////////////////////////////////////////////////////////////////////////////
//
// Common 
//

message EnvironmentVariable
{
	required string name	=1;	// Name of the property
	required string value	=2;	// Value
}

message Environment
{
	repeated EnvironmentVariable variable=1;	// List of enrivonment variables
}


message KVInfo
{
	required uint64 size=1;		// Size in bytes
	required uint64 kvs=2;		// Number of kvs
}

message File
{
	required string name=1;		// Name of file
	required int32 worker=2;	// Worker where this file has been created
	required KVInfo info=3;		// Information about this file
}

message Queue
{
	required string name = 1;
	required KVFormat format = 2;
	optional KVInfo info = 3;
}

message FileList
{
	repeated File file=1;		// List of files
}

message FullQueue
{
	required Queue queue	=1;		// Queue basic info
	repeated File file	=2;		// List of files	
}

message QueueFile
{
	required string queue=1;	// Name of the queue
	required File file=2;		// File with all the info
}

message KVFormat
{
	required string keyFormat=1;	// Format for the key
	required string ValueFormat=2;	// Format for the value
}


message Operation
{
	required string name		= 1;		// Name of the operation
	required string help   		= 2;		// Some help for this opertion
	required string help_line 	= 3;		// Some help for this opertion ( just one line )
	repeated KVFormat input   	= 4;		// KV types for inputs
	repeated KVFormat output  	= 5;		// KV types for output
}

message Data
{
	required string name = 1;	// Name of this data type
	required string help = 2;	// Some string showing help for this data type
}

// ////////////////////////////////////////////////////////////////////////////
//
// Status message request ans answer to interact between delilah and controller/workers
//

message StatusRequest
{
	optional string command = 1;	// Some string to clarify the status request
	optional int32 senderId	= 2;	// Identifier of the sender ( when controller notify workers )
}

message StatusResponse
{
	required string title = 1;	// Title of the status ( Controller / Wroker X / Delailah )
	required string response = 2;	// content of the status to visualize on screen
	optional int32 senderId	= 3;	// Identifier of the sender ( when workers answers back to the controller )
}

// ////////////////////////////////////////////////////////////////////////////
//
// Message with a task from the controller workers
//

message WorkerTask
{
	required int64 task_id		  = 1;	// Id of the top level ( controller ) task	
	required string operation 	  = 2;	// Name of the operation to run

	repeated FileList input		  = 3;  // Input files ( all inputs for each queue )
	repeated Queue output		  = 4;  // output queues

	optional bool generator		  = 5;	// Optional flag only used in the generator operations

	required Environment environment  = 6;	// Environment operations for this task
}

// ////////////////////////////////////////////////////////////////////////////
//
// Update of a task from a worker to the controller
//

message WorkerTaskConfirmation
{
	required int64 task_id	      = 1;	// Id of the opt level (controller ) task
	repeated QueueFile file       = 2;      // Files created with this operation
	required bool finish	      = 3;	// Flag to indicate that the task have finished	
	required bool completed	      = 4;	// Flat to indicate that the task can be considered completed ( everything saved to disk )

	required bool  error          = 5;      // Error in the operation
	optional string error_message = 6;      // Message to debug the error

}

// ////////////////////////////////////////////////////////////////////////////
//
// Command from Delilah to controller
//

message Command
{
	required string  command   = 1;          // String to send a txt command
	optional Environment environment    = 3;		 // Initial environment variables for the new job

}

// ////////////////////////////////////////////////////////////////////////////
//
// Response message from Controller to Delilah
//
message CommandResponse
{
	required string command	     = 1;   // Copy of the original command
	required string  response    = 2;   // Answer for the command
	required int32   sender_id   = 3;   // Id of the packet sender ( delilah )


	required bool error       = 4;   // Flag to indicat if there was an error
	required bool finish      = 5;   // Flag to indicate if the command is finished ( with or without error)

}

// ////////////////////////////////////////////////////////////////////////////
//
// Help from Delilah to controller
//

message Help
{
	required bool queues = 1;
	required bool datas = 3;
	required bool operations = 4;

	// Filters for the operations
	optional string name = 5;	// Optinal parameter to specify the name of the queue/data/operation I would like to be informed
	optional string begin = 6;	// Optional parameter to specify the begining of the name
}

// ////////////////////////////////////////////////////////////////////////////
//
// Help response from Controller to Delilah
//

message HelpResponse
{
	// Original message to know what request is refering to
   	required Help help=1;	

	// Information
	repeated FullQueue queue = 2;
	repeated Data data = 4;
	repeated Operation operation = 5;
}



// ////////////////////////////////////////////////////////////////////////////
//
// Message to exchange information between workers
//
message WorkerDataExchange
{
	required int64 task_id  = 1;	// Identifier of the controller task
	required Queue queue     = 2;  	// Name of the queue where we store information
	optional bool txt = 3;	       	// Flag to indicate that this is a txt buffer, so go to disk directly whiout buffering or merging
}

// ////////////////////////////////////////////////////////////////////////////
//
// Message to notify that no more data will be generated for this task
//

message WorkerDataExchangeClose
{
	required int64   task_id   = 1;  // Identifier of the controller task
}

// ////////////////////////////////////////////////////////////////////////////
//
// Message to Load data from Delilah to a Worker and response
//

message UploadData
{
	required uint64 file_id=2;	// Id of the file ( multiple files for the same process)		
}

message UploadDataResponse
{
	required UploadData	upload_data	=1;	// Copy of the upload_data message

	required bool error = 3;			// Flag to indicate if there was an error
	optional string error_message = 4;		// Possible error message ( if error )

	required File file = 5;				// Created file
}

message UploadDataConfirmation
{
	required string queue=2;		// Name of the queue to upload
	repeated File   file=3;			// List of uploaded files
}

message UploadDataConfirmationResponse
{
	required bool error=2;				// Flag to indicarte if there was an error				   	
	required string error_message=3;		// String message to show to the user
}


// ////////////////////////////////////////////////////////////////////////////
//
// Messages for unload data
//


message DownloadData
{
	required int32 file_id		=2;	// File id we are requesting
	required File file 		=3;	// Files that we would like to download
}

message DownloadDataResponse
{
	required DownloadData download_data	=1;	// copy of the request message

	required bool error = 3;			// Flag to indicate if there was an error
	optional string error_message = 4;		// Possible error message ( if error )
}


// ////////////////////////////////////////////////////////////////////////////
//
// Messages for select
//

message SelectRequest
{
	// Packet send from delilah to controller and from controller to workers
	required int32 sender_id	=1;		// Sender id
	required string queue		=2;		// Selected queue
}


// ////////////////////////////////////////////////////////////////////////////
//
// General message
//
message Message
{
	enum Sender
	{
		Worker     = 0x57;
		Controller = 0x43;
		Delilah    = 0x44;
	};



	// ////////////////////////////////////////////////////////////////////////////
	//
	// Message Data (only one of these structures per message
	//
	optional Command                command                   = 103;  // Command message
	optional CommandResponse        command_response          = 104;  // Command response message

	optional WorkerTask             worker_task	          = 105;  // Work task message
	optional WorkerTaskConfirmation worker_task_confirmation  = 106;  // Work task confirmation message

	optional WorkerDataExchange  	data                      = 107;  // Exchange of data packets between nodes     
	optional WorkerDataExchangeClose data_close		  = 108;  // Message to finish data transmission between workers

	optional Help                   help                      = 109;  // Ask for help ( queues / datas / operations )
	optional HelpResponse           help_response             = 110;  // Response for the ask help message   			     

	optional UploadData		upload_data		  = 111;  // Load data ( Delilah to Worker )
	optional UploadDataResponse	upload_data_response	  = 112;  // Load data ( Worker to Delilah )

	optional UploadDataConfirmation   upload_data_confirmation	  = 113;  // Confirmation of a load data process ( Delilah to Controller)
	optional UploadDataConfirmationResponse upload_data_confirmation_response = 114; 	  // Reponse of the previous message

	optional DownloadData		download_data		= 200;		//
	optional DownloadDataResponse	download_data_response	= 201;		//

	optional StatusRequest status_request = 115; 				      // request for status ( debuggin )
	optional StatusResponse status_response = 116;				      // response of a status request

	
	optional uint64  delilah_id = 300;				// Used in commands , upload and download process with delilah
}



// Message between Process and Process Assitant

message ProcessMessage
{
        enum Code
        {
		run = 1;
                process_output = 2;
		continue_run = 3;
                finished = 4;
		error = 5;
		crash = 6;
 	};

	required Code code=1;			// Main type of packet		

	optional int32 input_shm = 2;		// Input shared memory to be used ( only in run messages for map, reduce, parse operations)
	optional int32 output_shm = 3;		// Output shared memory to be used( only in run messages for all operations)

	optional int32 input_size = 8;		// size of the input ( necessary when reading input )

	optional int32 num_servers=4;		// Num of servers ( only in run messages )

	optional int32 num_inputs=5;		// Number of outputs (only un run messages)
	optional int32 num_outputs=6;		// Number of outputs (only un run messages)

	optional string operation =7;		// Name of the operation to run ( only in run messages for all operations)

	optional bool output_kvs=13;		// Indicate that key-values are necessary at the output (map,reduce,generator)
	optional bool output_txt=14;		// Indicate that txt files are necessary at the output (parseOut)

	optional WorkerTask worker_task=10;	// Entire copy of the worker task

	optional uint32 num_hash_groups=11;	// Number of hash groups ( only in reduce operations )
	optional uint32 num_input_files=12;	// total number of files included at the input ( only in reduce operations )
	optional uint32 hg_begin=15;		// Hash group begin we are processing
	optional uint32 hg_end=16;		// Hash group end we are processing


}
