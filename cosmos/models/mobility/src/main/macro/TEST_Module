
Module TEST
{

   title "Module to support the communities detection from text graph"
   author "Alberto Mart√≠n"
   version "1.0"   
   include BASE_Module.h
   include math.h
   include GST_Module.h
	
   help
   {
	"Module TEST help"
	""
	"This module is the starting point to use MACRO as developer"
	"Please use this module to create your first map/reduce operations"
   }
}

# ------------------------------------------------------------
# My Datas
# ------------------------------------------------------------


#############################
# Data for mobility product #
#############################
Data TwoInt
{
	uint num1;
	uint num2;
}

Data Huso
{
  uint id;
  double merid_gra;
  double merid_rad;
}

Data CdrMx
{
     uint phone;
     uint cell;
     Date date;
     Time time;
     uint foreign;
}

Data CellMx
{
	 uint cell;
	 uint bts;
	 uint mun;
	 uint sta;
	 double posx;
     double posy;
}

Data Bts
{
	 uint id;
	# double area;
	 float area;
	 uint comms;
	# double posxUTM;
	# double posyUTM;
	# double posxGMT;
	# double posyGMT;
	# Huso huso;
	# vector uint adj;
}

Data Poi
{
	 uint id;
	 uint node;
	 uint bts;
	 uint labelnode;
	 uint labelgroupnode;
	 uint8 confidentnode;
	 double distancenode;
	 uint labelbts;
	 uint labelgroupbts;
	 uint8 confidentbts;
	 double distancebts;
	 uint labelnodebts;
	 uint labelgroupnodebts;
	 uint8 confidentnodebts;
	 double distancenodebts;
	 int8 inoutWeek;
	 int8 inoutWend;
}

Data Node_Bts
{
	 uint phone;
	 uint bts;
	 uint8 wday;
	 uint range;
}

Data Bts_Counter
{
	uint bts;
	uint8 wday;
	uint range;
	uint count;
}

Data NodeMx_Counter
{
	vector Bts_Counter bts;
}

Data Node_Bts_Day
{
	uint node;
	uint bts;
	uint8 workday;
	uint count;
}

## Vectors ##
#############
Data Double
{
	double value;
}
Data DateVector
{
	uint8 day;
	uint8 month;
	uint8 hour;
}
Data DailyVector
{
	vector TwoInt hours;
}
Data ClusterVector
{
	vector Double coms;
}
Data Cluster
{
	uint8 label;
	uint8 labelgroup;
	uint8 confident;	# 0: No confident	1: Confident
	double mean;
	double distance;
	ClusterVector coords;
}
Data ClusterSet
{
	vector Cluster cluster;
}

## Second homes ##
##################
Data PoiPos
{
	uint node;
	uint bts;
	uint label;
	double posx;
	double posy;
	int8 inoutWeek;
	int8 inoutWend;
	double radiusWeek;
	double distCMWeek;
	double radiusWend;
	double distCMWend;
}

## Adjacent ##
##############
Data PoiNew
{
	 uint id;
	 uint node;
	 uint bts;
	 uint labelgroupnodebts;
	 uint8 confidentnodebts;
}
Data PoiAdj
{
	 uint node;
	 uint bts1;
	 uint bts2;
	 uint poi1;
	 uint poi2;
	 uint lblpoi;
}
Data VectorPairs
{
	vector TwoInt values;
}

## Influence area ##
####################
Data TelMonth
{
	uint phone;
	uint month;		# Number of month
	uint workingday;	# 0: working day	1: weekend
}
Data TempMob
{
	vector uint btss;
	vector uint muns;
	vector uint states;
	vector double coord_utmx;
	vector double coord_utmy;
}
Data MobVars
{
	uint month;
	uint workingday;
	uint num_pos;
	uint dif_btss;
	uint dif_muns;
	uint dif_states;
	double masscenter_utmx;
	double masscenter_utmy;
	double radius;
	double diam_areainf;
}
Data Mob_VI_MobVars
{
	vector MobVars vars;
}

## Itineraries ##
#################
Data ItinTime
{
	Date date;
	Time time;
	uint bts;
}
Data ItinMovement
{
	ItinTime source;
	ItinTime target;
}
Data ItinRange
{
	uint poiSrc;
	uint poiTgt;
	uint node;
	uint group;
	uint range;
}
Data ItinPercMove
{
	uint group;
	uint range;
	double perc_moves;
}
Data Itinerary
{
	uint source;
	uint target;
	uint wday_peak_init;
	uint range_peak_init;
	uint wday_peak_fin;
	uint range_peak_fin;
	uint wday_init;
	uint range_init;
	uint wday_fin;
	uint range_fin;
}

## Matrix ##
############
Data MatrixTime
{
	Date date;
	Time time;
	uint group;
	uint bts;
}
Data MatrixRange
{
	uint node;
	uint poiSrc;
	uint poiTgt;
	uint group;
	uint range;
}
Data PairIdMtx
{
	uint id1;
	uint id2;
	vector Double coms;
}
Data ProfileMtx
{
	ItinRange itrange;
	double count;
}

## Population density ##
########################
Data NodBtsDate
{
	uint node;
	uint bts;
	Date date;
	uint hour;
}

Data BtsProfile
{
	uint bts;
	uint8 profile;
	uint8 wday;
	uint hour;
}

## Convert GMT to UTM ##
########################
Data Elipsoide 
{
  double a;
  double b;
  double e;
  double seg_e;
  double seg_e_cua;
  double c;
  double apl;
}

Data CellMxUTM
{
	uint cell;
	uint bts;
	uint mun;
	uint sta;
	double posx;
    double posy;
    Huso huso;
}

Data bts_coords
{
  uint id;
  double posx;
  double posy;
  Huso huso;
}

## Borrar ##
############
Data VectorUInt
{
	vector UInt values;
}

## Vertices Voronoi ##
######################

Data Vertices_Voronoi
{
  uint idBts;
	uint8 idOrden;
	double posxUTM;
	double posyUTM;
	double posxGMT;
	double posyGMT;
	Huso huso;
}

Data Contorno
{
  double posx;
  double posy;
}


## Events Chile ##
##################
Data EventInfo
{
	uint numCalls;
	uint poi_lbl;
	uint8 confidence;
}

# ------------------------------------------------------------
# My Scripts
# ------------------------------------------------------------
Script mob_script_parse_data
{
	in txt txt	# Results folder
	out Void Void
	
	top
	
	help
	{
		"Parse text data to binary data"
	}
	code
	"
		# Parse cdrs
		mobmx_parse_cdrs $1/cdrs $1/cdrs_mob
		# Parse cells
		mobmx_parse_cells $1/cells $1/cells_mob
		# Parse pair of adjacent bts
		mobmx_adj_parse_adj_bts $1/pairbtsadj_txt $1/pairbts_adj
		# Parse bts info
		mobmx_borrar_get_bts_comarea $1/btsVectorTxt $1/bts_comarea
	"
}
Script mob_script_prepare_data
{
	in txt txt	# Results folder
	out Void Void
	
	top
	
	help
	{
		"Prepare binary data to the mobility process"
	}
	code
	"
		# Filter cdrs of clients with no info about cell
		mobmx_filter_cellnoinfo $1/cdrs_mob $1/cdrsinfo $1/cdrsnoinfo 
		# Change cells by bts
		mobmx_join_bts_node $1/cdrsinfo $1/cells_mob $1/clients_bts $1/bts_comms $1/cdrsnobts $1/vi_telmonth_bts
	"
}
Script mob_script_get_vectors_to_cluster
{
	in txt txt	# Results folder
	out Void Void
	
	top
	
	help
	{
		"Calculate vectors of communication (client, bts, poi)"
		"inputs of cluster process"
	}
	
	code
	"
	  # Get sample
	  mobmx_get_sample_10000 cdrs_mob cdrs_sample
	  # Filter cdrs of clients with no info about cell
      mobmx_filter_cellnoinfo $1/cdrs_sample $1/cdrsinfo_smp $1/cdrsnoinfo_smp
      # Change cells by bts
      mobmx_join_bts_node $1/cdrsinfo_smp $1/cells_mob $1/clients_bts_smp $1/bts_comms_smp $1/cdrsnobts_smp $1/vi_telmonth_bts_smp
      # Number of comms by client, bts and hour
      mobmx_node_bts_counter $1/clients_bts_smp $1/clients_btscounter_smp
      # Array of counters
      mobmx_node_mobInfo $1/clients_btscounter_smp $1/clients_info_smp
	  # Save space
	  rm $1/clients_bts_smp -f
	  rm $1/clients_btscounter_smp -f
	  rm $1/vi_telmonth_bts_smp -f
	  rm $1/bts_comms_smp -f
	  # Spread array by client and bts
	  mobmx_repbts_spread_nodebts $1/clients_info_smp $1/clients_info_spread_smp
	  # Group and count total comms by client and bts
	  mobmx_repbts_aggbybts $1/clients_info_spread_smp $1/clients_info_aggbybts_smp
	  # Filter by number of comms
	  mobmx_repbts_filter_num_comms $1/clients_info_aggbybts_smp $1/cdrsnoinfo_smp $1/cdrsnobts_smp $1/clients_info_filtered_smp
	  # Calculate percentages of bts
	  mobmx_repbts_join_dist_comms $1/clients_info_aggbybts_smp $1/clients_info_filtered_smp $1/clients_info_bts_perc_smp
	  # Extract POIs
	  mobmx_repbts_get_representative_bts $1/clients_info_bts_perc_smp $1/clients_repbts_smp
      # Save space
      rm $1/clients_info_spread_smp -f
      rm $1/clients_info_aggbybts_smp -f
      rm $1/clients_info_bts_perc_smp -f
      rm $1/cdrsnoinfo_smp -f
      rm $1/cdrsnobts_smp -f
	  
	  # CLIENT VECTOR
      # Filter cdrs by clients filtered
      mobmx_vector_filt_clients $1/cdrs_sample $1/clients_info_filtered_smp $1/cdrs_filtered_smp
      # Spread by client, group and hour
      mobmx_vector_spread_nodedayhour $1/cdrs_filtered_smp $1/clients_info_spread_smp
      # Number of comms by client, day group and hour
      mobmx_vector_get_ncoms_nodedayhour $1/clients_info_spread_smp $1/cliVec_numcoms_smp
      # Vector by client and group
      mobmx_vector_create_node_dayhour $1/cliVec_numcoms_smp $1/cliVec_group_smp
      # Fuse group vectors by client
      mobmx_vector_fuse_node_daygroup $1/cliVec_group_smp $1/vector_client_smp
      # Vector normalization
      mobmx_vector_normalized $1/vector_client_smp $1/vector_client_norm_smp
	  # Extract to file
	  export $1/vector_client_norm_smp $1/vectorClientNormSampleTxt
	  # Save space
	  rm $1/cdrs_filtered_smp -f
	  rm $1/clients_info_spread_smp -f
	  rm $1/cliVec_group_smp -f
	  rm $1/vector_client_smp -f
	  rm $1/vector_client_norm_smp
	  
	  # BTS VECTOR
	  # ???
      mobmx_vector_filter_bts $1/bts_comms $1/bts_counts
      # Num of comms by bts, group and hour
      mobmx_vector_sum_coms_bts $1/bts_counts $1/bts_sum_coms
      # Vector of comms by bts and day group
      mobmx_vector_create_node_dayhour $1/bts_sum_coms $1/bts_dayhour
      # Fuse group vectors by bts
      mobmx_vector_fuse_node_daygroup $1/bts_dayhour $1/vector_bts
      # Vector normalization
      mobmx_vector_normalized $1/vector_bts $1/vector_bts_norm
	  # Extract to file
	  export $1/vector_bts_norm $1/vectorBtsNormTxt
	  # Save space
	  rm bts_counts -f
	  rm bts_sum_coms -f
	  rm bts_dayhour -f
	  rm vector_bts -f
	  rm vector_bts_norm -f
	  
	  # POI VECTOR
      # Extend by client, bts, day group and hour
      mobmx_vector_spread_nodbts $1/clients_info_smp $1/clientsbts_spread_smp
      # Num of comms by client, bts, day group and hour
      mobmx_vector_sum_groupcomms $1/clientsbts_spread_smp $1/clientsbts_sum_smp
      # Filter bts by POIs of a client
      mobmx_vector_filt_clientbts $1/clientsbts_sum_smp $1/clients_repbts_smp $1/clientsbts_repbts_smp
      # Vector of comms by client, bts and day group
      mobmx_vector_create_node_dayhour $1/clientsbts_repbts_smp $1/clientsbts_group_smp
      # Fuse group vectors by client and bts
      mobmx_vector_fuse_node_daygroup $1/clientsbts_group_smp $1/vector_clientbts_smp
      # Vector normalization
      mobmx_vector_normalized $1/vector_clientbts_smp $1/vector_clientbts_norm_smp
	  # Extract to file
	  export $1/vector_clientbts_norm_smp $1/vectorCliBtsNormSampleTxt
	  # Save space	  
	  rm $1/clientsbts_spread_smp -f
	  rm $1/clientsbts_sum_smp -f
	  rm $1/clientsbts_repbts_smp -f
	  rm $1/clientsbts_group_smp -f
	  rm $1/vector_clientbts_smp -f
	  rm $1/cdrsinfo_smp -f
	  rm $1/clients_info_smp -f
	  rm $1/clients_info_filtered_smp -f
	  rm $1/clients_repbts_smp -f
	  rm $1/cliVec_numcoms_smp -f
	  rm $1/vi_telmonth_bts_smp -f
	  rm $1/vector_clientbts_norm_smp
	"
}

Script mob_script_extract_MIVs
{
   in txt txt  # Results folder
   out Void Void

   top

   help
   {
      "Script to calculate the mobility individual variables of a client."
   }

   code
   "
      # Calculate individual variables by month
      mobmx_MobVar_calcvariables vi_telmonth_bts vi_telmonth_mobvars
      # Fuse in a set all user info
      mobmx_MobVar_fusiontotalvars vi_telmonth_mobvars vi_client_fuse
      # Extract to text file
      mobmx_MobVar_indVars_out vi_client_fuse viClientFuseTxt
      # Delete months
      mobmx_MobVar_delete_period vi_telmonth_bts vi_telmonth_bts_acc
      # Calculate individual variables for every months
      mobmx_MobVar_calcvariables vi_telmonth_bts_acc vi_telmonth_mobvars_acc
      # Fuse in a set all user info
      mobmx_MobVar_fusiontotalvars vi_telmonth_mobvars_acc vi_client_fuse_acc
      # Extract to text file
      mobmx_MobVar_indVars_accumulated_out vi_client_fuse_acc viClientFuseAccTxt

	  # Save space
	  rm $1/vi_telmonth_mobvars -f
	  rm $1/vi_telmonth_bts_mobvars -f
	  rm $1/vi_telmonth_bts_acc -f
	  rm $1/vi_telmonth_mobvars_acc -f
	  rm $1/vi_telmonth_bts -f
   "
}

Script mob_script_extract_POIs
{
   in txt txt  # Results folder
   out Void Void

   top

   help
   {
      "Script to identify the points of interest of a client."
   }

   code
   "
	  # Number of comms by client, bts and hour
      mobmx_node_bts_counter $1/clients_bts $1/clients_btscounter
      # Array of counters
      mobmx_node_mobInfo $1/clients_btscounter $1/clients_info
	  # Save space
	  rm clients_bts -f
	  rm clients_btscounter -f
	  # Spread array by client and bts
	  mobmx_repbts_spread_nodebts $1/clients_info $1/clients_info_spread
	  # Group and count total comms by client and bts
	  mobmx_repbts_aggbybts $1/clients_info_spread $1/clients_info_aggbybts
	  # Filter by number of comms
	  mobmx_repbts_filter_num_comms $1/clients_info_aggbybts $1/cdrsnoinfo $1/cdrsnobts $1/clients_info_filtered
	  # Calculate percentages of bts
	  mobmx_repbts_join_dist_comms $1/clients_info_aggbybts $1/clients_info_filtered $1/clients_info_bts_perc
	  # Extract POIs
	  mobmx_repbts_get_representative_bts $1/clients_info_bts_perc $1/clients_repbts
      # Save space
      rm $1/clients_info_spread -f
      rm $1/clients_info_aggbybts -f
      rm $1/clients_info_bts_perc -f
      rm $1/cdrsnoinfo -f
      rm $1/cdrsnobts -f
   "
}
Script mob_script_label_POIs
{
   in txt txt  # Results folder
   out Void Void

   top

   help
   {
      "Script to label the points of interest."
   }
   code
   "
		mob_script_label_client $1
		mob_script_label_bts $1
		mob_script_label_client_bts $1
		mob_script_join_labels $1
		mob_script_detect_second_homes $1
   "
}
Script mob_script_label_client
{
   in txt txt  # Results folder
   out Void Void

   top

   help
   {
	  "Script to label the general use of a client."
   }
   code
   "
	  # Filter cdrs by clients filtered
      mobmx_vector_filt_clients $1/cdrs_mob $1/clients_info_filtered $1/cdrs_filtered
      # Spread by client, group and hour
      mobmx_vector_spread_nodedayhour $1/cdrs_filtered $1/clients_info_spread
      # Number of comms by client, day group and hour
      mobmx_vector_get_ncoms_nodedayhour $1/clients_info_spread $1/cliVec_numcoms
      # Vector by client and group
      mobmx_vector_create_node_dayhour $1/cliVec_numcoms $1/cliVec_group
      # Fuse group vectors by client
      mobmx_vector_fuse_node_daygroup $1/cliVec_group $1/vector_client
      # Vector normalization
      mobmx_vector_normalized $1/vector_client $1/vector_client_norm
      # Centroids parser
      mobmx_parse_client_clusters $1/centroides_client $1/clusters_client
      # Labelling of client vector
      mobmx_cluster_client_get_min_distance $1/vector_client_norm $1/vector_client_cluster 
      # Save space
      rm $1/cdrs_filtered -f
	  rm $1/clients_info_filtered -f
      rm $1/clients_info_spread -f
      rm $1/cliVec_numcoms -f
      rm $1/cliVec_group -f
      rm $1/vector_client -f
      rm $1/clusters_client -f
      rm $1/vector_client_norm -f
   "
}
Script mob_script_label_bts
{
   in txt txt  # Results folder
   out Void Void

   top

   help
   {
      "Script to label the general use of a bts."
   }
   code
   "
	  # ???
      mobmx_vector_filter_bts $1/bts_comms $1/bts_counts
      # Num of comms by bts, group and hour
      mobmx_vector_sum_coms_bts $1/bts_counts $1/bts_sum_coms
      # Vector of comms by bts and day group
      mobmx_vector_create_node_dayhour $1/bts_sum_coms $1/bts_dayhour
      # Fuse group vectors by bts
      mobmx_vector_fuse_node_daygroup $1/bts_dayhour $1/vector_bts
      # Vector normalization
      mobmx_vector_normalized $1/vector_bts $1/vector_bts_norm
      # Centroids parser
      mobmx_parse_bts_clusters $1/centroides_bts $1/clusters_bts
      # Labelling of bts vector
      mobmx_cluster_bts_get_min_distance $1/vector_bts_norm $1/vector_bts_cluster_sinfilt
	  # Put confidence
	  mobmx_filter_bts_vector vector_bts_cluster_sinfilt bts_comarea vector_bts_cluster
      # Save space
      rm $1/bts_counts -f
	  rm $1/bts_comms -f
      rm $1/bts_sum_coms -f
      rm $1/bts_dayhour -f
      rm $1/vector_bts -f
      rm $1/vector_bts_norm -f
	  rm $1/vector_bts_cluster_sinfilt
      rm $1/clusters_bts -f
   "
}
Script mob_script_label_client_bts
{
   in txt txt  # Results folder
   out Void Void

   top

   help
   {
      "Script to label the use of a bts by a client."
   }
   code
   "
	  # Extend by client, bts, day group and hour
      mobmx_vector_spread_nodbts $1/clients_info $1/clientsbts_spread
      # Num of comms by client, bts, day group and hour
      mobmx_vector_sum_groupcomms $1/clientsbts_spread $1/clientsbts_sum
      # Filter bts by POIs of a client
      mobmx_vector_filt_clientbts $1/clientsbts_sum $1/clients_repbts $1/clientsbts_repbts
      # Vector of comms by client, bts and day group
      mobmx_vector_create_node_dayhour $1/clientsbts_repbts $1/clientsbts_group
      # Fuse group vectors by client and bts
      mobmx_vector_fuse_node_daygroup $1/clientsbts_group $1/vector_clientbts
      # Vector normalization
      mobmx_vector_normalized $1/vector_clientbts $1/vector_clientbts_norm
      # Medoids parser
      mobmx_parse_clientbts_clusters $1/medoides_clientbts $1/clusters_clientbts
      # Labelling of POI vector
      mobmx_cluster_clientbts_get_min_distance $1/vector_clientbts_norm $1/points_of_interest_temp $1/vector_clientbts_cluster
      # Save space
      rm $1/clientsbts_spread -f
      rm $1/clientsbts_sum -f
      rm $1/clientsbts_repbts -f
      rm $1/clientsbts_group -f
      rm $1/vector_clientbts_norm -f
      rm $1/clusters_clientbts -f
   "
}

Script mob_script_join_labels
{
   in txt txt  # Results folder
   out Void Void

   top

   help
   {
      "Script to join labels of points of interest of a client."
   }

   code
   "
		# Join client and poi vectors
		mobmx_cluster_agg_node_cluster $1/points_of_interest_temp $1/vector_client_cluster $1/points_of_interest_temp2 $1/potpoi
		# Add majority poi label by client label
		mobmx_cluster_spread_nodelbl_poilbl $1/points_of_interest_temp2 $1/clientbts_nodpoilbl
		mobmx_cluster_count_majPoi_by_node $1/clientbts_nodpoilbl $1/clientbts_nodpoi_count
		mobmx_cluster_get_majPoi_by_node $1/clientbts_nodpoi_count $1/clientbts_nod_poimaj
		mobmx_cluster_join_potPoi_label $1/potpoi $1/clientbts_nod_poimaj $1/pois_labeled
		mobmx_cluster_agg_potPoi_pois $1/points_of_interest_temp2 $1/vector_clientbts_cluster $1/pois_labeled $1/points_of_interest_temp3 $1/vector_clientbts_cluster_add
		# Join bts vector to previous vector
		mobmx_cluster_agg_bts_cluster $1/points_of_interest_temp3 $1/vector_bts_cluster $1/points_of_interest_temp4
		# Save space
		rm $1/potpoi -f
		rm $1/clientbts_nodpoilbl -f
		rm $1/clientbts_nodpoi_count -f
		rm $1/clientbts_nod_poimaj -f
		rm $1/pois_labeled -f
		rm $1/points_of_interest_temp ‚Äìf
		rm $1/points_of_interest_temp2 ‚Äìf
		rm $1/points_of_interest_temp3 -f
		rm $1/vector_clientbts_cluster -f
		rm $1/vector_clientbts_cluster_add -f
   "
}

Script mob_script_detect_second_homes
{
   in txt txt  # Results folder
   out Void Void

   top

   help
   {
      "Script to detect second homes."
   }

   code
   "
		# Change cells catalogue to bts catalogue
		mobmx_poi_cell_to_bts $1/cells_mob $1/bts_mob
		# Extract pois positions
		mobmx_poi_join_pois_btscoord $1/points_of_interest_temp4 $1/bts_mob $1/sech_poi_pos $1/nodbts_poi
		# Identify if a poi is in or out of spin radius
		mobmx_poi_join_pois_vi $1/sech_poi_pos $1/vi_client_fuse_acc $1/sech_poi_inout $1/nodbts_inout
		# Extract pair of pois, first poi in daily spin radius. The second one out of daily spin radius
		mobmx_poi_get_pairs_sechome_pois $1/sech_poi_inout $1/sech_pot_sec_home
		# Filter adjacent pois pairs
		mobmx_poi_filter_sechome_adjacent $1/sech_pot_sec_home $1/pairbts_adj $1/nodbts_sechome
		# Delete duplicates
		mobmx_poi_delete_sechome_duplicate $1/nodbts_sechome $1/nodbts_sechome_uniq
		# Join results
		mobmx_poi_join_sechome_results $1/nodbts_poi $1/nodbts_inout $1/nodbts_sechome_uniq $1/points_of_interest
		# Save space
		rm $1/bts_mob -f
		rm $1/nodbts_poi -f
		rm $1/sech_poi_pos -f
		rm $1/sech_poi_inout -f
		rm $1/nodbts_inout -f
		rm $1/sech_pot_sec_home -f
		rm $1/nodbts_sechome -f
		rm $1/nodbts_sechome_uniq -f
		rm $1/points_of_interest_temp4 -f
   "
}

Script mob_script_out_pois
{
   in txt txt  # Results folder
   out Void Void

   top

   help
   {
      "Script to detect second homes."
   }

   code
   "
		# Change key node-bts-0-0 to node-bts
		mobmx_poi_spread_nodebts_vector $1/vector_clientbts $1/vector_clientbts_spread
		# Join vector node-bts to poi info. Change bts by poi id
		mobmx_poi_join_poivector_poi $1/vector_clientbts_spread $1/points_of_interest_id $1/vector_clientpoi
		# Summ communications of vectors and normalize summ vector
		mobmx_poi_normalize_poi_vector $1/vector_clientpoi $1/vector_poi_cluster
		# Outputs to file
		mobmx_vector_pois_out $1/points_of_interest_id $1/pointsOfInterestIdTxt
		mobmx_vector_oneid_out $1/vector_client_cluster $1/vectorCommClientTxt
		mobmx_vector_oneid_out $1/vector_bts_cluster $1/vectorCommBtsTxt
		mobmx_vector_nodbts_out $1/vector_poi_cluster $1/vectorCommPoiTxt
		rm points_of_interest -f
		rm vector_clientbts -f
		rm vector_clientbts_spread -f
		rm vector_clientpoi -f
   "
}

Script mob_script_get_itineraries
{
   in txt txt  # Results folder
   out Void Void

   top

   help
   {
      "Script to extract itineraries between pois of clients."
   }

   code
   "
		# Change cells to bts. Key node-bts
		mobmx_itin_join_cell_bts cdrsinfo cells_mob it_clientbts_time
		# Filter by pois
		mobmx_itin_filter_pois it_clientbts_time points_of_interest_id it_clientpoi_time
		# Extract client movements between POIs
		mobmx_itin_move_client_pois it_clientpoi_time it_client_moves
		# Distributed movements through the different hours which it is included in
		mobmx_itin_get_ranges it_client_moves it_client_moves_ranges
		# Count number of movements by hour
		mobmx_itin_count_ranges it_client_moves_ranges it_client_moves_count
		# Generate movement vector between pois
		mobmx_itin_get_vector it_client_moves_count it_client_moves_vector
		# Normalize, identify vector peaks and extract itineraries
		mobmx_itin_get_itinerary it_client_moves_vector it_client_itineraries
		# Output to file
		mobmx_itin_itinerary_out it_client_itineraries clientItinerariesTxt
		# Save space
		rm it_clientbts_time -f
		rm it_clientpoi_time -f
		rm it_client_moves -f
		rm it_client_moves_ranges -f
		rm it_client_moves_count -f
		rm it_client_moves_vector -f
   "
}

Script mob_script_get_population_density
{
   in txt txt  # Results folder
   out Void Void

   top

   help
   {
      "Script to extract density of population matrixes"
   }

   code
   "
		# Extend communications array.
		mobmx_popden_spread_array $1/clients_info $1/popden_bts
		# Sum number of comms by bts, week day and hour
		mobmx_popden_sum_comms $1/popden_bts $1/popden_bts_count
		# Build vector
		mobmx_popden_create_vector $1/popden_bts_count $1/population_density
		# Output to file
		mobmx_popden_get_out $1/population_density $1/populationDensityOut
		# Save space
		rm $1/popden_bts -f
		rm $1/popden_bts_count -f
   "
}

Script mob_script_get_population_density_profile
{
   in txt txt  # Results folder
   out Void Void

   top

   help
   {
      "Script to extract density of population matrixes by client profile"
   }

   code
   "
		# Parse client profile
		mobmx_parse_client_profile clientProfile client_profile
		# Join client counters array to client profile
		mobmx_popden_join_array_profile clients_info client_profile popdenprof_btsprof
		# Sum number of comms by bts, week day and hour
		mobmx_popden_sum_comms $1/popdenprof_btsprof $1/popden_btsprof_count
		# Build vector
		mobmx_popden_create_vector $1/popden_btsprof_count $1/population_density_profile
		# Output to file
		mobmx_popden_get_out $1/population_density $1/populationDensityProfileOut
		# Save space
		rm $1/popden_bts -f
		rm $1/popden_bts_count -f
   "
}

# ------------------------------------------------------
#                      My Functions                     
# ------------------------------------------------------

###############################################################
#################### MOBILITY PRODUCT #########################
###############################################################


##    Parse all cdrs     ##
###########################
Parser mobmx_parse_cdrs
{
	out	UInt CdrMx

	help
	{
		"Parse a txt file to extract TEMM cdrs"
		"Output 1: cdrs with cell info"
		"Output 2: cdrs without cell info"
	}
}

##    Get a sample of around 10000 cdrs    ##
#############################################
Map mobmx_get_sample_10000
{
	in UInt CdrMx
	out UInt CdrMx
	
	help
	{	
		"Extract a sample of around 10000 clients"
	}
}

##    Parse cells Mexico   ##
#############################
Parser mobmx_parse_cells
{
	out	UInt CellMx

	help
	{
		"Parse a txt file to extract TEMM cells"
	}
}

##    Parse cells        ##
###########################
Parser mobmx_parse_contorno
{
	out	UInt Contorno

	help
	{
		"Parse a txt file to extract the contour coords of a country in order to apply Voronoi"
	}
}
##	  Parse clusters	 ##
###########################
Parser mobmx_parse_client_clusters
{
	out UInt Cluster
	
	help
	{
		"Parse a txt file to extract client clusters"
	}
}
Parser mobmx_parse_clientbts_clusters
{
	out UInt Cluster
	
	help
	{
		"Parse a txt file to extract clientbts clusters"
	}
}
Parser mobmx_parse_bts_clusters
{
	out UInt Cluster
	
	help
	{
		"Parse a txt file to extract bts clusters"
	}
}

##	Get mobility info from Gasset parser  ##
############################################
Map mobmx_get_mob_from_cdrs
{
	in UInt GSTCdr
	out UInt CdrMx
	
	help
	{
		"Extract mobility info from gasset cdrs"
	}
}
Map mobmx_get_mob_from_cells
{
	in UInt GSTCell
	out UInt CellMx
	
	help
	{
		"Extract mobility info from gasset cells"
	}
}
##    Filter cdrs with cell info    ##
######################################
Map mobmx_filter_cellnoinfo
{
	in UInt CdrMx
	out UInt CdrMx
	out UInt CdrMx
	
	help
	{
		"Spread cdrs by cell, and filt them by cellinfo/cellnoinfo"
		"Output 1: cdrs with cell info"
		"Output 2: cdrs without cell info"
	}
}

##    Change cell by bts    ##
##############################
Reduce mobmx_join_bts_node
{
	in UInt CdrMx
	in UInt CellMx
	out Node_Bts Void
	out UInt TwoInt
	out UInt CdrMx
	out TelMonth CellMx
	
	help
	{
		"Change the cell id by bts id"
		"Input 1: cdrs"
		"Input 2: cell catalogue"
		"Output 1: node, bts, wday and range - void"
		"Output 2: bts - wday and range"
	}
}

##    Number comms by node,bts and hour   ##
############################################
Reduce mobmx_node_bts_counter
{
	in Node_Bts Void
	out UInt Bts_Counter
	
	help
	{
		"Count number of comms by node, bts, day and hour"
	}
}

##    Array of counters   ##
############################
Reduce mobmx_node_mobInfo
{
	in UInt Bts_Counter
	out UInt NodeMx_Counter
	
	help
	{
		"Create the array of counters by node: num of comms by day and hour"
	}
}

## Spread counters by node and bts ##
#####################################
Map mobmx_repbts_spread_nodebts
{
	in UInt NodeMx_Counter
	out Node_Bts_Day UInt
	
	help
	{
		"Spread client counters by node and bts"
	}
}
## Number of comms of a client in a bts ##
##########################################
Reduce mobmx_repbts_aggbybts
{
	in Node_Bts_Day UInt
	out UInt Node_Bts_Day

	help
	{
		"Add the number comms of a client in a bts"
	}
}
## Filter clients by total num of comms ##
##########################################
Reduce mobmx_repbts_filter_num_comms
{
	in UInt Node_Bts_Day
	in UInt CdrMx
	in UInt CdrMx
	out UInt UInt
	#out UInt UInt
	#out UInt UInt
	
	help
	{
		"Count of number of coms by client, and filter according the total number communications"
		"Output1: Clients in filter"
		#"Output2: Clients under filter (known communications lower than limit)"
		#"Output3: Clients over filter (communications higher than limit)"
	}
}
## Calculate percent of coms bts-client ##
##########################################
Reduce mobmx_repbts_join_dist_comms
{
	in UInt Node_Bts_Day
	in UInt UInt
	out UInt Bts_Counter
	
	help
	{
		"Get percentages of communication of a client by bts and range"
	}
}
## Extract representative bts ##
################################
Reduce mobmx_repbts_get_representative_bts
{
	in UInt Bts_Counter
	out TwoInt Bts_Counter
	
	help
	{
		"Extract the most representative btss for a node"
	}
}

######################################################
#################### VECTORS #########################
######################################################

## Normalization ##
###################
Map mobmx_vector_normalized
{
	in Node_Bts ClusterVector
	out Node_Bts ClusterVector
	
	help
	{
		"Normalization of a vector"
	}
}

## Get vector by coms in a node (4 groups) ##
#############################################
Reduce mobmx_vector_filt_clients
{
	in UInt CdrMx
	in UInt UInt
	out UInt CdrMx
	
	help
	{
		"Filter cdrs to clients filtered by total comms"
		"Input 1: Cdrs"
		"Input 2: List of clients filtered by total comms"
	}
}
Map mobmx_vector_spread_nodedayhour
{
	in UInt CdrMx
	out Node_Bts Void
	
	help
	{
		"Spread cdrs by node, day and hour"
	}
}
Reduce mobmx_vector_get_ncoms_nodedayhour
{
	in Node_Bts Void
	out Node_Bts TwoInt
	
	help
	{
		"Get number of comms by node, day and hour"
	} 
}
Reduce mobmx_vector_create_node_dayhour
{
	in Node_Bts TwoInt
	out TwoInt DailyVector
	
	help
	{
		"Create the vector of node comms by day and hour"
	}
}
Reduce mobmx_vector_fuse_node_daygroup
{
	in TwoInt DailyVector
	out Node_Bts ClusterVector
	
	help
	{
		"Fuse the vector of node comms by group day"
	}
}

## Get vector by coms in a node-bts (4 groups) ##
#################################################
Map mobmx_vector_spread_nodbts
{
	in UInt NodeMx_Counter
	out Node_Bts UInt
	
	help
	{
		"Spread clients info array by node, bts, group and hour."
	}
}
Reduce mobmx_vector_sum_groupcomms
{
	in Node_Bts UInt
	out TwoInt Bts_Counter
	
	help
	{
		"Add num of comms of a client in a bts by group and hour"
	}
}
Reduce mobmx_vector_filt_clientbts
{
	in TwoInt Bts_Counter
	in TwoInt Bts_Counter
	out Node_Bts TwoInt
	
	help
	{
		"Filter pair clients-bts to representative btss of a client"
		"Input 1: Node-bts sum of group comms by hour"
		"Input 2: Representative bts"
	}
}

## Get vector by coms in a node-bts (4 groups) ##
#################################################
Reduce mobmx_vector_filter_bts
{
	in UInt TwoInt
	out Bts_Counter Void
	
	help
	{
		"Filter bts by num of comms total and max area"
	}
}
Reduce mobmx_vector_sum_coms_bts
{
	in Bts_Counter Void
	out Node_Bts TwoInt
	
	help
	{
		"Sum number of comms by bts, group and hour"
	}
}

######################################################
#################### DISTANCES #######################
######################################################

## Min euclidean distance (Client vector)##
###########################################
Map mobmx_cluster_client_get_min_distance
{
	in Node_Bts ClusterVector
	out UInt Cluster
	
	help
	{
		"Calculate the euclidean distance between a vector and a cluster"
	}
}
## Min pearson distance (Clientbts vector)##
############################################
Map mobmx_cluster_clientbts_get_min_distance
{
	in Node_Bts ClusterVector
	out UInt Poi
	out TwoInt Cluster
	
	help
	{
		"Calculate the pearson distance between a vector and a cluster"
	}
}
## Min euclidean distance (Bts vector)##
########################################
Reduce mobmx_cluster_bts_get_min_distance
{
	in Node_Bts ClusterVector
	out UInt Cluster
	
	help
	{
		"Calculate the euclidean distance between a vector and a cluster."
	}
}
## Filter bts vector by commarea
Reduce mobmx_filter_bts_vector
{
	in UInt Cluster
	in UInt Bts
	out UInt Cluster
	
	help
	{
		"Filter bts vector by num of comms and area"
	}
}
## Aggregate points of interest info ##
#######################################
Reduce mobmx_cluster_agg_node_cluster
{
	in UInt Poi
	in UInt Cluster
	out TwoInt Poi
	out UInt Poi
	
	help
	{
		"Aggregate to results info about client cluster"
		"Input 1: POI with clientbts cluster info"
		"Input 2: Info about client cluster"
	}
}
## Extract majority pois by node label
Map mobmx_cluster_spread_nodelbl_poilbl
{
	in TwoInt Poi
	out TwoInt Void
	
	help
	{
		"Spread points of interest by client label and poi label"
	}
}
Reduce mobmx_cluster_count_majPoi_by_node
{
	in TwoInt Void
	out UInt TwoInt
	
	help
	{
		"Count number of times pair node label - poi label"
	}
}
Reduce mobmx_cluster_get_majPoi_by_node
{
	in UInt TwoInt
	out UInt UInt
	
	help
	{
		"Get max majority POI label by node label"
	}
}
Reduce mobmx_cluster_join_potPoi_label
{
	in UInt Poi
	in UInt UInt
	out TwoInt Void
	
	help
	{
		"Set label to pois by majority node label"
		"Input 1: potential pois"
		"Input 2: node label - majority poi label"
	}
}
Reduce mobmx_cluster_agg_potPoi_pois
{
	in TwoInt Poi
	in TwoInt Cluster
	in TwoInt Void
	out UInt Poi
	out TwoInt Cluster
	
	help
	{
		"Aggregate the potential pois labeled to all pois"
		"Input 1: all pois"
		"Input 2: client communications vector"
		"Input 3: potential pois"
	}
}
Reduce mobmx_cluster_agg_bts_cluster
{
	in UInt Poi
	in UInt Cluster
	out UInt Poi
	
	help
	{
		"Aggregate to results info about bts cluster"
		"Input 1: POI with clientbts cluster info and client cluster info"
		"Input 2: Info about bts cluster"
	}
}


## Second homes ##
##################
Map mobmx_poi_cell_to_bts
{
	in UInt CellMx
	out UInt CellMx
	
	help
	{
		"Convert the cell catalogue to bts catalogue"
	}
}
Reduce mobmx_poi_join_pois_btscoord
{
	in UInt Poi
	in UInt CellMx
	out UInt PoiPos
	out TwoInt Poi
	
	help
	{
		"Add bts coords to the list of pois"
		"Input 1: list of pois"
		"Input 2: bts catalogue"
	}
}
Reduce mobmx_poi_join_pois_vi
{
	in UInt PoiPos
	in UInt Mob_VI_MobVars
	out UInt PoiPos
	out TwoInt TwoInt
	
	help
	{
		"Join points of interest (client-bts) and individual variables"
		"to determine if a poi is in or out the radius of influence area"
		"Input 1: List of pois (client-bts)"
		"Input 2: List of individual variables"
	}
}
Reduce mobmx_poi_get_pairs_sechome_pois
{
	in UInt PoiPos
	out TwoInt UInt
	
	help
	{
		"Extract pair of home bts, first in Monday-Friday radius, and the second one out"
	}
}
Reduce mobmx_poi_filter_sechome_adjacent
{
	in TwoInt UInt
	in TwoInt Void
	out TwoInt Void
	
	help
	{
		"Filter potential secondary homes that are adjacents to first home"
	}
}
Reduce mobmx_poi_delete_sechome_duplicate
{
	in TwoInt Void
	out TwoInt Void
	
	help
	{
		"Delete secondary homes duplicated"
	}
}
Reduce mobmx_poi_join_sechome_results
{
	in TwoInt Poi
	in TwoInt TwoInt
	in TwoInt Void
	out TwoInt Poi
	
	help
	{
		"Aggregate the secondary home results"
	}
}

###    Adjacent pois   ###
##########################

Parser mobmx_adj_parse_adj_bts
{
	out	TwoInt Void

	help
	{
		"Parse a txt file to extract pair of adjacent bts"
	}
}

Map mobmx_adj_add_unique_id_poi
{
	in TwoInt Poi
	out TwoInt PoiNew
	out UInt TwoInt
	
	help
	{
		"Add unique id to POIs"
		"Output 1: List of POIs with id"
		"Output 2: Table of POIs id"
	}
}
Reduce mobmx_adj_group_type_poi_client
{
	in TwoInt PoiNew
	out TwoInt TwoInt
	
	help
	{
		"Get pair of bts of a node with the same poi label"
	}
}
Reduce mobmx_adj_join_pairbts_adjbts
{
	in TwoInt TwoInt
	in TwoInt Void
	out UInt TwoInt
	
	help
	{
		"Join pair of bts with same POI of a client to pair of adjacent bts"
	}
}
Map mobmx_adj_spread_count
{
	in UInt TwoInt
	out UInt UInt
	
	help
	{
		"Spread pair of pois by 1" 
	}
}
Reduce mobmx_adj_count_indexes
{
	in UInt UInt
	out UInt Void
	
	help
	{
		"Count number of pair of pois"
	}
}
Reduce mobmx_adj_put_max_id
{
	in UInt TwoInt
	out UInt TwoInt
	
	help
	{
		"Put the max poi id to all adjacent pois respect to poi1"
	}
}

Reduce mobmx_adj_update_pois_table
{
	in UInt TwoInt
	in UInt TwoInt
	out UInt TwoInt
	
	help
	{
		"Update the poiId with the adjacent"
		"Input 1: Pois id table"
		"Input 2: List of indexes"
	}
}

Reduce mobmx_adj_swap_poiId_st1
{
	in UInt TwoInt
	in UInt TwoInt
	out UInt TwoInt
	
	help
	{
		"Change the poi1 by the respective poi in the index"
	}
}
Reduce mobmx_adj_swap_poiId_st2
{
	in UInt TwoInt
	in UInt TwoInt
	out UInt TwoInt
	
	help
	{
		"Change the poi2 by the respective poi in the index"
	}
}
Map mobmx_adj_spread_table_by_poiId
{
	in UInt TwoInt
	out UInt UInt
	
	help
	{
		"Spread table of pois and modified pois by pois id"
	}
}
Map mobmx_adj_spread_pois_by_poiId
{
	in TwoInt PoiNew
	out UInt PoiNew
	
	help
	{
		"Spread list of pois by pois id"
	}
}
Reduce mobmx_adj_join_new_poiId
{
	in UInt UInt
	in UInt PoiNew
	out TwoInt PoiNew
	
	help
	{
		"Change in the list of pois the new poiId"
	}
}
Reduce mobmx_adj_change_poisId
{
	in TwoInt Poi
	in TwoInt PoiNew
	out TwoInt Poi
	
	help
	{
		"Change id of pois"
	}
}
## Sum adjacent POIs vectors ##
###############################
Map mobmx_poi_spread_nodebts_vector
{
	in Node_Bts ClusterVector
	out TwoInt ClusterVector
	
	help
	{
		"Spread node-bts vector by node-bts"
	}
}
Reduce mobmx_poi_join_poivector_poi
{
	in TwoInt ClusterVector
	in TwoInt Poi
	out TwoInt Cluster
	
	help
	{
		"Join poi vector to poi info"
	}
}
Reduce mobmx_poi_normalize_poi_vector
{
	in TwoInt Cluster
	out TwoInt Cluster
	
	help
	{
		"Normalize poi vector"
	}
}
## Export results ##
####################
ParserOut mobmx_vector_oneid_out
{
	in UInt Cluster
	extern char * sep;
	
	help
	{
		"Parse out of a vector"
	}
}
ParserOut mobmx_vector_nodbts_out
{
	in TwoInt Cluster
	extern char * sep;
	
	help
	{
		"Parse out of a vector"
	}
}
ParserOut mobmx_vector_pois_out
{
	in TwoInt Poi
	extern char * sep;
	
	help
	{
		"Parse out of points of interest"
	}
}

##############################################
###			INDIVIDUAL VARIABLES			##
##############################################
## Individual varible by month
Reduce mobmx_MobVar_calcvariables
{
	in TelMonth CellMx
	out UInt MobVars
	
	help
	{
		"Calculate individual variables by period"
	}
}
Reduce mobmx_MobVar_fusiontotalvars
{
	in UInt MobVars
	out UInt Mob_VI_MobVars
	
	help
	{
		"Fuse working/weekend day statistics and variables of all months of a user"
	}
}
ParserOut mobmx_MobVar_indVars_out
{
	in UInt Mob_VI_MobVars
	extern char * sep;
	
	help
	{
		"Parse out of individual variables of a client"
	}
}
## Accumulate individual variables
Map mobmx_MobVar_delete_period
{
	in TelMonth CellMx
	out TelMonth CellMx
	
	help
	{
		"Delete the period to calculate individual variables of a whole sample"
	}
}
ParserOut mobmx_MobVar_indVars_accumulated_out
{
	in UInt Mob_VI_MobVars
	extern char * sep;
	
	help
	{
		"Parse out of individual variables of a client"
	}
}

##############################################
###				  ITINERARIES				##
##############################################
Reduce mobmx_itin_join_cell_bts
{
	in UInt CdrMx
	in UInt CellMx
	out TwoInt ItinTime
	
	help
	{
		"Change cell of cdrs by bts for itineraries"
		"Input 1: Cdrs with cell info"
		"Input 2: Cells catalogue"
	}
}
Reduce mobmx_itin_filter_pois
{
	in TwoInt ItinTime
	in TwoInt Poi
	out UInt ItinTime
	
	help
	{
		"Filter cdrs to the pois of a client"
		"Input 1: Cdrs with bts info"
		"Input 2: Pois of clients"
		"Output 1: Cdrs with POI"
	}
}
Reduce mobmx_itin_move_client_pois
{
	in UInt ItinTime
	out UInt ItinMovement
	
	help
	{
		"Extract movements between POIs of a client"
	}
}
Map mobmx_itin_get_ranges
{
	in UInt ItinMovement
	out ItinRange Double
	
	help
	{
		"Set ranges of a POIs of a client"
	}
}
Reduce mobmx_itin_count_ranges
{
	in ItinRange Double
	out ItinRange ItinPercMove
	
	help
	{
		"Count percentages of movements in a range"
	}
}
Reduce mobmx_itin_get_vector
{
	in ItinRange ItinPercMove
	out ItinRange ClusterVector
	
	help
	{
		"Get vector of moves between POIs"
	}
}
Reduce mobmx_itin_get_itinerary
{
	in ItinRange ClusterVector
	out UInt Itinerary
	
	help
	{
		"Get peaks of moves vector"
	}
}
ParserOut mobmx_itin_itinerary_out
{
	in UInt Itinerary
	extern char * sep;
	
	help
	{
		"Parse out of individual variables of a client"
	}
}

#####################
## MOBILITY MATRIX ##
#####################

####### Group matrix
Parser mobmx_matrix_get_group_catalogue
{
	out UInt TwoInt
	
	help
	{
		"Parse a txt file to extract catalogue bts-group"
	}
}
Reduce mobmx_matrix_join_cell_group
{
	in UInt CdrMx
	in UInt TwoInt
	out UInt MatrixTime
	
	help
	{
		"Change cell of cdrs by state for matrix"
		"Input 1: Cdrs with cell info"
		"Input 2: Cells catalogue"
	}
}
Reduce mobmx_matrix_move_client
{
	in UInt MatrixTime
	out UInt ItinMovement
	
	help
	{
		"Extract movements between POIs of a client"
	}
}
Map mobmx_matrix_get_ranges
{
	in UInt ItinMovement
	out MatrixRange Double
	
	help
	{
		"Set ranges of a moves of a client"
	}
}
Reduce mobmx_matrix_count_ranges
{
	in MatrixRange Double
	out ItinRange ItinPercMove
	
	help
	{
		"Count percentages of movements in a range"
	}
}
Reduce mobmx_matrix_get_vector
{
	in ItinRange ItinPercMove
	out TwoInt ClusterVector
	
	help
	{
		"Get vector of moves between btss"
	}
}
Reduce mobmx_matrix_join_bts1_group
{
	in UInt PairIdMtx
	in UInt UInt
	out UInt PairIdMtx
	
	help
	{
		"Join first bts to group"
	}
}
Reduce mobmx_matrix_join_bts2_group
{
	in UInt PairIdMtx
	in UInt UInt
	out TwoInt PairIdMtx
	
	help
	{
		"Join second bts to group"
	}
}
Reduce mobmx_matrix_sum_group_vectors
{
	in TwoInt PairIdMtx
	out TwoInt ClusterVector
	
	help
	{
		"Sum of coms at the same groups vector"
	}
}
Map mobmx_matrix_borrar_celltobts
{
	in UInt CellMx
	out UInt UInt
	
	help
	{
		"Convert cell catalogue to bts-state"
	}
}

####### Common functionality
Map mobmx_matrix_spread_node
{
	in TwoInt ItinTime
	out UInt ItinTime
	
	help
	{
		"Spread cdrs info with time by node"
	}
}
Map mobmx_matrix_spread_dist_moves_by_pair
{
	in ItinRange Double
	out ItinRange Double
	
	help
	{
		"Spread distribution of moves by pair"
	}
}
Map mobmx_matrix_spread_vector_by_pair
{
	in ItinRange ClusterVector
	out TwoInt ClusterVector
	
	help
	{
		"Spread vector by pair of bts"
	}
}
####### Social Matrix
Parser mobmx_parse_client_profile
{
	out UInt UInt
	
	help
	{
		"Parse a txt file to extract client profile"
	}
}

Map mobmx_matrix_spread_moves_node
{
	in ItinRange Double
	out UInt ProfileMtx
	
	help
	{
		"Spread parts of movements between pair of btss by node"
	}
}
Reduce mobmx_matrix_join_moves_profile
{
	in UInt ProfileMtx
	in UInt UInt
	out ItinRange Double
	
	help
	{
		"Join user moves to user profile"
	}
}
ParserOut mobmx_matrix_get_out
{
	in TwoInt ClusterVector
	extern char * sep;
	
	help
	{
		"Parse out of aggregated mobility matrixes"
	}
}
ParserOut mobmx_matrix_profile_get_out
{
	in ItinRange ClusterVector
	extern char * sep;
	
	help
	{
		"Parse out of aggregated mobility matrixes with a profile variable"
	}
}

#############################
## ACTIVITY DENSITY MATRIX ##
#############################

## With profile
Reduce mobmx_popden_join_array_profile
{
	in UInt NodeMx_Counter
	in UInt UInt
	out BtsProfile UInt
	
	help
	{
		"Join comms array of clients to clients profile"
		"Input 1: Array of comms"
		"Input 2: Profile"
	}
}
## Without profile
Map mobmx_popden_spread_array
{
	in UInt NodeMx_Counter
	out BtsProfile UInt
	
	help
	{
		"Spread comms array of client to clients profile"
	}
}

## Common functionality
Reduce mobmx_popden_sum_comms
{
	in BtsProfile UInt
	out TwoInt Bts_Counter
	
	help
	{
		"Sum communication by bts, profile, day of week and hour"
	}
}
Reduce mobmx_popden_create_vector
{
	in TwoInt Bts_Counter
	out TwoInt ClusterVector
	
	help
	{
		"Create the vector of comms by bts and profile"
	}
}
ParserOut mobmx_popden_get_out
{
	in TwoInt ClusterVector
	extern char * sep;
	
	help
	{
		"Parse out of density of population by bts"
	}
}
ParserOut mobmx_popden_profile_get_out
{
	in TwoInt ClusterVector
	extern char * sep;
	
	help
	{
		"Parse out of density of population by profile and bts"
	}
}

###############################
## POPULATION DENSITY MATRIX ##
###############################

## One communication by user and hour
Reduce mobmx_popden_spread_nodebtsdayhour
{
	in UInt CdrMx
	in UInt CellMx
	out NodBtsDate Void
	
	help
	{
		"Spread cdrs with location info by node, bts, day of month and hour"
		"Input 1: cdrs with location info"
		"Input 2: cells catalogue"
	}
}
Reduce mobmx_popden_delete_duplicates
{
	in NodBtsDate Void
	out UInt Node_Bts
	
	help
	{
		"Delete duplicates of calls a client in an hour at the same bts"
	}
}
Reduce mobmx_popden_join_nodeinfo_profile
{
	in UInt Node_Bts
	in UInt UInt
	out BtsProfile UInt
	
	help
	{
		"Join nodeinfo and node profile"
	}
}
Reduce mobmx_popden_join_nodeinfo_withoutprofile
{
	in UInt Node_Bts
	out BtsProfile UInt
	
	help
	{
		"Put 0 in profile"
	}
}
############
## BORRAR ##
############
## Get Rocio's vector
Parser mobmx_borrar_get_bts_vector
{
	out Node_Bts ClusterVector

	help
	{
		"Parse a txt file to extract bts vectors from Roc√≠o"
	}
}

Parser mobmx_borrar_get_bts_comarea
{
	out UInt Bts
	
	help
	{
		"Parse a txt file to extract bts area"
	}
}
ParserOut mobmx_borrar_get_pospoi_inout
{
	in UInt PoiPos
	extern char * sep;
	
	help
	{
		"Parse out of density of population by profile and bts"
	}
}
##################
##  GMT TO UTM  ##
##################
Map mobmx_cells_spread_GMT_to_UTM
{
  in UInt CellMx
  out UInt CellMx
  
  help
  {
    "Spread list of cells only in one group in order to convert GMT coordinates to UTM"
  }
}

Reduce mobmx_get_husos_cells_GMT_to_UTM
{
  in UInt CellMx
  out UInt Huso
  
  help
  {
    "Spread with huso for input cells"
  }
}

Reduce mobmx_calc_cells_GMT_to_UTM
{
  in UInt CellMx
  in UInt Huso
  out UInt CellMxUTM
  
  help
  {
    "Calculate the UTM coordinates"
  }
}

Reduce mobmx_calc_cells_UTM_to_GMT
{
  in UInt CellMxUTM
  out UInt CellMx
  
  help
  {
    "Calculate the GMT coordinates"
  }
}

Reduce mobmx_calc_bts_UTM_to_GMT
{
  in UInt Bts
  out UInt Bts
  
  
  help
  {
    "Calculate the GMT coordinates"
  }
}

Reduce mobmx_calc_vertices_UTM_to_GMT
{
  in UInt Vertices_Voronoi
  out UInt Vertices_Voronoi
  
  
  help
  {
    "Calculate the GMT coordinates"
  }
}

########################
## Voronoi's Polygons ##
########################
Map mobmx_bts_spread
{
  in UInt CellMxUTM
  out UInt bts_coords
  
  help
  {
    "Spread list of bts and coordinates"
  }
}

Reduce mobmx_bts_norepeat
{
  in UInt bts_coords
  out UInt bts_coords
  
  help
  {
    "Remove repeated bts"
  }
}

Map mobmx_bts_spread_voronoi
{
  in  UInt bts_coords
  out UInt bts_coords
  
  help
  {
    "Spread list of cells only in one group in order to calculate Voronoi's polygons"
  }

}

Reduce mobmx_calc_voronoi
{
  in UInt bts_coords
  in UInt Contorno
  out UInt Bts
  out UInt Vertices_Voronoi
  
  help
  {
    "Calculate the Voronoi's Polygons for a group of cells"
  }
}

##### Extraer ejemplos
Parser mobmx_borrar_parse_clients
{
	out	VectorUInt Void 

	help
	{
		"Parse a txt file to extract cliente examples"
	}
}
Map mobmx_borrar_extract_examples
{
	in UInt CdrMx
	out UInt CdrMx
	
	help
	{
		"Extract cdrs filtering by a list of clients"
	}
}
Map mobmx_borrar_get_examples
{
  in UInt CdrMx
  out UInt CdrMx
  
  help
  {
	"Extract cdrs where a set of phones are involved"
  }
}

##### Itineraries statistics
Reduce mobmx_borrar_get_nclient_with_itineraries
{
  in UInt Itinerary
  out TelMonth Itinerary
	
  help
  {
	""
  }
}
Reduce mobmx_borrar_delete_itindup
{
	in TelMonth Itinerary
	out UInt TwoInt
	out UInt Void
	
	help
	{
		""
	}
}
Reduce mobmx_borrar_get_numItin
{
	in UInt TwoInt
	out UInt Void
	
	help
	{
		""
	}
}
Reduce mobmx_borrar_get_statistics
{
	in UInt Void
	out UInt UInt
	
	help
	{
		""
	}
}