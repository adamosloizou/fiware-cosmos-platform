/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package es.tid.bdp.platform.cluster.server;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Cluster {

  public interface Iface {

    public void copyToHdfs(String srcPath, String destPath) throws TransferException, org.apache.thrift.TException;

    public String runJob(String jarPath, String inputPath, String outputPath, String mongoUrl) throws org.apache.thrift.TException;

    public ClusterJobStatus getJobStatus(String jobId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void copyToHdfs(String srcPath, String destPath, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.copyToHdfs_call> resultHandler) throws org.apache.thrift.TException;

    public void runJob(String jarPath, String inputPath, String outputPath, String mongoUrl, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.runJob_call> resultHandler) throws org.apache.thrift.TException;

    public void getJobStatus(String jobId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getJobStatus_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void copyToHdfs(String srcPath, String destPath) throws TransferException, org.apache.thrift.TException
    {
      send_copyToHdfs(srcPath, destPath);
      recv_copyToHdfs();
    }

    public void send_copyToHdfs(String srcPath, String destPath) throws org.apache.thrift.TException
    {
      copyToHdfs_args args = new copyToHdfs_args();
      args.setSrcPath(srcPath);
      args.setDestPath(destPath);
      sendBase("copyToHdfs", args);
    }

    public void recv_copyToHdfs() throws TransferException, org.apache.thrift.TException
    {
      copyToHdfs_result result = new copyToHdfs_result();
      receiveBase(result, "copyToHdfs");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public String runJob(String jarPath, String inputPath, String outputPath, String mongoUrl) throws org.apache.thrift.TException
    {
      send_runJob(jarPath, inputPath, outputPath, mongoUrl);
      return recv_runJob();
    }

    public void send_runJob(String jarPath, String inputPath, String outputPath, String mongoUrl) throws org.apache.thrift.TException
    {
      runJob_args args = new runJob_args();
      args.setJarPath(jarPath);
      args.setInputPath(inputPath);
      args.setOutputPath(outputPath);
      args.setMongoUrl(mongoUrl);
      sendBase("runJob", args);
    }

    public String recv_runJob() throws org.apache.thrift.TException
    {
      runJob_result result = new runJob_result();
      receiveBase(result, "runJob");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "runJob failed: unknown result");
    }

    public ClusterJobStatus getJobStatus(String jobId) throws org.apache.thrift.TException
    {
      send_getJobStatus(jobId);
      return recv_getJobStatus();
    }

    public void send_getJobStatus(String jobId) throws org.apache.thrift.TException
    {
      getJobStatus_args args = new getJobStatus_args();
      args.setJobId(jobId);
      sendBase("getJobStatus", args);
    }

    public ClusterJobStatus recv_getJobStatus() throws org.apache.thrift.TException
    {
      getJobStatus_result result = new getJobStatus_result();
      receiveBase(result, "getJobStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getJobStatus failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void copyToHdfs(String srcPath, String destPath, org.apache.thrift.async.AsyncMethodCallback<copyToHdfs_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      copyToHdfs_call method_call = new copyToHdfs_call(srcPath, destPath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class copyToHdfs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String srcPath;
      private String destPath;
      public copyToHdfs_call(String srcPath, String destPath, org.apache.thrift.async.AsyncMethodCallback<copyToHdfs_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.srcPath = srcPath;
        this.destPath = destPath;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("copyToHdfs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        copyToHdfs_args args = new copyToHdfs_args();
        args.setSrcPath(srcPath);
        args.setDestPath(destPath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TransferException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_copyToHdfs();
      }
    }

    public void runJob(String jarPath, String inputPath, String outputPath, String mongoUrl, org.apache.thrift.async.AsyncMethodCallback<runJob_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      runJob_call method_call = new runJob_call(jarPath, inputPath, outputPath, mongoUrl, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class runJob_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String jarPath;
      private String inputPath;
      private String outputPath;
      private String mongoUrl;
      public runJob_call(String jarPath, String inputPath, String outputPath, String mongoUrl, org.apache.thrift.async.AsyncMethodCallback<runJob_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jarPath = jarPath;
        this.inputPath = inputPath;
        this.outputPath = outputPath;
        this.mongoUrl = mongoUrl;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("runJob", org.apache.thrift.protocol.TMessageType.CALL, 0));
        runJob_args args = new runJob_args();
        args.setJarPath(jarPath);
        args.setInputPath(inputPath);
        args.setOutputPath(outputPath);
        args.setMongoUrl(mongoUrl);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_runJob();
      }
    }

    public void getJobStatus(String jobId, org.apache.thrift.async.AsyncMethodCallback<getJobStatus_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getJobStatus_call method_call = new getJobStatus_call(jobId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getJobStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String jobId;
      public getJobStatus_call(String jobId, org.apache.thrift.async.AsyncMethodCallback<getJobStatus_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jobId = jobId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getJobStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getJobStatus_args args = new getJobStatus_args();
        args.setJobId(jobId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ClusterJobStatus getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getJobStatus();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("copyToHdfs", new copyToHdfs());
      processMap.put("runJob", new runJob());
      processMap.put("getJobStatus", new getJobStatus());
      return processMap;
    }

    private static class copyToHdfs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, copyToHdfs_args> {
      public copyToHdfs() {
        super("copyToHdfs");
      }

      protected copyToHdfs_args getEmptyArgsInstance() {
        return new copyToHdfs_args();
      }

      protected copyToHdfs_result getResult(I iface, copyToHdfs_args args) throws org.apache.thrift.TException {
        copyToHdfs_result result = new copyToHdfs_result();
        try {
          iface.copyToHdfs(args.srcPath, args.destPath);
        } catch (TransferException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class runJob<I extends Iface> extends org.apache.thrift.ProcessFunction<I, runJob_args> {
      public runJob() {
        super("runJob");
      }

      protected runJob_args getEmptyArgsInstance() {
        return new runJob_args();
      }

      protected runJob_result getResult(I iface, runJob_args args) throws org.apache.thrift.TException {
        runJob_result result = new runJob_result();
        result.success = iface.runJob(args.jarPath, args.inputPath, args.outputPath, args.mongoUrl);
        return result;
      }
    }

    private static class getJobStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getJobStatus_args> {
      public getJobStatus() {
        super("getJobStatus");
      }

      protected getJobStatus_args getEmptyArgsInstance() {
        return new getJobStatus_args();
      }

      protected getJobStatus_result getResult(I iface, getJobStatus_args args) throws org.apache.thrift.TException {
        getJobStatus_result result = new getJobStatus_result();
        result.success = iface.getJobStatus(args.jobId);
        return result;
      }
    }

  }

  public static class copyToHdfs_args implements org.apache.thrift.TBase<copyToHdfs_args, copyToHdfs_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("copyToHdfs_args");

    private static final org.apache.thrift.protocol.TField SRC_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("srcPath", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DEST_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("destPath", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new copyToHdfs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new copyToHdfs_argsTupleSchemeFactory());
    }

    public String srcPath; // required
    public String destPath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SRC_PATH((short)1, "srcPath"),
      DEST_PATH((short)2, "destPath");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SRC_PATH
            return SRC_PATH;
          case 2: // DEST_PATH
            return DEST_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SRC_PATH, new org.apache.thrift.meta_data.FieldMetaData("srcPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DEST_PATH, new org.apache.thrift.meta_data.FieldMetaData("destPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(copyToHdfs_args.class, metaDataMap);
    }

    public copyToHdfs_args() {
    }

    public copyToHdfs_args(
      String srcPath,
      String destPath)
    {
      this();
      this.srcPath = srcPath;
      this.destPath = destPath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public copyToHdfs_args(copyToHdfs_args other) {
      if (other.isSetSrcPath()) {
        this.srcPath = other.srcPath;
      }
      if (other.isSetDestPath()) {
        this.destPath = other.destPath;
      }
    }

    public copyToHdfs_args deepCopy() {
      return new copyToHdfs_args(this);
    }

    @Override
    public void clear() {
      this.srcPath = null;
      this.destPath = null;
    }

    public String getSrcPath() {
      return this.srcPath;
    }

    public copyToHdfs_args setSrcPath(String srcPath) {
      this.srcPath = srcPath;
      return this;
    }

    public void unsetSrcPath() {
      this.srcPath = null;
    }

    /** Returns true if field srcPath is set (has been assigned a value) and false otherwise */
    public boolean isSetSrcPath() {
      return this.srcPath != null;
    }

    public void setSrcPathIsSet(boolean value) {
      if (!value) {
        this.srcPath = null;
      }
    }

    public String getDestPath() {
      return this.destPath;
    }

    public copyToHdfs_args setDestPath(String destPath) {
      this.destPath = destPath;
      return this;
    }

    public void unsetDestPath() {
      this.destPath = null;
    }

    /** Returns true if field destPath is set (has been assigned a value) and false otherwise */
    public boolean isSetDestPath() {
      return this.destPath != null;
    }

    public void setDestPathIsSet(boolean value) {
      if (!value) {
        this.destPath = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SRC_PATH:
        if (value == null) {
          unsetSrcPath();
        } else {
          setSrcPath((String)value);
        }
        break;

      case DEST_PATH:
        if (value == null) {
          unsetDestPath();
        } else {
          setDestPath((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SRC_PATH:
        return getSrcPath();

      case DEST_PATH:
        return getDestPath();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SRC_PATH:
        return isSetSrcPath();
      case DEST_PATH:
        return isSetDestPath();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof copyToHdfs_args)
        return this.equals((copyToHdfs_args)that);
      return false;
    }

    public boolean equals(copyToHdfs_args that) {
      if (that == null)
        return false;

      boolean this_present_srcPath = true && this.isSetSrcPath();
      boolean that_present_srcPath = true && that.isSetSrcPath();
      if (this_present_srcPath || that_present_srcPath) {
        if (!(this_present_srcPath && that_present_srcPath))
          return false;
        if (!this.srcPath.equals(that.srcPath))
          return false;
      }

      boolean this_present_destPath = true && this.isSetDestPath();
      boolean that_present_destPath = true && that.isSetDestPath();
      if (this_present_destPath || that_present_destPath) {
        if (!(this_present_destPath && that_present_destPath))
          return false;
        if (!this.destPath.equals(that.destPath))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(copyToHdfs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      copyToHdfs_args typedOther = (copyToHdfs_args)other;

      lastComparison = Boolean.valueOf(isSetSrcPath()).compareTo(typedOther.isSetSrcPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrcPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcPath, typedOther.srcPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDestPath()).compareTo(typedOther.isSetDestPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDestPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destPath, typedOther.destPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("copyToHdfs_args(");
      boolean first = true;

      sb.append("srcPath:");
      if (this.srcPath == null) {
        sb.append("null");
      } else {
        sb.append(this.srcPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("destPath:");
      if (this.destPath == null) {
        sb.append("null");
      } else {
        sb.append(this.destPath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class copyToHdfs_argsStandardSchemeFactory implements SchemeFactory {
      public copyToHdfs_argsStandardScheme getScheme() {
        return new copyToHdfs_argsStandardScheme();
      }
    }

    private static class copyToHdfs_argsStandardScheme extends StandardScheme<copyToHdfs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, copyToHdfs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SRC_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.srcPath = iprot.readString();
                struct.setSrcPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEST_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.destPath = iprot.readString();
                struct.setDestPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, copyToHdfs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.srcPath != null) {
          oprot.writeFieldBegin(SRC_PATH_FIELD_DESC);
          oprot.writeString(struct.srcPath);
          oprot.writeFieldEnd();
        }
        if (struct.destPath != null) {
          oprot.writeFieldBegin(DEST_PATH_FIELD_DESC);
          oprot.writeString(struct.destPath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class copyToHdfs_argsTupleSchemeFactory implements SchemeFactory {
      public copyToHdfs_argsTupleScheme getScheme() {
        return new copyToHdfs_argsTupleScheme();
      }
    }

    private static class copyToHdfs_argsTupleScheme extends TupleScheme<copyToHdfs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, copyToHdfs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSrcPath()) {
          optionals.set(0);
        }
        if (struct.isSetDestPath()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSrcPath()) {
          oprot.writeString(struct.srcPath);
        }
        if (struct.isSetDestPath()) {
          oprot.writeString(struct.destPath);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, copyToHdfs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.srcPath = iprot.readString();
          struct.setSrcPathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.destPath = iprot.readString();
          struct.setDestPathIsSet(true);
        }
      }
    }

  }

  public static class copyToHdfs_result implements org.apache.thrift.TBase<copyToHdfs_result, copyToHdfs_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("copyToHdfs_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new copyToHdfs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new copyToHdfs_resultTupleSchemeFactory());
    }

    public TransferException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(copyToHdfs_result.class, metaDataMap);
    }

    public copyToHdfs_result() {
    }

    public copyToHdfs_result(
      TransferException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public copyToHdfs_result(copyToHdfs_result other) {
      if (other.isSetEx()) {
        this.ex = new TransferException(other.ex);
      }
    }

    public copyToHdfs_result deepCopy() {
      return new copyToHdfs_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    public TransferException getEx() {
      return this.ex;
    }

    public copyToHdfs_result setEx(TransferException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((TransferException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof copyToHdfs_result)
        return this.equals((copyToHdfs_result)that);
      return false;
    }

    public boolean equals(copyToHdfs_result that) {
      if (that == null)
        return false;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(copyToHdfs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      copyToHdfs_result typedOther = (copyToHdfs_result)other;

      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("copyToHdfs_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class copyToHdfs_resultStandardSchemeFactory implements SchemeFactory {
      public copyToHdfs_resultStandardScheme getScheme() {
        return new copyToHdfs_resultStandardScheme();
      }
    }

    private static class copyToHdfs_resultStandardScheme extends StandardScheme<copyToHdfs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, copyToHdfs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new TransferException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, copyToHdfs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class copyToHdfs_resultTupleSchemeFactory implements SchemeFactory {
      public copyToHdfs_resultTupleScheme getScheme() {
        return new copyToHdfs_resultTupleScheme();
      }
    }

    private static class copyToHdfs_resultTupleScheme extends TupleScheme<copyToHdfs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, copyToHdfs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, copyToHdfs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new TransferException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class runJob_args implements org.apache.thrift.TBase<runJob_args, runJob_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("runJob_args");

    private static final org.apache.thrift.protocol.TField JAR_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("jarPath", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INPUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("inputPath", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField OUTPUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("outputPath", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField MONGO_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("mongoUrl", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new runJob_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new runJob_argsTupleSchemeFactory());
    }

    public String jarPath; // required
    public String inputPath; // required
    public String outputPath; // required
    public String mongoUrl; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JAR_PATH((short)1, "jarPath"),
      INPUT_PATH((short)2, "inputPath"),
      OUTPUT_PATH((short)3, "outputPath"),
      MONGO_URL((short)4, "mongoUrl");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JAR_PATH
            return JAR_PATH;
          case 2: // INPUT_PATH
            return INPUT_PATH;
          case 3: // OUTPUT_PATH
            return OUTPUT_PATH;
          case 4: // MONGO_URL
            return MONGO_URL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JAR_PATH, new org.apache.thrift.meta_data.FieldMetaData("jarPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INPUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("inputPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTPUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("outputPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MONGO_URL, new org.apache.thrift.meta_data.FieldMetaData("mongoUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(runJob_args.class, metaDataMap);
    }

    public runJob_args() {
    }

    public runJob_args(
      String jarPath,
      String inputPath,
      String outputPath,
      String mongoUrl)
    {
      this();
      this.jarPath = jarPath;
      this.inputPath = inputPath;
      this.outputPath = outputPath;
      this.mongoUrl = mongoUrl;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public runJob_args(runJob_args other) {
      if (other.isSetJarPath()) {
        this.jarPath = other.jarPath;
      }
      if (other.isSetInputPath()) {
        this.inputPath = other.inputPath;
      }
      if (other.isSetOutputPath()) {
        this.outputPath = other.outputPath;
      }
      if (other.isSetMongoUrl()) {
        this.mongoUrl = other.mongoUrl;
      }
    }

    public runJob_args deepCopy() {
      return new runJob_args(this);
    }

    @Override
    public void clear() {
      this.jarPath = null;
      this.inputPath = null;
      this.outputPath = null;
      this.mongoUrl = null;
    }

    public String getJarPath() {
      return this.jarPath;
    }

    public runJob_args setJarPath(String jarPath) {
      this.jarPath = jarPath;
      return this;
    }

    public void unsetJarPath() {
      this.jarPath = null;
    }

    /** Returns true if field jarPath is set (has been assigned a value) and false otherwise */
    public boolean isSetJarPath() {
      return this.jarPath != null;
    }

    public void setJarPathIsSet(boolean value) {
      if (!value) {
        this.jarPath = null;
      }
    }

    public String getInputPath() {
      return this.inputPath;
    }

    public runJob_args setInputPath(String inputPath) {
      this.inputPath = inputPath;
      return this;
    }

    public void unsetInputPath() {
      this.inputPath = null;
    }

    /** Returns true if field inputPath is set (has been assigned a value) and false otherwise */
    public boolean isSetInputPath() {
      return this.inputPath != null;
    }

    public void setInputPathIsSet(boolean value) {
      if (!value) {
        this.inputPath = null;
      }
    }

    public String getOutputPath() {
      return this.outputPath;
    }

    public runJob_args setOutputPath(String outputPath) {
      this.outputPath = outputPath;
      return this;
    }

    public void unsetOutputPath() {
      this.outputPath = null;
    }

    /** Returns true if field outputPath is set (has been assigned a value) and false otherwise */
    public boolean isSetOutputPath() {
      return this.outputPath != null;
    }

    public void setOutputPathIsSet(boolean value) {
      if (!value) {
        this.outputPath = null;
      }
    }

    public String getMongoUrl() {
      return this.mongoUrl;
    }

    public runJob_args setMongoUrl(String mongoUrl) {
      this.mongoUrl = mongoUrl;
      return this;
    }

    public void unsetMongoUrl() {
      this.mongoUrl = null;
    }

    /** Returns true if field mongoUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetMongoUrl() {
      return this.mongoUrl != null;
    }

    public void setMongoUrlIsSet(boolean value) {
      if (!value) {
        this.mongoUrl = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JAR_PATH:
        if (value == null) {
          unsetJarPath();
        } else {
          setJarPath((String)value);
        }
        break;

      case INPUT_PATH:
        if (value == null) {
          unsetInputPath();
        } else {
          setInputPath((String)value);
        }
        break;

      case OUTPUT_PATH:
        if (value == null) {
          unsetOutputPath();
        } else {
          setOutputPath((String)value);
        }
        break;

      case MONGO_URL:
        if (value == null) {
          unsetMongoUrl();
        } else {
          setMongoUrl((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JAR_PATH:
        return getJarPath();

      case INPUT_PATH:
        return getInputPath();

      case OUTPUT_PATH:
        return getOutputPath();

      case MONGO_URL:
        return getMongoUrl();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JAR_PATH:
        return isSetJarPath();
      case INPUT_PATH:
        return isSetInputPath();
      case OUTPUT_PATH:
        return isSetOutputPath();
      case MONGO_URL:
        return isSetMongoUrl();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof runJob_args)
        return this.equals((runJob_args)that);
      return false;
    }

    public boolean equals(runJob_args that) {
      if (that == null)
        return false;

      boolean this_present_jarPath = true && this.isSetJarPath();
      boolean that_present_jarPath = true && that.isSetJarPath();
      if (this_present_jarPath || that_present_jarPath) {
        if (!(this_present_jarPath && that_present_jarPath))
          return false;
        if (!this.jarPath.equals(that.jarPath))
          return false;
      }

      boolean this_present_inputPath = true && this.isSetInputPath();
      boolean that_present_inputPath = true && that.isSetInputPath();
      if (this_present_inputPath || that_present_inputPath) {
        if (!(this_present_inputPath && that_present_inputPath))
          return false;
        if (!this.inputPath.equals(that.inputPath))
          return false;
      }

      boolean this_present_outputPath = true && this.isSetOutputPath();
      boolean that_present_outputPath = true && that.isSetOutputPath();
      if (this_present_outputPath || that_present_outputPath) {
        if (!(this_present_outputPath && that_present_outputPath))
          return false;
        if (!this.outputPath.equals(that.outputPath))
          return false;
      }

      boolean this_present_mongoUrl = true && this.isSetMongoUrl();
      boolean that_present_mongoUrl = true && that.isSetMongoUrl();
      if (this_present_mongoUrl || that_present_mongoUrl) {
        if (!(this_present_mongoUrl && that_present_mongoUrl))
          return false;
        if (!this.mongoUrl.equals(that.mongoUrl))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(runJob_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      runJob_args typedOther = (runJob_args)other;

      lastComparison = Boolean.valueOf(isSetJarPath()).compareTo(typedOther.isSetJarPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJarPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jarPath, typedOther.jarPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInputPath()).compareTo(typedOther.isSetInputPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputPath, typedOther.inputPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutputPath()).compareTo(typedOther.isSetOutputPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutputPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputPath, typedOther.outputPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMongoUrl()).compareTo(typedOther.isSetMongoUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMongoUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mongoUrl, typedOther.mongoUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("runJob_args(");
      boolean first = true;

      sb.append("jarPath:");
      if (this.jarPath == null) {
        sb.append("null");
      } else {
        sb.append(this.jarPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("inputPath:");
      if (this.inputPath == null) {
        sb.append("null");
      } else {
        sb.append(this.inputPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outputPath:");
      if (this.outputPath == null) {
        sb.append("null");
      } else {
        sb.append(this.outputPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mongoUrl:");
      if (this.mongoUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.mongoUrl);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class runJob_argsStandardSchemeFactory implements SchemeFactory {
      public runJob_argsStandardScheme getScheme() {
        return new runJob_argsStandardScheme();
      }
    }

    private static class runJob_argsStandardScheme extends StandardScheme<runJob_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, runJob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JAR_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jarPath = iprot.readString();
                struct.setJarPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INPUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inputPath = iprot.readString();
                struct.setInputPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OUTPUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outputPath = iprot.readString();
                struct.setOutputPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MONGO_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mongoUrl = iprot.readString();
                struct.setMongoUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, runJob_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jarPath != null) {
          oprot.writeFieldBegin(JAR_PATH_FIELD_DESC);
          oprot.writeString(struct.jarPath);
          oprot.writeFieldEnd();
        }
        if (struct.inputPath != null) {
          oprot.writeFieldBegin(INPUT_PATH_FIELD_DESC);
          oprot.writeString(struct.inputPath);
          oprot.writeFieldEnd();
        }
        if (struct.outputPath != null) {
          oprot.writeFieldBegin(OUTPUT_PATH_FIELD_DESC);
          oprot.writeString(struct.outputPath);
          oprot.writeFieldEnd();
        }
        if (struct.mongoUrl != null) {
          oprot.writeFieldBegin(MONGO_URL_FIELD_DESC);
          oprot.writeString(struct.mongoUrl);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class runJob_argsTupleSchemeFactory implements SchemeFactory {
      public runJob_argsTupleScheme getScheme() {
        return new runJob_argsTupleScheme();
      }
    }

    private static class runJob_argsTupleScheme extends TupleScheme<runJob_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, runJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetJarPath()) {
          optionals.set(0);
        }
        if (struct.isSetInputPath()) {
          optionals.set(1);
        }
        if (struct.isSetOutputPath()) {
          optionals.set(2);
        }
        if (struct.isSetMongoUrl()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetJarPath()) {
          oprot.writeString(struct.jarPath);
        }
        if (struct.isSetInputPath()) {
          oprot.writeString(struct.inputPath);
        }
        if (struct.isSetOutputPath()) {
          oprot.writeString(struct.outputPath);
        }
        if (struct.isSetMongoUrl()) {
          oprot.writeString(struct.mongoUrl);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, runJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.jarPath = iprot.readString();
          struct.setJarPathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.inputPath = iprot.readString();
          struct.setInputPathIsSet(true);
        }
        if (incoming.get(2)) {
          struct.outputPath = iprot.readString();
          struct.setOutputPathIsSet(true);
        }
        if (incoming.get(3)) {
          struct.mongoUrl = iprot.readString();
          struct.setMongoUrlIsSet(true);
        }
      }
    }

  }

  public static class runJob_result implements org.apache.thrift.TBase<runJob_result, runJob_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("runJob_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new runJob_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new runJob_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(runJob_result.class, metaDataMap);
    }

    public runJob_result() {
    }

    public runJob_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public runJob_result(runJob_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public runJob_result deepCopy() {
      return new runJob_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public runJob_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof runJob_result)
        return this.equals((runJob_result)that);
      return false;
    }

    public boolean equals(runJob_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(runJob_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      runJob_result typedOther = (runJob_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("runJob_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class runJob_resultStandardSchemeFactory implements SchemeFactory {
      public runJob_resultStandardScheme getScheme() {
        return new runJob_resultStandardScheme();
      }
    }

    private static class runJob_resultStandardScheme extends StandardScheme<runJob_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, runJob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, runJob_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class runJob_resultTupleSchemeFactory implements SchemeFactory {
      public runJob_resultTupleScheme getScheme() {
        return new runJob_resultTupleScheme();
      }
    }

    private static class runJob_resultTupleScheme extends TupleScheme<runJob_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, runJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, runJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getJobStatus_args implements org.apache.thrift.TBase<getJobStatus_args, getJobStatus_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getJobStatus_args");

    private static final org.apache.thrift.protocol.TField JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getJobStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getJobStatus_argsTupleSchemeFactory());
    }

    public String jobId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_ID((short)1, "jobId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_ID
            return JOB_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("jobId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getJobStatus_args.class, metaDataMap);
    }

    public getJobStatus_args() {
    }

    public getJobStatus_args(
      String jobId)
    {
      this();
      this.jobId = jobId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getJobStatus_args(getJobStatus_args other) {
      if (other.isSetJobId()) {
        this.jobId = other.jobId;
      }
    }

    public getJobStatus_args deepCopy() {
      return new getJobStatus_args(this);
    }

    @Override
    public void clear() {
      this.jobId = null;
    }

    public String getJobId() {
      return this.jobId;
    }

    public getJobStatus_args setJobId(String jobId) {
      this.jobId = jobId;
      return this;
    }

    public void unsetJobId() {
      this.jobId = null;
    }

    /** Returns true if field jobId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobId() {
      return this.jobId != null;
    }

    public void setJobIdIsSet(boolean value) {
      if (!value) {
        this.jobId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_ID:
        if (value == null) {
          unsetJobId();
        } else {
          setJobId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_ID:
        return getJobId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_ID:
        return isSetJobId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getJobStatus_args)
        return this.equals((getJobStatus_args)that);
      return false;
    }

    public boolean equals(getJobStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_jobId = true && this.isSetJobId();
      boolean that_present_jobId = true && that.isSetJobId();
      if (this_present_jobId || that_present_jobId) {
        if (!(this_present_jobId && that_present_jobId))
          return false;
        if (!this.jobId.equals(that.jobId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getJobStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getJobStatus_args typedOther = (getJobStatus_args)other;

      lastComparison = Boolean.valueOf(isSetJobId()).compareTo(typedOther.isSetJobId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobId, typedOther.jobId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getJobStatus_args(");
      boolean first = true;

      sb.append("jobId:");
      if (this.jobId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getJobStatus_argsStandardSchemeFactory implements SchemeFactory {
      public getJobStatus_argsStandardScheme getScheme() {
        return new getJobStatus_argsStandardScheme();
      }
    }

    private static class getJobStatus_argsStandardScheme extends StandardScheme<getJobStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getJobStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobId = iprot.readString();
                struct.setJobIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getJobStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobId != null) {
          oprot.writeFieldBegin(JOB_ID_FIELD_DESC);
          oprot.writeString(struct.jobId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getJobStatus_argsTupleSchemeFactory implements SchemeFactory {
      public getJobStatus_argsTupleScheme getScheme() {
        return new getJobStatus_argsTupleScheme();
      }
    }

    private static class getJobStatus_argsTupleScheme extends TupleScheme<getJobStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getJobStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetJobId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetJobId()) {
          oprot.writeString(struct.jobId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getJobStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.jobId = iprot.readString();
          struct.setJobIdIsSet(true);
        }
      }
    }

  }

  public static class getJobStatus_result implements org.apache.thrift.TBase<getJobStatus_result, getJobStatus_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getJobStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getJobStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getJobStatus_resultTupleSchemeFactory());
    }

    /**
     * 
     * @see ClusterJobStatus
     */
    public ClusterJobStatus success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see ClusterJobStatus
       */
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ClusterJobStatus.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getJobStatus_result.class, metaDataMap);
    }

    public getJobStatus_result() {
    }

    public getJobStatus_result(
      ClusterJobStatus success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getJobStatus_result(getJobStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getJobStatus_result deepCopy() {
      return new getJobStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see ClusterJobStatus
     */
    public ClusterJobStatus getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see ClusterJobStatus
     */
    public getJobStatus_result setSuccess(ClusterJobStatus success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ClusterJobStatus)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getJobStatus_result)
        return this.equals((getJobStatus_result)that);
      return false;
    }

    public boolean equals(getJobStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getJobStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getJobStatus_result typedOther = (getJobStatus_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getJobStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getJobStatus_resultStandardSchemeFactory implements SchemeFactory {
      public getJobStatus_resultStandardScheme getScheme() {
        return new getJobStatus_resultStandardScheme();
      }
    }

    private static class getJobStatus_resultStandardScheme extends StandardScheme<getJobStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getJobStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = ClusterJobStatus.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getJobStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getJobStatus_resultTupleSchemeFactory implements SchemeFactory {
      public getJobStatus_resultTupleScheme getScheme() {
        return new getJobStatus_resultTupleScheme();
      }
    }

    private static class getJobStatus_resultTupleScheme extends TupleScheme<getJobStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getJobStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getJobStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = ClusterJobStatus.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
