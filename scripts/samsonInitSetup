#!/bin/bash
#
# Script to initialize setup.txt configuration

USERID=$(id -u)
SCRIPT=$0
if [ "${USERID}" -ne 0 ]; then
    echo "This script needs to be run as root"
    echo "e.g  sudo ${SCRIPT}"
    exit 1
fi
    
if [ -z "${SAMSON_WORKING}" ]; then
    SAMSON_WORKING=/var/samson
fi

SETUP_TXT=${SAMSON_WORKING}/etc/setup.txt

if [ ! -f ${SETUP_TXT} ]; then
    # generate setup.txt
    echo "Generating a base line ${SETUP_TXT}"
    cat > ${SETUP_TXT} <<EO_SETUP
# Samson Configuration
# Generated by ${SCRIPT}
# ------------------------------------------------------------------------------------------
general.memory                          2147483648      # 2Gb of RAM memory
general.max_file_size                   100000000       # 100 Mb
general.num_processess                  2               # Number of parallel processes working on this maxine    
general.shared_memory_size_per_buffer   67108864        # Buffer of 64 Mbytes
general.max_parallel_outputs            2               # Maximum number of outputs for
                                                        # any operation (reduce / map / etc ... )
#general.max_open_files_per_device    20                # Currently unused
isolated.timeout                        600             # Isolated Process timeout (in secs)
EO_SETUP
fi

echo "Updating ${SETUP_TXT} based on this system's configuration"
# Get the number of processors on this machine
NO_PROCS=`cat /proc/cpuinfo | grep processor | wc -l`
# Set general.num_processess
sed -i "s/^general.num_processess.*/general.num_processess   $NO_PROCS/"  ${SETUP_TXT}
# Get the memory 
MEM_BYTES=`cat /proc/meminfo | grep MemTotal | awk '{printf "%d",$2*1024}'`
# Set the available system memory
sed -i "s/^general.memory/general.memory   $MEM_BYTES/"  ${SETUP_TXT}

# Determine if the server has enough shared memory defined. If not configure shmmax for our needs
shmmax_needed=`grep "^general.shared_memory_size_per_buffer" /var/samson/etc/setup.txt | awk -v no_procs=$NO_PROCS '{ printf "%d",$2*no_procs }'`
shmmax_have=`sysctl -n kernel.shmmax`
if [ "$shmmax_needed" -gt "$shmmax_have" ]; then
    echo "Updating kernel.shmmax"
    if [ -f /etc/redhat-release ]; then
        have_shmmax=`grep "^kernel.shmmax" /etc/sysctl.conf`
        if [ ${have_shmmax} -eq 0 ]; then
            echo "kernel.shmmax=$shmmax_needed" >> /etc/sysctl.conf
        else
           sed -i "s/^kernel.shmmax=[0-9]\+/kernel.shmmax=${shmmax_needed}/" /etc/sysctl.conf
        fi
    fi
    if [ -f /etc/lsb-release ]; then
        . /etc/lsb-release
        if [ "${DISTRIB_ID}" = "Ubuntu" ]; then
    	    echo "kernel.shmmax=$shmmax_needed" > /etc/sysctl.d/30-samson.conf
        fi
    fi
    sysctl -q -w kernel.shmmax=$shmmax_needed
fi
