#!/bin/bash

function setup_test_vars
{
    HAVE_DELILAH_INIT=0
    HAVE_SHELL_INIT=0
    HAVE_COMMAND=0
    HAVE_SCRIPT=0
    HAVE_SHELL=0

    TEST_BASENAME=$(echo $TEST_FILE | sed 's/\.test//')
    TEST_NAME=$(sed -n '/--NAME--/,/^--/p' $TEST_FILE  | grep -v "^--")

    #Extract the delilah init script
    if [ $(grep "\-\-DELILAH\-INIT\-\-" $TEST_FILE | wc -l) -eq 1 ]; then
        TEST_DELILAH_INIT=${TEST_BASENAME}.init
        sed -n '/--DELILAH-INIT--/,/^--/p' $TEST_FILE  | grep -v "^--" > $TEST_DELILAH_INIT
        HAVE_DELILAH_INIT=1
    fi

    #Extract the shell init script
    if [ $(grep "\-\-SHELL\-INIT\-\-" $TEST_FILE | wc -l) -eq 1 ]; then
        TEST_SHELL_INIT=${TEST_BASENAME}.init
        sed -n '/--SHELL-INIT--/,/^--/p' $TEST_FILE  | grep -v "^--" > $TEST_SHELL_INIT
        HAVE_SHELL_INIT=1
    fi

    #Extract the delilah test command
    if [ $(grep "\-\-COMMAND\-\-" $TEST_FILE | wc -l) -eq 1 ]; then
        TEST_COMMAND=$(sed -n '/--COMMAND--/,/^--/p' $TEST_FILE  | grep -v "^--")
        HAVE_COMMAND=1
    fi

    #Extract the delilah test script
    if [ $(grep "\-\-SCRIPT\-\-" $TEST_FILE | wc -l) -eq 1 ]; then
        TEST_SCRIPT=$(sed -n '/--SCRIPT--/,/^--/p' $TEST_FILE  | grep -v "^--")
        HAVE_SCRIPT=1
    fi

    #Extract the shell script
    if [ $(grep "\-\-SHELL\-\-" $TEST_FILE | wc -l) -eq 1 ]; then
        TEST_SHELL_SCRIPT=${TEST_BASENAME}.sh
        sed -n '/--SHELL--/,/^--/p' $TEST_FILE  | grep -v "^--" > $TEST_SHELL_SCRIPT
        HAVE_SHELL=1
    fi

    #Generate the canon file
    if [ $(grep "\-\-EXPECT\-\-" $TEST_FILE | wc -l) -eq 1 ]; then
        TEST_EXPECT=${TEST_BASENAME}.expect
        sed -n '/--EXPECT--/,/^--/p' $TEST_FILE  | grep -v "^--" > $TEST_EXPECT
    else
        echo "ERROR: $TEST_FILE is missing an --EXPECT-- section"
        exit 1
    fi
    TEST_DIFF=${TEST_BASENAME}.diff
    TEST_OUTPUT=${TEST_BASENAME}.out

    if [ $HAVE_COMMAND -eq 0 -a $HAVE_SHELL -eq 0 -a $HAVE_SCRIPT -eq 0 ]; then
        echo "ERROR: $TEST_FILE is missing a test"
        exit 1
    fi

}

function execute_test
{

    # ------------------------------------------------ 
    # Initialize the test
    # ------------------------------------------------ 
    if [ $HAVE_DELILAH_INIT -eq 1 ]; then
         delilah ${SAMSON_TEST_HOST} -f $TEST_DELILAH_INIT 2>$TEST_INIT_SCRIPT.stderr >$TEST_INIT_SCRIPT.stdout
    fi

    if [ $HAVE_SHELL_INIT -eq 1 ]; then
         bash -x $TEST_SHELL_INIT 2>$TEST_SHELL_INIT.stderr >$TEST_SHELL_INIT.stdout
    fi

    # ------------------------------------------------
    # Execute a single delilah command
    # ------------------------------------------------
    if [ $HAVE_COMMAND -eq 1 ]; then
        delilah ${SAMSON_TEST_HOST} -command  $TEST_COMMAND > $TEST_OUTPUT 2>/dev/null
    fi

    # ------------------------------------------------
    # Execute delilah script
    # ------------------------------------------------
    if [ $HAVE_SCRIPT -eq 1 ]; then
        delilah ${SAMSON_TEST_HOST} -command  $TEST_SCRIPT > $TEST_OUTPUT 2>/dev/null
    fi

    # ------------------------------------------------
    # Execute shell script
    # ------------------------------------------------
    if [ $HAVE_SHELL -eq 1 ]; then
         bash $TEST_SHELL_SCRIPT > $TEST_OUTPUT 2>/dev/null
    fi

    # Check to see if the output is what we expect
    diff -u $TEST_EXPECT $TEST_OUTPUT > $TEST_DIFF
    if [ $? -ne 0 ]; then
        echo "ERROR: $TEST_NAME"
        echo "Diffs"
        cat $TEST_DIFF
    else
        # Clean up files for succesfull test runs
        rm -f $TEST_EXPECT $TEST_OUTPUT $TEST_SCRIPT $TEST_INIT_SCRIPT $TEST_SHELL_SCRIPT ${TEST_BASENAME}.diff $TEST_INIT_SCRIPT.stderr $TEST_INIT_SCRIPT.stdout
        echo "SUCCESS: $TEST_NAME"
    fi

}

function usage
{
    echo "Usage: $0 [test_file|test_directory]"
    exit 1
}

if [ -z $1 ]
then
    usage
fi

# If we have a directory we'll run a suite of tests
if [ -d $1 ];
then
    TEST_DIR=$1
fi

# Execute an individual test
if [ -f $1 ];
then
    TEST_DIR=$(dirname $1)
    TEST_FILE=$(basename $1)
fi

if [ -z "${TEST_DIR}" ]
then
    echo "ERROR: $1 does not exist"
    exit 1
fi

pushd $TEST_DIR > /dev/null
if [ -z ${TEST_FILE} ];
then
    for test in  `find . -name *.test`
    do
        TEST_FILE=$test
        setup_test_vars
        execute_test
    done
else
    setup_test_vars
    execute_test
fi
popd > /dev/null
exit 0
