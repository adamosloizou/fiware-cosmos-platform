#!/bin/bash

PLATFORM_PROCESSES=/opt/samson/config/samsonPlatformProcesses
hostname=$(uname -n)
logFile=/tmp/test_processesLog
logFile2=/tmp/test_processes2Log
rm -f $logFile2

echo "Samson Process test in progress" > $logFile
date >> $logFile



# #############################################################################
#
# interrupted - 
#
function interrupted
{
	echo
	echo "  Test interrupted by user - not reported as error"
	exit 0
}

trap interrupted SIGINT



# #############################################################################
#
# cleanup - test terminated, cleaning up
#
function cleanup
{
	samsonKiller all > /dev/null
	rm -f $PLATFORM_PROCESSES
}



# #############################################################################
#
# samsonProcesses - 
#
function samsonProcesses
{
	echo '------------------------ Samson Platform process list ------------------------'
	ps aux | egrep '  [0-9]*:[0-9]* samsonWorker|  [0-9]*:[0-9]* samsonController|  [0-9]*:[0-9]* samsonSpawner' | grep -v '<defunct>'
	echo '------------------------------------------------------------------------------'
}



# #############################################################################
#
# check - request user input to continue/terminate the test
#
function check
{
	read -N 1 -p "$1"

	if [ "$REPLY" != "y" ] && [ "$REPLY" != "Y" ]
	then
		echo Test terminated by user
		cleanup
		exit 1
	fi

	echo
	echo OK
	echo
}



# #############################################################################
#
# Main header for the test
#
function mainHeader
{
	clear
	echo
	echo '--------------- Samson Single Host Processes Test ---------------'
	echo
}



# #############################################################################
#
# testHeader - 
#
function testHeader()
{
	mainHeader
	echo
	echo $1
	echo "------------------------------------------------------------------------"
	echo
}



# #############################################################################
#
# Preparing localhost to run test
#
mainHeader
procs=$(ps aux | egrep samson[WSC])

if [ -f $PLATFORM_PROCESSES ] || [ "$procs" != "" ]
then
	echo "  Preparing host to run the samson process test program"
fi


if [ -f $PLATFORM_PROCESSES ]
then
	echo "    - removing samson platform processes file"
	rm -f $PLATFORM_PROCESSES
fi

if [ "$procs" != "" ]
then
	echo "    - killing running samson processes"
	samsonKiller all
fi
echo



# #############################################################################
#
# Checking that localhost is ready to run the test
#
procs=$(ps aux | egrep samson[WSC])
if [ -f $PLATFORM_PROCESSES ] || [ "$procs" != "" ]
then
	echo "  This test requires the samsonSpawner to be running in $hostname."
	echo
	echo "  In order to the the newest executables, you need to have made a"
	echo "  'make install' before starting the test."
	echo
	echo "  You also need to make sure the platform is started from scratch."
	echo "  i.e. the platform config file '$PLATFORM_PROCESSES'"
	echo "  is removed from the system, and that the processes 'samsonWorker'"
	echo "  and 'samsonController' aren't running."
	echo
	echo "  Please make sure all prerequisites are fulfilled."
	echo

	check "Press 'y' o start the test (any other key to cancel).  "
fi



# #############################################################################
#
# Starting executables for the test
#
echo "Starting samson spawner process '$(which samsonSpawner)'"
samsonSpawner

echo "Starting rest of samson platform processes using '$(which samsonSpawner)'"
samsonSetup -workers 1 -ips $hostname -controller $hostname -silent >> $logFile2
eCode=$?
if [ $eCode != 0 ]
then
  echo
  echo samsonSetup error
  echo
  cat $logFile2
  exit 1
fi



# #############################################################################
#
# Test 1 - checking that all processes are running
#
testHeader "Check 01 - platform processes started"
echo "The whole platform should be running (three processes):"
echo "  o samsonSpawner"
echo "  o samsonController" 
echo "  o samsonWorker"
echo
samsonProcesses

echo
echo "If you see one instance of each of the three processes, please press 'y'"
echo "If not, to terminate the test, press 'n' (or any other letter)"
check "OK (y/n)  "



# #############################################################################
#
# Test 2 - killing the controller and see how the spawner restarts it
#
testHeader "Check 02 - controller restart"
echo "In this test, the controller will be killed just to see how the spawner"
echo "restarts it and that the worker survives the change of controller process"
echo
echo "Before starting, here's the process list before starting the test (will be used for comparison):"
samsonProcesses
echo

echo "Now, killing the controller ..."
samsonKiller controller
sleep 0.10
echo
echo "... and showing the samson processes again ..."
echo
samsonProcesses
echo

echo "In the above samson process list you probably see that the controller is no longer running"
echo "But, this is a timing issue, the spawner might have had time to restart the controller,"
echo "so, if the controller is in the list, you should observe its PID has changed."
echo
echo " [ The pid is the second field in the process line ]"
check "Correct? (y/n)  "
echo

echo "Sleeping for two seconds to give the spawner time to restart the controller ..."
sleep 2
echo

echo "Showing the process list again"
samsonProcesses
echo

echo "Now, you should see that the controller is restarted (compare its PID to a previous process listing)"
check "Correct? (y/n)  "



# #############################################################################
#
# Test 3 - killing the worker and see how the spawner restarts it
#
testHeader "Check 03 - worker restart"
echo "In this test, the worker will be killed just to see how the spawner restarts it."
echo
echo "Before starting, here's the process list before starting the test (will be used for comparison):"
samsonProcesses
echo

echo "Now, killing the worker ..."
samsonKiller worker
sleep 0.10
echo
echo "... and showing the samson processes again ..."
echo
samsonProcesses
echo

echo "In the above samson process list you probably see that the worker is no longer running"
echo "But, this is a timing issue, the spawner might have had time to restart the worker,"
echo "so, if the worker is in the list, you should observe its PID has changed."
echo
echo " [ The pid is the second field in the process line ]"
check "Correct? [y/n]  "
echo

echo "Sleeping for two seconds to give the spawner time to restart the worker ..."
sleep 2
echo

echo "Showing the process list again"
samsonProcesses
echo

echo "Now, you should see that the worker is restarted (compare its PID to a previous process listing)"
check "Correct? [y/n]  "



# #############################################################################
#
# Test 4 - killing all processes and starting the platform with existing processes file 
#
testHeader "Check 04 - platform restart with existing platform processes file"
echo "In this test, the entire platform will be killed and restarted,"
echo "this time without using the 'samsonSetup' tool, as the almighty platform processes file"
echo "'$PLATFORM_PROCESSES' was created when we started the platform from scratch."
echo
echo "The three processes will be killed and after that, the spawner is started, and what"
echo "is proved by this test is that the entire platform is started by the spawner from"
echo "the information it finds in the platform file".
echo
echo "So, killing all processes ..."
samsonKiller all
sleep 0.50
echo
echo "Showing the process list (should be empty):"
samsonProcesses
echo
check "Empty? [y/n]  "
echo
echo "Now, the spawner is started again."
samsonSpawner
echo "The spawner will start both the controller and the worker."
echo -n "Sleeping a second to give the spawner time to start the processes ..."
sleep 1
echo
echo "Showing the process list (should contain all three samson processes):"
samsonProcesses
echo
check "Correct? [y/n]  "



# #############################################################################
#
# Test terminated, cleaning up and exiting
#
cleanup
echo samsonSetup done >> $logFile
