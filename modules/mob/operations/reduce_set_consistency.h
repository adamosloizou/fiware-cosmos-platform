
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
 */

#ifndef _H_SAMSON_mob_reduce_set_consistency
#define _H_SAMSON_mob_reduce_set_consistency


#include <samson/module/samson.h>


namespace samson{
namespace mob{


class reduce_set_consistency : public samson::Reduce
{

public:


#ifdef INFO_COMMENT //Just to include a comment without conflicting anything
	// If interface changes and you do not recreate this file, consider updating this information (and of course, the module file)

	input: system.UInt mob.Place
	input: system.UInt cdr.Cell
	output: system.UInt64 mob.Place

	helpLine: Make location results consistent.
	extendedHelp: 		Make location results consistent.

#endif // de INFO_COMMENT

	void init(samson::KVWriter *writer )
	{
	}

	/**
	 * Make location results consistent.
	 */
	void run(  samson::KVSetStruct* inputs , samson::KVWriter *writer )
	{
		Place place;
		samson::cdr::Cell cell;

		if( inputs[1].num_kvs > 0 )
		{
			cell.parse( inputs[1].kvs[0]->value );
			for( int i=0; i<inputs[0].num_kvs; i++ )
			{
				place.parse( inputs[0].kvs[i]->value );

				// check consistency and fix if necessary,
				// assuming cell ids are equal

				// bts level
				if( place.btsId != cell.btsId )
				{
					place.btsId = cell.btsId;
					place.btsDaysWithCalls = place.cellDaysWithCalls;
				}
				else
				{
					if( place.btsDaysWithCalls < place.cellDaysWithCalls )
					{
						place.btsDaysWithCalls = place.cellDaysWithCalls;
					}
				}

				// lac level
				if( place.lacId != cell.lacId )
				{
					place.lacId = cell.lacId;
					place.lacDaysWithCalls = place.btsDaysWithCalls;
				}
				else
				{
					if( place.lacDaysWithCalls < place.btsDaysWithCalls )
					{
						place.lacDaysWithCalls = place.btsDaysWithCalls;
					}
				}

				// state level
				if( place.stateId != cell.stateId )
				{
					place.stateId = cell.stateId;
					place.stateDaysWithCalls = place.lacDaysWithCalls;
				}
				else
				{
					if( place.stateDaysWithCalls < place.lacDaysWithCalls )
					{
						place.stateDaysWithCalls = place.lacDaysWithCalls;
					}
				}

				// emit
				writer->emit(0, &place.phone, &place );
			}
		}
	}

	void finish(samson::KVWriter *writer )
	{
	}



};


} // end of namespace samson
} // end of namespace mob

#endif
