
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_mob_parse_out_results
#define _H_SAMSON_mob_parse_out_results


#include <samson/module/samson.h>

#define CONF_SEP                    '|'


namespace samson{
namespace mob{


	class parse_out_results : public samson::ParserOut
	{
		// Input[0k]
		samson::system::UInt phone;
		// Input[0v]
		Results results;
#ifdef MAX_STR_LEN
#undef MAX_STR_LEN
#endif
#define MAX_STR_LEN 1024
			char output[MAX_STR_LEN];

	public:


#ifdef INFO_COMMENT //Just to include a comment without conflicting anything
// If interface changes and you do not recreate this file, consider updating this information (and of course, the module file)

input: system.UInt mob.Results  

helpLine: Write results file in the appropriate readable format.
extendedHelp: 		Write results file in the appropriate readable format.

#endif // de INFO_COMMENT

		void init(TXTWriter *writer )
		{
			size_t _total = 0;

			   _total += snprintf( output, MAX_STR_LEN, "phone%c", CONF_SEP );
			   _total += snprintf( output+_total, MAX_STR_LEN-_total, "mobility_degree%c", CONF_SEP );
			   _total += snprintf( output+_total, MAX_STR_LEN-_total, "home_cell%c", CONF_SEP );
			   _total += snprintf( output+_total, MAX_STR_LEN-_total, "home_cell_freq%c", CONF_SEP );
			   _total += snprintf( output+_total, MAX_STR_LEN-_total, "home_bts%c", CONF_SEP );
			   _total += snprintf( output+_total, MAX_STR_LEN-_total, "home_bts_freq%c", CONF_SEP );
			   _total += snprintf( output+_total, MAX_STR_LEN-_total, "home_lac%c", CONF_SEP );
			   _total += snprintf( output+_total, MAX_STR_LEN-_total, "home_lac_freq%c", CONF_SEP );
			   _total += snprintf( output+_total, MAX_STR_LEN-_total, "home_state%c", CONF_SEP );
			   _total += snprintf( output+_total, MAX_STR_LEN-_total, "home_state_freq%c", CONF_SEP );
			   _total += snprintf( output+_total, MAX_STR_LEN-_total, "work_cell%c", CONF_SEP );
			   _total += snprintf( output+_total, MAX_STR_LEN-_total, "work_cell_freq%c", CONF_SEP );
			   _total += snprintf( output+_total, MAX_STR_LEN-_total, "work_bts%c", CONF_SEP );
			   _total += snprintf( output+_total, MAX_STR_LEN-_total, "work_bts_freq%c", CONF_SEP );
			   _total += snprintf( output+_total, MAX_STR_LEN-_total, "work_lac%c", CONF_SEP );
			   _total += snprintf( output+_total, MAX_STR_LEN-_total, "work_lac_freq%c", CONF_SEP );
			   _total += snprintf( output+_total, MAX_STR_LEN-_total, "work_state%c", CONF_SEP );
			   _total += snprintf( output+_total, MAX_STR_LEN-_total, "work_state_freq%c", '\n' );

			 writer->emit(output);
		}

		void run(KVSetStruct* inputs , TXTWriter *writer )
		{

			  for (size_t i  =0 ;  i < inputs[0].num_kvs ; ++i)
			  {
			      phone.parse( inputs[0].kvs[i]->key );
			      results.parse( inputs[0].kvs[i]->value );

			      size_t _total = 0;

			      if( (results.mobilityDegree.value >= 0) ||
				      (results.homeCellId.value > 0) || (results.homeBtsId.value > 0) || (results.homeLacId.value > 0) || (results.homeStateId.value > 0) ||
				      (results.workCellId.value > 0) || (results.workBtsId.value > 0) || (results.workLacId.value > 0) || (results.workStateId.value > 0))
			      {
			    		 _total += snprintf( output, MAX_STR_LEN, "%lu%c", phone.value, CONF_SEP );
			    		 _total += snprintf( output+_total, MAX_STR_LEN-_total, "%lu%c", results.mobilityDegree.value, CONF_SEP );
			    		 _total += snprintf( output+_total, MAX_STR_LEN-_total, "%u%c", results.homeCellId.value, CONF_SEP );
			    		 _total += snprintf( output+_total, MAX_STR_LEN-_total, "%lu%c", results.homeCellFreq.value, CONF_SEP );
			    		 _total += snprintf( output+_total, MAX_STR_LEN-_total, "%lu%c", results.homeBtsId.value, CONF_SEP );
			    		 _total += snprintf( output+_total, MAX_STR_LEN-_total, "%lu%c", results.homeBtsFreq.value, CONF_SEP );
			    		 _total += snprintf( output+_total, MAX_STR_LEN-_total, "%lu%c", results.homeLacId.value, CONF_SEP );
			    		 _total += snprintf( output+_total, MAX_STR_LEN-_total, "%lu%c", results.homeLacFreq.value, CONF_SEP );
			    		 _total += snprintf( output+_total, MAX_STR_LEN-_total, "%lu%c", results.homeStateId.value, CONF_SEP );
			    		 _total += snprintf( output+_total, MAX_STR_LEN-_total, "%lu%c", results.homeStateFreq.value, CONF_SEP );
			    		 _total += snprintf( output+_total, MAX_STR_LEN-_total, "%u%c", results.workCellId.value, CONF_SEP );
			    		 _total += snprintf( output+_total, MAX_STR_LEN-_total, "%lu%c", results.workCellFreq.value, CONF_SEP );
			    		 _total += snprintf( output+_total, MAX_STR_LEN-_total, "%lu%c", results.workBtsId.value, CONF_SEP );
			    		 _total += snprintf( output+_total, MAX_STR_LEN-_total, "%lu%c", results.workBtsFreq.value, CONF_SEP );
			    		 _total += snprintf( output+_total, MAX_STR_LEN-_total, "%lu%c", results.workLacId.value, CONF_SEP );
			    		 _total += snprintf( output+_total, MAX_STR_LEN-_total, "%lu%c", results.workLacFreq.value, CONF_SEP );
			    		 _total += snprintf( output+_total, MAX_STR_LEN-_total, "%lu%c", results.workStateId.value, CONF_SEP );
			    		 _total += snprintf( output+_total, MAX_STR_LEN-_total, "%lu%c", results.workStateFreq.value, '\n' );

			    		 writer->emit(output);
			      }



			  }
			  return;
		}

		void finish(TXTWriter *writer )
		{
			size_t _total = 0;

			   _total += snprintf( output, MAX_STR_LEN, "phone%c", CONF_SEP );
			   _total += snprintf( output+_total, MAX_STR_LEN-_total, "mobility_degree%c", CONF_SEP );
			   _total += snprintf( output+_total, MAX_STR_LEN-_total, "home_cell%c", CONF_SEP );
			   _total += snprintf( output+_total, MAX_STR_LEN-_total, "home_cell_freq%c", CONF_SEP );
			   _total += snprintf( output+_total, MAX_STR_LEN-_total, "home_bts%c", CONF_SEP );
			   _total += snprintf( output+_total, MAX_STR_LEN-_total, "home_bts_freq%c", CONF_SEP );
			   _total += snprintf( output+_total, MAX_STR_LEN-_total, "home_lac%c", CONF_SEP );
			   _total += snprintf( output+_total, MAX_STR_LEN-_total, "home_lac_freq%c", CONF_SEP );
			   _total += snprintf( output+_total, MAX_STR_LEN-_total, "home_state%c", CONF_SEP );
			   _total += snprintf( output+_total, MAX_STR_LEN-_total, "home_state_freq%c", CONF_SEP );
			   _total += snprintf( output+_total, MAX_STR_LEN-_total, "work_cell%c", CONF_SEP );
			   _total += snprintf( output+_total, MAX_STR_LEN-_total, "work_cell_freq%c", CONF_SEP );
			   _total += snprintf( output+_total, MAX_STR_LEN-_total, "work_bts%c", CONF_SEP );
			   _total += snprintf( output+_total, MAX_STR_LEN-_total, "work_bts_freq%c", CONF_SEP );
			   _total += snprintf( output+_total, MAX_STR_LEN-_total, "work_lac%c", CONF_SEP );
			   _total += snprintf( output+_total, MAX_STR_LEN-_total, "work_lac_freq%c", CONF_SEP );
			   _total += snprintf( output+_total, MAX_STR_LEN-_total, "work_state%c", CONF_SEP );
			   _total += snprintf( output+_total, MAX_STR_LEN-_total, "work_state_freq%c", '\n' );

			   writer->emit(output);
		}



	};


} // end of namespace samson
} // end of namespace mob

#endif
