
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_sna_spread_nodes_to_strong_connections
#define _H_SAMSON_sna_spread_nodes_to_strong_connections


#include <samson/Operation.h>

#include <samson/modules/system/UInt.h>
#include <samson/modules/graph/Node.h>

namespace ss{
namespace sna{


	class spread_nodes_to_strong_connections : public ss::Map
	{
		ss::system::UInt node_id;	// key 	
		ss::graph::Node node;		// value 
		ss::graph::Node reducedNode;	//Node with soft contacts (not necessary in the cliques)
		
	public:

		void run(  ss::KVSetStruct* inputs , ss::KVWriter *writer )
		{
			
			for (size_t i = 0 ; i < inputs[0].num_kvs ; i++)
			{
				//Get key and value
				node_id.parse( inputs[0].kvs[i]->key );
				node.parse( inputs[0].kvs[i]->value );
				
				
				//Get the node only with strong contacts
				reducedNode.id = node.id;
				reducedNode.flags = node.flags;
				reducedNode.linksSetLength(0);	//Just in case (threoretically not necessary)
				for (int n = 0 ; n < node.links_length ; n++)
					if ( node.links[n].getWeight() >= 1 )
						reducedNode.linksAdd()->copyFrom( &node.links[n] );
				
				
				//Emit yourself also to be part of the cliques
				writer->emit(0,&node_id, &reducedNode);
				
				//Emit the same information to all your STRONG contacts
				for (int j = 0 ; j < reducedNode.links_length ; j++)
				{
					//Just in case node is auto-linked... (this should be avoided)
					if( reducedNode.links[j].id != reducedNode.id )
					{
						node_id.value = reducedNode.links[j].id.value ;	//Key node to send something
						writer->emit(0,&node_id, &reducedNode);
					}
				}
			}			
			
		}


	};


} // end of namespace ss
} // end of namespace sna

#endif
