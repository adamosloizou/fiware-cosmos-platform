
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_time_test_fake_purchases
#define _H_SAMSON_time_test_fake_purchases


#include <samson/samson.h>
#include <samson/modules/system/Time.h>
#include <samson/modules/system/UInt.h>


namespace ss{
namespace time_test{


	class fake_purchases : public ss::Generator
	{

	public:

#define MAX_STR_LEN 1024
                char output[MAX_STR_LEN];

		void run( ss::KVWriter *writer )
		{
			ss::system::Time tm;
			struct tm timep;
			ss::system::UInt amount;

			size_t num_samples = environment->getInt( "time_test.num_samples", 1000000);
			OLM_T(LMT_User06, ("fake_purchases() for time_test.num_samples:%lu\n", num_samples));

			for (size_t i = 0; (i < num_samples); i++)
			{
				timep.tm_year = 111;
				timep.tm_mon = rand()%12;
				timep.tm_mday = rand()%31 + 1;
				timep.tm_hour = rand()%24;
				timep.tm_min = rand()%60;
				timep.tm_sec = rand()%60;
				timep.tm_wday = 0;
				timep.tm_yday = 0;

//				if (i%100000 == 0)
//				{
//					asctime_r(&timep, output);
//					output[strlen(output)-1] = '\0';
//					OLM_T(LMT_User06, ("Loop:%lu, yday:%d, wday:%d, month:%d, date:'%s'\n", i, timep.tm_yday, timep.tm_wday, timep.tm_mon, output));
//				}

				tm.getTimeUTCFromCalendar(&timep);

				amount.value = rand()%1000;

				if (i%100000 == 0)
				{
					asctime_r(&timep, output);
					output[strlen(output)-1] = '\0';
					OLM_T(LMT_User06, ("Loop:%lu, time:%lu, amount:%lu, yday:%d, wday:%d, month:%d, date:'%s'\n", i, tm.value, amount.value, timep.tm_yday, timep.tm_wday, timep.tm_mon, output));
				}


				writer->emit(0, &tm, &amount);
			}
		}


	};


} // end of namespace ss
} // end of namespace time_test

#endif
