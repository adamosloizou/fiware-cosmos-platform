
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_system_str
#define _H_SAMSON_system_str


#include <samson/module/samson.h>
#include <samson_system/Value.h>
#include "samson_system/Filter.h"


namespace samson{
namespace system{


	class str : public samson::ParserOut
	{

        samson::system::Value key;
        samson::system::Value value;
        
        // Collection of filters to execute for every key-value
        FilterCollection filters_collection;
        

	public:


//  INFO_MODULE
// If interface changes and you do not recreate this file, you will have to update this information (and of course, the module file)
// Please, do not remove this comments, as it will be used to check consistency on module declaration
//
//  input: system.Value system.Value  
//  
// helpLine: Export system.Value system.Value elements to string
//  END_INFO_MODULE

		void init( TXTWriter *writer )
		{
            // Setup the process chain...
            std::string command =  environment->get( "command" ,  "" );
            au::ErrorManager error;
            filters_collection.addFilters( command , NULL , writer , &error );
            
            // Error defined by user
            if( error.isActivated() )
                tracer->setUserError( error.getMessage() );
		}

		void run( KVSetStruct* inputs , TXTWriter *writer )
		{
            for( size_t i = 0 ; i < inputs[0].num_kvs ; i++ )
            {
                key.parse( inputs[0].kvs[i]->key );
                value.parse( inputs[0].kvs[i]->value );
                
                
                if( filters_collection.filters.size() > 0 )
                {
                    KeyValue kv( &key, &value );
                    for( size_t f = 0 ; f < filters_collection.filters.size() ; f++ )
                        filters_collection.filters[f]->run(kv);
                }
                else
                {                   
                    //Emit the parsed key value
                    std::string output = au::str("%s %s\n" , key.str().c_str() , value.str().c_str() );
                    writer->emit( output.c_str() , output.length() );
                }
                
            }
		}

		void finish( TXTWriter *writer )
		{
		}



	};


} // end of namespace system
} // end of namespace samson

#endif
