
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_system_parse_to_value
#define _H_SAMSON_system_parse_to_value


#include <samson/module/samson.h>
#include <samson/modules/system/Value.h>

#include "au/StringComponents.h"

namespace samson{
namespace system{


	class parse_to_value : public samson::Parser
	{

	   au::StringComponents string_component;
	   samson::system::Value key;
	   samson::system::Value value;

	public:


//  INFO_MODULE
// If interface changes and you do not recreate this file, you will have to update this information (and of course, the module file)
// Please, do not remove this comments, as it will be used to check consistency on module declaration
//
//  output: system.Value system.Value
//  
// helpLine: Parse lines with fields separated by a single char tab , space , coma , ...
//  END_INFO_MODULE

		void init( samson::KVWriter *writer )
		{
		   //value.set_string("1");
            value.set_int(1);
		}

		void run( char *data , size_t length , samson::KVWriter *writer )
		{
            

		   size_t offset = 0;
		   while( offset < length )
		   {
			  size_t line_length = string_component.process_line( data + offset , length - offset , ' ' );
			  
              // Advance the offset
			  offset += line_length;
			  
              // Set the key
			  key.set_as_vector();
			  for ( size_t i = 0 ; i < string_component.components.size() ; i++ )
              {
				 
				 Value* new_value = key.add_value_to_vector(); 
                 new_value->set_string( string_component.components[i] );
              }

               //Emit the parsed key value
               writer->emit( 0 , &key , &value );
		   }
		}

		void finish( samson::KVWriter *writer )
		{
		}



	};


} // end of namespace system
} // end of namespace samson

#endif
