
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_system_process
#define _H_SAMSON_system_process


#include <samson/module/samson.h>
#include <samson/modules/system/Value.h>
#include "samson_system/Process.h"

namespace samson{
namespace system{


	class process : public samson::Reduce
	{
        
        // Process element for all operations
        Process  p; 

        // Value to parse everything
        Value key;
        Value state;
        Value value;
        
	public:


//  INFO_MODULE
// If interface changes and you do not recreate this file, you will have to update this information (and of course, the module file)
// Please, do not remove this comments, as it will be used to check consistency on module declaration
//
//  input: system.Value system.Value  
//  input: system.Value system.Value  
//  output: system.Value system.Value
//  output: system.Value system.Value
//  output: system.Value system.Value
//  
// helpLine: Accumulation, Level and other common tasks implemented in the same operation
//  END_INFO_MODULE

		void init( samson::KVWriter *writer )
		{
		}

		void run( samson::KVSetStruct* inputs , samson::KVWriter *writer )
		{
            trace( au::str("Run process with %lu / %lu", inputs[0].num_kvs , inputs[1].num_kvs ) , writer );
            
            // Parse key
            // ----------------------------------------------------------------
            if ( inputs[0].num_kvs > 0 )
                key.parse( inputs[0].kvs[0]->key );
            else if ( inputs[1].num_kvs > 0 )
                key.parse( inputs[1].kvs[0]->key );
            else
                return;

            // Recover state ( if any )
            // ----------------------------------------------------------------
            if( inputs[1].num_kvs > 0 )
                state.parse( inputs[1].kvs[0]->value );
            else
                state.set_as_void();
            p.init( &key , &state , writer ); // Previous state was present

            // Process all key-values
            // ----------------------------------------------------------------
            for (size_t i = 0 ; i < inputs[0].num_kvs ; i++ )
            {
                value.parse( inputs[0].kvs[i]->value );
                p.process( &value );
            }
            
            // Finish
            // ----------------------------------------------------------------
            p.finish();
            
            
            // Emit state if non void
            if( !state.isVoid() )
                writer->emit( 2 , &key, &state );
		}

		void finish( samson::KVWriter *writer )
		{
            // Flush everything included in all kind of operations
            p.flush();
		}

        
        void trace( std::string message , samson::KVWriter *writer  )
        {
            
            samson::system::Value key_message;
            samson::system::Value value_message;
            key_message.set_string( message );
            value_message.set_as_void();
            
            writer->emit( -1 , &key_message , &value_message );
            
        }
        


	};


} // end of namespace system
} // end of namespace samson

#endif
