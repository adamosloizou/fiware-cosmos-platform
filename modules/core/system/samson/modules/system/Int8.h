
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this data
 */

#ifndef _H_SAMSON_system_Int8
#define _H_SAMSON_system_Int8

#include <samson/modules/system/FixedLengthDataInstance.h>

namespace samson{
namespace system{


class Int8 : public FixedLengthDataInstance<char>
{
public:

    std::string getName()
    {
        return "system.Int8";
    }



    int hash(int max_num_partitions){
        return abs(value)%max_num_partitions;
    }

    void setFromString(const char *_data)
    {
        if (strncmp(_data, "0x", strlen("0x")) == 0)
        {
            value = strtol(_data, (char **) NULL, 16);
        }
        else
        {
            value = strtol(_data, (char **) NULL, 10);
        }

    }

    int toInt()
    {
        return (value);
    }

    std::string str(){
        std::ostringstream o;
        o << static_cast<int>(value) << " ";
        return o.str();
    }

    std::string strJSON(){
        std::ostringstream o;
        o << static_cast<int>(value);
        return o.str();
    }

    std::string strXML(){
        return str();
    }

    static int *getDataPathStatic(const std::string &dataPathString){
        const char *dataPathCharP = dataPathString.c_str();
        int nlevels = 1;
        int *dataPathIntP;

        const char *p_sep = dataPathCharP;
        while ((p_sep = strchr(p_sep, '.')) != NULL)
        {
            nlevels++;
            p_sep++;
        }

        if ((dataPathIntP = (int *)malloc((nlevels + 1)*sizeof(int))) == NULL)
        {
            return ((int *)NULL);
        }

        int retError = getDataPath(dataPathCharP, dataPathIntP);

        if (retError)
        {
            free(dataPathIntP);
            dataPathIntP = NULL;
        }

        return  (dataPathIntP);
    }

    static int getDataPath(const char * dataPathCharP, int *dataPathIntP){
        if (*dataPathCharP == 0)
        {
            *dataPathIntP = -1;
            return (0);
        }

        if (strcmp(dataPathCharP, "Int8") == 0)
        {
            *dataPathIntP = -1;
            return (0);
        }

        return -1;
    }

    std::string getTypeFromPath(const std::string &dataPathString){
        const char *dataPathCharP = dataPathString.c_str();
        return(getTypeFromPathStatic(dataPathCharP));
    }

    static std::string getTypeFromPathStatic(const char * dataPathCharP){
        if (*dataPathCharP == 0)
        {
            return ("system.Int8");
        }
        if (strcmp(dataPathCharP, ".") == 0)
        {
            return ("system.Int8");
        }

        if (strcmp(dataPathCharP, "Int8") == 0)
        {
            return ("system.Int8");
        }
        return("_ERROR_");
    }

    std::string getTypeFromPath(const int *dataPathIntP){
        return(getTypeFromPathStatic(dataPathIntP));
    }

    static std::string getTypeFromPathStatic(const int *dataPathIntP){
        switch(*dataPathIntP)
        {
        case -1:
            return ("system.Int8");
            break;
        default:
            return ("_ERROR_");
            break;
        };
        return NULL;
    }

    static const char *getTypeStatic()
    {
        return ("system.Int8");
    }

    const char *getType()
    {
        return ("system.Int8");
    }

    static bool checkTypeStatic(const char *type)
    {
        if (strcmp(type, "system.Int8") == 0)
        {
            return true;
        }
        return false;
    }

    bool checkType(const char *type)
    {
        if (strcmp(type, "system.Int8") == 0)
        {
            return true;
        }
        return false;
    }

    static size_t getHashTypeStatic(){
        return(14669836451525464989ULL);
    }

    size_t getHashType(){
        return(14669836451525464989ULL);
    }

    static bool checkHashTypeStatic(size_t valType){
        if (valType == 14669836451525464989ULL)
        {
            return true;
        }		return false;
    }

    bool checkHashType(size_t valType){
        if (valType == 14669836451525464989ULL)
        {
            return true;
        }		return false;
    }

    DataInstance * getDataInstanceFromPath(const int *dataPathIntP){
        switch(*dataPathIntP)
        {
        case -1:
            return (this);
            break;
        default:
            return (NULL);
            break;
        };
        return NULL;
    }

};


} // end of namespace samson
} // end of namespace system

#endif
