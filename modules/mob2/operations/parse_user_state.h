
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_mob2_parse_user_state
#define _H_SAMSON_mob2_parse_user_state


#include <stdint.h>

#include <samson/module/samson.h>
#include <samson/modules/mob2/UserState.h>
#include <samson/modules/system/UInt.h>


namespace samson{
namespace mob2{


	class parse_user_state : public samson::Parser
	{
		//Output
		samson::system::UInt node;
		samson::mob2::UserState state;

	public:


#ifdef INFO_COMMENT //Just to include a comment without conflicting anything
// If interface changes and you do not recreate this file, consider updating this information (and of course, the module file)

output: system.UInt mob2.UserState

helpLine: fake parser to create the userState queue
#endif // de INFO_COMMENT

		void init( samson::KVWriter *writer )
		{
		}

void parseLines( char *line, samson::KVWriter *writer )
{
	uint64_t nodeVal = 0;
	uint64_t imeiVal = 0;
	uint32_t cellVal = 0;
	uint64_t timeVal = 0;

#if defined(__APPLE__)
	sscanf(line, "%llu|%llu|%d|%llu", &nodeVal, &imeiVal, &cellVal, &timeVal);
#else
	sscanf(line, "%lu|%lu|%d|%lu", &nodeVal, &imeiVal, &cellVal, &timeVal);
#endif // __APPLE__

	node.value = nodeVal;
	state.imei.value = imeiVal;
	state.position.cell.value = cellVal;
	state.position.time = timeVal;

	writer->emit(0, &node, &state);
}


void run( char *data , size_t length , samson::KVWriter *writer )
{
	size_t offset = 0;
	size_t line_begin = 0;

	while( offset < length )
	{

		if( data[offset] == '\n')
		{
			data[offset] = '\0';

			parseLines(data+line_begin , writer);

			line_begin = offset+1;
		}
		++offset;
	}
}

		void finish( samson::KVWriter *writer )
		{
		}



	};


} // end of namespace mob2
} // end of namespace samson

#endif
