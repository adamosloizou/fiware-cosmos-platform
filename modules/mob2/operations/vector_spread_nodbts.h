
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_mob2_vector_spread_nodbts
#define _H_SAMSON_mob2_vector_spread_nodbts


#include <samson/module/samson.h>
#include <samson/modules/mob2/NodeMx_Counter.h>
#include <samson/modules/mob2/Node_Bts.h>
#include <samson/modules/system/UInt.h>



namespace samson{
namespace mob2{


	class vector_spread_nodbts : public samson::Map
	{
        // Inputs
        samson::system::UInt node;
        NodeMx_Counter counter;
        // Outputs
        Node_Bts nodebts;
        samson::system::UInt comms;

	public:


#ifdef INFO_COMMENT //Just to include a comment without conflicting anything
// If interface changes and you do not recreate this file, consider updating this information (and of course, the module file)

input: system.UInt mob2.NodeMx_Counter  
output: mob2.Node_Bts system.UInt

extendedHelp: 		Spread clients info array by node, bts, group and hour.

#endif // de INFO_COMMENT

		void init(samson::KVWriter *writer )
		{
		}

		void run(  samson::KVSetStruct* inputs , samson::KVWriter *writer )
		{
        for(uint64_t i=0; i<inputs[0].num_kvs; i++)
        {
                node.parse(inputs[0].kvs[i]->key);
                counter.parse(inputs[0].kvs[i]->value);

                nodebts.phone.value = node.value;
                for(int j=0; j<counter.bts_length; j++)
                {
                        nodebts.bts.value = counter.bts[j].bts.value;
                        int group;
                        if(counter.bts[j].wday.value == 0)            {       group = 3;}
                        else if(counter.bts[j].wday.value == 5)       {       group = 1;}
                        else if(counter.bts[j].wday.value == 6)       {       group = 2;}
                        else                                                            {       group = 0;}
                        nodebts.wday.value = group;
                        nodebts.range.value = counter.bts[j].range.value;
                        comms.value = counter.bts[j].count.value;
                        writer->emit(0, &nodebts,&comms);
                }
        }

		}

		void finish(samson::KVWriter *writer )
		{
		}



	};


} // end of namespace mob2
} // end of namespace samson

#endif
