
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_mob2_vector_fuse_node_daygroup
#define _H_SAMSON_mob2_vector_fuse_node_daygroup


#include <samson/module/samson.h>
#include <samson/modules/mob2/ClusterVector.h>
#include <samson/modules/mob2/DailyVector.h>
#include <samson/modules/mob2/Node_Bts.h>
#include <samson/modules/mob2/TwoInt.h>



namespace samson{
namespace mob2{


	class vector_fuse_node_daygroup : public samson::Reduce
	{
        //Inputs
        TwoInt nodebts;  // num1: node   num2: bts
        DailyVector invector;
        //Outputs
        Node_Bts output;
        ClusterVector clusvector;

	public:


#ifdef INFO_COMMENT //Just to include a comment without conflicting anything
// If interface changes and you do not recreate this file, consider updating this information (and of course, the module file)

input: mob2.TwoInt mob2.DailyVector  
output: mob2.Node_Bts mob2.ClusterVector

extendedHelp: 		Fuse the vector of node comms by group day

#endif // de INFO_COMMENT

		void init(samson::KVWriter *writer )
		{
		}

		void run(  samson::KVSetStruct* inputs , samson::KVWriter *writer )
		{
        clusvector.comsSetLength(0);
        nodebts.parse(inputs[0].kvs[0]->key);

        for(unsigned int group=0; group<4; group++)
        {
                bool added = false;
                for(uint64_t j=0; j<inputs[0].num_kvs; j++)
                {
                        invector.parse(inputs[0].kvs[j]->value);
                        if(invector.hours[j].num1.value == group)
                        {
                                for(int k=0; k < invector.hours_length; k++)
                                {
                                        samson::system::Double hours;
                                        hours.value = (double) invector.hours[k].num2.value;
                                        clusvector.comsAdd()->copyFrom(&hours);
                                }
                                added = true;
                                break;
                        }
                }
                if(!added)
                {
                        samson::system::Double hours;
                        hours.value = 0;
                        for(int k=0; k<24; k++)
                        {       
				clusvector.comsAdd()->copyFrom(&hours);
			}
                }
        }

        output.phone = nodebts.num1;
        output.bts = nodebts.num2;
        output.wday = 0;
        output.range = 0;
        writer->emit(0, &output,&clusvector);

		}

		void finish(samson::KVWriter *writer )
		{
		}



	};


} // end of namespace mob2
} // end of namespace samson

#endif
