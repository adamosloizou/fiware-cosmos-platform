
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
 */

#ifndef _H_SAMSON_mob2_repbts_join_dist_comms
#define _H_SAMSON_mob2_repbts_join_dist_comms


#include <samson/module/samson.h>
#include <samson/modules/mob2/Bts_Counter.h>
#include <samson/modules/mob2/Node_Bts_Day.h>
#include <samson/modules/system/UInt.h>



namespace samson{
namespace mob2{


class repbts_join_dist_comms : public samson::Reduce
{
	//Inputs
	samson::system::UInt node;
	Node_Bts_Day nodbtsday;
	samson::system::UInt ncomms;
	//Outputs
	Bts_Counter output;

public:


#ifdef INFO_COMMENT //Just to include a comment without conflicting anything
	// If interface changes and you do not recreate this file, consider updating this information (and of course, the module file)

	input: system.UInt mob2.Node_Bts_Day
	input: system.UInt system.samson::system::UInt
	output: system.UInt mob2.Bts_Counter

	extendedHelp: 		Get percentages of communication of a client by bts and range

#endif // de INFO_COMMENT

	void init(samson::KVWriter *writer )
	{
	}

	////////
	// Calculate percentage by bts
	////////

	void run(  samson::KVSetStruct* inputs , samson::KVWriter *writer )
	{
		if ((inputs[0].num_kvs == 0) || (inputs[1].num_kvs == 0))
		{
			return;
		}
		node.parse(inputs[1].kvs[0]->key);
		for(uint64_t i=0; i<inputs[1].num_kvs; i++)
		{
			ncomms.parse(inputs[1].kvs[i]->value);
			for(uint64_t j=0; j<inputs[0].num_kvs; j++)
			{
				nodbtsday.parse(inputs[0].kvs[j]->value);
				output.bts.value = nodbtsday.bts.value;
				output.wday.value = 0;
				output.range.value = nodbtsday.count.value;  // ATENTION: Field range is used for storing number of comms
				output.count.value = (nodbtsday.count.value*100)/ncomms.value;
				writer->emit(0, &node,&output);
			}
		}

	}

	void finish(samson::KVWriter *writer )
	{
	}



};


} // end of namespace mob2
} // end of namespace samson

#endif
