
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
 */

#ifndef _H_SAMSON_mob2_reduce_check_imeis_by_user
#define _H_SAMSON_mob2_reduce_check_imeis_by_user


#include <samson/module/samson.h>
#include <samson/modules/mob2/UserState.h>
#include <samson/modules/system/UInt.h>


namespace samson{
namespace mob2{


class reduce_check_imeis_by_user : public samson::Reduce
{
	//Inputs
	samson::system::UInt node;
	samson::system::UInt imei;

	//State: Input & Output
	samson::mob2::UserState state;

public:


#ifdef INFO_COMMENT //Just to include a comment without conflicting anything
	// If interface changes and you do not recreate this file, consider updating this information (and of course, the module file)

	input: system.UInt system.UInt
	input: system.UInt mob2.UserState
	output: system.UInt mob2.UserState
	output: system.UInt mob2.UserState

	helpLine: Detects when a user changes terminal
#endif // de INFO_COMMENT

	void init(samson::KVWriter *writer )
	{
	}

	void run(  samson::KVSetStruct* inputs , samson::KVWriter *writer )
	{
		if (inputs[0].num_kvs == 0)
		{
			// No new information about user
			return;
		}

		node.parse(inputs[0].kvs[0]->key);

		if (inputs[1].num_kvs > 1)
		{
			OLM_E(("Error, more than one state(%lu) per user:%lu", inputs[1].num_kvs, node.value));
			return;
		}

		if (inputs[1].num_kvs == 0)
		{
			// We had not yet information about this user

			imei.parse(inputs[0].kvs[0]->value);
			OLM_T(LMT_User06, ("New user:%lu detected, with imei:%lu", node.value, imei.value));
			state.imei.value = imei.value;
			state.position.cell.value = 0;
			state.position.time = 0;
		}
		else
		{
			OLM_T(LMT_User06, ("Existing user:%lu detected", node.value));
			state.parse(inputs[1].kvs[0]->value);
		}

		for (uint64_t i = 0; (i < inputs[0].num_kvs); i++)
		{
			imei.parse(inputs[0].kvs[i]->value);
			node.parse(inputs[0].kvs[i]->key);

			//if (imei.value == 0)
			{
				OLM_T(LMT_User06, ("Parsed user:%lu with imei:%lu at i:%lu of %lu", node.value, imei.value, i, inputs[0].num_kvs));
			}
			if (imei.value != state.imei.value)
			{

				if (state.imei.value != 0)
				{
					OLM_T(LMT_User06, ("Emit different imei(%lu) from state(%lu) at i:%lu of %lu", imei.value, state.imei.value, i, inputs[0].num_kvs));
					state.imei.value = imei.value;
					writer->emit(0, &node, &state);
				}
				else
				{
					state.imei.value = imei.value;
				}
			}
		}
		writer->emit(1, &node, &state);
	}

	void finish(samson::KVWriter *writer )
	{
	}



};


} // end of namespace mob2
} // end of namespace samson

#endif
