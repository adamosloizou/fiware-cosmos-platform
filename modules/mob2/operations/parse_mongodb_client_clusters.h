
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_mob2_parse_mongodb_client_clusters
#define _H_SAMSON_mob2_parse_mongodb_client_clusters


#include <samson/module/samson.h>
#include <samson/modules/mob2/Cluster.h>
#include "macros_parse_fields_mob2.h"
#include "mongo/client/dbclient.h"

using namespace mongo;


namespace samson{
namespace mob2{


	class parse_mongodb_client_clusters : public samson::Parser
	{

	// MongoDB variables
        std::string          mongo_ip;
        std::string          mongo_db;
        std::string          mongo_collection;
        std::string          mongo_db_path;
        DBClientConnection*  mdbConnection;

	// Temporal variables
	samson::system::Double coord;
	samson::system::UInt clusterId;
	Cluster clusterInfo;
	BSONObjBuilder bb;


	public:


#ifdef INFO_COMMENT //Just to include a comment without conflicting anything
// If interface changes and you do not recreate this file, consider updating this information (and of course, the module file)


extendedHelp: 		Parse a txt file to extract client clusters and strore then in MongoDB, to be accesible later

#endif // de INFO_COMMENT

		void init( samson::KVWriter *writer )
		{
		 mdbConnection        = NULL;
        mongo_ip           = environment->get("mongo.ip",    "no-mongo-ip");
        mongo_db           = environment->get("mongo.db",    "no-mongo-db");
        mongo_collection   = environment->get("mongo.collection", "no-mongo-collection");


        if (mongo_ip == "no-mongo-ip")
        {
                tracer->setUserError("No mongo ip specified. Please specify mongo ip with 'mongo.ip' environment variable");
                return;
        }

        if (mongo_db == "no-mongo-db")
        {
                tracer->setUserError("No db specified. Please specify mongo database db name with 'mongo.db' environment variable");
                return;
        }

        if (mongo_collection == "no-mongo-collection")
        {
                tracer->setUserError("No collection specified. Please specify mongo database collection name with 'mongo.collection' environment variable");
                return;
        }


        mongo_db_path = mongo_db + "." + mongo_collection;

        mdbConnection = new DBClientConnection();
        mdbConnection->connect(mongo_ip);

		}


		void parseLines( char *line )
		{
			// Input: txt
			// Outputs

 



				clusterInfo.coords.comsSetLength(0);
				MR_PARSER_INIT(line);
				GET_CLUST_INIT_MX
				GET_CLUST_NEXT_FIELD
				GET_CLUST_GET_INT(clusterInfo.label.value)
				clusterId.value = clusterInfo.label.value;
				bb.append("clusterInfo.label", (long long)clusterInfo.label.value); // clusterId
				GET_CLUST_NEXT_FIELD
				GET_CLUST_GET_INT(clusterInfo.labelgroup.value)
				bb.append("clusterInfo.labelgroup", (long long) clusterInfo.labelgroup.value);
				GET_CLUST_NEXT_FIELD
				GET_CLUST_GET_DOUBLE(clusterInfo.mean.value)
				bb.append("clusterInfo.mean", clusterInfo.mean.value);
				GET_CLUST_NEXT_FIELD
				GET_CLUST_GET_DOUBLE(clusterInfo.distance.value)
				bb.append("clusterInfo.distance", clusterInfo.distance.value);
				for(int j=0; j<96; j++)
				{
					GET_CLUST_NEXT_FIELD
					GET_CLUST_GET_DOUBLE(coord.value)
					bb.append("coord", coord.value);
				clusterInfo.coords.comsAdd()->copyFrom(&coord);
				}
				BSONObj bo = bb.obj();

				mdbConnection->insert(mongo_db_path, bo);
		}

		void run( char *data , size_t length , samson::KVWriter *writer )
		{
                size_t offset = 0;
                size_t line_begin = 0;

        if (mdbConnection == NULL)
        {
                tracer->setUserError("Not connected to MongoDB - please check parameters");
                return;
        }

                while( offset < length )
                {

                        if( data[offset] == '\n')
                        {
                                data[offset] = '\0';

                                parseLines(data+line_begin);

                                line_begin = offset+1;
                        }
                        ++offset;
                }
		}

		void finish( samson::KVWriter *writer )
		{
			if (mdbConnection != NULL)
			{
				mdbConnection->ensureIndex(mongo_db_path, fromjson("{clusterId:1}"));
				delete mdbConnection;
			}
		}
	};


} // end of namespace mob2
} // end of namespace samson

#endif
