
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_mob2_cluster_clientbts_get_min_distance
#define _H_SAMSON_mob2_cluster_clientbts_get_min_distance


#include <samson/module/samson.h>
#include <samson/modules/mob2/Cluster.h>
#include <samson/modules/mob2/ClusterVector.h>
#include <samson/modules/mob2/Node_Bts.h>
#include <samson/modules/mob2/Poi.h>
#include <samson/modules/mob2/TwoInt.h>
#include <samson/modules/system/UInt.h>



namespace samson{
namespace mob2{


	class cluster_clientbts_get_min_distance : public samson::Map
	{
        // Inputs
        Node_Bts nodbts;
        ClusterVector clusVector;
        // Outputs
        samson::system::UInt node;
        Poi poi;
        TwoInt node_bts;
        Cluster cluster;

	// Refernce cluster
	ClusterSet clientbtsClusters;

	public:


#ifdef INFO_COMMENT //Just to include a comment without conflicting anything
// If interface changes and you do not recreate this file, consider updating this information (and of course, the module file)

input: mob2.Node_Bts mob2.ClusterVector  
output: system.UInt mob2.Poi
output: mob2.TwoInt mob2.Cluster

extendedHelp: 		Calculate the pearson distance between a vector and a cluster

#endif // de INFO_COMMENT

		void init(samson::KVWriter *writer )
		{
			//TODO: Load reference cluster from MongoDB
			clientbtsClusters.clusterSetLength(0);
		}

		void run(  samson::KVSetStruct* inputs , samson::KVWriter *writer )
		{
        // Intermediate
        double dist, mindist;
        double sumcom, sumccom, csumcom, csumccom, sumcomxccom;
        double com, ccom;
        int clusId = -1;

        for(uint64_t i=0; i<inputs[0].num_kvs; i++)
        {
                nodbts.parse(inputs[0].kvs[i]->key);
                clusVector.parse(inputs[0].kvs[i]->value);
                node_bts.num1.value = nodbts.phone.value;
                node_bts.num2.value = nodbts.bts.value;
                cluster.coords.copyFrom(&clusVector);
                mindist = 1000;

                // Calculate min dist - Pearson distance
                for(int nClus=0; nClus<clientbtsClusters.cluster_length; nClus++)
                {
                        sumcom = sumccom = csumcom = csumccom = sumcomxccom = 0;
                        for(int nComs=0; nComs<clusVector.coms_length; nComs++)
                        {
                                com = clusVector.coms[nComs].value;
                                ccom = clientbtsClusters.cluster[nClus].coords.coms[nComs].value;
                                sumcom += com;                          // S1
                                sumccom += ccom;                        // S2
                                csumcom += com * com;           // SC1
                                csumccom += ccom * ccom;        // SC2
                                sumcomxccom += com * ccom;      // S12
                        }

                        int nElem = clusVector.coms_length;
                        dist = 1.0 - (((nElem*sumcomxccom)-(sumcom*sumccom))/(sqrt((nElem*csumcom)-(sumcom*sumcom))*sqrt((nElem*csumccom)-(sumccom*sumccom))));

                        if(dist < mindist)
                        {
                                mindist = dist;
                                clusId = nClus;
                        }
                }
                poi.node.value = node.value = nodbts.phone.value;
                poi.bts.value = nodbts.bts.value;
                if(mindist > clientbtsClusters.cluster[clusId].distance.value)
                {
                        poi.labelnodebts.value = poi.labelgroupnodebts.value = 0;
                        cluster.label.value = cluster.labelgroup.value = 0;
                }
                else
                {
                        poi.labelnodebts.value = clientbtsClusters.cluster[clusId].label.value;
                        cluster.label.value = clientbtsClusters.cluster[clusId].label.value;
                        poi.labelgroupnodebts.value = clientbtsClusters.cluster[clusId].labelgroup.value;
                        cluster.labelgroup.value = clientbtsClusters.cluster[clusId].labelgroup.value;
                }
                cluster.mean.value = 0;
                poi.distancenodebts.value = cluster.distance.value = mindist;
                poi.labelnode.value = poi.labelgroupnode.value = poi.distancenode.value = 0;
                poi.labelbts.value = poi.labelgroupbts.value = poi.distancebts.value = 0;
                writer->emit(0, &node,&poi);
                writer->emit(1, &node_bts,&cluster);
        }

		}

		void finish(samson::KVWriter *writer )
		{
		}



	};


} // end of namespace mob2
} // end of namespace samson

#endif
