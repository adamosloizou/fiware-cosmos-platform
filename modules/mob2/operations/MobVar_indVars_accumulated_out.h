
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_mob2_MobVar_indVars_accumulated_out
#define _H_SAMSON_mob2_MobVar_indVars_accumulated_out


#include <samson/module/samson.h>
#include <samson/modules/mob2/Mob_VI_MobVars.h>
#include <samson/modules/system/UInt.h>



namespace samson{
namespace mob2{


	class MobVar_indVars_accumulated_out : public samson::ParserOut
	{
        // Inputs
        samson::system::UInt phoneId_key;
        Mob_VI_MobVars totalVars;

	public:

#ifdef MAX_STR_LEN
#undef MAX_STR_LEN
#endif
#define MAX_STR_LEN 1024
                        char output[MAX_STR_LEN];


#ifdef INFO_COMMENT //Just to include a comment without conflicting anything
// If interface changes and you do not recreate this file, consider updating this information (and of course, the module file)

input: system.UInt mob2.Mob_VI_MobVars  

extendedHelp: 		Parse out of individual variables of a client

#endif // de INFO_COMMENT

		void init(TXTWriter *writer )
		{
		}

		void run(KVSetStruct* inputs , TXTWriter *writer )
		{

        for (uint64_t kv = 0 ; kv < inputs[0].num_kvs ; kv++)
        {
		int total=0;

                phoneId_key.parse(inputs[0].kvs[kv]->key);
                totalVars.parse( inputs[0].kvs[kv]->value );

                total += snprintf( output+total, MAX_STR_LEN, "%lu" , phoneId_key.value);

                bool exists = false;
                for(int j=0; j<totalVars.vars_length; j++)
                {
                        if(totalVars.vars[j].workingday.value == 1)
                        {
                                total += snprintf( output+total, MAX_STR_LEN, "|%lu", totalVars.vars[j].num_pos.value);
                                total += snprintf( output+total, MAX_STR_LEN, "|%lu", totalVars.vars[j].dif_btss.value);
                                total += snprintf( output+total, MAX_STR_LEN, "|%lu", totalVars.vars[j].dif_muns.value);
                                total += snprintf( output+total, MAX_STR_LEN, "|%lu", totalVars.vars[j].dif_states.value);
                                total += snprintf( output+total, MAX_STR_LEN, "|%.4f", totalVars.vars[j].masscenter_utmx.value);
                                total += snprintf( output+total, MAX_STR_LEN, "|%.4f", totalVars.vars[j].masscenter_utmy.value);
                                total += snprintf( output+total, MAX_STR_LEN, "|%.4f", totalVars.vars[j].radius.value);
                                total += snprintf( output+total, MAX_STR_LEN, "|%.4f", totalVars.vars[j].diam_areainf.value);
                                exists = true;
                                break;
                        }
                }
                if(!exists)
                {
                        total += snprintf( output+total, MAX_STR_LEN,"|-1|-1|-1|-1|-1|-1|-1|-1");
                }
                exists = false;
                for(int j=0; j<totalVars.vars_length; j++)
                {
                        if(totalVars.vars[j].workingday == 0)
                        {
                                total += snprintf( output+total, MAX_STR_LEN, "|%lu", totalVars.vars[j].num_pos.value);
                                total += snprintf( output+total, MAX_STR_LEN, "|%lu", totalVars.vars[j].dif_btss.value);
                                total += snprintf( output+total, MAX_STR_LEN, "|%lu", totalVars.vars[j].dif_muns.value);
                                total += snprintf( output+total, MAX_STR_LEN, "|%lu", totalVars.vars[j].dif_states.value);
                                total += snprintf( output+total, MAX_STR_LEN, "|%.4f", totalVars.vars[j].masscenter_utmx.value);
                                total += snprintf( output+total, MAX_STR_LEN, "|%.4f", totalVars.vars[j].masscenter_utmy.value);
                                total += snprintf( output+total, MAX_STR_LEN, "|%.4f", totalVars.vars[j].radius.value);
                                total += snprintf( output+total, MAX_STR_LEN, "|%.4f", totalVars.vars[j].diam_areainf.value);
                                exists = true;
                                break;
                        }
                }
                if(!exists)
                {
                        total += snprintf( output+total, MAX_STR_LEN,"|-1|-1|-1|-1|-1|-1|-1|-1");
                }
                total += snprintf( output+total, MAX_STR_LEN,"\n");
		writer->emit(output);

        }

		}

		void finish(TXTWriter *writer )
		{
		}



	};


} // end of namespace mob2
} // end of namespace samson

#endif
