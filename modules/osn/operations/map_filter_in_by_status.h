
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_osn_map_filter_in_by_status
#define _H_SAMSON_osn_map_filter_in_by_status


#include <samson/module/samson.h>
#include <string>
#define DEBUG_FILES
#ifdef DEBUG_FILES
#include <iostream>
#include <fstream>
#endif /* de DEBUG_FILES */



namespace samson{
namespace osn{


	class map_filter_in_by_status : public samson::Map
	{
		samson::system::String key;
		samson::osn::URLConnection  connect;
		samson::system::UInt value_out;

	public:


		void run(  samson::KVSetStruct* inputs , samson::KVWriter *writer )
		{
			samson::system::UInt16 status;
			status.value = environment->getInt("osn.status_query", 404);

#define DEBUG_FILES
#ifdef DEBUG_FILES
                {
                std::string filename = "/tmp/map_filter_in_by_status.log";
                std::ofstream fs(filename.c_str(), std::ios::app);
                fs << "Maps urls with status: " << status.value  << " for " << inputs[0].num_kvs << " logs " << std::endl;
                fs.close();
                }
#endif /* de DEBUG_FILES */
#undef DEBUG_FILES

			for (size_t i=0; (i < inputs[0].num_kvs); i++)
			{
				key.parse(inputs[0].kvs[i]->key);
				connect.parse(inputs[0].kvs[i]->value);

				if (connect.status.value == status.value)
				{
#define DEBUG_FILES
#ifdef DEBUG_FILES
                {
                std::string filename = "/tmp/map_filter_in_by_status.log";
                std::ofstream fs(filename.c_str(), std::ios::app);
                fs << "Emit: key: " << key.value << " status: " << connect.status.value << std::endl;
                fs.close();
                }
#endif /* de DEBUG_FILES */
#undef DEBUG_FILES

					writer->emit(0, &key, &connect);
				}
				else
				{
#define DEBUG_FILES
#ifdef DEBUG_FILES
                {
                std::string filename = "/tmp/map_filter_in_by_status.log";
                std::ofstream fs(filename.c_str(), std::ios::app);
                fs << "Not: key: " << key.value << " status: " << connect.status.value << std::endl;
                fs.close();
                }
#endif /* de DEBUG_FILES */
#undef DEBUG_FILES
				}

			}
			samson::system::UInt key_total;
			samson::system::UInt val_total;
			key_total.value = 1;
			val_total.value = inputs[0].num_kvs;
			writer->emit(1, &key_total, &val_total);
		}
	};


} // end of namespace samson
} // end of namespace osn

#endif
