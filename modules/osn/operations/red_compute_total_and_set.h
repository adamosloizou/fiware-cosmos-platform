
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_osn_red_compute_total_and_set
#define _H_SAMSON_osn_red_compute_total_and_set


#include <samson/module/samson.h>

#define DEBUG_FILES
#ifdef DEBUG_FILES
#include <iostream>
#include <fstream>
#endif /* de DEBUG_FILES */
#undef DEBUG_FILES



namespace samson{
namespace osn{


	class red_compute_total_and_set : public samson::Reduce
	{
                samson::system::UInt key_in;
                samson::system::UInt total_in;


	public:


		void run(  samson::KVSetStruct* inputs , samson::KVWriter *writer )
		{
			samson::system::UInt total_out;
#define DEBUG_FILES
#ifdef DEBUG_FILES
                {
                std::string filename = "/tmp/red_compute_total_and_set.log";
                std::ofstream fs(filename.c_str(), std::ios::app);
                fs << "Select from inputs[0].num_kvs: " << inputs[0].num_kvs << std::endl;
                fs.close();
                }
#endif /* de DEBUG_FILES */
#undef DEBUG_FILES

			total_out.value = 0;
                        for (size_t i = 0; (i < inputs[0].num_kvs); i++)
                        {
                                key_in.parse(inputs[0].kvs[i]->key);
                                total_in.parse(inputs[0].kvs[i]->value);

#define DEBUG_FILES
#ifdef DEBUG_FILES
                {
                std::string filename = "/tmp/red_compute_total_and_set.log";
                std::ofstream fs(filename.c_str(), std::ios::app);
                fs << "key: " << key_in.value << " count: " << total_in.value << std::endl;
                fs.close();
                }
#endif /* de DEBUG_FILES */
#undef DEBUG_FILES

				total_out.value += total_in.value;

                        }

#define DEBUG_FILES
#ifdef DEBUG_FILES
                {
                std::string filename = "/tmp/red_compute_total_and_set.log";
                std::ofstream fs(filename.c_str(), std::ios::app);
                fs << "osn.total_count: " << total_out.str() << std::endl;
                fs.close();
                }
#endif /* de DEBUG_FILES */
#undef DEBUG_FILES
			environment->set("osn.total_count", total_out.str());

			std::string check = environment->get("osn.total_count", "1");

#define DEBUG_FILES
#ifdef DEBUG_FILES
                {
                std::string filename = "/tmp/red_compute_total_and_set.log";
                std::ofstream fs(filename.c_str(), std::ios::app);
                fs << "Check osn.total_count: " << check << std::endl;
                fs.close();
                }
#endif /* de DEBUG_FILES */
#undef DEBUG_FILES

		}


	};


} // end of namespace samson
} // end of namespace osn

#endif
