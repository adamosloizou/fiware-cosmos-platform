
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_osn_red_compute_total_elements
#define _H_SAMSON_osn_red_compute_total_elements


#include <samson/module/samson.h>

#define DEBUG_FILES
#ifdef DEBUG_FILES
#include <iostream>
#include <fstream>
#endif /* de DEBUG_FILES */
#undef DEBUG_FILES



namespace samson{
namespace osn{


	class red_compute_total_elements : public samson::Reduce
	{
                samson::system::UInt key_in;
                samson::osn::Count count;
		samson::system::UInt total_out;
                samson::system::Void void_out;


	public:


		void run(  samson::KVSetStruct* inputs , samson::KVWriter *writer )
		{
#define DEBUG_FILES
#ifdef DEBUG_FILES
                {
                std::string filename = "/tmp/red_compute_total_elements.log";
                std::ofstream fs(filename.c_str(), std::ios::app);
                fs << "Select from inputs[0].num_kvs: " << inputs[0].num_kvs << std::endl;
                fs.close();
                }
#endif /* de DEBUG_FILES */
#undef DEBUG_FILES

			total_out.value = 0;
                        for (size_t i = 0; (i < inputs[0].num_kvs); i++)
                        {
                                key_in.parse(inputs[0].kvs[i]->key);
                                count.parse(inputs[0].kvs[i]->value);

#define DEBUG_FILES
#ifdef DEBUG_FILES
                {
                std::string filename = "/tmp/red_compute_total_elements.log";
                std::ofstream fs(filename.c_str(), std::ios::app);
                fs << "element: " << count.element.value << " count: " << count.count.value << std::endl;
                fs.close();
                }
#endif /* de DEBUG_FILES */
#undef DEBUG_FILES

				total_out.value += count.count.value;

                        }
			writer->emit(0, &total_out, &void_out);
			// If we emit only one kv, the count at export_total() seems to be worng, no kv to parse
			writer->emit(0, &total_out, &void_out);
		}


	};


} // end of namespace samson
} // end of namespace osn

#endif
