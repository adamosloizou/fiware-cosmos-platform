
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_osn_red_compute_sites_visited
#define _H_SAMSON_osn_red_compute_sites_visited


#include <samson/Operation.h>
#include <samson/modules/system/Void.h>

#define DEBUG_FILES
#ifdef DEBUG_FILES
#include <iostream>
#include <fstream>
#endif /* de DEBUG_FILES */



namespace ss{
namespace osn{


	class red_compute_sites_visited : public ss::Reduce
	{
		ss::system::String url;
		ss::system::UInt count_in;
		ss::system::UInt key_out;
		ss::osn::Count count_out;

	public:


		void run(  ss::KVSetStruct* inputs , ss::KVWriter *writer )
		{
			ss:system::UInt total;

			if (inputs[0].num_kvs == 0)
			{
				return;
			}

			url.parse(inputs[0].kvs[0]->key );

			total.value = 0;
#define DEBUG_FILES
#ifdef DEBUG_FILES
                {
                std::string filename = "/tmp/red_compute_sites_visited.log";
                std::ofstream fs(filename.c_str(), std::ios::app);
                fs << "Count urls with key: " << url.value << std::endl;
                fs.close();
                }
#endif /* de DEBUG_FILES */
#undef DEBUG_FILES

			for (size_t i=0; (i < inputs[0].num_kvs); i++)
			{
				count_in.parse(inputs[0].kvs[i]->value);
				total.value += count_in.value;
			}

			count_out.count.value = total.value;
			count_out.element.value.assign(url.value);
			key_out.value = 1; // Trying to force all the kv to a single reducer. I have tried with Void, but failed
			writer->emit(0, &key_out, &count_out);
		}

	};


} // end of namespace ss
} // end of namespace osn

#endif
