
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_osn_map_applications
#define _H_SAMSON_osn_map_applications


#include <samson/Operation.h>
#include <string>
#define DEBUG_FILES
#ifdef DEBUG_FILES
#include <iostream>
#include <fstream>
#endif /* de DEBUG_FILES */



namespace ss{
namespace osn{


	class map_applications : public ss::Map
	{
		ss::system::UInt64 msisdn;
		ss::osn::URLConnection  connect;
		ss::system::String key_out;
		ss::system::String key_out_appl;
		ss::system::UInt value_out;

	public:


		void run(  ss::KVSetStruct* inputs , ss::KVWriter *writer )
		{
			std::string Apple = "Apple";
			std::string application_Weather = "Weather";
			std::string application_Stocks = "Stocks";
			std::string application_Maps = "Maps";
			std::string application_iTunes = "iTunes";


			const char *p_Apple = Apple.c_str();
			const char *p_application_Weather = application_Weather.c_str();
			const char *p_application_Stocks = application_Stocks.c_str();
			const char *p_application_Maps = application_Maps.c_str();
			const char *p_application_iTunes = application_iTunes.c_str();

#define DEBUG_FILES
#ifdef DEBUG_FILES
                {
                std::string filename = "/tmp/map_applications.log";
                std::ofstream fs(filename.c_str(), std::ios::app);
                fs << "Maps urls looking for Apple applications  for " << inputs[0].num_kvs << " logs " << std::endl;
                fs.close();
                }
#endif /* de DEBUG_FILES */
#undef DEBUG_FILES

			for (size_t i=0; (i < inputs[0].num_kvs); i++)
			{
				msisdn.parse(inputs[0].kvs[i]->key);
				connect.parse(inputs[0].kvs[i]->value);

				const char *p_userAgent = connect.userAgent.value.c_str();

				if (strstr(p_userAgent, p_Apple))
				{
#define DEBUG_FILES
#ifdef DEBUG_FILES
                {
                std::string filename = "/tmp/map_applications.log";
                std::ofstream fs(filename.c_str(), std::ios::app);
                fs << "Detect: " << connect.userAgent.value << std::endl;
                fs.close();
                }
#endif /* de DEBUG_FILES */
#undef DEBUG_FILES

					if (strstr(p_userAgent, p_application_Weather))
					{
						key_out.value.assign(connect.userAgent.value);
						value_out.value = 1;
						writer->emit(0, &key_out, &value_out);

						key_out_appl.value.assign(application_Weather);
						value_out.value = 1;
						writer->emit(1, &key_out_appl, &value_out);
					}
					else if (strstr(p_userAgent, p_application_Stocks))
					{
						key_out.value.assign(connect.userAgent.value);
						value_out.value = 1;
						writer->emit(0, &key_out, &value_out);

						key_out_appl.value.assign(application_Stocks);
						value_out.value = 1;
						writer->emit(1, &key_out_appl, &value_out);
					}
					else if (strstr(p_userAgent, p_application_Maps))
					{
						key_out.value.assign(connect.userAgent.value);
						value_out.value = 1;
						writer->emit(0, &key_out, &value_out);

						key_out_appl.value.assign(application_Maps);
						value_out.value = 1;
						writer->emit(1, &key_out_appl, &value_out);
					}
					else if (strstr(p_userAgent, p_application_iTunes))
					{
						key_out.value.assign(connect.userAgent.value);
						value_out.value = 1;
						writer->emit(0, &key_out, &value_out);

						key_out_appl.value.assign(application_iTunes);
						value_out.value = 1;
						writer->emit(1, &key_out_appl, &value_out);
					}
					else
					{
#define DEBUG_FILES
#ifdef DEBUG_FILES
                {
                std::string filename = "/tmp/map_applications.log";
                std::ofstream fs(filename.c_str(), std::ios::app);
                fs << "Other: " << connect.userAgent.value << std::endl;
                fs.close();
                }
#endif /* de DEBUG_FILES */
#undef DEBUG_FILES
					}
				}
				else
				{
#define DEBUG_FILES
#ifdef DEBUG_FILES
                {
                std::string filename = "/tmp/map_applications.log";
                std::ofstream fs(filename.c_str(), std::ios::app);
                fs << "Not: " << connect.userAgent.value << std::endl;
                fs.close();
                }
#endif /* de DEBUG_FILES */
#undef DEBUG_FILES
				}
			}
			ss::system::UInt key_total;
			ss::system::UInt val_total;
			key_total.value = 1;
			val_total.value = inputs[0].num_kvs;
			writer->emit(2, &key_total, &val_total);
		}
	};


} // end of namespace ss
} // end of namespace osn

#endif
