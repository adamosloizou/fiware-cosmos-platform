
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_osn_map_extract_logs_by_useragent
#define _H_SAMSON_osn_map_extract_logs_by_useragent


#include <samson/Operation.h>
#include <string>
#define DEBUG_FILES
#ifdef DEBUG_FILES
#include <iostream>
#include <fstream>
#endif /* de DEBUG_FILES */



namespace ss{
namespace osn{


	class map_extract_logs_by_useragent : public ss::Map
	{
		ss::system::UInt64 msisdn;
		ss::osn::URLConnection  connect;
		ss::system::String key_out;
		ss::system::UInt value_out;

	public:


		void run(  ss::KVSetStruct* inputs , ss::KVWriter *writer )
		{
			std::string user_agent = environment->get("osn.user_agent_query", "NokiaN95");

			const char *p_user_agent = user_agent.c_str();
#define DEBUG_FILES
#ifdef DEBUG_FILES
                {
                std::string filename = "/tmp/map_extract_logs_by_useragent.log";
                std::ofstream fs(filename.c_str(), std::ios::app);
                fs << "Maps urls with user_agent: " << user_agent  << " for " << inputs[0].num_kvs << " logs " << std::endl;
                fs.close();
                }
#endif /* de DEBUG_FILES */
#undef DEBUG_FILES

			for (size_t i=0; (i < inputs[0].num_kvs); i++)
			{
				msisdn.parse(inputs[0].kvs[i]->key);
				connect.parse(inputs[0].kvs[i]->value);

				if (strcasestr(connect.userAgent.value.c_str(), p_user_agent))
				{
#define DEBUG_FILES
#ifdef DEBUG_FILES
                {
                std::string filename = "/tmp/map_extract_logs_by_useragent.log";
                std::ofstream fs(filename.c_str(), std::ios::app);
                fs << "Emit: user_agent: " << connect.userAgent.value << std::endl;
                fs.close();
                }
#endif /* de DEBUG_FILES */
#undef DEBUG_FILES

					key_out.value.assign(connect.userAgent.value);
					writer->emit(0, &key_out, &connect);
				}
				else
				{
#define DEBUG_FILES
#ifdef DEBUG_FILES
                {
                std::string filename = "/tmp/map_extract_logs_by_useragent.log";
                std::ofstream fs(filename.c_str(), std::ios::app);
                fs << "Not: user_agent: " << connect.userAgent.value << std::endl;
                fs.close();
                }
#endif /* de DEBUG_FILES */
#undef DEBUG_FILES
				}

			}
			ss::system::UInt key_total;
			ss::system::UInt val_total;
			key_total.value = 1;
			val_total.value = inputs[0].num_kvs;
			writer->emit(1, &key_total, &val_total);
		}
	};


} // end of namespace ss
} // end of namespace osn

#endif
