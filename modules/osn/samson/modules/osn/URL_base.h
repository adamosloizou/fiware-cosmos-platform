
/**
 File autogenerated with samsonModuleParser, please do not edit
*/

#ifndef _H_SAMSON_osn_URL_BASE
#define _H_SAMSON_osn_URL_BASE


#include <samson/modules/system/String.h>


namespace samson{
namespace osn{


	class URL_base : public samson::DataInstance{

	public:
	::samson::system::String completeURL;
	::samson::system::String url_host;
	::samson::system::String url_dir;
	::samson::system::String url_page;
	::samson::system::String url_query;
	::samson::system::String url_locDoc;

	URL_base() : samson::DataInstance(){
	}

	~URL_base() {
	}

	int parse(char *data){
		int offset=0;
		{ //Parsing completeURL
			offset += completeURL.parse(data+offset);
		}

		{ //Parsing url_host
			offset += url_host.parse(data+offset);
		}

		{ //Parsing url_dir
			offset += url_dir.parse(data+offset);
		}

		{ //Parsing url_page
			offset += url_page.parse(data+offset);
		}

		{ //Parsing url_query
			offset += url_query.parse(data+offset);
		}

		{ //Parsing url_locDoc
			offset += url_locDoc.parse(data+offset);
		}

		return offset;
	}

	int serialize(char *data){
		int offset=0;
		{ //Serializing completeURL
			offset += completeURL.serialize(data+offset);
		}

		{ //Serializing url_host
			offset += url_host.serialize(data+offset);
		}

		{ //Serializing url_dir
			offset += url_dir.serialize(data+offset);
		}

		{ //Serializing url_page
			offset += url_page.serialize(data+offset);
		}

		{ //Serializing url_query
			offset += url_query.serialize(data+offset);
		}

		{ //Serializing url_locDoc
			offset += url_locDoc.serialize(data+offset);
		}

		return offset;
	}

	static inline int size(char *data){
		int offset=0;
		{ //Sizing completeURL
			offset += ::samson::system::String::size(data+offset);
		}

		{ //Sizing url_host
			offset += ::samson::system::String::size(data+offset);
		}

		{ //Sizing url_dir
			offset += ::samson::system::String::size(data+offset);
		}

		{ //Sizing url_page
			offset += ::samson::system::String::size(data+offset);
		}

		{ //Sizing url_query
			offset += ::samson::system::String::size(data+offset);
		}

		{ //Sizing url_locDoc
			offset += ::samson::system::String::size(data+offset);
		}

		return offset;
	}

	int hash(int max_num_partitions){
		{ //Partitioning completeURL
			return completeURL.hash(max_num_partitions);
		}

	}

	inline static int compare(char * data1 , char *data2 , size_t *offset1 , size_t *offset2 ){
		{ // comparing completeURL
			int tmp = ::samson::system::String::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  completeURL compared 
		{ // comparing url_host
			int tmp = ::samson::system::String::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  url_host compared 
		{ // comparing url_dir
			int tmp = ::samson::system::String::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  url_dir compared 
		{ // comparing url_page
			int tmp = ::samson::system::String::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  url_page compared 
		{ // comparing url_query
			int tmp = ::samson::system::String::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  url_query compared 
		{ // comparing url_locDoc
			int tmp = ::samson::system::String::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  url_locDoc compared 
		return 0; //If everything is equal
	}

	inline static int compare( char* data1 , char* data2 )
	{
		size_t offset_1=0;
		size_t offset_2=0;
		return compare( data1 , data2 , &offset_1 , &offset_2 );
	}








	void copyFrom( URL_base *other ){
		{ //Copying completeURL
			completeURL.copyFrom(&other->completeURL);
		}

		{ //Copying url_host
			url_host.copyFrom(&other->url_host);
		}

		{ //Copying url_dir
			url_dir.copyFrom(&other->url_dir);
		}

		{ //Copying url_page
			url_page.copyFrom(&other->url_page);
		}

		{ //Copying url_query
			url_query.copyFrom(&other->url_query);
		}

		{ //Copying url_locDoc
			url_locDoc.copyFrom(&other->url_locDoc);
		}

	};

	std::string str(){
		std::ostringstream o;
				{ //Texting completeURL
			o << completeURL.str();
		}

		o<<" ";
				{ //Texting url_host
			o << url_host.str();
		}

		o<<" ";
				{ //Texting url_dir
			o << url_dir.str();
		}

		o<<" ";
				{ //Texting url_page
			o << url_page.str();
		}

		o<<" ";
				{ //Texting url_query
			o << url_query.str();
		}

		o<<" ";
				{ //Texting url_locDoc
			o << url_locDoc.str();
		}

		o<<" ";
		return o.str();
	}

	}; //class URL_base

} // end of namespace samson
} // end of namespace osn

#endif
