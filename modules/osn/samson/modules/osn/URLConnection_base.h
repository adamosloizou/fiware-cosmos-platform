
/**
 File autogenerated with samsonModuleParser, please do not edit
*/

#ifndef _H_SAMSON_osn_URLConnection_BASE
#define _H_SAMSON_osn_URLConnection_BASE


#include <samson/modules/osn/Date.h>
#include <samson/modules/osn/Time.h>
#include <samson/modules/osn/URL.h>
#include <samson/modules/system/String.h>
#include <samson/modules/system/UInt16.h>
#include <samson/modules/system/UInt64.h>
#include <samson/modules/system/UInt8.h>


namespace samson{
namespace osn{


	class URLConnection_base : public samson::DataInstance{

	public:
	::samson::system::UInt64 msisdn;
	::samson::osn::URL url;
	::samson::osn::Date date;
	::samson::osn::Time time;
	::samson::system::UInt16 status;
	::samson::system::String MIMEcontent;
	::samson::system::String userAgent;
	::samson::system::UInt8 method;

	URLConnection_base() : samson::DataInstance(){
	}

	~URLConnection_base() {
	}

	int parse(char *data){
		int offset=0;
		offset += msisdn.parse(data+offset);
		offset += url.parse(data+offset);
		offset += date.parse(data+offset);
		offset += time.parse(data+offset);
		offset += status.parse(data+offset);
		offset += MIMEcontent.parse(data+offset);
		offset += userAgent.parse(data+offset);
		offset += method.parse(data+offset);
		return offset;
	}

	int serialize(char *data){
		int offset=0;
		offset += msisdn.serialize(data+offset);
		offset += url.serialize(data+offset);
		offset += date.serialize(data+offset);
		offset += time.serialize(data+offset);
		offset += status.serialize(data+offset);
		offset += MIMEcontent.serialize(data+offset);
		offset += userAgent.serialize(data+offset);
		offset += method.serialize(data+offset);
		return offset;
	}

	static inline int size(char *data){
		int offset=0;
		offset += ::samson::system::UInt64::size(data+offset);
		offset += ::samson::osn::URL::size(data+offset);
		offset += ::samson::osn::Date::size(data+offset);
		offset += ::samson::osn::Time::size(data+offset);
		offset += ::samson::system::UInt16::size(data+offset);
		offset += ::samson::system::String::size(data+offset);
		offset += ::samson::system::String::size(data+offset);
		offset += ::samson::system::UInt8::size(data+offset);
		return offset;
	}

	int hash(int max_num_partitions){
		return msisdn.hash(max_num_partitions);
	}

	inline static int compare(char * data1 , char *data2 , size_t *offset1 , size_t *offset2 ){
		{ // comparing msisdn
			int tmp = ::samson::system::UInt64::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}
		{ // comparing url
			int tmp = ::samson::osn::URL::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}
		{ // comparing date
			int tmp = ::samson::osn::Date::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}
		{ // comparing time
			int tmp = ::samson::osn::Time::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}
		{ // comparing status
			int tmp = ::samson::system::UInt16::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}
		{ // comparing MIMEcontent
			int tmp = ::samson::system::String::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}
		{ // comparing userAgent
			int tmp = ::samson::system::String::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}
		{ // comparing method
			int tmp = ::samson::system::UInt8::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}
		return 0; //If everything is equal
	}

	inline static int compare( char* data1 , char* data2 )
	{
		size_t offset_1=0;
		size_t offset_2=0;
		return compare( data1 , data2 , &offset_1 , &offset_2 );
	}

	void copyFrom( URLConnection_base *other ){
		msisdn.copyFrom(&other->msisdn);
		url.copyFrom(&other->url);
		date.copyFrom(&other->date);
		time.copyFrom(&other->time);
		status.copyFrom(&other->status);
		MIMEcontent.copyFrom(&other->MIMEcontent);
		userAgent.copyFrom(&other->userAgent);
		method.copyFrom(&other->method);
	};

	std::string str(){
		std::ostringstream o;
		o << msisdn.str();

		o<<" ";
		o << url.str();

		o<<" ";
		o << date.str();

		o<<" ";
		o << time.str();

		o<<" ";
		o << status.str();

		o<<" ";
		o << MIMEcontent.str();

		o<<" ";
		o << userAgent.str();

		o<<" ";
		o << method.str();

		o<<" ";
		return o.str();
	}

	}; //class URLConnection_base

} // end of namespace samson
} // end of namespace osn

#endif
