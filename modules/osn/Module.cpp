

/**
	This file has been autogenerated using samsonModuleParser.
	Please, do not edit!
*/


#include "Module.h"
#include <samson/modules/osn/Count.h>
#include <samson/modules/system/String.h>
#include <samson/modules/system/UInt.h>


extern "C" {
	ss::Module * moduleCreator( )
	{
		return new ss::osn::Module();
	}
	std::string getSamsonVersion()
	{
		return SAMSON_VERSION;
	}
}


namespace ss{
namespace osn{


// Comparisson function for reduce operations
	int compare_osn_red_compute_sites_visited(KV* kv1 , KV* kv2)
	{
		int res_key = ::ss::system::String::compare(kv1->key , kv2->key);
		if(res_key!=0)
			return (res_key<0);
		if( kv1->input != kv2->input )
			return (kv1->input < kv2->input);
		switch (kv1->input) {
		case 0: return (::ss::system::UInt::compare(kv1->value , kv2->value)<0); break;
		default: exit(1); break;
		}
		return 0;
	}
	int compare_osn_red_compute_sites_visited_by_key(KV* kv1 , KV* kv2)
	{
		return ::ss::system::String::compare(kv1->key , kv2->key);
	}
	int compare_osn_red_select_N_sites(KV* kv1 , KV* kv2)
	{
		int res_key = ::ss::system::UInt::compare(kv1->key , kv2->key);
		if(res_key!=0)
			return (res_key<0);
		if( kv1->input != kv2->input )
			return (kv1->input < kv2->input);
		switch (kv1->input) {
		case 0: return (::ss::osn::Count::compare(kv1->value , kv2->value)<0); break;
		default: exit(1); break;
		}
		return 0;
	}
	int compare_osn_red_select_N_sites_by_key(KV* kv1 , KV* kv2)
	{
		return ::ss::system::UInt::compare(kv1->key , kv2->key);
	}
	int compare_osn_red_compute_total_elements(KV* kv1 , KV* kv2)
	{
		int res_key = ::ss::system::UInt::compare(kv1->key , kv2->key);
		if(res_key!=0)
			return (res_key<0);
		if( kv1->input != kv2->input )
			return (kv1->input < kv2->input);
		switch (kv1->input) {
		case 0: return (::ss::osn::Count::compare(kv1->value , kv2->value)<0); break;
		default: exit(1); break;
		}
		return 0;
	}
	int compare_osn_red_compute_total_elements_by_key(KV* kv1 , KV* kv2)
	{
		return ::ss::system::UInt::compare(kv1->key , kv2->key);
	}
	int compare_osn_red_compute_total_and_set(KV* kv1 , KV* kv2)
	{
		int res_key = ::ss::system::UInt::compare(kv1->key , kv2->key);
		if(res_key!=0)
			return (res_key<0);
		if( kv1->input != kv2->input )
			return (kv1->input < kv2->input);
		switch (kv1->input) {
		case 0: return (::ss::system::UInt::compare(kv1->value , kv2->value)<0); break;
		default: exit(1); break;
		}
		return 0;
	}
	int compare_osn_red_compute_total_and_set_by_key(KV* kv1 , KV* kv2)
	{
		return ::ss::system::UInt::compare(kv1->key , kv2->key);
	}


	Module::Module() : ss::Module("osn","0.1","Gregorio Escalada (jges@tid.es)")
	{
		//Add datas
		add( new Data("osn.Date" ,getDataIntace<Date>, Date::size ));
		add( new Data("osn.Time" ,getDataIntace<Time>, Time::size ));
		add( new Data("osn.URL" ,getDataIntace<URL>, URL::size ));
		add( new Data("osn.URLConnection" ,getDataIntace<URLConnection>, URLConnection::size ));
		add( new Data("osn.Count" ,getDataIntace<Count>, Count::size ));
		add( new Data("osn.CountF" ,getDataIntace<CountF>, CountF::size ));

		//Add operations
		{
			ss::Operation * operation = new ss::Operation( "osn.parse_urls" , ss::Operation::parser , au::factory<parse_urls> );
			operation->inputFormats.push_back( ss::KVFormat::format("txt" ,"txt") );
			operation->outputFormats.push_back( ss::KVFormat::format("system.UInt64" ,"osn.URLConnection") );
			operation->setHelpLine("Parse web connections in txt format producing a single key-value at the output per each valid conection (output: system.UInt osn.URLConnection)");
			std::ostringstream o;
			o << "parse txt-file of web connections from O2UK.\n";
			o << "The txt-file must have already been uploaded\n";
			o << "The fields (separator is tab character) of the web connections text file, \n";
			o << "according to the documentation provided by Graham Hargreaves, are:\n";
			o << "1.- Unique ID, msisdn\n";
			o << "2.- URL\n";
			o << "3.- Event Date/Timestamp\n";
			o << "4.- Status code\n";
			o << "5.- Content type\n";
			o << "6.- User agent\n";
			o << "7.- HTTP access method\n";
			operation->setHelp( o.str() );
			add( operation ); // Add this operation to the module
		}
		{
			ss::Operation * operation = new ss::Operation( "osn.map_urls_to_kv_to_compute_sites_visited" , ss::Operation::map , au::factory<map_urls_to_kv_to_compute_sites_visited> );
			operation->inputFormats.push_back( ss::KVFormat::format("system.UInt64" ,"osn.URLConnection") );
			operation->outputFormats.push_back( ss::KVFormat::format("system.String" ,"system.UInt") );
			operation->outputFormats.push_back( ss::KVFormat::format("system.UInt" ,"system.UInt") );
			operation->setHelpLine("Emits sites visited by iphone user agents (or iphone application) as key, and the number of occurences as value");
			std::ostringstream o;
			o << "maps the input of web connections by iphone user agents (or iphone application) to key-values in order to compute the count of sites visited\n";
			operation->setHelp( o.str() );
			add( operation ); // Add this operation to the module
		}
		{
			ss::Operation * operation = new ss::Operation( "osn.map_site_user" , ss::Operation::map , au::factory<map_site_user> );
			operation->inputFormats.push_back( ss::KVFormat::format("system.UInt64" ,"osn.URLConnection") );
			operation->outputFormats.push_back( ss::KVFormat::format("system.String" ,"system.UInt") );
			operation->outputFormats.push_back( ss::KVFormat::format("system.UInt" ,"system.UInt") );
			operation->setHelpLine("Emits URLs from search.yahoo.com (config), visited by iphone user agent (config), as key, and the number of occurences as value");
			std::ostringstream o;
			o << "maps the input of URLs from search.yahoo.com (config), visited by iphone user agent (config), to key-values in order to compute the count of sites visited\n";
			o << "The environment variable to select user agent is 'osn.user_agent_query'\n";
			o << "The environment variable to select domain is 'osn.domain_query'\n";
			operation->setHelp( o.str() );
			add( operation ); // Add this operation to the module
		}
		{
			ss::Operation * operation = new ss::Operation( "osn.map_url_user" , ss::Operation::map , au::factory<map_url_user> );
			operation->inputFormats.push_back( ss::KVFormat::format("system.UInt64" ,"osn.URLConnection") );
			operation->outputFormats.push_back( ss::KVFormat::format("system.String" ,"system.UInt") );
			operation->outputFormats.push_back( ss::KVFormat::format("system.UInt" ,"system.UInt") );
			operation->setHelpLine("Emits URLs from search.yahoo.com (config), visited by iphone user agent (config), as key, and the number of occurences as value");
			std::ostringstream o;
			o << "maps the input of URLs from search.yahoo.com (config), visited by iphone user agent (config), to key-values in order to compute the count of sites visited\n";
			o << "The environment variable to select user agent is 'osn.user_agent_query'\n";
			o << "The environment variable to select domain is 'osn.locDoc_query'\n";
			operation->setHelp( o.str() );
			add( operation ); // Add this operation to the module
		}
		{
			ss::Operation * operation = new ss::Operation( "osn.map_urls_by_hour" , ss::Operation::map , au::factory<map_urls_by_hour> );
			operation->inputFormats.push_back( ss::KVFormat::format("system.UInt64" ,"osn.URLConnection") );
			operation->outputFormats.push_back( ss::KVFormat::format("system.String" ,"system.UInt") );
			operation->outputFormats.push_back( ss::KVFormat::format("system.UInt" ,"system.UInt") );
			operation->setHelpLine("Emits URLs as values with hour slot as key");
			std::ostringstream o;
			o << "Emits URLs as values with hour slot as key\n";
			operation->setHelp( o.str() );
			add( operation ); // Add this operation to the module
		}
		{
			ss::Operation * operation = new ss::Operation( "osn.map_applications" , ss::Operation::map , au::factory<map_applications> );
			operation->inputFormats.push_back( ss::KVFormat::format("system.UInt64" ,"osn.URLConnection") );
			operation->outputFormats.push_back( ss::KVFormat::format("system.String" ,"system.UInt") );
			operation->outputFormats.push_back( ss::KVFormat::format("system.String" ,"system.UInt") );
			operation->outputFormats.push_back( ss::KVFormat::format("system.UInt" ,"system.UInt") );
			operation->setHelpLine("Emits user_agent logs with Apple applications (Weather, Stocks, Maps, iTunes)");
			std::ostringstream o;
			o << "Emits user_agent logs with Apple applications (Weather, Stocks, Maps, iTunes)\n";
			operation->setHelp( o.str() );
			add( operation ); // Add this operation to the module
		}
		{
			ss::Operation * operation = new ss::Operation( "osn.map_extract_logs_by_useragent" , ss::Operation::map , au::factory<map_extract_logs_by_useragent> );
			operation->inputFormats.push_back( ss::KVFormat::format("system.UInt64" ,"osn.URLConnection") );
			operation->outputFormats.push_back( ss::KVFormat::format("system.String" ,"osn.URLConnection") );
			operation->outputFormats.push_back( ss::KVFormat::format("system.UInt" ,"system.UInt") );
			operation->setHelpLine("Emits complete logs with NokiaN95 (config.) userAgent");
			std::ostringstream o;
			o << "Emits complete logs with NokiaN95 (config.) userAgent\n";
			o << "Selects logs with userAgent field matching de environment variable 'osn.user_agent_query'\n";
			o << "The key is the userAgent String, and the value is the complete record\n";
			operation->setHelp( o.str() );
			add( operation ); // Add this operation to the module
		}
		{
			ss::Operation * operation = new ss::Operation( "osn.map_filter_in_by_status" , ss::Operation::map , au::factory<map_filter_in_by_status> );
			operation->inputFormats.push_back( ss::KVFormat::format("system.String" ,"osn.URLConnection") );
			operation->outputFormats.push_back( ss::KVFormat::format("system.String" ,"osn.URLConnection") );
			operation->outputFormats.push_back( ss::KVFormat::format("system.UInt" ,"system.UInt") );
			operation->setHelpLine("Filters in connections by status code (config) (def '404').");
			std::ostringstream o;
			o << "Filters in connections by status code (config) (def '404').\n";
			o << "environment variable 'osn.status-query'\n";
			operation->setHelp( o.str() );
			add( operation ); // Add this operation to the module
		}
		{
			ss::Operation * operation = new ss::Operation( "osn.map_filter_out_by_status" , ss::Operation::map , au::factory<map_filter_out_by_status> );
			operation->inputFormats.push_back( ss::KVFormat::format("system.String" ,"osn.URLConnection") );
			operation->outputFormats.push_back( ss::KVFormat::format("system.String" ,"osn.URLConnection") );
			operation->outputFormats.push_back( ss::KVFormat::format("system.UInt" ,"system.UInt") );
			operation->setHelpLine("Filters out connections by status code (config) (def '404').");
			std::ostringstream o;
			o << "Filters out connections by status code (config) (def '404').\n";
			o << "environment variable 'osn.status-query'\n";
			operation->setHelp( o.str() );
			add( operation ); // Add this operation to the module
		}
		{
			ss::Operation * operation = new ss::Operation( "osn.red_compute_sites_visited" , ss::Operation::reduce , au::factory<red_compute_sites_visited>, compare_osn_red_compute_sites_visited, compare_osn_red_compute_sites_visited_by_key );
			operation->inputFormats.push_back( ss::KVFormat::format("system.String" ,"system.UInt") );
			operation->outputFormats.push_back( ss::KVFormat::format("system.UInt" ,"osn.Count") );
			operation->setHelpLine("Computes the total account of visits for every domain");
			std::ostringstream o;
			o << "Computes the total account of visits for every domain\n";
			o << "Emits a Count struct, in order to sort them lately (taking advantage of the ability of SAMSON\n";
			o << "to deliver both keys and values sorted\n";
			operation->setHelp( o.str() );
			add( operation ); // Add this operation to the module
		}
		{
			ss::Operation * operation = new ss::Operation( "osn.red_select_N_sites" , ss::Operation::reduce , au::factory<red_select_N_sites>, compare_osn_red_select_N_sites, compare_osn_red_select_N_sites_by_key );
			operation->inputFormats.push_back( ss::KVFormat::format("system.UInt" ,"osn.Count") );
			operation->outputFormats.push_back( ss::KVFormat::format("osn.Count" ,"system.Void") );
			operation->setHelpLine("Just select the first N most visited sites");
			std::ostringstream o;
			o << "Just select the first N most visited sites\n";
			operation->setHelp( o.str() );
			add( operation ); // Add this operation to the module
		}
		{
			ss::Operation * operation = new ss::Operation( "osn.red_compute_total_elements" , ss::Operation::reduce , au::factory<red_compute_total_elements>, compare_osn_red_compute_total_elements, compare_osn_red_compute_total_elements_by_key );
			operation->inputFormats.push_back( ss::KVFormat::format("system.UInt" ,"osn.Count") );
			operation->outputFormats.push_back( ss::KVFormat::format("system.UInt" ,"system.Void") );
			operation->setHelpLine("Just accumulates the total count of elements");
			std::ostringstream o;
			o << "Just accumulates the total count of elements\n";
			operation->setHelp( o.str() );
			add( operation ); // Add this operation to the module
		}
		{
			ss::Operation * operation = new ss::Operation( "osn.red_compute_total_and_set" , ss::Operation::reduce , au::factory<red_compute_total_and_set>, compare_osn_red_compute_total_and_set, compare_osn_red_compute_total_and_set_by_key );
			operation->inputFormats.push_back( ss::KVFormat::format("system.UInt" ,"system.UInt") );
			operation->outputFormats.push_back( ss::KVFormat::format("system.UInt" ,"system.Void") );
			operation->setHelpLine("Just accumulates the total count. Try to export results through environment, but it is not meant for that, so it doesn't work Fake output just to compile with changes in platform");
			std::ostringstream o;
			o << "Just accumulates the total count\n";
			o << "Andreu confirm that this cannot work, because environment is not meant to pass results between modules\n";
			operation->setHelp( o.str() );
			add( operation ); // Add this operation to the module
		}
		{
			ss::Operation * operation = new ss::Operation( "osn.export_connections" , ss::Operation::parserOut , au::factory<export_connections> );
			operation->outputFormats.push_back( ss::KVFormat::format("txt" ,"txt") );
			operation->inputFormats.push_back( ss::KVFormat::format("system.String" ,"osn.URLConnection") );
			operation->setHelpLine("Export complete connection log in txt format");
			std::ostringstream o;
			operation->setHelp( o.str() );
			add( operation ); // Add this operation to the module
		}
		{
			ss::Operation * operation = new ss::Operation( "osn.export_report" , ss::Operation::parserOut , au::factory<export_report> );
			operation->outputFormats.push_back( ss::KVFormat::format("txt" ,"txt") );
			operation->inputFormats.push_back( ss::KVFormat::format("system.UInt" ,"osn.Count") );
			operation->setHelpLine("Export report in txt format");
			std::ostringstream o;
			operation->setHelp( o.str() );
			add( operation ); // Add this operation to the module
		}
		{
			ss::Operation * operation = new ss::Operation( "osn.export_N_sites" , ss::Operation::parserOut , au::factory<export_N_sites> );
			operation->outputFormats.push_back( ss::KVFormat::format("txt" ,"txt") );
			operation->inputFormats.push_back( ss::KVFormat::format("osn.Count" ,"system.Void") );
			operation->setHelpLine("Export report in txt format");
			std::ostringstream o;
			operation->setHelp( o.str() );
			add( operation ); // Add this operation to the module
		}
		{
			ss::Operation * operation = new ss::Operation( "osn.export_total" , ss::Operation::parserOut , au::factory<export_total> );
			operation->outputFormats.push_back( ss::KVFormat::format("txt" ,"txt") );
			operation->inputFormats.push_back( ss::KVFormat::format("system.UInt" ,"system.Void") );
			operation->setHelpLine("Export report in txt format");
			std::ostringstream o;
			operation->setHelp( o.str() );
			add( operation ); // Add this operation to the module
		}
		{
			ss::Operation * operation = new ss::Operation( "osn.Bytemobile_req_1" , ss::Operation::script);
			operation->inputFormats.push_back( ss::KVFormat::format("txt" ,"txt") );
			operation->outputFormats.push_back( ss::KVFormat::format("txt" ,"txt") );
			operation->outputFormats.push_back( ss::KVFormat::format("txt" ,"txt") );
			operation->setHelpLine("Sequence of operations to compute Reporting Requirements num. 1 (the total number of URLs with iphone agent or iphone application. Out of them the TOPN sites)");
			std::ostringstream o;
			o << "Sequence of operations to compute Reporting Requirements num. 1 (the total number of URLs with iphone agent or iphone application. Out of them the TOPN sites)\n";
			operation->setHelp( o.str() );

			// Code of this operation (usually scripts)

			operation->code.push_back("clear $2");
			operation->code.push_back("clear $3");
			operation->code.push_back("osn.parse_urls $1 $1.parse -clear -create");
			operation->code.push_back("osn.map_urls_to_kv_to_compute_sites_visited $1.parse $1.p.map $1.total -clear -create");
			operation->code.push_back("osn.red_compute_total_and_set $1.total -clear -create");
			operation->code.push_back("osn.red_compute_sites_visited $1.p.map $1.p.m.red -clear -create");
			operation->code.push_back("osn.export_report $1.p.m.red $2 -clear -create");
			operation->code.push_back("osn.red_select_N_sites $1.p.m.red $1.p.m.red.sort -clear -create");
			operation->code.push_back("osn.export_N_sites $1.p.m.red.sort $3 -clear -create");

			add( operation ); // Add this operation to the module
		}
		{
			ss::Operation * operation = new ss::Operation( "osn.Bytemobile_req_2" , ss::Operation::script);
			operation->inputFormats.push_back( ss::KVFormat::format("txt" ,"txt") );
			operation->outputFormats.push_back( ss::KVFormat::format("txt" ,"txt") );
			operation->outputFormats.push_back( ss::KVFormat::format("txt" ,"txt") );
			operation->setHelpLine("Sequence of operations to compute Reporting Requirements num. 2 (the total number of URLs with iphone agent and search.yahoo.com");
			std::ostringstream o;
			o << "Sequence of operations to compute Reporting Requirements num. 2 (the total number of URLs with iphone agent and search.yahoo.com\n";
			operation->setHelp( o.str() );

			// Code of this operation (usually scripts)

			operation->code.push_back("clear $2");
			operation->code.push_back("clear $3");
			operation->code.push_back("osn.parse_urls $1 $1.parse -clear -create");
			operation->code.push_back("set osn.user_agent_query iphone");
			operation->code.push_back("set osn.domain_query search.yahoo.com");
			operation->code.push_back("osn.map_site_user $1.parse $1.p.map $1.total -clear -create");
			operation->code.push_back("osn.red_compute_total_and_set $1.total -clear -create");
			operation->code.push_back("osn.red_compute_sites_visited $1.p.map $1.p.m.red -clear -create");
			operation->code.push_back("osn.export_report $1.p.m.red $2 -clear -create");
			operation->code.push_back("osn.red_compute_total_elements $1.p.m.red $1.p.m.red.total -clear -create");

			add( operation ); // Add this operation to the module
		}
		{
			ss::Operation * operation = new ss::Operation( "osn.Bytemobile_req_3" , ss::Operation::script);
			operation->inputFormats.push_back( ss::KVFormat::format("txt" ,"txt") );
			operation->outputFormats.push_back( ss::KVFormat::format("txt" ,"txt") );
			operation->outputFormats.push_back( ss::KVFormat::format("txt" ,"txt") );
			operation->setHelpLine("Sequence of operations to compute Reporting Requirements num. 3 (the total number of URLs with iphone agent and www.google.)");
			std::ostringstream o;
			o << "Sequence of operations to compute Reporting Requirements num. 3 (the total number of URLs with iphone agent and www.google.)\n";
			operation->setHelp( o.str() );

			// Code of this operation (usually scripts)

			operation->code.push_back("clear $2");
			operation->code.push_back("clear $3");
			operation->code.push_back("osn.parse_urls $1 $1.parse -clear -create");
			operation->code.push_back("set osn.user_agent_query iphone");
			operation->code.push_back("set osn.domain_query www.google.");
			operation->code.push_back("osn.map_site_user $1.parse $1.p.map $1.total -clear -create");
			operation->code.push_back("osn.red_compute_total_and_set $1.total -clear -create");
			operation->code.push_back("osn.red_compute_sites_visited $1.p.map $1.p.m.red -clear -create");
			operation->code.push_back("osn.export_report $1.p.m.red $2 -clear -create");
			operation->code.push_back("osn.red_compute_total_elements $1.p.m.red $1.p.m.red.total -clear -create");

			add( operation ); // Add this operation to the module
		}
		{
			ss::Operation * operation = new ss::Operation( "osn.Bytemobile_req_4" , ss::Operation::script);
			operation->inputFormats.push_back( ss::KVFormat::format("txt" ,"txt") );
			operation->outputFormats.push_back( ss::KVFormat::format("txt" ,"txt") );
			operation->outputFormats.push_back( ss::KVFormat::format("txt" ,"txt") );
			operation->setHelpLine("Sequence of operations to compute Reporting Requirements num. 4 (the search for adult content at Yahoo and Google; to be defined)");
			std::ostringstream o;
			o << "Sequence of operations to compute Reporting Requirements num. 4 (the search for adult content at Yahoo and Google; to be defined)\n";
			operation->setHelp( o.str() );

			// Code of this operation (usually scripts)

			operation->code.push_back("clear $2");
			operation->code.push_back("clear $3");

			add( operation ); // Add this operation to the module
		}
		{
			ss::Operation * operation = new ss::Operation( "osn.Bytemobile_req_5" , ss::Operation::script);
			operation->inputFormats.push_back( ss::KVFormat::format("txt" ,"txt") );
			operation->outputFormats.push_back( ss::KVFormat::format("txt" ,"txt") );
			operation->outputFormats.push_back( ss::KVFormat::format("txt" ,"txt") );
			operation->setHelpLine("Sequence of operations to compute Reporting Requirements num. 5 (the total number of hits to O2 bookmark and with iphone agent)");
			std::ostringstream o;
			o << "Sequence of operations to compute Reporting Requirements num. 5 (the total number of hits to O2 bookmark and with iphone agent)\n";
			operation->setHelp( o.str() );

			// Code of this operation (usually scripts)

			operation->code.push_back("clear $2");
			operation->code.push_back("clear $3");
			operation->code.push_back("osn.parse_urls $1 $1.parse -clear -create");
			operation->code.push_back("set osn.user_agent_query iphone");
			operation->code.push_back("set osn.locDoc_query www.o2.co.uk/iphonestart");
			operation->code.push_back("osn.map_url_user $1.parse $1.p.map $1.total -clear -create");
			operation->code.push_back("osn.red_compute_total_and_set $1.total -clear -create");
			operation->code.push_back("osn.red_compute_sites_visited $1.p.map $1.p.m.red -clear -create");
			operation->code.push_back("osn.export_report $1.p.m.red $2 -clear -create");
			operation->code.push_back("osn.red_compute_total_elements $1.p.m.red $1.p.m.red.total -clear -create");

			add( operation ); // Add this operation to the module
		}
		{
			ss::Operation * operation = new ss::Operation( "osn.Bytemobile_req_6" , ss::Operation::script);
			operation->inputFormats.push_back( ss::KVFormat::format("txt" ,"txt") );
			operation->outputFormats.push_back( ss::KVFormat::format("txt" ,"txt") );
			operation->outputFormats.push_back( ss::KVFormat::format("txt" ,"txt") );
			operation->setHelpLine("Sequence of operations to compute Reporting Requirements num. 6 (the total number of hits to O2 lower level bookmark and with iphone agent)");
			std::ostringstream o;
			o << "Sequence of operations to compute Reporting Requirements num. 6 (the total number of hits to O2 lower level bookmark and with iphone agent)\n";
			operation->setHelp( o.str() );

			// Code of this operation (usually scripts)

			operation->code.push_back("clear $2");
			operation->code.push_back("clear $3");
			operation->code.push_back("osn.parse_urls $1 $1.parse -clear -create");
			operation->code.push_back("set osn.user_agent_query iphone");
			operation->code.push_back("set osn.locDoc_query o2.co.uk");
			operation->code.push_back("osn.map_url_user $1.parse $1.p.map $1.total -clear -create");
			operation->code.push_back("osn.red_compute_total_and_set $1.total -clear -create");
			operation->code.push_back("osn.red_compute_sites_visited $1.p.map $1.p.m.red -clear -create");
			operation->code.push_back("osn.export_report $1.p.m.red $2 -clear -create");
			operation->code.push_back("osn.red_compute_total_elements $1.p.m.red $1.p.m.red.total -clear -create");

			add( operation ); // Add this operation to the module
		}
		{
			ss::Operation * operation = new ss::Operation( "osn.Bytemobile_req_7" , ss::Operation::script);
			operation->inputFormats.push_back( ss::KVFormat::format("txt" ,"txt") );
			operation->outputFormats.push_back( ss::KVFormat::format("txt" ,"txt") );
			operation->outputFormats.push_back( ss::KVFormat::format("txt" ,"txt") );
			operation->setHelpLine("Sequence of operations to compute Reporting Requirements num. 7 (penetration of apps (stocks, weather, maps, iTunes)");
			std::ostringstream o;
			o << "Sequence of operations to compute Reporting Requirements num. 7 (penetration of apps (stocks, weather, maps, iTunes)\n";
			operation->setHelp( o.str() );

			// Code of this operation (usually scripts)

			operation->code.push_back("clear $2");
			operation->code.push_back("clear $3");
			operation->code.push_back("osn.parse_urls $1 $1.parse -clear -create");
			operation->code.push_back("set osn.user_agent_query iphone");
			operation->code.push_back("set osn.locDoc_query o2.co.uk");
			operation->code.push_back("osn.map_applications $1.parse $1.p.agentmap $1.p.map $1.total -clear -create");
			operation->code.push_back("osn.red_compute_total_and_set $1.total -clear -create");
			operation->code.push_back("osn.red_compute_sites_visited $1.p.map $1.p.m.red -clear -create");
			operation->code.push_back("osn.export_report $1.p.m.red $2 -clear -create");
			operation->code.push_back("osn.red_compute_sites_visited $1.p.agentmap $1.p.am.red -clear -create");
			operation->code.push_back("osn.export_report $1.p.am.red $1.p.am.red.txt -clear -create");
			operation->code.push_back("osn.red_compute_total_elements $1.p.m.red $1.p.m.red.total -clear -create");

			add( operation ); // Add this operation to the module
		}

	}; // end of class

} // end of namespace ss
} // end of namespace osn
