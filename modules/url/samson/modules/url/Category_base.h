
/**
 File autogenerated with samsonModuleParser, please do not edit
*/

#ifndef _H_SAMSON_url_Category_BASE
#define _H_SAMSON_url_Category_BASE


#include <samson/modules/system/UInt.h>


namespace samson{
namespace url{


	class Category_base : public samson::DataInstance{

	public:
	::samson::system::UInt weight;
	::samson::system::UInt confidence;
	::samson::system::UInt countServer;
	::samson::system::UInt countUser;

	Category_base() : samson::DataInstance(){
	}

	~Category_base() {
	}

	int parse(char *data){
		int offset=0;
		{ //Parsing weight
			offset += weight.parse(data+offset);
		}

		{ //Parsing confidence
			offset += confidence.parse(data+offset);
		}

		{ //Parsing countServer
			offset += countServer.parse(data+offset);
		}

		{ //Parsing countUser
			offset += countUser.parse(data+offset);
		}

		return offset;
	}

	int serialize(char *data){
		int offset=0;
		{ //Serializing weight
			offset += weight.serialize(data+offset);
		}

		{ //Serializing confidence
			offset += confidence.serialize(data+offset);
		}

		{ //Serializing countServer
			offset += countServer.serialize(data+offset);
		}

		{ //Serializing countUser
			offset += countUser.serialize(data+offset);
		}

		return offset;
	}

	static inline int size(char *data){
		int offset=0;
		{ //Sizing weight
			offset += ::samson::system::UInt::size(data+offset);
		}

		{ //Sizing confidence
			offset += ::samson::system::UInt::size(data+offset);
		}

		{ //Sizing countServer
			offset += ::samson::system::UInt::size(data+offset);
		}

		{ //Sizing countUser
			offset += ::samson::system::UInt::size(data+offset);
		}

		return offset;
	}

	int hash(int max_num_partitions){
		{ //Partitioning weight
			return weight.hash(max_num_partitions);
		}

	}

	inline static int compare(char * data1 , char *data2 , size_t *offset1 , size_t *offset2 ){
		{ // comparing weight
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  weight compared 
		{ // comparing confidence
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  confidence compared 
		{ // comparing countServer
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  countServer compared 
		{ // comparing countUser
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  countUser compared 
		return 0; //If everything is equal
	}

	inline static int compare( char* data1 , char* data2 )
	{
		size_t offset_1=0;
		size_t offset_2=0;
		return compare( data1 , data2 , &offset_1 , &offset_2 );
	}






	void copyFrom( Category_base *other ){
		{ //Copying weight
			weight.copyFrom(&other->weight);
		}

		{ //Copying confidence
			confidence.copyFrom(&other->confidence);
		}

		{ //Copying countServer
			countServer.copyFrom(&other->countServer);
		}

		{ //Copying countUser
			countUser.copyFrom(&other->countUser);
		}

	};

	std::string str(){
		std::ostringstream o;
				{ //Texting weight
			o << weight.str();
		}

		o<<" ";
				{ //Texting confidence
			o << confidence.str();
		}

		o<<" ";
				{ //Texting countServer
			o << countServer.str();
		}

		o<<" ";
				{ //Texting countUser
			o << countUser.str();
		}

		o<<" ";
		return o.str();
	}

	}; //class Category_base

} // end of namespace samson
} // end of namespace url

#endif
