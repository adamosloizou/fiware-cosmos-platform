
/**
 File autogenerated with samsonModuleParser, please do not edit
*/

#ifndef _H_SAMSON_url_CategoryPath_BASE
#define _H_SAMSON_url_CategoryPath_BASE


#include <samson/modules/system/String.h>
#include <samson/modules/system/UInt.h>
#include <samson/modules/url/Category.h>


namespace samson{
namespace url{


	class CategoryPath_base : public samson::DataInstance{

	public:
	::samson::system::UInt category;
	::samson::url::Category category_info;
	::samson::system::String path;

	CategoryPath_base() : samson::DataInstance(){
	}

	~CategoryPath_base() {
	}

	int parse(char *data){
		int offset=0;
		offset += category.parse(data+offset);
		offset += category_info.parse(data+offset);
		offset += path.parse(data+offset);
		return offset;
	}

	int serialize(char *data){
		int offset=0;
		offset += category.serialize(data+offset);
		offset += category_info.serialize(data+offset);
		offset += path.serialize(data+offset);
		return offset;
	}

	static inline int size(char *data){
		int offset=0;
		offset += ::samson::system::UInt::size(data+offset);
		offset += ::samson::url::Category::size(data+offset);
		offset += ::samson::system::String::size(data+offset);
		return offset;
	}

	int hash(int max_num_partitions){
		return category.hash(max_num_partitions);
	}

	inline static int compare(char * data1 , char *data2 , size_t *offset1 , size_t *offset2 ){
		{ // comparing category
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}
		{ // comparing category_info
			int tmp = ::samson::url::Category::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}
		{ // comparing path
			int tmp = ::samson::system::String::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}
		return 0; //If everything is equal
	}

	inline static int compare( char* data1 , char* data2 )
	{
		size_t offset_1=0;
		size_t offset_2=0;
		return compare( data1 , data2 , &offset_1 , &offset_2 );
	}

	void copyFrom( CategoryPath_base *other ){
		category.copyFrom(&other->category);
		category_info.copyFrom(&other->category_info);
		path.copyFrom(&other->path);
	};

	std::string str(){
		std::ostringstream o;
		o << category.str();

		o<<" ";
		o << category_info.str();

		o<<" ";
		o << path.str();

		o<<" ";
		return o.str();
	}

	}; //class CategoryPath_base

} // end of namespace samson
} // end of namespace url

#endif
