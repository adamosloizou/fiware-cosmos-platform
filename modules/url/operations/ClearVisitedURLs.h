
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_url_ClearVisitedURLs
#define _H_SAMSON_url_ClearVisitedURLs


#include <samson/samson.h>
#include <samson/Log.h>

/***********************************************************************
reduce ClearVisitedURLs
{
	in system.UInt url.ServerPathVector   # User(id) - ServerPathVector (suitable)
	in system.UInt url.ServerPathVector	  # User(id) - ServerPathVector (already visited)
	out system.UInt url.ServerPathVector  # User(id) - ServerPathVector (recommended)

	helpLine "Eliminate the URLs already visited from the list of possible recommendations"
}
************************************************************************/

namespace ss{
namespace url{


	class ClearVisitedURLs : public ss::Reduce
	{
		ss::system::UInt userId;
		ServerPathVector pathsSuitable;
		ServerPathVector pathsVisited;


	public:


		void run(  ss::KVSetStruct* inputs , ss::KVWriter *writer )
		{
			if (inputs[0].num_kvs == 0)
			{
				return; //We don't have any suitable recommendation
			}

			if (inputs[0].num_kvs != 1)
			{
				OLM_E(("We should have one and only one occurrence of users in recommended list. inputs[0].num_kvs: %d", inputs[0].num_kvs));
				return;
			}


			ServerPathVector pathsRecommended;

			userId.parse(inputs[0].kvs[0]->key);
			pathsSuitable.parse(inputs[0].kvs[0]->value);

			if (inputs[1].num_kvs == 0)
			{
				OLM_D(("We don't have any history for user: %d", userId.value));
				writer->emit(0, &userId, &pathsSuitable);
				return; //We don't have any suitable recommendation
			}

			if (inputs[1].num_kvs != 1)
			{
				OLM_E(("We should have only one occurrence of user's history. inputs[1].num_kvs: %d", inputs[1].num_kvs));
				writer->emit(0, &userId, &pathsSuitable);
				return; //We don't have any suitable recommendation
			}
			pathsVisited.parse(inputs[1].kvs[0]->value);

			for (int i = 0; (i < pathsSuitable.serverPath_length); i++)
			{
				if (pathsVisited.contains(&(pathsSuitable.serverPath[i])) == false)
				{
					pathsRecommended.serverPathAdd()->copyFrom(&(pathsSuitable.serverPath[i]));
				}
			}

			writer->emit(0, &userId, &pathsRecommended);
		}


	};


} // end of namespace ss
} // end of namespace url

#endif
