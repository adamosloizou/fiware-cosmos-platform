
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_url_exportHitsPerCategory
#define _H_SAMSON_url_exportHitsPerCategory


#include <samson/samson.h>
#include <samson/Log.h>

namespace ss{
namespace url{

/*************************************************************
parserOut exportHitsPerCategory
{
	in system.UInt url.ServerPathVector  # Category(id) - ServerPathVector
	out txt txt

	helpLine "Exports the list of hits for every category"
}
**************************************************************/

	class exportHitsPerCategory : public ss::ParserOut
	{
		ss::system::UInt catId;
		ServerPathVector paths;



	public:


		void run(KVSetStruct* inputs , TXTWriter *writer )
		{
#ifdef MAX_STR_LEN
#undef MAX_STR_LEN
#endif

#define MAX_STR_LEN 2048
			char output[MAX_STR_LEN];
			char *p_output;
			int escritos;

			for (int i = 0; (i < inputs[0].num_kvs); i++)
			{
				catId.parse(inputs[0].kvs[i]->key);
				paths.parse(inputs[0].kvs[i]->value);


				escritos = snprintf(output, MAX_STR_LEN, "cat: %lu: [", catId.value);
				p_output = output + escritos;

				for (int j = 0; (j < paths.serverPath_length); j++)
				{
#define MAX_CHUNK_LEN 128
					escritos += snprintf(p_output, MAX_CHUNK_LEN, "%lu/%s; ", paths.serverPath[j].server.value, paths.serverPath[j].path.value.c_str());
					if ((escritos + MAX_CHUNK_LEN) > MAX_STR_LEN)
					{
						break;
					}
					p_output = output + escritos;
				}
				strcat(p_output, "]\n");

				writer->emit(output);
			}
		}

	};


} // end of namespace ss
} // end of namespace url

#endif
