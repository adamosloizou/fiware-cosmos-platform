
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_url_exportUserCategories
#define _H_SAMSON_url_exportUserCategories


#include <samson/samson.h>
#include <samson/Log.h>

/*******************************************************************************
parserOut exportUserCategories
{
	in system.UInt url.CategoryVector   # User(id) - CategoryVector (averaged through servers)
	out txt txt

	helpLine "Exports the list of users with category distribution"
}
*******************************************************************************/

namespace ss{
namespace url{


	class exportUserCategories : public ss::ParserOut
	{
		ss::system::UInt userId;
		CategoryVector categories;

	public:


		void run(KVSetStruct* inputs , TXTWriter *writer )
		{
#ifdef MAX_STR_LEN
#undef MAX_STR_LEN
#endif

#define MAX_STR_LEN 1024
			char output[MAX_STR_LEN];
			char *p_output;
			int escritos;

			for (int i = 0; (i < inputs[0].num_kvs); i++)
			{
				userId.parse(inputs[0].kvs[i]->key);
				categories.parse(inputs[0].kvs[i]->value);

				escritos = snprintf(output, MAX_STR_LEN, "%lu cat: ", userId.value);
				p_output = output + escritos;

				for (int j = 0; (j < categories.category_length); j++)
				{
#define MAX_CHUNK_LEN 128
					escritos += snprintf(p_output, MAX_CHUNK_LEN, "%.2f (%lu); ", CategoryVector::intScaled_2_double(categories.category[j].weight.value), categories.category[j].countUser.value);
					if ((escritos + MAX_CHUNK_LEN) > MAX_STR_LEN)
					{
						break;
					}
					p_output = output + escritos;
				}
				strcat(p_output, "\n");

				writer->emit(output);
			}
		}


	};


} // end of namespace ss
} // end of namespace url

#endif
