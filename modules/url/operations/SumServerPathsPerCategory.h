
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_url_SumServerPathsPerCategory
#define _H_SAMSON_url_SumServerPathsPerCategory


#include <samson/samson.h>
#include <samson/Log.h>

/************************************************************************
reduce SumServerPathsPerCategory
{
	in system.UInt url.ServerPathCount   # Category(id) - ServerPathCount (weight as count)
	out system.UInt url.ServerPathVector # Category(id) - ServerPathVector

	helpLine "Accumulate the serverPath information for the key category, and create a vector"
}
*************************************************************************/

namespace ss{
namespace url{


	class SumServerPathsPerCategory : public ss::Reduce
	{

	public:

		ss::system::UInt catId;
		ServerPathCount serverPath;
		ServerPathCount serverPathPrev;

		void run(  ss::KVSetStruct* inputs , ss::KVWriter *writer )
		{
			bool first = true;
			size_t n_items = 0;
			ServerPathVector paths;

			catId.parse(inputs[0].kvs[0]->key);

			for (int i = 0; (i < inputs[0].num_kvs); i++)
			{
				serverPath.parse(inputs[0].kvs[i]->value);

				if (first || ((serverPath.server == serverPathPrev.server) && (!serverPath.path.value.compare(serverPathPrev.path.value))))
				{
					if (first == true)
					{
						serverPathPrev = serverPath;
						first = false;
					}
					else
					{

						serverPathPrev.weight.value += serverPath.weight.value;
					}
					n_items++;
					//OLM_T(LMT_User06,("Detected: cat:%d server:%d, path:%s, count:%d", catId.value, serverPath.server.value, serverPath.path.value.c_str(), serverPath.count.value));
				}
				else
				{
					// Again, dealing with weights, counts and probabilities is still a mess
					serverPathPrev.weight.value = serverPathPrev.weight.value / n_items;
					serverPathPrev.count.value = n_items;
					paths.serverPathAdd()->copyFrom(&serverPathPrev);
					//OLM_T(LMT_User06,("Add: cat:%d server:%d, path:%s, count:%d", catId.value, serverPathPrev.server.value, serverPathPrev.path.value.c_str(), serverPathPrev.count.value));
					serverPathPrev = serverPath;
					n_items = 1;
				}
			}
			serverPathPrev.weight.value = serverPathPrev.weight.value / n_items;
			serverPathPrev.count.value = n_items;
			//OLM_T(LMT_User06,("Add last: cat:%d server:%d, path:%s, count:%d", catId.value, serverPathPrev.server.value, serverPathPrev.path.value.c_str(), serverPathPrev.count.value));
			paths.serverPathAdd()->copyFrom(&serverPathPrev);
			paths.countRef = inputs[0].num_kvs;

			writer->emit(0, &catId, &paths);
		}


	};


} // end of namespace ss
} // end of namespace url

#endif
