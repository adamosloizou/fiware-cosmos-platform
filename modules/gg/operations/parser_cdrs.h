
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_gg_parser_cdrs
#define _H_SAMSON_gg_parser_cdrs

#include <iostream>
#include <string>

#include <samson/module/samson.h>
#include "samson/modules/system/SimpleParser.h"    // SimpleParser

#include "samson/modules/gg/CDR.h"       // gg::CDR
#include "samson/modules/system/Uint.h"  // system::UInt
namespace samson{
namespace gg{


  

  class parser_cdrs : public samson::system::SimpleParser
	{

	public:

	  system::UInt key;
	  gg::CDR value;

	  // String used to parse inputs
	  size_t pos;
	  std::string tmp;

	  // Strings to hold main data
	    std::string caller;
	    std::string called;
	    std::string price;


	    bool getNext(std::string &value)
  	    {
	      size_t pos_end = tmp.find(',',pos);
	    
	      if( pos_end == std::string::npos )
		return false;
	    
	      value = tmp.substr( pos , pos_end-pos );
	      pos = pos_end + 1;

	      return true;
	   }

	  void parseLine( char * line , samson::KVWriter *writer )
	  {
	    // Get the line in a c++ string
	    tmp = line;
	    pos = 0;

	    if( !getNext(caller) )
	      return;

	    if( caller == "CALLINGNUMBER" )
	      return;

	    if( !getNext(called) )
	      return;

	    if( !getNext(price) )
	      return;


	    key.value = strtol( caller.c_str() , (char **)NULL, 10);
	    value.caller.value = key.value;
	    value.called.value = strtol( called.c_str() , (char **)NULL, 10 );	    
	    value.price.value = strtod( price.c_str() ,  (char **)NULL  );	    

	    writer->emit( 0 , &key , &value);


	  }

	};


} // end of namespace gg
} // end of namespace samson

#endif
