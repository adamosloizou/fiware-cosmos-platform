
Module hit
{
	title	"Hit manipulation"
	author	"Andreu Urruela & Gregorio Escalada"
	version "0.1.1"
}


####################################################################################
# Datas
####################################################################################

data Hit
{
	system.String concept; # Concept for this hit
	system.Float count;    # Number of times for this hit ( float to implement forgetting factor )
	system.TimeUnix time;  # Reference time-samp for this hit
}

data HitCollection
{
	vector hit.Hit hits;   # Vector of hits
}

####################################################################################
# Main operations
####################################################################################

reduce reduceHits
{
	in system.String system.UInt         # Input hits
	in system.String hit.Hit             # State: Accumlated version

	out system.String hit.Hit     		 # Output hits if candidate for the top hits
	out system.String hit.Hit 	   	     # State: Accumulated version

	helpLine "Simple accumulator in stream mode"
}

reduce reduceHitCollections
{
	in system.String hit.Hit                # Hit updates
	in system.String hit.HitCollection		# State with the top elements
	out system.String hit.HitCollection 
	out system.String hit.HitCollection     # State with the top elements	
}

####################################################################################
# Init script for hit count 
####################################################################################

script init_stream_operations
{
  code
  {
    rm_stream_operation hit.01.reduce_words -f;
    rm_stream_operation hit.20.reduce_tops -f;
    rm_stream_operation hit.21.export_tops -f;

    rm_queue hit.01.input_words -f;
    rm_queue hit.10.words -f;
    rm_queue hit.11.words_update -f;
    rm_queue hit.20.hit.tops -f;
    rm_queue hit.21.output_tops -f;
    rm_queue hit.22.output_tops_txt -f;

    add_stream_operation hit.01.reduce_words  hit.reduceHits              hit.01.input_words            hit.10.words  hit.11.words_update hit.10.words;
    add_stream_operation hit.20.reduce_tops   hit.reduceHitCollections    hit.11.words_update           hit.20.tops   hit.21.output_tops hit.20.tops;
    add_stream_operation hit.21.export_tops   hit.export_hit_collection   hit.21.output_tops                          hit.22.output_tops_txt;
  }

}


################################################################
# Other operations
################################################################

map split_words
{
	in system.String system.UInt   #Input words
	out system.String system.UInt  #Outputs words ( more than one....)

	helpLine "Duplicate some concepts like date, mail, ..... Ouput words are mail_XXX date_XXX"
}

parserOut export_hit_collection
{
	in system.String hit.HitCollection
	helpLine "Export the top list of elements"
}







