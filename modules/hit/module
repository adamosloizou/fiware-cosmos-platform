


Module hit
{
	title	"Hit manipulation"
	author	"Andreu Urruela"
	version "0.1"
}


####################################################################################
# Datas
####################################################################################

data Hit
{
    system.String concept;     # Concept name ( word )
	system.UInt hits;		   # Number of times this word appears
}

data HitCollection
{
	vector hit.Hit hits;
}

data HitCount
{
	system.String concept;          # Concept for this hit
	system.UInt   current_time;     # Slot of the time-stamp ( usually time(NULL)/Constant )

    system.UInt   current_hits;     # Hits during current slot
    system.UInt   hits;             # Hits during previous slot ( really used to detect maximums )
}

data HitCountCollection
{
	list hit.HitCount hit_counts;   # Collection of hit_counts
}

####################################################################################
# Main operations
####################################################################################


reduce reduceHitCounts
{
	in system.String system.UInt		# Input concepts and number of hits ( usually 1 )
	in system.String hit.HitCount		# State for each string

	out system.String hit.HitCount		# Output state of this concept if it changes significantly
	out system.String hit.HitCount		# Output state for each string

	helpLine "Aggregation of the hits per string. It emits output '0' if counter changes significantly"
}


reduce reduceHitCountCollection
{
	in system.String hit.HitCount              # Input hit count update
	in system.String hit.HitCountCollection    # State of the top list

	out system.String hit.HitCollection        # Top list of hits
	out system.String hit.HitCountCollection

	helpLine "Filter top elements per global-concept"
}




################################################################
# Other operations
################################################################

parserOut export_hit_count_collection
{
	in system.String hit.HitCollection
	helpLine "Export the top list of elements"
}

#
# Simple generator to create "hit.num_samples" random strings at the output
#

generator generate_words
{
        out system.String system.UInt
        helpLine "Generate 'hit.num_samples' random words with 'hit.word_length' chars. By default it generates 1M words with 6 letters"
}

#
# Parser for words
#

parser parser_words
{
	out system.String system.UInt	
	helpLine "Parse input txt queue to generate individual counts of words"
}

