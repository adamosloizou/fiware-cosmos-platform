
Module hit
{
	title	"Hit manipulation"
	author	"Andreu Urruela"
	version "0.1"
}


####################################################################################
# Datas
####################################################################################

data HitCount
{
	system.String concept;          # Concept for this hit
	system.UInt   current_time;     # Slot of the time-stamp ( usually time(NULL)/Constant )

	vector system.UInt hits;		# Hits in the last time-slots
}

data HitCountCollection
{
	vector hit.HitCount hit_counts;   # Collection of hit_counts
}


####################################################################################
# Main operations
####################################################################################


reduce reduceHitCounts
{
	in system.String system.UInt		# Input concepts and number of hits ( usually 1 )
	in system.String hit.HitCount		# State for each string

	out system.String hit.HitCount		# Output state of this concept if it changes significantly
	out system.String hit.HitCount		# Output state for each string

	helpLine "Aggregation of the hits per string. It emits output '0' if counter changes significantly"
}


reduce reduceHitCountCollection
{
	in system.String hit.HitCount              # Input hit count update
	in system.String hit.HitCountCollection    # State of the top list

	out system.String hit.HitCountCollection       # Top list of hits
	out system.String hit.HitCountCollection   # State of the top elements ( all top level per samples )

	helpLine "Filter top elements per global-concept"
}




################################################################
# Other operations
################################################################

parserOut export_hit_count_collection
{
	in system.String hit.HitCountCollection
	helpLine "Export the top list of elements"
}
