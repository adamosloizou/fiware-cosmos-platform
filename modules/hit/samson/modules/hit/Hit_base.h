
/**
 File autogenerated with samsonModuleParser, please do not edit
*/

#ifndef _H_SAMSON_hit_Hit_BASE
#define _H_SAMSON_hit_Hit_BASE


#include <samson/modules/system/String.h>
#include <samson/modules/system/UInt.h>


namespace samson{
namespace hit{


	class Hit_base : public samson::DataInstance{

	public:
	::samson::system::UInt time;
	::samson::system::UInt hits;
	::samson::system::String concept;

	Hit_base() : samson::DataInstance(){
	}

	~Hit_base() {
	}

	int parse(char *data){
		int offset=0;
		{ //Parsing time
			offset += time.parse(data+offset);
		}

		{ //Parsing hits
			offset += hits.parse(data+offset);
		}

		{ //Parsing concept
			offset += concept.parse(data+offset);
		}

		return offset;
	}

	int serialize(char *data){
		int offset=0;
		{ //Serializing time
			offset += time.serialize(data+offset);
		}

		{ //Serializing hits
			offset += hits.serialize(data+offset);
		}

		{ //Serializing concept
			offset += concept.serialize(data+offset);
		}

		return offset;
	}

	static inline int size(char *data){
		int offset=0;
		{ //Sizing time
			offset += ::samson::system::UInt::size(data+offset);
		}

		{ //Sizing hits
			offset += ::samson::system::UInt::size(data+offset);
		}

		{ //Sizing concept
			offset += ::samson::system::String::size(data+offset);
		}

		return offset;
	}

	int hash(int max_num_partitions){
		{ //Partitioning time
			return time.hash(max_num_partitions);
		}

	}

	inline static int compare(char * data1 , char *data2 , size_t *offset1 , size_t *offset2 ){
		{ // comparing time
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  time compared 
		{ // comparing hits
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  hits compared 
		{ // comparing concept
			int tmp = ::samson::system::String::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  concept compared 
		return 0; //If everything is equal
	}

	inline static int compare( char* data1 , char* data2 )
	{
		size_t offset_1=0;
		size_t offset_2=0;
		return compare( data1 , data2 , &offset_1 , &offset_2 );
	}





	int *getDataPath(const std::string &dataPathString){
		return(getDataPathStatic(dataPathString));
	}
	static int *getDataPathStatic(const std::string &dataPathString){
		const char *dataPathCharP = dataPathString.c_str();
		int nlevels = 1;
		int *dataPathIntP;

		const char *p_sep = dataPathCharP;
		while ((p_sep = strchr(p_sep, '.')) != NULL)
		{
			nlevels++;
			p_sep++;
		}

		if ((dataPathIntP = (int *)malloc((nlevels + 1)*sizeof(int))) == NULL)
		{
			return ((int *)NULL);
		}

		int retError = getDataPath(dataPathCharP, dataPathIntP);

		if (retError)
		{
			free(dataPathIntP);
			dataPathIntP = NULL;
		}

		return  (dataPathIntP);
	}

	static int getDataPath(const char * dataPathCharP, int *dataPathIntP){
		if (*dataPathCharP == 0)
		{
			*dataPathIntP = -1;
			return (0);
		}

		if (strcmp(dataPathCharP, "Hit") == 0)
		{
			*dataPathIntP = -1;
			return (0);
		}

		if (strncmp(dataPathCharP, "Hit.", strlen("Hit.")) == 0)
		{
			return (getDataPath(dataPathCharP+strlen("Hit."), dataPathIntP));
		}
		{ //Scanning time, terminal and non-terminal
			if (strcmp(dataPathCharP, "time") == 0)
			{
				*dataPathIntP = 0;
				*(dataPathIntP+1) = -1;
				return (0);
			}
			if (strncmp(dataPathCharP, "time.", strlen("time.")) == 0)
			{
				*dataPathIntP = 0;
				return (system::UInt::getDataPath(dataPathCharP+strlen("time."),dataPathIntP+1));
			}
		}
		{ //Scanning hits, terminal and non-terminal
			if (strcmp(dataPathCharP, "hits") == 0)
			{
				*dataPathIntP = 1;
				*(dataPathIntP+1) = -1;
				return (0);
			}
			if (strncmp(dataPathCharP, "hits.", strlen("hits.")) == 0)
			{
				*dataPathIntP = 1;
				return (system::UInt::getDataPath(dataPathCharP+strlen("hits."),dataPathIntP+1));
			}
		}
		{ //Scanning concept, terminal and non-terminal
			if (strcmp(dataPathCharP, "concept") == 0)
			{
				*dataPathIntP = 2;
				*(dataPathIntP+1) = -1;
				return (0);
			}
			if (strncmp(dataPathCharP, "concept.", strlen("concept.")) == 0)
			{
				*dataPathIntP = 2;
				return (system::String::getDataPath(dataPathCharP+strlen("concept."),dataPathIntP+1));
			}
		}
		return -1;
	}

	std::string getTypeFromPath(const std::string &dataPathString){
		const char *dataPathCharP = dataPathString.c_str();
		return(getTypeFromPathStatic(dataPathCharP));

	}

	static std::string getTypeFromPathStatic(const char * dataPathCharP){
		if (*dataPathCharP == 0)
		{
			return ("hit.Hit");
		}

		if (strcmp(dataPathCharP, ".") == 0)
		{
			return ("hit.Hit");
		}

		if (strcmp(dataPathCharP, "Hit") == 0)
		{
			return ("hit.Hit");
		}

		if (strncmp(dataPathCharP, "Hit.", strlen("Hit.")) == 0)
		{
			return (getTypeFromPathStatic(dataPathCharP+strlen("Hit.")));
		}
		{ //Scanning time, terminal and non-terminal
			if (strcmp(dataPathCharP, "time") == 0)
			{
			return("system.UInt");
			}
			if (strncmp(dataPathCharP, "time.", strlen("time.")) == 0)
			{
			return(system::UInt::getTypeFromPathStatic(dataPathCharP+strlen("time.")));
			}
		}
		{ //Scanning hits, terminal and non-terminal
			if (strcmp(dataPathCharP, "hits") == 0)
			{
			return("system.UInt");
			}
			if (strncmp(dataPathCharP, "hits.", strlen("hits.")) == 0)
			{
			return(system::UInt::getTypeFromPathStatic(dataPathCharP+strlen("hits.")));
			}
		}
		{ //Scanning concept, terminal and non-terminal
			if (strcmp(dataPathCharP, "concept") == 0)
			{
			return("system.String");
			}
			if (strncmp(dataPathCharP, "concept.", strlen("concept.")) == 0)
			{
			return(system::String::getTypeFromPathStatic(dataPathCharP+strlen("concept.")));
			}
		}
		return("_ERROR_");
	}

	std::string getTypeFromPath(const int *dataPathIntP){
		return(getTypeFromPathStatic(dataPathIntP));
	}
	static std::string getTypeFromPathStatic(const int *dataPathIntP){
		switch(*dataPathIntP)
		{
			case -1:
				return ("hit.Hit");
				break;
			case 0:
				return(system::UInt::getTypeFromPathStatic(dataPathIntP+1));
				break;
			case 1:
				return(system::UInt::getTypeFromPathStatic(dataPathIntP+1));
				break;
			case 2:
				return(system::String::getTypeFromPathStatic(dataPathIntP+1));
				break;
			default:
				return ("_ERROR_");
				break;
		};
	}

	static const char *getTypeStatic(){
		return("hit.Hit");
	}

	const char *getType(){
		return("hit.Hit");
	}

	static bool checkTypeStatic(const char *type){
		if (strcmp(type, "hit.Hit") == 0)
		{
			return true;
		}		return false;
	}

	bool checkType(const char *type){
		if (strcmp(type, "hit.Hit") == 0)
		{
			return true;
		}		return false;
	}

	static size_t getHashTypeStatic(){
		return(2800337073214141905ULL);
	}

	size_t getHashType(){
		return(2800337073214141905ULL);
	}

	static bool checkHashTypeStatic(size_t valType){
		if (valType == 2800337073214141905ULL)
		{
			return true;
		}		return false;
	}

	 bool checkHashType(size_t valType){
		if (valType == 2800337073214141905ULL)
		{
			return true;
		}		return false;
	}

	DataInstance * getDataInstanceFromPath(const int *dataPathIntP){
		switch(*dataPathIntP)
		{
			case -1:
				return(this);
				break;
			case 0:
				return(time.getDataInstanceFromPath(dataPathIntP+1));
				break;
			case 1:
				return(hits.getDataInstanceFromPath(dataPathIntP+1));
				break;
			case 2:
				return(concept.getDataInstanceFromPath(dataPathIntP+1));
				break;
			default:
				return (NULL);
				break;
		};
	}

	void copyFrom( Hit_base *other ){
		{ //Copying time
			time.copyFrom(&other->time);
		}

		{ //Copying hits
			hits.copyFrom(&other->hits);
		}

		{ //Copying concept
			concept.copyFrom(&other->concept);
		}

	};

	std::string str(){
		std::ostringstream o;
				{ //Texting time
			o << time.str();
		}

		o<<" ";
				{ //Texting hits
			o << hits.str();
		}

		o<<" ";
				{ //Texting concept
			o << concept.str();
		}

		o<<" ";
		return o.str();
	}

	}; //class Hit_base

} // end of namespace hit
} // end of namespace samson

#endif
