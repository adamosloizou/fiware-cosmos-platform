
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this data
*/

#ifndef _H_SAMSON_hit_HitCount
#define _H_SAMSON_hit_HitCount

#include <samson/modules/hit/common.h>

#include <samson/modules/hit/HitCount_base.h>


namespace samson{
    namespace hit{
                
        class HitCount : public HitCount_base
        {
                        
        public:

            // Init structure creating all time-slot-counters

		   void init()
		   {
			  concept.value = "";
			  current_time.value = 0;

              // Init all the hits for all time-slots counters
			  hitsSetLength(0);
			  for (int i = 0 ; i < NUM_TIME_SLOTS ; i++ )
				 hitsAdd()->value = 0;
		   }
            
            void init( std::string &_concept, size_t _current_time )
            {
                // Set concept
                concept.value = _concept;
                
                // Set current time
                current_time.value = _current_time;
                
                // Init all the hits for all time-slots counters
                hitsSetLength(0);		  
                for (int i = 0 ; i < NUM_TIME_SLOTS ; i++ )
                    hitsAdd()->value = 0;		  
            }
            
            void set_current_time( size_t _current_time )
            {
                if( _current_time <= current_time.value )
                    return; // Nothing to do

                // Compute the time diff
                size_t current_time_diff  = _current_time - current_time.value;

				//printf("time %lu -> %lu diff %lu\n" , current_time.value , _current_time,  current_time_diff );

                // Move values to the rigth place
				if( current_time_diff > 0 )
				   if( current_time_diff < NUM_TIME_SLOTS )
					  for( size_t i = 0 ; i <  NUM_TIME_SLOTS - current_time_diff ; i++ )			   
					  {
						 hits[ NUM_TIME_SLOTS - 1 - i ].value = hits[ NUM_TIME_SLOTS - i -1 - current_time_diff ].value;
					  }
                
                // Set 0 to the new slots
                for( size_t i = 0 ; i < std::min( (size_t) current_time_diff , (size_t) NUM_TIME_SLOTS ) ; i++ )
				{
				   //printf("Puting 0 to %lu\n" , i );
                    hits[i].value = 0;
				}
                
                // Set current time
                current_time.value = _current_time;
            }
            
            bool add_hits( size_t _hits )
            {
                bool ans = change_significantly( hits[0].value + _hits  , hits[0].value );

				for ( int i=0; i<NUM_TIME_SLOTS ; i++)
				   hits[i].value += _hits;

                return ans;
            }

			bool hasHits()
			{
			   for ( int i=0; i<NUM_TIME_SLOTS ; i++)
				  if( hits[i].value > 0 )
					 return true;
			   return false;
			}
            
            // Get hits functionality ( integrating over different number of slots )

            
            // std::string representation of the content 
            
            std::string str()
            {
                std::ostringstream output;
                
                output << "[ C: " << concept.value << " T: " << current_time.value << " Hits";
                output << " ( ";
                for (int i = 0 ; i < NUM_TIME_SLOTS ; i++)
                    output << hits[i].value << " ";
                output << ") ]";
                
                return output.str();
            }
            
            // Auxiliar functions to evaluate significant changes
            
            bool change_significantly( size_t from , size_t to )
            {
                return ( cannonical( from ) != cannonical( to ) );			 
            }
            
            size_t cannonical( size_t input )
            {
                if ( input == 0 )
                    return 0;
                
                int t=0;
                while( input > 1000 )
                {
                    input /= 10;
                    t++;
                }
                
                for ( int i = 0 ; i < t  ; i++)
                    input *= 10;
                
                return input;
            }


            
            
        };
        
        
    } // end of namespace samson
} // end of namespace hit

#endif
