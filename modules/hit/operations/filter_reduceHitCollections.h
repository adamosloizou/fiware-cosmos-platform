
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_hit_filter_reduceHitCollections
#define _H_SAMSON_hit_filter_reduceHitCollections


#include <samson/module/samson.h>
#include <samson/modules/hit/Hit.h>
#include <samson/modules/system/String.h>


#include "HitCollectionManager.h"

namespace samson{
namespace hit{


	class filter_reduceHitCollections : public samson::Map
	{

	   HitCollectionManager manager; // Global to all key-value we can see here...

	   samson::system::String concept;
	   samson::hit::Hit hit; // Kit to parse

	public:


//  INFO_MODULE
// If interface changes and you do not recreate this file, you will have to update this information (and of course, the module file)
// Please, do not remove this comments, as it will be used to check consistency on module declaration
//
//  input: system.String hit.Hit  
//  output: system.String hit.Hit
// 
//  END_INFO_MODULE

		void init( samson::KVWriter *writer )
		{
		   concept.value = "top"; // Allways top
		}

		void run( samson::KVSetStruct* inputs , samson::KVWriter *writer )
		{
		   for ( size_t i = 0 ; i < inputs[0].num_kvs ; i++ )
		   {
			  hit.parse( inputs[0].kvs[i]->value );
			  manager.add( &hit , false );
		   }

		}

		void finish( samson::KVWriter *writer )
		{
		   // Emit the top elements....
		   for (int i = 0 ; i < NUM_TOP_ITEMS ; i++ )
              if( manager.top_hits[i]->count.value > 0 )
				 writer->emit( 0 , &concept , manager.top_hits[i] );

		}



	};


} // end of namespace hit
} // end of namespace samson

#endif
