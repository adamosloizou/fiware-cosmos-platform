
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
 */

#ifndef _H_SAMSON_hit_reduceHitCounts
#define _H_SAMSON_hit_reduceHitCounts


#include <samson/module/samson.h>

#include <samson/modules/hit/HitCount.h>
#include <samson/modules/system/String.h>
#include <samson/modules/system/UInt.h>



namespace samson{
namespace hit{


class reduceHitCounts : public samson::Reduce
{


	samson::system::String key;
	samson::system::UInt tmp_hits;

	samson::hit::HitCount hitCount;

	samson::system::UInt keyTime;
	samson::hit::Hit hits;

	size_t num_hits;
	unsigned long current_time;


public:


#ifdef INFO_COMMENT //Just to include a comment without conflicting anything
	// If interface changes and you do not recreate this file, consider updating this information (and of course, the module file)

	input: system.String system.UInt
	input: system.String hit.HitCount
	output: system.UInt hit.Hit
	output: system.String hit.HitCount

	helpLine: Aggregation of the hits per string
#endif // de INFO_COMMENT

	void init(samson::KVWriter *writer )
	{
		current_time = time(NULL)/300;// Blocks of one minute ( to be selected with environment variable)
		int period = time(NULL)%300;

		//current_time = 0;// Only for testing, hits are accumulated continuously...

		OLM_M(("reduceHitCounts::init(): Current time %lu [Next in %d ]" , current_time , 300 - period  ));
	}

	void run(  samson::KVSetStruct* inputs , samson::KVWriter *writer )
	{
		if( inputs[0].num_kvs > 0 )
		{
			key.parse( inputs[0].kvs[0]->key );
			OLM_T(LMT_User06, ("hit.reduceHitCounts: Processing '%s' with %lu entries", key.value.c_str(), inputs[0].num_kvs));
		}
		else if( inputs[1].num_kvs > 0)
			key.parse( inputs[1].kvs[0]->key );
		else
			tracer->setUserError("Running operation with any key-value at input 0 or input 1");

		//OLM_M(("Running reduce hits for %s with %lu / %lu kvs", key.value.c_str() , inputs[0].num_kvs , inputs[1].num_kvs ));
		//return;

		// Get the number of hits
		num_hits = 0;

		for( size_t i = 0 ; i < inputs[0].num_kvs ; i++ )
		{

			tmp_hits.parse( inputs[0].kvs[i]->value );
			num_hits += tmp_hits.value;
		}

		if( inputs[1].num_kvs == 0 )
		{
			OLM_T(LMT_User06, ("hit.reduceHitCounts: New word:'%s' with %lu count", key.value.c_str(), num_hits));
			hitCount.init( current_time , num_hits );
		}
		else if( inputs[1].num_kvs == 1)
		{
			hitCount.parse( inputs[1].kvs[0]->value );
			OLM_T(LMT_User06, ("hit.reduceHitCounts: Existing word:'%s' with %lu old count(%lu consolidated) + %lu count to %lu updated", key.value.c_str(), hitCount.current_hits.value, hitCount.hits.value, num_hits, hitCount.current_hits.value+num_hits));
			hitCount.update( current_time , num_hits );

		}
		else
		{
			char line[1024];
			sprintf(line , "There are more than one state information for this key: '%s'" , key.value.c_str());
			tracer->setUserError( line );
		}

		// Emit the state at the output if still we have state
		if( hitCount.hasContent() )
		{
			keyTime.value = 0; // It is this way in reduceHits
			hits.time.value = current_time;
			hits.hits.value = num_hits;
			hits.concept = key;
			writer->emit( 0, &keyTime, &hits);
			writer->emit( 1 , &key , &hitCount );
		}

	}

	void finish(samson::KVWriter *writer )
	{
		OLM_T(LMT_User06, ("reduceHitCounts::finish()\n"));
	}



};


} // end of namespace hit
} // end of namespace samson

#endif
