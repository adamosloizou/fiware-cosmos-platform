
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_hit_reduceHitCollections
#define _H_SAMSON_hit_reduceHitCollections


#include <samson/module/samson.h>
#include <samson/modules/hit/common.h>
#include <samson/modules/hit/Hit.h>
#include <samson/modules/hit/HitCollection.h>
#include <samson/modules/system/String.h>


namespace samson{
namespace hit{

   class HitCollectionManager
   {

   public:

	   samson::hit::Hit** top_hits;
	   size_t min_hits;


	   HitCollectionManager()
	   {
		  top_hits = (samson::hit::Hit**) malloc( sizeof(samson::hit::Hit*) * NUM_TOP_ITEMS );

		  for( int i = 0 ; i < NUM_TOP_ITEMS ; i++ )
		  {
             top_hits[i] = new samson::hit::Hit();	   
			 top_hits[i]->count.value = 0;
			 top_hits[i]->concept.value = "";
		  }
		  min_hits = 0;
	   }

	   ~HitCollectionManager()
	   {
		  for( int i = 0 ; i < NUM_TOP_ITEMS ; i++ )
             delete top_hits[i];
		  free( top_hits );
	   }

	   void add( samson::hit::Hit *hit )
	   {
		  if( hit->count.value < min_hits )
			 return;

		  // Check if we had this concept before, so just update the total acucmulated
		  for (int i = 0 ; i < NUM_TOP_ITEMS ; i++ )
			 if( top_hits[i]->concept.value == hit->concept.value )
			 {
				top_hits[i]->count.value += hit->count.value;
				return;
			 }

		  // Just look for the rigth place to update
		  int pos = 0;
		  while( ( pos < NUM_TOP_ITEMS ) && (top_hits[pos]->count.value > hit->count.value ) )
			 pos++;

		  if ( pos < NUM_TOP_ITEMS )
		  {
			 // Reserve the last one
			 samson::hit::Hit* tmp_hit = top_hits[ NUM_TOP_ITEMS - 1 ];

			 // Move necessary elements
			 for( int i = NUM_TOP_ITEMS-1 ; i >= pos ; i-- )
				top_hits[i] =  top_hits[i-1];
			 
			 // Put in place with updated values
			 top_hits[pos] = tmp_hit;
			 top_hits[pos]->copyFrom( hit );

		  }


	   }



   };
 


	class reduceHitCollections : public samson::Reduce
	{

	   samson::system::String concept;


	public:

	   reduceHitCollections()
	   {
	   }


	   ~reduceHitCollections()
	   {
	   }

//  INFO_MODULE
// If interface changes and you do not recreate this file, you will have to update this information (and of course, the module file)
// Please, do not remove this comments, as it will be used to check consistency on module declaration
//
//  input: system.String hit.Hit  
//  input: system.String hit.HitCollection  
//  output: system.String hit.HitCollection
//  output: system.String hit.HitCollection
// 
//  END_INFO_MODULE

		void init( samson::KVWriter *writer )
		{
		}

		void run( samson::KVSetStruct* inputs , samson::KVWriter *writer )
		{

		   HitCollectionManager manager;
		   
		   // Read the state to start
		   samson::hit::HitCollection hit_collection;

		   if( inputs[1].num_kvs > 0 )
		   {
			  concept.parse( inputs[1].kvs[0]->key );
			  hit_collection.parse( inputs[1].kvs[0]->value );

			  for (int i = 0 ; i < hit_collection.hits_length ; i++ )
				 manager.add( &hit_collection.hits[i] );

		   }
		   else
		   {
			  // take the concept from the first input
			  concept.parse( inputs[0].kvs[0]->key );
		   }


		   // Parse all the inputs
		   samson::hit::Hit hit;
		   for ( size_t i = 0 ; i < inputs[0].num_kvs ; i++ )
		   {
			  hit.parse( inputs[0].kvs[i]->value );
			  manager.add( &hit );
		   }


		   // Emit the top elements at the output
		   samson::hit::HitCollection output_hit_collection;
		   for (int i = 0 ; i < NUM_TOP_ITEMS ; i++ )
		   {
			  if( manager.top_hits[i]->count.value > 0 )
				 output_hit_collection.hitsAdd()->copyFrom( manager.top_hits[i] );
		   }

		   // Emitted at both channels 
		   writer->emit( 0 , &concept , &output_hit_collection );
		   writer->emit( 1 , &concept , &output_hit_collection );


		}

		void finish( samson::KVWriter *writer )
		{
		}



	};


} // end of namespace hit
} // end of namespace samson

#endif
