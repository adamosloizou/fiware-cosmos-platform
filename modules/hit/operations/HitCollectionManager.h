
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_HitCollectionManager
#define _H_SAMSON_HitCollectionManager


#include <samson/module/samson.h>
#include <samson/modules/hit/common.h>
#include <samson/modules/hit/Hit.h>
#include <samson/modules/hit/HitCollection.h>
#include <samson/modules/system/String.h>


namespace samson{
namespace hit{


   class HitCollectionManager
   {

   public:

	  std::string concept;	  
	  samson::hit::Hit** top_hits;

	  time_t reference_time_stamp;
	  
	  HitCollectionManager( std::string _concept )
	  {
		 concept = _concept;
		 reference_time_stamp = 0; // Init with 0 to make sure it is updated the first time
		 
		 top_hits = (samson::hit::Hit**) malloc( sizeof(samson::hit::Hit*) * NUM_TOP_ITEMS );
		 
		 for( int i = 0 ; i < NUM_TOP_ITEMS ; i++ )
		 {
			top_hits[i] = new samson::hit::Hit();	   
			top_hits[i]->init(  );
		 }
		 
	  }
	  
	   ~HitCollectionManager()
	   {
		  for( int i = 0 ; i < NUM_TOP_ITEMS ; i++ )
             delete top_hits[i];
		  free( top_hits );
	   }


	   void setTime( time_t new_reference_time_stamp )
	   {
		  for( int i = 0 ; i < NUM_TOP_ITEMS ; i++ )
			 top_hits[i]->setTime( new_reference_time_stamp );

		  reference_time_stamp = new_reference_time_stamp;
	   }

	   void add( samson::hit::Hit *hit  )
	   {
		  
		  // Upjust time
		  if ( hit->time.value > reference_time_stamp )
			 setTime( hit->time.value );
		  else
			 hit->setTime( reference_time_stamp );


		  if( hit->count.value < top_hits[NUM_TOP_ITEMS-1]->count.value )
			 return;

		  // Check if we had this concept before, so just update the total acucmulated
		  for (int i = 0 ; i < NUM_TOP_ITEMS ; i++ )
			 if( top_hits[i]->concept.value == hit->concept.value )
			 {				
   			   top_hits[i]->count.value = hit->count.value;
				
				return;
			 }

		  // Just look for the rigth place to update
		  int pos = 0;
		  while( ( pos < NUM_TOP_ITEMS ) && (top_hits[pos]->count.value > hit->count.value ) )
			 pos++;

		  if ( pos < NUM_TOP_ITEMS )
		  {
			 // Reserve the last one
			 samson::hit::Hit* tmp_hit = top_hits[ NUM_TOP_ITEMS - 1 ];

			 // Move necessary elements
			 for( int i = NUM_TOP_ITEMS-1 ; i >= pos ; i-- )
				top_hits[i] =  top_hits[i-1];
			 
			 // Put in place with updated values
			 top_hits[pos] = tmp_hit;
			 top_hits[pos]->copyFrom( hit );

		  }


	   }

	   
	   void emit_hits( samson::KVWriter* writer )
	   {
		  samson::system::String top_concept;
		  top_concept.value = concept;

		  for (int i = 0 ; i < NUM_TOP_ITEMS ; i++ )
			 if( top_hits[i]->count.value > 0 )
			 {
				top_concept.value = concept;
				writer->emit( 0 , &top_concept , top_hits[i] );
			 }
	   }

   };


   class MultiHitCollectionManager
   {

	  std::vector<HitCollectionManager*> managers;

   public:

	  void add( samson::hit::Hit *hit  )
	  {

		 std::string concept = hit->extractCategoryConcept();
		 add( concept.c_str() , hit ); 
	  }

	  void add( const char * concept , Hit* hit )
	  {

          // Just look for the rigth collection
		 for ( size_t i = 0 ; i < managers.size() ; i++ )
		 {
			if( managers[i]->concept == concept )
			{
			   managers[i]->add( hit );
			   return;
			}
		 }

		 // Create a new one at the end
		 HitCollectionManager*manager = new HitCollectionManager( concept );
		 manager->add( hit  );
		 managers.push_back( manager );

	  }

	  void emit_hits( samson::KVWriter* writer )
	  {
		 for ( size_t i = 0 ; i < managers.size() ; i++ )
			managers[i]->emit_hits( writer );
	  }

	  

   };
 

} // end of namespace hit
} // end of namespace samson

#endif
