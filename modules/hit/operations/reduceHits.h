
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_hit_reduceHits
#define _H_SAMSON_hit_reduceHits


#include <samson/module/samson.h>
#include <samson/modules/hit/Hit.h>
#include <samson/modules/system/String.h>
#include <samson/modules/system/UInt.h>


namespace samson{
namespace hit{



   size_t cannonical( size_t input )
   {
	  if ( input == 0 )
		 return 0;

	  int t=0;
	  while( input > 1000 )
	  {
		 input /= 10;
		 t++;
	  }

	  for ( int i = 0 ; i < t  ; i++)
		 input *= 10;

	  return input;
   }

   bool change_significantly( size_t from , size_t to )
   {
	  if( ( from == 0 ) && ( to != 0) )
		 return true;
	  if( ( from != 0 ) && ( to == 0) )
		 return true;

	  return ( cannonical( from ) != cannonical( to ) );
   }


	class reduceHits : public samson::Reduce
	{

	   samson::system::String concept;
	   samson::system::UInt count;
	   samson::system::UInt tmp_count;

	   // Outputs for the channel "0"
	   samson::system::String top_concept;
	   samson::hit::Hit hit;


	public:


//  INFO_MODULE
// If interface changes and you do not recreate this file, you will have to update this information (and of course, the module file)
// Please, do not remove this comments, as it will be used to check consistency on module declaration
//
//  input: system.String system.UInt  
//  input: system.String system.UInt  
//  output: system.String hit.Hit
//  output: system.String system.UInt
//  
// helpLine: Simple accumulator in stream mode
//  END_INFO_MODULE

		void init( samson::KVWriter *writer )
		{
		   std::ostringstream name;
		   name << "top_" << rand()%1000;
		   top_concept.value = name.str();
		}

		void run( samson::KVSetStruct* inputs , samson::KVWriter *writer )
		{
		   //OLM_M(("Running..."));
		   
		   if( inputs[1].num_kvs > 0 )
		   {
			  concept.parse( inputs[1].kvs[0]->key );
			  count.parse( inputs[1].kvs[0]->value );
		   }
		   else
		   {
			  concept.parse( inputs[0].kvs[0]->key );
			  count.value = 0;
		   }

		   // Keep the previous value to emit if it changed significantly...
		   size_t previous_value = count.value;

		   //OLM_M(("Processing %s %lu", concept.value.c_str() , count.value ));


		   // Take all input words into acocunt...
		   for ( size_t i = 0 ; i < inputs[0].num_kvs ; i++ )
		   {
			  tmp_count.parse( inputs[0].kvs[i]->value );
			  count.value += tmp_count.value;
		   }


		   // emit is changed....
		   if( change_significantly( previous_value , count.value ) )
		   {
			  //OLM_M(("Changed from %lu to %lu" , previous_value , count.value ));




			  hit.concept.value = concept.value;
			  hit.count.value = count.value;

			  writer->emit( 0 , &top_concept , &hit );		   


		   }


		   


		   //OLM_M(("Emiting %s %lu" , concept.value.c_str() ,  count.value ));
		   writer->emit( 1 , &concept , &count );

		}

		void finish( samson::KVWriter *writer )
		{
		}



	};


} // end of namespace hit
} // end of namespace samson

#endif
