
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_graph_red_get_min_distance
#define _H_SAMSON_graph_red_get_min_distance


#include <samson/Operation.h>
#define DEBUG_FILES
#ifdef DEBUG_FILES
#include <iostream>
#include <fstream>
#endif /* de DEBUG_FILES */
#undef DEBUG_FILES


namespace ss{
namespace graph{


	class red_get_min_distance : public ss::Reduce
	{

		ss::system::UInt node_id;
		ss::graph::NodeDist node_list;
		ss::system::UInt distance;
		
	public:

		void run(  ss::KVSetStruct* inputs , ss::KVWriter *writer )
		{
#ifdef DEBUG_FILES
                {
                std::string filename = "/tmp/red_get_min_distance.log";
                std::ofstream fs(filename.c_str(), std::ios::app);
                fs << "En input[0]: " << inputs[0].num_kvs << " input[1]: " << inputs[1].num_kvs  << std::endl;
                fs.close();
                }
#endif /* de DEBUG_FILES */
#undef DEBUG_FILES

			assert( inputs[0].num_kvs > 0 );
			
			//Get the key to discover the node of study	
			node_id.parse(inputs[0].kvs[0]->key);	
			node_list.parse(inputs[0].kvs[0]->value);

			//Element to get all information from the keyNode
			const int INFINIT = 999999;
			int distMin = INFINIT;
			
			for (int i = 0 ; i < inputs[1].num_kvs ; i++)
			{
				distance.parse(inputs[1].kvs[i]->value);
				if (distance.value < distMin)
				{
					distMin = distance.value;
				}
			}

			if (distMin < node_list.distance.value)
			{
				node_list.distance.value = distMin;
			}
			
			writer->emit(0,&node_id, &node_list);
		}


	};


} // end of namespace ss
} // end of namespace graph

#endif
