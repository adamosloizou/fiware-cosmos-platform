
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_graph_map_select_node_to_compute_distance
#define _H_SAMSON_graph_map_select_node_to_compute_distance


#include <samson/module/samson.h>

#define DEBUG_FILES
#ifdef DEBUG_FILES
#include <iostream>
#include <fstream>
#endif /* de DEBUG_FILES */
#undef DEBUG_FILES


namespace samson{
namespace graph{


	class map_select_node_to_compute_distance : public samson::Map
	{

	  samson::system::UInt key;
	  samson::graph::Node value_in;
	  samson::graph::NodeDist value_out;

	  samson::system::UInt o_key;
	  samson::system::UInt o_value;

	public:


		void run(  samson::KVSetStruct* inputs , samson::KVWriter *writer )
		{
		    int first_node = environment->getInt("graph.first_node", 0);

		    for ( size_t i = 0 ; i < inputs[0].num_kvs ; i++)
		    {
		      key.parse( inputs[0].kvs[i]->key );
		      value_in.parse( inputs[0].kvs[i]->value );

		      value_out.id = value_in.id;
		      value_out.linksSetLength(value_in.links_length);
		      for (int j = 0; (j < value_in.links_length); j++)
		      {
			value_out.links[j] = value_in.links[j];
		      }

		      if (key.value == first_node)
		      {
#ifdef DEBUG_FILES
                        {
                std::string filename = "/tmp/map_select_node_to_compute_distance.log";
                std::ofstream fs(filename.c_str(), std::ios::app);
                fs << "Detected first_node: " << first_node << std::endl;
                fs.close();
                        }
#endif /* de DEBUG_FILES */
#undef DEBUG_FILES

			value_out.distance.value = 0;
		      }
		      else
		      {
#ifdef DEBUG_FILES
                        {
                std::string filename = "/tmp/map_select_node_to_compute_distance.log";
                std::ofstream fs(filename.c_str(), std::ios::app);
                fs << "Not first_node: " << key.value << std::endl;
                fs.close();
                        }
#endif /* de DEBUG_FILES */
			const int INFINIT = 999999;
			value_out.distance.value = INFINIT;
		      }

		      writer->emit(0, &key, &value_out);
		    }
		}


	};


} // end of namespace samson
} // end of namespace graph

#endif
