
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_graph_parse_links
#define _H_SAMSON_graph_parse_links


#include <samson/module/samson.h>

#define DEBUG_FILES
#ifdef DEBUG_FILES
#include <iostream>
#include <fstream>
#endif /* de DEBUG_FILES */
#undef DEBUG_FILES



namespace samson{
namespace graph{

bool getLinkFromLine(char *line, samson::system::UInt* node, samson::graph::Link *link)
{
	char *pLine;
	char *pSep;

	pLine = line;

	if ((pSep = strchr(pLine, '|')) == NULL)
	{
#define DEBUG_FILES
#ifdef DEBUG_FILES
                {
                std::string filename = "/tmp/parse_links.log";
                std::ofstream fs(filename.c_str(), std::ios::app);
                fs << "Error in line: " << pLine << " No field delimiter found " << std::endl;
                fs.close();
                }
#endif /* de DEBUG_FILES */
#undef DEBUG_FILES

		return false;
	}
	*pSep = '\0';
	node->value = strtoll(pLine, NULL, 10);
	pLine = pSep + 1;

	if ((pSep = strchr(pLine, '|')) == NULL)
	{
#define DEBUG_FILES
#ifdef DEBUG_FILES
                {
                std::string filename = "/tmp/parse_links.log";
                std::ofstream fs(filename.c_str(), std::ios::app);
                fs << "Error in line: " << pLine << " No field delimiter found " << std::endl;
                fs.close();
                }
#endif /* de DEBUG_FILES */
#undef DEBUG_FILES

		return false;
	}
	*pSep = '\0';
	link->id.value = strtoll(pLine, NULL, 10);
	pLine = pSep + 1;

	link->weight.value = atof(pLine) * 100;

	return true;

}

	class parse_links : public samson::Parser
	{

	public:

		samson::system::UInt node;
		samson::graph::Link link;

		void run( char *data , size_t length , samson::KVWriter *writer )
		{
			size_t line_begin = 0;
			size_t offset = 0;

#ifdef DEBUG_FILES
                        {
                std::string filename = "/tmp/parse_links.log";
                std::ofstream fs(filename.c_str(), std::ios::app);
                fs << "Process length: " << length << std::endl;
                fs.close();
                        }
#endif /* de DEBUG_FILES */
#undef DEBUG_FILES
			
			while (offset < length)
			{
				if ((data[offset] == '\n') || (data[offset] == '\0'))
				{
					data[offset] = '\0';
					if (getLinkFromLine(data+line_begin, &node, &link))
					{
						writer->emit(0, &node, &link);

						// Emit the link in the other direction
						size_t tmp = link.id.value;
						link.id.value = node.value;
						node.value = tmp;
						writer->emit(0, &node, &link);


					}
					line_begin = offset+1;
				}
				offset++;
			}
			if (line_begin < (length-1))
			{
				data[length-1] = '\0';
				if (getLinkFromLine(data+line_begin, &node, &link))
				{
					writer->emit(0, &node, &link);
						// Emit the link in the other direction
						size_t tmp = link.id.value;
						link.id.value = node.value;
						node.value = tmp;
						writer->emit(0, &node, &link);
				}
			}
		}


	};


} // end of namespace samson
} // end of namespace graph

#endif
