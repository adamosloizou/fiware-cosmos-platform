
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_graph_map_send_distance_through_links
#define _H_SAMSON_graph_map_send_distance_through_links


#include <samson/module/samson.h>

#define DEBUG_FILES
#ifdef DEBUG_FILES
#include <iostream>
#include <fstream>
#endif /* de DEBUG_FILES */
#undef DEBUG_FILES


namespace samson{
namespace graph{


	class map_send_distance_through_links : public samson::Map
	{

	  samson::system::UInt key;
	  samson::graph::NodeDist value;

	  samson::system::UInt o_key;
	  samson::system::UInt o_value;

	public:


		void run(  samson::KVSetStruct* inputs , samson::KVWriter *writer )
		{

#ifdef DEBUG_FILES
                {
                std::string filename = "/tmp/map_send_distance_through_links.log";
                std::ofstream fs(filename.c_str(), std::ios::app);
                fs << "Treat nodes: " << inputs[0].num_kvs << std::endl;
                fs.close();
                }
#endif /* de DEBUG_FILES */
#undef DEBUG_FILES

		    if (inputs[0].num_kvs == 0)
		    {
			return;
		    }

		    for ( size_t i = 0 ; i < inputs[0].num_kvs ; i++)
		    {
		      key.parse( inputs[0].kvs[i]->key );
		      value.parse( inputs[0].kvs[i]->value );

		      writer->emit(0, &key, &value);

#ifdef DEBUG_FILES
                {
                std::string filename = "/tmp/map_send_distance_through_links.log";
                std::ofstream fs(filename.c_str(), std::ios::app);
                fs << "Emit node: " << key.value << " with links:  " << value.links_length << std::endl;
                fs.close();
                }
#endif /* de DEBUG_FILES */
#undef DEBUG_FILES

		      for (int j = 0; (j < value.links_length); j++)
		      {
		      	o_key = value.links[j].id;
			o_value.value = value.distance.value + 1;
#ifdef DEBUG_FILES
                {
                std::string filename = "/tmp/map_send_distance_through_links.log";
                std::ofstream fs(filename.c_str(), std::ios::app);
                fs << "Emit node: " << o_key.value << " distance:  " << o_value.value << std::endl;
                fs.close();
                }
#endif /* de DEBUG_FILES */
#undef DEBUG_FILES

		      	writer->emit(1, &o_key, &o_value);
		      }

		    }

		}


	};


} // end of namespace samson
} // end of namespace graph

#endif
