Module testcomparefunctions
{

	title	"testcomparefunctions  module"
	author 	"Gregorio Escalada (jges@tid.es)"
	version "0.1"
	
}

# ---------------------------------------------------------------------------
# datas
# ---------------------------------------------------------------------------

data Call
{
     system.UInt userId;
     system.UInt duration;
}

data Company
{
	system.UInt id;
	system.String name;
	optional testcomparefunctions.Address address;
}

data Address
{
	system.String street;
	system.UInt number;
	system.String city;
	system.UInt ZIP;
}

data User
{
     system.UInt id;
     system.String surname;
     optional testcomparefunctions.Address address;
     optional system.UInt8 age;
     system.UInt companyId;
     optional system.UInt expense;
}


# -------------------------------------------------
# Operations with data
# -------------------------------------------------

generator gen_calls
{
	out	system.UInt system.UInt

	helpLine "Generates call information userId-duration"
}

generator gen_users
{
	out	system.UInt testcomparefunctions.User

	helpLine "Generates user information userId-surname-company-age-expense"
}

generator gen_companys
{
	out	system.UInt testcomparefunctions.Company

	helpLine "Generates company information id-name-address"
}

parserOut export_users
{
	in system.UInt testcomparefunctions.User
}

parserOut print_select
{
	in system.UInt testcomparefunctions.User
}


map map_select
{
	in system.UInt testcomparefunctions.User
	out system.UInt system.UInt
}


reduce red_userExpense_by_company
{
	in system.UInt system.UInt
	in system.UInt testcomparefunctions.User
	out system.UInt testcomparefunctions.User
	out testcomparefunctions.User system.Void

	helpLine "Accumulates expense by user, and emits by user and userId"
}

parserOutReduce red_acumCompany
{
	in testcomparefunctions.User system.Void compareKeyFunction=compare_by_company

	helpLine "Accumulates expense by company, and prints it"
}

parserOutReduce red_expense_by_companyAge
{
	in system.UInt testcomparefunctions.User compareValueFunction=compare_by_age

	helpLine "For every company, prints expenses by age"
}

reduce red_top10_by_company
{
	in system.UInt testcomparefunctions.User compareValueFunction=compare_by_expense_rev
	out system.UInt testcomparefunctions.User

	helpLine "For every company, selects top10 expesense consumers"
}

parserOut export_top10_by_company
{
	in system.UInt testcomparefunctions.User

	helpLine "For every company, prints top10 expesense consumers"
}

parserOutReduce red_alphabetically_by_company
{
	in system.UInt testcomparefunctions.User compareValueFunction=compare_by_surname

	helpLine "For every company, prints top10 expesense consumers alphabetically"
}

script script_example
{
	out txt txt
	out txt txt
	out txt txt
	out txt txt

	helpLine "Script example"

	help
	{
		"help1"
	}

	code
	{
		#clear $1;	# Clear the output queue
		#clear $2;	# Clear the output queue
		#clear $3;	# Clear the output queue
		#clear $4;	# Clear the output queue
		#clear $5;	# Clear the output queue

		testcomparefunctions.gen_calls cdrs -create -clear;
		testcomparefunctions.gen_users users -create -clear;
		testcomparefunctions.export_users users $1 -create -clear;

		testcomparefunctions.red_userExpense_by_company cdrs users users.by_company users.filled -create -clear;
		testcomparefunctions.red_acumCompany users.filled $2 -create -clear;
		testcomparefunctions.red_expense_by_companyAge users.by_company $3 -create -clear;
		testcomparefunctions.red_top10_by_company users.by_company users.top10 -create -clear;
		testcomparefunctions.export_top10_by_company users.top10 $4 -create -clear;
		testcomparefunctions.red_alphabetically_by_company users.top10 $5 -create -clear;

		rm -f cdrs users users.by_company users.filled users.top10;
	}
}
