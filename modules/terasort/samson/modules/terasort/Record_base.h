
/**
 File autogenerated with samsonModuleParser, please do not edit
*/

#ifndef _H_SAMSON_terasort_Record_BASE
#define _H_SAMSON_terasort_Record_BASE


#include <samson/modules/system/String.h>


namespace samson{
namespace terasort{


	class Record_base : public samson::DataInstance{

	public:
	::samson::system::String keyf;
	::samson::system::String num_rec;
	::samson::system::String valf;

	Record_base() : samson::DataInstance(){
	}

	~Record_base() {
	}

	int parse(char *data){
		int offset=0;
		{ //Parsing keyf
			offset += keyf.parse(data+offset);
		}

		{ //Parsing num_rec
			offset += num_rec.parse(data+offset);
		}

		{ //Parsing valf
			offset += valf.parse(data+offset);
		}

		return offset;
	}

	int serialize(char *data){
		int offset=0;
		{ //Serializing keyf
			offset += keyf.serialize(data+offset);
		}

		{ //Serializing num_rec
			offset += num_rec.serialize(data+offset);
		}

		{ //Serializing valf
			offset += valf.serialize(data+offset);
		}

		return offset;
	}

	static inline int size(char *data){
		int offset=0;
		{ //Sizing keyf
			offset += ::samson::system::String::size(data+offset);
		}

		{ //Sizing num_rec
			offset += ::samson::system::String::size(data+offset);
		}

		{ //Sizing valf
			offset += ::samson::system::String::size(data+offset);
		}

		return offset;
	}

	int hash(int max_num_partitions){
		{ //Partitioning keyf
			return keyf.hash(max_num_partitions);
		}

	}

	inline static int compare(char * data1 , char *data2 , size_t *offset1 , size_t *offset2 ){
		{ // comparing keyf
			int tmp = ::samson::system::String::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  keyf compared 
		{ // comparing num_rec
			int tmp = ::samson::system::String::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  num_rec compared 
		{ // comparing valf
			int tmp = ::samson::system::String::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  valf compared 
		return 0; //If everything is equal
	}

	inline static int compare( char* data1 , char* data2 )
	{
		size_t offset_1=0;
		size_t offset_2=0;
		return compare( data1 , data2 , &offset_1 , &offset_2 );
	}





	void copyFrom( Record_base *other ){
		{ //Copying keyf
			keyf.copyFrom(&other->keyf);
		}

		{ //Copying num_rec
			num_rec.copyFrom(&other->num_rec);
		}

		{ //Copying valf
			valf.copyFrom(&other->valf);
		}

	};

	std::string str(){
		std::ostringstream o;
				{ //Texting keyf
			o << keyf.str();
		}

		o<<" ";
				{ //Texting num_rec
			o << num_rec.str();
		}

		o<<" ";
				{ //Texting valf
			o << valf.str();
		}

		o<<" ";
		return o.str();
	}

	}; //class Record_base

} // end of namespace samson
} // end of namespace terasort

#endif
