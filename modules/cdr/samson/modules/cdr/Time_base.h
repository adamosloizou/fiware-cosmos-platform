
/**
 File autogenerated with samsonModuleParser, please do not edit
*/

#ifndef _H_SAMSON_cdr_Time_BASE
#define _H_SAMSON_cdr_Time_BASE


#include <samson/modules/system/UInt8.h>


namespace ss{
namespace cdr{


	class Time_base : public ss::DataInstance{

	public:
	::ss::system::UInt8 hour;
	::ss::system::UInt8 minute;
	::ss::system::UInt8 seconds;

	Time_base() : ss::DataInstance(){
	}

	~Time_base() {
	}

	int parse(char *data){
		int offset=0;
		offset += hour.parse(data+offset);
		offset += minute.parse(data+offset);
		offset += seconds.parse(data+offset);
		return offset;
	}

	int serialize(char *data){
		int offset=0;
		offset += hour.serialize(data+offset);
		offset += minute.serialize(data+offset);
		offset += seconds.serialize(data+offset);
		return offset;
	}

	static inline int size(char *data){
		int offset=0;
		offset += ::ss::system::UInt8::size(data+offset);
		offset += ::ss::system::UInt8::size(data+offset);
		offset += ::ss::system::UInt8::size(data+offset);
		return offset;
	}

	int hash(int max_num_partitions){
		return hour.hash(max_num_partitions);
	}

	inline static int compare(char * data1 , char *data2 , size_t *offset1 , size_t *offset2 ){
		{ // comparing hour
			int tmp = ::ss::system::UInt8::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}
		{ // comparing minute
			int tmp = ::ss::system::UInt8::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}
		{ // comparing seconds
			int tmp = ::ss::system::UInt8::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}
		return 0; //If everything is equal
	}

	inline static int compare( char* data1 , char* data2 )
	{
		size_t offset_1=0;
		size_t offset_2=0;
		return compare( data1 , data2 , &offset_1 , &offset_2 );
	}

	void copyFrom( Time_base *other ){
		hour.copyFrom(&other->hour);
		minute.copyFrom(&other->minute);
		seconds.copyFrom(&other->seconds);
	};

	std::string str(){
		std::ostringstream o;
		o << hour.str();

		o<<" ";
		o << minute.str();

		o<<" ";
		o << seconds.str();

		o<<" ";
		return o.str();
	}

	}; //class Time_base

} // end of namespace ss
} // end of namespace cdr

#endif
