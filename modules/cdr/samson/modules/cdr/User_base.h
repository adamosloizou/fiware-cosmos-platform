
/**
 File autogenerated with samsonModuleParser, please do not edit
*/

#ifndef _H_SAMSON_cdr_User_BASE
#define _H_SAMSON_cdr_User_BASE


#include <samson/modules/cdr/Date.h>
#include <samson/modules/system/UInt.h>
#include <samson/modules/system/UInt8.h>


namespace ss{
namespace cdr{


	class User_base : public ss::DataInstance{

	public:
	::ss::system::UInt id;
	::ss::system::UInt titularId;
	::ss::system::UInt8 type;
	::ss::cdr::Date activationDate;
	::ss::system::UInt8 activationCode;
	::ss::system::UInt8 age;
	::ss::system::UInt8 province;
	::ss::system::UInt8 sex;
	::ss::cdr::Date churnDate;
	::ss::system::UInt8 churnCode;

	User_base() : ss::DataInstance(){
	}

	~User_base() {
	}

	int parse(char *data){
		int offset=0;
		offset += id.parse(data+offset);
		offset += titularId.parse(data+offset);
		offset += type.parse(data+offset);
		offset += activationDate.parse(data+offset);
		offset += activationCode.parse(data+offset);
		offset += age.parse(data+offset);
		offset += province.parse(data+offset);
		offset += sex.parse(data+offset);
		offset += churnDate.parse(data+offset);
		offset += churnCode.parse(data+offset);
		return offset;
	}

	int serialize(char *data){
		int offset=0;
		offset += id.serialize(data+offset);
		offset += titularId.serialize(data+offset);
		offset += type.serialize(data+offset);
		offset += activationDate.serialize(data+offset);
		offset += activationCode.serialize(data+offset);
		offset += age.serialize(data+offset);
		offset += province.serialize(data+offset);
		offset += sex.serialize(data+offset);
		offset += churnDate.serialize(data+offset);
		offset += churnCode.serialize(data+offset);
		return offset;
	}

	static inline int size(char *data){
		int offset=0;
		offset += ::ss::system::UInt::size(data+offset);
		offset += ::ss::system::UInt::size(data+offset);
		offset += ::ss::system::UInt8::size(data+offset);
		offset += ::ss::cdr::Date::size(data+offset);
		offset += ::ss::system::UInt8::size(data+offset);
		offset += ::ss::system::UInt8::size(data+offset);
		offset += ::ss::system::UInt8::size(data+offset);
		offset += ::ss::system::UInt8::size(data+offset);
		offset += ::ss::cdr::Date::size(data+offset);
		offset += ::ss::system::UInt8::size(data+offset);
		return offset;
	}

	int hash(int max_num_partitions){
		return id.hash(max_num_partitions);
	}

	inline static int compare(char * data1 , char *data2 , size_t *offset1 , size_t *offset2 ){
		{ // comparing id
			int tmp = ::ss::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}
		{ // comparing titularId
			int tmp = ::ss::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}
		{ // comparing type
			int tmp = ::ss::system::UInt8::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}
		{ // comparing activationDate
			int tmp = ::ss::cdr::Date::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}
		{ // comparing activationCode
			int tmp = ::ss::system::UInt8::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}
		{ // comparing age
			int tmp = ::ss::system::UInt8::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}
		{ // comparing province
			int tmp = ::ss::system::UInt8::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}
		{ // comparing sex
			int tmp = ::ss::system::UInt8::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}
		{ // comparing churnDate
			int tmp = ::ss::cdr::Date::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}
		{ // comparing churnCode
			int tmp = ::ss::system::UInt8::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}
		return 0; //If everything is equal
	}

	inline static int compare( char* data1 , char* data2 )
	{
		size_t offset_1=0;
		size_t offset_2=0;
		return compare( data1 , data2 , &offset_1 , &offset_2 );
	}

	void copyFrom( User_base *other ){
		id.copyFrom(&other->id);
		titularId.copyFrom(&other->titularId);
		type.copyFrom(&other->type);
		activationDate.copyFrom(&other->activationDate);
		activationCode.copyFrom(&other->activationCode);
		age.copyFrom(&other->age);
		province.copyFrom(&other->province);
		sex.copyFrom(&other->sex);
		churnDate.copyFrom(&other->churnDate);
		churnCode.copyFrom(&other->churnCode);
	};

	std::string str(){
		std::ostringstream o;
		o << id.str();

		o<<" ";
		o << titularId.str();

		o<<" ";
		o << type.str();

		o<<" ";
		o << activationDate.str();

		o<<" ";
		o << activationCode.str();

		o<<" ";
		o << age.str();

		o<<" ";
		o << province.str();

		o<<" ";
		o << sex.str();

		o<<" ";
		o << churnDate.str();

		o<<" ";
		o << churnCode.str();

		o<<" ";
		return o.str();
	}

	}; //class User_base

} // end of namespace ss
} // end of namespace cdr

#endif
