
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_webp_parse_web_logs
#define _H_SAMSON_webp_parse_web_logs


#include <samson/module/samson.h>
#include <samson/modules/system/String.h>
#include <samson/modules/system/SimpleParser.h>
#include <samson/modules/webp/Log.h>

#include "comscore/SamsonComscoreDictionary.h"

namespace samson{
namespace webp{


   class parse_web_logs : public samson::system::SimpleParser
	{

	   std::vector<char*> fields;
	   samson::webp::Log log;

	   samson::comscore::SamsonComscoreDictionary samson_comscore_dictionary;

	public:


//  INFO_MODULE
// If interface changes and you do not recreate this file, you will have to update this information (and of course, the module file)
// Please, do not remove this comments, as it will be used to check consistency on module declaration
//
//  output: system.String webp.Log
//  output: system.String system.Void
//  
//  extendedHelp: 		Parse web logs
//  		Output: [ user Log ]
// 
//  END_INFO_MODULE

		void init( samson::KVWriter *writer )
		{
		   samson_comscore_dictionary.read( "/var/comscore/samson_comscore_dictionary.bin" );
		}

		void parseLine( char * line , samson::KVWriter *writer )
		{
		   split_in_words( line, fields, '\t');

		   if( fields.size() < 9 )
			  return; // Wrong format

		   //printf("User %s\n" , fields[0]);
		   //printf("Url %s\n" , fields[3]);
		   //printf("Time %s/%s/%s\n" , fields[6] , fields[7] , fields[8] );

		   int day   = atoi(  fields[6] );
		   int month = atoi(  fields[6] );
		   int year  = atoi(  fields[6] );

		   log.user.value = fields[0];
		   log.url.value = fields[3];
		   log.time.setFromDayMonthYear( day , month , year );

		   // Find categories for this url
		   log.categoriesSetLength(0); // Remove categories from previous entries

		   std::vector<uint> categories = samson_comscore_dictionary.getCategories( fields[3] );
		   
		   for ( size_t i = 0 ; i < categories.size() ; i++ )
		   {
			  webp::Category *category = log.categoriesAdd();

			  category->id.value = categories[i];
			  category->name.value = samson_comscore_dictionary.getCategoryName( categories[i] );
		   }

		   writer->emit( 0 , &log.user , &log );

		}

		void finish( samson::KVWriter *writer )
		{
		}



	};


} // end of namespace webp
} // end of namespace samson

#endif
