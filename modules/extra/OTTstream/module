Module OTTstream
{

	title	"OTTstream  module"
	author 	"Gregorio Escalada (jges@tid.es)"
	version "0.1"
	
}

# ---------------------------------------------------------------------------
# datas
# ---------------------------------------------------------------------------

data ServiceHit
{
	 system.TimeUnix timestamp;
     system.UInt serviceId;    
}

data User
{
    system.UInt userId;
    system.UInt clusterId;
}

data UserHit
{
     system.TimeUnix timestamp;
     OTTstream.User user;
}

data ServiceActivity
{
     system.UInt serviceId;
     system.TimeUnix timestamp;
     system.UInt8 inCount;
}

data UserActivity
{
     OTTstream.User user;
     system.TimeUnix last_timestamp;
     system.UInt count;
}

data UserActivityTimeSpan
{
     system.UInt userId;
     system.UInt countHits;
}

data ActivityByUser
{
	vector OTTstream.ServiceActivity servActivity;
	vector OTTstream.Sequence sequences;
}

data ActivityByService
{
	vector OTTstream.UserActivity user_activity;
}

data SeqComponent
{
	system.UInt expected_serviceId;
	system.TimeUnix timestamp;
	system.UInt8 fulfilled;
}

data Sequence
{
	system.UInt sequenceId;
	system.String sequence_name;
	vector OTTstream.SeqComponent events;
	system.UInt8 next_event_to_fulfill;
	system.UInt time_window;
	system.Int8 cloned;
	system.Int8 clonable;
	system.Int8 strict;
}

# -------------------------------------------------
# Operations with data
# -------------------------------------------------

simpleParser parse_logs
{
	out system.UInt OTTstream.ServiceHit
	out system.UInt system.String
	out system.String system.UInt
	
	helpLine "parse input logs from http or dns, and emit service use with userId as key, user with service as key, and can also process commands"
}

simpleParser parse_user_cluster
{
    out system.UInt system.UInt
    
    helpLine "Parse user classification by OTT clusters"
}

reduce red_class_by_cluster
{
    in system.UInt OTTstream.ServiceHit
    in system.UInt system.UInt
    out system.UInt OTTstream.UserHit
    
    helpLine "Reduce with user classification to add clusterId information"
}

reduce red_update_last_user_profile
{
	in system.UInt OTTstream.ServiceHit
	in system.UInt  OTTstream.ActivityByUser
	out system.String level.ValTimed
	out system.UInt OTTstream.ServiceHit
	out system.UInt OTTstream.ActivityByUser
	
	helpLine "Update the latest user profile" 
}

reduce red_update_service_profile
{
	in system.UInt OTTstream.UserHit
	in system.UInt OTTstream.ActivityByService
	out system.UInt OTTstream.ActivityByService
	
	helpLine "Update the latest user profile" 
}

reduce red_commands_on_service_profile
{
	in system.UInt system.String
	in system.UInt OTTstream.ActivityByService
	out system.UInt OTTstream.UserActivity
	
	helpLine "Update the latest user profile" 
}

parserOut publish_alerts_on_services
{
    in system.UInt OTTstream.UserActivity
    
    helpLine "Offers a textual representation of alerts generated at red_commands_on_service_profile"
}

script init_stream_operations
{
    code
    {
        # ----------------------------------------------------------------
		# Input queues
		# ----------------------------------------------------------------
        
        alias [input_http]           logs_http;
        alias [input_dns]        	 logs_dns;
        alias [input_sms]           logs_sms;
        alias [input_voice]         logs_voice;
        alias [input_user_cluster]     input_user_cluster;
        alias [input_commands] input_commands;
        
        # ----------------------------------------------------------------
		# Output queues
		# ----------------------------------------------------------------
		alias [level_commands]			level_commands;
		alias [service_users_txt]			service_users_txt;
		alias [category_hits]			category_hits;
        
		# ----------------------------------------------------------------
		# Internal queues
		# ----------------------------------------------------------------
        
        alias [service_hits]              service_hits;
        alias [service_hits_filtered]   service_hits_filtered;
        alias [user_clusters]           user_clusters;
        alias [service_hits_w_cluster] service_hits_w_cluster;
        alias [user_hits]              user_hits;
        alias [url_hits]				url_hits;
        alias [user_state]            user_state;
        alias [service_state]            service_state;
        alias [service_commands] service_commands;
        alias [service_users]           service_users;
        
        # ----------------------------------------------------------------
		# Operations
		# ----------------------------------------------------------------
        
        alias [parse_http]       		parse_http;
        alias [parse_dns]       		parse_dns;
        alias [parse_sms]       		parse_sms;
        alias [parse_voice]       		parse_voice;
        alias [parse_clusters]        parse_clusters;
        alias [red_user_cluster]    red_user_cluster;
        alias [parse_commands]         parse_commands;
        alias [emit_service_levels]		emit_service_levels;
        alias [publish_alerts]                publish_alerts;
        alias [update_service_state]	update_service_state;
        alias  [emit_service_users]		 emit_service_users;
        alias [filter_urls]					filter_urls;
 
        # ----------------------------------------------------------------
		# Definitions
		# ----------------------------------------------------------------
        
        add_stream_operation      [parse_http]			OTTstream.parse_logs									[input_http]       [service_hits] [service_commands] [url_hits];
        set_stream_operation_property   [parse_http]      OTTstream.source          HTTP;
        add_stream_operation      [parse_dns]			OTTstream.parse_logs									[input_dns]   		[service_hits] [service_commands] [url_hits];
        set_stream_operation_property   [parse_dns]      OTTstream.source          DNS;
        add_stream_operation      [parse_sms]			OTTstream.parse_logs									[input_sms]   		[service_hits] [service_commands] [url_hits];
        set_stream_operation_property   [parse_sms]      OTTstream.source          SMS;
        add_stream_operation      [parse_voice]			OTTstream.parse_logs									[input_voice]   		[service_hits] [service_commands] [url_hits];
        set_stream_operation_property   [parse_voice]      OTTstream.source          voice;
        
        add_stream_operation      [parse_clusters]         OTTstream.parse_user_cluster         [input_user_cluster] [user_clusters];
            
        add_stream_operation      [emit_service_levels]			OTTstream.red_update_last_user_profile	[service_hits] [user_state]		[level_commands] [service_hits_filtered] [user_state];
        set_stream_operation_property [emit_service_levels] OTTstream.timespan 300;
        set_queue_property [level_commands] max_size 10;
        
        add_stream_operation     [red_user_cluster]      OTTstream.red_class_by_cluster     [service_hits_filtered] [user_clusters] [user_hits] -forward;
        
        add_stream_operation      [update_service_state]			OTTstream.red_update_service_profile	[user_hits] [service_state]	[service_state];
        
        add_stream_operation      [parse_commands]          OTTstream.parse_logs                                    [input_commands]         [service_hits] [service_commands] [url_hits];
        set_stream_operation_property   [parse_commands]      OTTstream.source          commands;
        set_queue_property [service_commands] max_size 1;
        
        add_stream_operation      [emit_service_users]          OTTstream.red_commands_on_service_profile [service_commands] [service_state] [service_users] -forward;
        add_stream_operation      [publish_alerts]                   OTTstream.publish_alerts_on_services [service_users] [service_users_txt];
        
        add_stream_operation [filter_urls] webp.emit_hits_for_urls	[url_hits] [category_hits];

    }

    helpLine "Init stream operations"
}

script demo
{
    code
    {
        #remove_all_stream;

		# ----------------------------------------------------------------
		# Input queues
		# ----------------------------------------------------------------        
		alias [input_http]      logs_http;
        alias [input_dns]      logs_dns;
        alias [input_sms]      logs_sms;
        alias [input_voice]    logs_voice;
        alias [input_clusters]     input_user_cluster;
        alias [input_commands]    input_commands;
		# ----------------------------------------------------------------
		
		# ----------------------------------------------------------------
		# Output queues
		# ----------------------------------------------------------------
		alias [output_levels]			output_levels;
		alias [output_users_per_service]			output_users_per_service;
		alias [output_topics]			output_topics;
		
		# Internal queues
        alias [level_commands]              level_commands;
        alias [category_hits_hits]				category_hits;
		
		# ----------------------------------------------------------------
		# OTTstream profiling stream block
		# ----------------------------------------------------------------
        init_stream 01.OTTstream    OTTstream.init_stream_operations;
        
        # Connect with the level module to keep uptated the number of users active in last timespan, for every service        
		init_stream 02.level level.init_stream_operations_timed;
		
		add_queue_connection [input_http]		01.OTTstream.logs_http;
		add_queue_connection [input_dns]		01.OTTstream.logs_dns;
		add_queue_connection [input_sms]		01.OTTstream.logs_sms;
		add_queue_connection [input_voice]		01.OTTstream.logs_voice;
		add_queue_connection [input_clusters]        01.OTTstream.input_user_cluster;
		add_queue_connection [input_commands]		01.OTTstream.input_commands;
		add_queue_connection [level_commands]		01.OTTstream.level_commands;
		add_queue_connection 01.OTTstream.service_users_txt output_users_per_service;
		add_queue_connection 01.OTTstream.level_commands 	02.level.01.input;
		add_queue_connection 02.level.04.levels_updates_txt    output_levels;
		
		#Connect with the hit stream_block to accumulate topics
		init_stream 03.hit hit.init_stream_operations;
		
		add_queue_connection category_hits 01.OTTstream.category_hits;
		add_queue_connection 01.OTTstream.category_hits 03.hit.01.input;
		add_queue_connection 03.hit.31.output_tops_txt output_topics;
		
		# ----------------------------------------------------------------

    }

    helpLine "Demo about web profiling"
}


