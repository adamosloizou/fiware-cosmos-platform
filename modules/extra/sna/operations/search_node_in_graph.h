
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_sna_search_node_in_graph
#define _H_SAMSON_sna_search_node_in_graph


#include <samson/module/samson.h>

#include "sna_environment_parameters.h"


namespace samson{
namespace sna{


	class search_node_in_graph : public samson::Map
	{
		Node node ;
		samson::system::UInt nodeId, searchId ;

	public:

		void init(samson::KVWriter *writer)
		{
			std::string nodeIdStr = environment->get(SNA_PARAMETER_NODEIDSTR, SNA_PARAMETER_NODEIDSTR_DEFAULT);

			if( nodeIdStr.compare(SNA_PARAMETER_NODEIDSTR_DEFAULT) != 0)
			{
				searchId.value = atoll(nodeIdStr.c_str());
				OLM_T(LMT_User01, ("Searching for node:%d", searchId.value));
			}
			else
			{
				OLM_E(("Required parameter not found: nodeId(%s)", SNA_PARAMETER_NODEIDSTR_DEFAULT));
				return;
			}
		}

		void run(  samson::KVSetStruct* inputs , samson::KVWriter *writer )
		{

			for (size_t i = 0; i < inputs[0].num_kvs; i++)
			{
				nodeId.parse(inputs[0].kvs[i]->key);
				if (nodeId.value == searchId.value)
				{
					node.parse(inputs[0].kvs[i]->value);
					writer->emit(0, &nodeId, &node);
				}
			}
		}


	};


} // end of namespace samson
} // end of namespace sna

#endif
