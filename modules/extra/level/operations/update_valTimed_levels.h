
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_level_update_valTimed_levels
#define _H_SAMSON_level_update_valTimed_levels


#include <samson/module/samson.h>
#include <samson/modules/level/ValTimed.h>
#include <samson/modules/system/Int32.h>
#include <samson/modules/system/String.h>


namespace samson{
namespace level{


	class update_valTimed_levels : public samson::Reduce
	{

	public:


//  INFO_MODULE
// If interface changes and you do not recreate this file, you will have to update this information (and of course, the module file)
// Please, do not remove this comments, as it will be used to check consistency on module declaration
//
//  input: system.String level.ValTimed  
//  input: system.String level.ValTimed  
//  output: system.String level.ValTimed
//  output: system.String level.ValTimed
//  
// helpLine: Update Level with incomming values. Accumulated value is emitted at two outputs
//  END_INFO_MODULE

		void init( samson::KVWriter *writer )
		{
		}

		void run( samson::KVSetStruct* inputs , samson::KVWriter *writer )
		{
			   samson::system::String key;
			   samson::level::ValTimed tmp;
			   samson::system::Int32 intValue;
			   samson::level::ValTimed state;

			   if ( inputs[0].num_kvs > 0 )
				  key.parse( inputs[0].kvs[0]->key );
			   else
				  key.parse( inputs[1].kvs[0]->key );

			   // Init value
			   intValue.value = 0;
			   state.val.value = 0;
			   state.t.value = 0;

			   // First, we read the state. Only one value should appear
			   if (inputs[1].num_kvs > 1)
			   {
				   LM_W(("Warning, more than one value in state for key:%s", key.value.c_str()));
			   }
			   for ( size_t i = 0 ; i < inputs[1].num_kvs ; i++ )
			   {
				  state.parse( inputs[1].kvs[i]->value );
				  intValue.value += state.val.value;
				  //LM_M(("Reading state for key:%s, time:%s, count:%d", key.value.c_str(), state.t.str().c_str(), state.val.value));
			   }

			   for ( size_t i = 0 ; i < inputs[0].num_kvs ; i++ )
			   {
				  tmp.parse( inputs[0].kvs[i]->value );
				  if (tmp.val.value != 1)
				  {
					  //LM_M(("At hit:%s, for key:%s,  count:%d, before:%d, after:%d", tmp.t.str().c_str(), key.value.c_str(), tmp.val.value, intValue.value, intValue.value + tmp.val.value ));
				  }
				  intValue.value += tmp.val.value;
				  state.val.value = intValue.value;
				  if (tmp.t.value > state.t.value)
				  {
					  //LM_M(("Emit count:%d for key:%s at time:%s", intValue.value, key.value.c_str(), state.t.str().c_str()));
					  //writer->emit( 0 , &key , &tmp );
					  state.t.value = tmp.t.value;
				  }
			   }
			   //tmp.val.value = intValue.value;
			   //tmp.t.value = firstTime.value;

			   //LM_M(("Update state for key:%s, count:%d", key.value.c_str(), state.t.str().c_str(), state.val.value));
			   writer->emit( 0 , &key , &state );
			   writer->emit( 1 , &key , &state );
		}

		void finish( samson::KVWriter *writer )
		{
		}



	};


} // end of namespace level
} // end of namespace samson

#endif
