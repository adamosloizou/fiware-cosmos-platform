
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
 */

#ifndef _H_SAMSON_passive_location_get_mobility_cell_records
#define _H_SAMSON_passive_location_get_mobility_cell_records


#include <samson/module/samson.h>
#include <samson/modules/mobility/CellRecord.h>
#include <samson/modules/passive_location/Record.h>
#include <samson/modules/system/UInt.h>
#include <samson/modules/system/UInt32.h>


namespace samson{
namespace passive_location{


class get_mobility_cell_records : public samson::Map
{
    samson::system::UInt user;                 // Input key userId (msisdn)
    samson::passive_location::Record record;   // Input record
    samson::mobility::CellRecord cell_record;  // Output record

public:


#ifdef INFO_COMMENT //Just to include a comment without conflicting anything
    // If interface changes and you do not recreate this file, consider updating this information (and of course, the module file)

    input: system.UInt passive_location.Record
    output: system.UInt32 mobility.CellRecord

    helpLine: Transform passive_location.Record into a mobility.CellRecord
#endif // de INFO_COMMENT

    void init( samson::KVWriter *writer )
    {
    }

    void run( samson::KVSetStruct* inputs , samson::KVWriter *writer )
    {
        user.parse(inputs[0].kvs[0]->key);
        //LM_M(("Processing %lu records for user:%lu", inputs[0].num_kvs, user.value));

        for (uint64_t i=0 ; i<inputs[0].num_kvs ; i++)
        {
            record.parse( inputs[0].kvs[i]->value );

            cell_record.userId.value    = record.msisdn.value;
            cell_record.timestamp.value = record.timestamp.value;
            cell_record.cellId.value    = record.cellId.value;

            // Emit with cell_id as a key to be joined with the cell catalogue
            writer->emit( 0 , &(cell_record.cellId) , &cell_record );
        }
    }

    void finish( samson::KVWriter *writer )
    {
    }



};


} // end of namespace passive_location
} // end of namespace samson

#endif
