Module passive_location
{
	title	"Passive Location pilot ( mongoDB connection )"
	author	"Andreu & Ken mail:<andreu@tid.es>"
	version "0.3"
}

data Record
{
	system.UInt     imsi;
	system.UInt     imei;
	system.UInt		msisdn;
	system.TimeUnix timestamp;
	system.UInt32   cellId; 
	system.UInt16   callType;
	system.UInt8    DRType; 
}

data Cell
{
	system.UInt32      cellId;
	system.UInt8       type;
	mobility.Position  position;
}

data User
{
	system.UInt	       msisdn;
	system.UInt	       imsi;
	system.UInt	       imei;
}

data CompleteTMSI
{
	system.UInt   tmsi;
	system.UInt16 LAC;
}

data IMSIbyTime
{
system.TimeUnix timestamp;
system.UInt     imsi;
}

data DailyActivity
{
	system.UInt32 day;
	system.UInt hits;
}

data LocActivity
{
	system.UInt32 cellId;
	vector passive_location.DailyActivity dayActivity;
}

data LocActivityHistory
{
	system.UInt32 last_cellId;
	vector passive_location.LocActivity loc;
}

data UserLocActivityState
{
	passive_location.LocActivityHistory home;
	passive_location.LocActivityHistory work;
}

# ------------------------------------------------------------
# Parse input data (from Arcanum) to generate passive_location.Record 
# ------------------------------------------------------------

parser parse_xml_cdrs
{
	out system.UInt passive_location.Record                     # Emitted with key = imsi
	out passive_location.CompleteTMSI passive_location.Record   # Whem imsi = 0, emitted with key = tmsi
	out system.UInt passive_location.Record                     # If no cellId or LAC is parsed in the record
	out passive_location.CompleteTMSI passive_location.IMSIbyTime               # Queue to recover imsi from tmsi

	helpLine "Parse input cdrs from Arkanum platform. Note that output key is imsi for the first output,when imsi is avalilable. If imsi == 0, sent to second output with imei"
}


# ------------------------------------------------------------
# Parse input data (from Tektronix probes) to generate passive_location.Record 
# ------------------------------------------------------------

parser parse_tek_drs
{
	out system.UInt passive_location.Record                     # Emitted with key = imsi
	out passive_location.CompleteTMSI passive_location.Record   # Whem imsi = 0, emitted with key = tmsi
	out system.UInt passive_location.Record                     # If no cellId or LAC is parsed in the record
	out passive_location.CompleteTMSI passive_location.IMSIbyTime               # Queue to recover imsi from tmsi
	out passive_location.CompleteTMSI passive_location.CompleteTMSI               # Queue to update tmsi
	out system.String system.UInt                               # Queue for general info

	helpLine "Parse input binary OHDRs from Tektroniks platform (probes). Note that output key is imsi"
}



# ------------------------------------------------------------
# Parse cell's table
# ------------------------------------------------------------

parser parse_cell_info
{
	out system.UInt32 passive_location.Cell

	helpLine "Parse input txt file containing cell information( latitude & longitude ). Key is cellId composed of ((LAC left_desp 16) | cellID)"
}

# ------------------------------------------------------------
# Parse User's table
# ------------------------------------------------------------

parser parse_user_info
{
	out system.UInt passive_location.User  # Emitted with key = imsi
	out system.UInt passive_location.User  # Emitted with key = imei

	helpLine "Parse input txt file containing user info to extract msisdn from imsi. key is imsi"
}

# ------------------------------------------------------------
# Update tmsi-imsi table with new tmsi/old tmsi info
# ------------------------------------------------------------

reduce update_tmsi_imsi_table_with_new_tmsi
{
	in passive_location.CompleteTMSI passive_location.CompleteTMSI  # oldTMSI newTMSI
	in passive_location.CompleteTMSI passive_location.IMSIbyTime  # tmsi-imsi table

	out passive_location.CompleteTMSI passive_location.IMSIbyTime  # tmsi-imsi table

	helpLine "Update the table to translate to recover imsi from tmsi, with oldTMSI/newTMSI pairs"
}

# ------------------------------------------------------------
# Update tmsi-imsi table
# ------------------------------------------------------------

reduce update_tmsi_imsi_table
{
	in passive_location.CompleteTMSI passive_location.IMSIbyTime    # Info from records
	in passive_location.CompleteTMSI passive_location.IMSIbyTime  # tmsi-imsi table

	out passive_location.CompleteTMSI passive_location.IMSIbyTime  # tmsi-imsi table

	helpLine "Update the table to translate to recover imsi from tmsi"
}

# ------------------------------------------------------------
# Join of location records with imsi == 0, to recover it from tmsi
# ------------------------------------------------------------

reduce reduce_user_imsi_by_tmsi
{
	in passive_location.CompleteTMSI passive_location.Record   # Whem imsi = 0, emitted with key = tmsi
	in passive_location.CompleteTMSI passive_location.IMSIbyTime               # Queue to recover imsi from tmsi

	out	system.UInt passive_location.Record                     # Records ( key = msisdn )
	out passive_location.CompleteTMSI passive_location.Record   # Recovering records with a non-existing tmsi, to try later
	out system.UInt passive_location.Record                     # Records with a non-existing tmsi (key = imei) (both imei == 0 and imei != 0, because no recovering from imei)

	helpLine "Extract imsi info from tmsi_imsi table, based on previous records"
}


# ------------------------------------------------------------
# Join of location records with user info from table, to extract MSISDN, from imsi info
# ------------------------------------------------------------

reduce reduce_user_msisdn_by_imsi
{
	in system.UInt  passive_location.Record   # Records (key = imsi)
	in system.UInt  passive_location.User     # User    (key = imsi)

	out	system.UInt passive_location.Record   # Records ( key = msisdn )
	out system.UInt passive_location.Record   # Records with a non-existing imsi (key = imsi)

	helpLine "Extract msisdn info from user table, based on imsi"
}

# ------------------------------------------------------------
# Join of location records with user info from table, to extract MSISDN, from imei info
# ------------------------------------------------------------

reduce reduce_user_msisdn_by_imei
{
	in system.UInt  passive_location.Record   # Records (key = imei)
	in system.UInt  passive_location.User     # User    (key = imei)

	out	system.UInt passive_location.Record   # Records ( key = msisdn )
	out system.UInt passive_location.Record   # Records with a non-existing imsi (key = imei)

	helpLine "Extract msisdn info from user table, based on imei"
}

# ------------------------------------------------------------
# Map of location records to reduce the amount of data sent to mongo
# ------------------------------------------------------------

map get_mobility_cell_records
{
	in system.UInt passive_location.Record
	
	out system.UInt32 mobility.CellRecord

	helpLine "Transform passive_location.Record into a mobility.CellRecord"
}


# ------------------------------------------------------------
# Join of mobility.Cellrecord with cell info from table 
# ------------------------------------------------------------

reduce reduce_cell_latitude_longitude
{
	in 	system.UInt32 mobility.CellRecord	  # CellRecords ( key = cellID )
	in 	system.UInt32 passive_location.Cell   # Cell information

	out	system.UInt mobility.Record		    # Records ( key = userId )
	out system.UInt32 mobility.CellRecord   # Records with a non-existing cell-id (key = cellId)

	helpLine "Add lat-lon information to Records. Note that key at the input is cellid,key at the output user-id"
}

# ------------------------------------------------------------
# To keep alive the last queue
# ------------------------------------------------------------

parserOut dummy_output
{
	in system.UInt mobility.Record
	
	helpLine "dummy parserOut to have access to the queue"
}

# ------------------------------------------------------------
# Import data from MongoDB
# ------------------------------------------------------------

generator mongo_location_import
{
	out system.UInt mobility.Record

	helpLine "Import passive location data from a mongoDb server at 'mongo.ip' from table 'mongo.table'"
}


generator mongo_latlong_import
{
	out system.UInt mobility.Record
	helpLine "Import passive location 'latlong' data from a mongoDb server at 'mongo.ip' from table 'mongo.table'"
}

# ------------------------------------------------------------
# Export data from MongoDB
# ------------------------------------------------------------

map mongo_location_export
{
	in system.UInt mobility.Record
	helpLine "Export passive location data to a mongoDb server at 'mongo' to table 'mongo_table'"
}


# ------------------------------------------------------------
# Script to init stream operations
# ------------------------------------------------------------


# -------------------------------------------------------------
# Estimate home/work cellId, in streaming, with a UserLocActivityState
# -------------------------------------------------------------

reduce eval_location
{
	in system.UInt mobility.Record                        # Records bkuped from the mongo history stream
	in system.UInt passive_location.UserLocActivityState  # input state with stored activity, per user
	out system.UInt system.StringVector                   # commands to simple_mobility module
	out system.UInt passive_location.UserLocActivityState  # Updated state with stored activity, per user
	
	helpLine "Estimate home/work cellId, in streaming, with a UserLocActivityState"
}





script init_stream_operations
{
	code
	{
		# Queues;

		alias [cells.txt]   00.in_cells;
		alias [users.txt]   00.in_users;
		alias [cells]       01.cells;		
		alias [users_imsi]  01.users_by_imsi;
		alias [users_imei]  01.users_by_imei;
		alias [xml.txt]     02.in_xml_cdrs;
		alias [tek.txt]     02.in_tek_cdrs;
		
		alias [info]        020.info;
		
		alias [tmsi_imsi]   021.tmsi_imsi;
		alias [new_tmsi]    022.new_tmsi;
		alias [tmsi_table]   023.tmsi_table;
		
		alias [records]            030.records_by_msisdn;
		alias [records_imsi0]    031.imsi0;
		alias [records_cellid0]  032.cellid0;
				
		alias [records_cell]          040.records_by_cellid;	
		alias [nouser_imsi_from_tmsi]        041.nouser_imsi_from_tmsi;	
		alias [nouser_msisdn_from_imsi]      042.nouser_msisdn_from_imsi;	
		alias [redrecords]         043.redrecords_by_cell;			
		
		alias [redrecords_history]          200.records_history;
		alias [redrecords_lkl]          200.redrecords_lkl;
		alias [redrecords_nocell]      201.redrecords_no_cell_join;	
		
		alias [loc_state]             300.loc_state;
		alias [loc_commands]          301.loc_commands;
		
		# Operations;

       alias [parse_cell]          00.parse_cell;
       alias [parse_user]          00.parse_user;

		alias [parser_xml]          01.parser_xml_cdrs;
		alias [parser_tek]          01.parser_tek_drs;
		
		alias [update_tmsi]         10.update_tmsi;
		alias [update_tmsi_new]     11.update_tmsi_new;
		alias [join_tmsi_imsi]      19.join_tmsi_imsi;
		alias [join_imsi_msisdn]    20.join_imsi_msisdn;
		alias [join_imei_msisdn]    21.join_imei_msisdn;
		alias [get_cell_records]    25.get_mobility_cell_records;
		alias [join_cells]          26.mobility_records;
		alias [export_history]      30.export_mongo;
		alias [export_lkl]          31.export_mongo_lkl;
		alias [eval_location]       40.eval_location;
		
		alias [q5] 20.users;
		alias [q6] 30.messages;
		alias [q7] 99.level.01.input;
		
		# Operations;

		alias [o3] 50.reduce_commands;
		alias [o4] 51.reduce_cdrs;
		

		add_stream_operation  [parse_cell]        passive_location.parse_cell_info                [cells.txt]       [cells];
		add_stream_operation  [parse_user]        passive_location.parse_user_info                [users.txt]       [users_imsi] [users_imei];

		add_stream_operation  [parser_xml]        passive_location.parse_xml_cdrs                 [xml.txt]              [records] [records_imsi0] [records_cellid0] [tmsi_imsi];
		add_stream_operation  [parser_tek]        passive_location.parse_tek_drs                  [tek.txt]             [records],[records].bkup_tek  [records_imsi0],[records_imsi0].bkup [records_cellid0],[records_cellid0].bkup [tmsi_imsi],[tmsi_imsi].bkup [new_tmsi],[new_tmsi].bkup [info];

		add_stream_operation  [update_tmsi]        passive_location.update_tmsi_imsi_table                  [tmsi_imsi] [tmsi_table]            [tmsi_table];
		#set_stream_operation_property   [update_tmsi]  pl.tmps_age.timespan         86400;  # Keeping only mappings younger than 1 day (24 * 3600)
		#add_stream_operation  [update_tmsi_new]    passive_location.update_tmsi_imsi_table_with_new_tmsi                  [new_tmsi] [tmsi_table]            [tmsi_table];
		#set_stream_operation_property   [update_tmsi_new]  pl.tmps_age.timespan         86400;  # Keeping only mappings younger than 1 day (24 * 3600)

		add_stream_operation  [join_tmsi_imsi]    passive_location.reduce_user_imsi_by_tmsi        [records_imsi0] [tmsi_table]           [records],[records].bkup_tmsi [records_imsi0].reinjected [nouser_imsi_from_tmsi] -forward;
		#set_stream_operation_property   [join_tmsi_imsi]  pl.record_retry.timespan  86400;  # Retrying only records younger than 1 day (24 * 3600)
		set_stream_operation_property   [join_tmsi_imsi] pl.TMSI.timespan 3600; # Apply TMSI->IMSI only when closer than 1 hour
		
		add_stream_operation  [join_imsi_msisdn]   passive_location.reduce_user_msisdn_by_imsi     [records] [users_imsi]          [records_cell] [nouser_msisdn_from_imsi] -forward;
		#add_stream_operation  [join_imei_msisdn]  passive_location.reduce_user_msisdn_by_imei     [nouser_imsi] [users_imei]         [records_cell] [records_noimsi_noimei] -forward;
		
		add_stream_operation  [get_cell_records]  passive_location.get_mobility_cell_records      [records_cell]              [redrecords],[redrecords].bkup;
		add_stream_operation  [join_cells]        passive_location.reduce_cell_latitude_longitude [redrecords] [cells]     [redrecords_history],[redrecords_lkl],[redrecords_history].1,[redrecords_history].2,[redrecords_history].bkup [redrecords_nocell] -forward;
		#add_stream_operation  [export_history]    passive_location.mongo_location_export          [redrecords_history];
		#add_stream_operation  [export_lkl]        passive_location.mongo_location_export          [redrecords_lkl];

		#set_stream_operation_property   [export_history]      mongo.ip                  samson05;  #TID's cluster
		#set_stream_operation_property   [export_history]      mongo.ip                  localhost;  #PassiveLocation cluster
		#set_stream_operation_property   [export_history]      mongo.db                  PassiveLocation;
		#set_stream_operation_property   [export_history]      mongo.collection          History;

		#set_stream_operation_property   [export_lkl]  mongo.ip                  samson08;  #TID's cluster
		#set_stream_operation_property   [export_lkl]  mongo.ip                  localhost; 	#PassiveLocation cluster	
		#set_stream_operation_property   [export_lkl]  mongo.db                  PassiveLocation;
		#set_stream_operation_property   [export_lkl]  mongo.collection          LastKnownLocation;
		#set_stream_operation_property   [export_lkl]  mongo.history             0;
		
		add_stream_operation [eval_location] passive_location.eval_location [redrecords_history].2 [loc_state]        [loc_commands],[loc_commands].bkup [loc_state];
		#set_stream_operation_property [eval_location] pasloc.conf.ref_day 4400;
		set_stream_operation_property [eval_location] pasloc.conf.window_length_in_days 120;
		
		# From simple_mobility module	
		# Definitions;

		add_stream_operation [o3]  simple_mobility.reduce_commands    [loc_commands] [q5]   [q6] [q7] [q5];
		add_stream_operation [o4]  simple_mobility.reduce_cdrs        [redrecords_history].1 [q5]   [q6] [q7] [q5];

		#set_queue_property [q6] max_size 1;

		# Connect with the level module to keep uptated the number of users at home/word...
		init_stream 99.level level.init_stream_operations;
		
    }
}


script demo
{
	code
	{
		remove_all_stream;
		init_stream passive_location.init_stream_operations;
	}
}


