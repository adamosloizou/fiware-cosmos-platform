
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_mob2_cluster_agg_potPoi_pois
#define _H_SAMSON_mob2_cluster_agg_potPoi_pois


#include <samson/module/samson.h>
#include <samson/modules/mob2/Cluster.h>
#include <samson/modules/mob2/Poi.h>
#include <samson/modules/mob2/TwoInt.h>
#include <samson/modules/system/UInt.h>
#include <samson/modules/system/Void.h>


namespace samson{
namespace mob2{


	class cluster_agg_potPoi_pois : public samson::Reduce
	{
		//Inputs
		TwoInt nodbts;
		Poi poi;
		Cluster cluster;
		//Outputs
		samson::system::UInt bts;

	public:


#ifdef INFO_COMMENT //Just to include a comment without conflicting anything
// If interface changes and you do not recreate this file, consider updating this information (and of course, the module file)

input: mob2.TwoInt mob2.Poi  
input: mob2.TwoInt mob2.Cluster  
input: mob2.TwoInt system.Void  
output: system.UInt mob2.Poi
output: mob2.TwoInt mob2.Cluster

extendedHelp: 		Aggregate the potential pois labeled to all pois
		Input 0: all pois
		Input 1: client communications vector
		Input 2: potential pois

#endif // de INFO_COMMENT

		void init(samson::KVWriter *writer )
		{
		}

		void run(  samson::KVSetStruct* inputs , samson::KVWriter *writer )
		{
			nodbts.parse(inputs[0].kvs[0]->key);
			poi.parse(inputs[0].kvs[0]->value);
			cluster.parse(inputs[1].kvs[0]->value);

			if(inputs[2].num_kvs > 0)	// Exists the potential poi
			{
				poi.confidentnodebts.value = cluster.confident.value = 1;
			}
			bts.value = poi.bts.value;
			writer->emit(0, &bts,&poi);
			writer->emit(1, &nodbts,&cluster);
		}

		void finish(samson::KVWriter *writer )
		{
		}



	};


} // end of namespace mob2
} // end of namespace samson

#endif
