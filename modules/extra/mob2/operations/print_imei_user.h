
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
 */

#ifndef _H_SAMSON_mob2_print_imei_user
#define _H_SAMSON_mob2_print_imei_user


#include <samson/module/samson.h>
#include <samson/modules/system/TimeUnix.h>
#include <samson/modules/system/UInt.h>


namespace samson{
namespace mob2{


class print_imei_user : public samson::ParserOutReduce
{
	//Inputs
	samson::system::UInt node;
	samson::system::UInt imei;

#ifdef MAX_STR_LEN
#undef MAX_STR_LEN
#endif
#define MAX_STR_LEN 1024
	char output[MAX_STR_LEN];

public:


#ifdef INFO_COMMENT //Just to include a comment without conflicting anything
	// If interface changes and you do not recreate this file, consider updating this information (and of course, the module file)

	input: system.UInt system.UInt

	extendedHelp: 		For IMEI, prints users (more than one, if neccesary)

#endif // de INFO_COMMENT

	void init(TXTWriter *writer )
	{
	}

	void run(KVSetStruct* inputs , TXTWriter *writer )
	{
		int total = 0;
		uint64_t prev_node = 0;
		int num_nodes = 0;

		if (inputs[0].num_kvs == 0)
		{
			return;
		}
		imei.parse(inputs[0].kvs[0]->key);
		total = snprintf(output, MAX_STR_LEN, "%lu", imei.value);
		for (uint64_t i = 0; (i < inputs[0].num_kvs); i++)
		{
			node.parse(inputs[0].kvs[i]->value);
			if (node.value != prev_node)
			{
				total += snprintf(output + total, MAX_STR_LEN-total, "|%lu", node.value);
				num_nodes++;
				if (total > (MAX_STR_LEN-30))
				{
					break;
				}
				prev_node = node.value;
			}
		}
		total += snprintf(output + total, MAX_STR_LEN-total, "|%d\n", num_nodes);
		writer->emit(output);
	}

	void finish(TXTWriter *writer )
	{
	}



};


} // end of namespace mob2
} // end of namespace samson

#endif
