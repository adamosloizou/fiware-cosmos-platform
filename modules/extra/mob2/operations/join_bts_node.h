
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
 */

#ifndef _H_SAMSON_mob2_join_bts_node
#define _H_SAMSON_mob2_join_bts_node


#include <samson/module/samson.h>
#include <samson/modules/cdr/CellPos.h>
#include <samson/modules/cdr/mobCdr.h>
#include <samson/modules/mob2/Node_Bts.h>
#include <samson/modules/mob2/TelMonth.h>
#include <samson/modules/mob2/TwoInt.h>
#include <samson/modules/system/UInt.h>
#include <samson/modules/system/UInt32.h>
#include <samson/modules/system/Void.h>
#include <samson/modules/system/DateComplete.h>
#include <samson/modules/system/Time.h>
#include <stdint.h>


#define DEBUG_FILES
#ifdef DEBUG_FILES
#include <iostream>
#include <fstream>
#endif /* de DEBUG_FILES */
#undef DEBUG_FILES


namespace samson{
namespace mob2{


class join_bts_node : public samson::Reduce
{
	// Inputs
	samson::system::UInt32 cellId;
	samson::system::UInt node;
	samson::cdr::mobCdr cdr;
	samson::cdr::CellPos cell;
	// Outputs
	Node_Bts node_bts;
	samson::system::Void mr_void;
	samson::system::UInt bts;
	TwoInt dayrange; //num1: bts             num2: range
	TelMonth telmonth;
	// Local variables to handle weekday
	samson::system::DateComplete lDate;
	samson::system::Time lTime;


public:


#ifdef INFO_COMMENT //Just to include a comment without conflicting anything
	// If interface changes and you do not recreate this file, consider updating this information (and of course, the module file)

	input: system.UInt32 cdr.mobCdr
	input: system.UInt32 cdr.CellPos
	output: mob2.Node_Bts system.Void
	output: system.UInt mob2.TwoInt
	output: system.UInt cdr.mobCdr
	output: mob2.TelMonth cdr.CellPos

	extendedHelp: 		Change the cell id by bts id
	Input 0: cdrs
	Input 1: cell catalogue
	Output 0: node, bts, wday and range - void
	Output 1: bts - wday and range
	Output 2: cellId - cdr
	Output 3: telMonth - cell

#endif // de INFO_COMMENT

	void init(samson::KVWriter *writer )
	{
	}

	////////
	// Substitute cell by bts
	////////

	void run(  samson::KVSetStruct* inputs , samson::KVWriter *writer )
	{

#define DEBUG_FILES
#ifdef DEBUG_FILES
			{
				std::string filename = "/tmp/join_bts_node.log";
				std::ofstream fs(filename.c_str(), std::ios::app);
				fs << "inputs[0].num_kvs:" << inputs[0].num_kvs << ", inputs[1].num_kvs:" << inputs[1].num_kvs << std::endl;
				fs.close();
			}
#endif /* de DEBUG_FILES */
#undef DEBUG_FILES

		if(inputs[1].num_kvs == 0) // Cell is not in the catalogue
		{
			cdr.parse(inputs[0].kvs[0]->value);
			//OLM_T(LMT_User06, ("Cell %d is not in catalogue, inputs[0].num_kvs:%lu", cdr.cellId.value, inputs[0].num_kvs));
			for(uint64_t i=0; i<inputs[0].num_kvs; i++)
			{
				cdr.parse(inputs[0].kvs[i]->value);
				node.value = cdr.phone.value;
				writer->emit(2, &node,&cdr);
			}
		}
		else
		{
			cellId.parse(inputs[1].kvs[0]->key);
			cell.parse(inputs[1].kvs[0]->value);
			if (inputs[1].num_kvs > 1)
			{
				OLM_E(("Error, Cell %d in catalogue, inputs[0].num_kvs:%lu, inputs[1].num_kvs:%lu", cellId.value, inputs[0].num_kvs, inputs[1].num_kvs));
			}
			else
			{
				for(uint64_t i=0; i<inputs[0].num_kvs; i++)
				{
					cdr.parse(inputs[0].kvs[i]->value);
					///////////// POINTS OF INTEREST /////////////
					node_bts.phone.value = cdr.phone.value;
					bts.value = node_bts.bts.value = cell.bts.value;
					cdr.timeUnix.getDateTimeFromTimeUTC(&lDate, &lTime);

					node_bts.wday.value = lDate.week_day.value;
#define SUNDAY_INDEX 0
#define SATURDAY_INDEX 6
#define FRIDAY_INDEX 5

					if(node_bts.wday.value == SUNDAY_INDEX)          // Group 3: Sunday
					{
						dayrange.num1.value = 3;
					}
					else if(node_bts.wday.value == FRIDAY_INDEX)     // Group 1: Friday
					{
						dayrange.num1.value = 1;
					}
					else if(node_bts.wday.value == SATURDAY_INDEX)     // Group 2: Saturday
					{
						dayrange.num1.value = 2;
					}
					else                                            // Group 0: Monday-Thursday
					{
						dayrange.num1.value = 0;
					}
					dayrange.num2.value = node_bts.range.value = lTime.hour.value;
					writer->emit(0, &node_bts,&mr_void);
					writer->emit(1, &bts,&dayrange);

					////////// INDIVIDUAL VARIABLES /////////
					telmonth.phone.value = cdr.phone.value;
					telmonth.month.value = lDate.month.value;
					int hour = lTime.hour.value;
					if( (node_bts.wday.value == SUNDAY_INDEX || node_bts.wday.value == SATURDAY_INDEX)||(node_bts.wday.value == FRIDAY_INDEX && hour >= 18)) // Weekend
					{
						telmonth.workingday.value = 0;
					}
					else // Working day
					{
						telmonth.workingday.value = 1;
					}
					writer->emit(3, &telmonth,&cell);
				}
			}
		}

	}

	void finish(samson::KVWriter *writer )
	{
	}



};


} // end of namespace mob2
} // end of namespace samson

#endif
