
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
 */

#ifndef _H_SAMSON_mob2_vector_create_node_dayhour
#define _H_SAMSON_mob2_vector_create_node_dayhour


#include <samson/module/samson.h>
#include <samson/modules/mob2/DailyVector.h>
#include <samson/modules/mob2/Node_Bts.h>
#include <samson/modules/mob2/TwoInt.h>



namespace samson{
namespace mob2{


class vector_create_node_dayhour : public samson::Reduce
{
	//Inputs
	Node_Bts inkey;
	TwoInt hour_comms;
	//Outputs
	TwoInt nodbts;   // num1: node   num2: bts
	DailyVector clusvector;

public:


#ifdef INFO_COMMENT //Just to include a comment without conflicting anything
	// If interface changes and you do not recreate this file, consider updating this information (and of course, the module file)

	input: mob2.Node_Bts mob2.TwoInt
	output: mob2.TwoInt mob2.DailyVector

	extendedHelp: 		Create the vector of node comms by day and hour

#endif // de INFO_COMMENT

	void init(samson::KVWriter *writer )
	{
	}

	void run(  samson::KVSetStruct* inputs , samson::KVWriter *writer )
	{
		if (inputs[0].num_kvs == 0)
		{
			return;
		}

		// TODO: Optimize with clusvector.hoursSetLength(24);

		inkey.parse(inputs[0].kvs[0]->key);
		clusvector.hoursSetLength(0);

		for(unsigned int i=0; i<24; i++)
		{
			bool added = false;

			for(uint64_t j=0; j<inputs[0].num_kvs; j++)
			{
				hour_comms.parse(inputs[0].kvs[j]->value);
				if(hour_comms.num1.value == i)
				{
					added = true;
					break;
				}
			}
			if(!added)
			{
				hour_comms.num2.value = 0;
			}
			hour_comms.num1.value = inkey.wday.value;
			clusvector.hoursAdd()->copyFrom(&hour_comms);
		}
		nodbts.num1.value = inkey.phone.value;
		nodbts.num2.value = inkey.bts.value;
		writer->emit(0, &nodbts,&clusvector);
	}

	void finish(samson::KVWriter *writer )
	{
	}



};


} // end of namespace mob2
} // end of namespace samson

#endif
