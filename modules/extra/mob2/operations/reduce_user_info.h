
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_mob2_reduce_user_info
#define _H_SAMSON_mob2_reduce_user_info


#include <samson/module/samson.h>
#include <samson/modules/mob2/UserState.h>
#include <samson/modules/system/UInt.h>


namespace samson{
namespace mob2{


	class reduce_user_info : public samson::Reduce
	{
		//Inputs
		samson::system::UInt node;
		samson::mob2::UserState infoUser;

		//State: Input & Output
		samson::mob2::UserState state;
	public:


#ifdef INFO_COMMENT //Just to include a comment without conflicting anything
// If interface changes and you do not recreate this file, consider updating this information (and of course, the module file)

input: system.UInt mob2.UserState  
input: system.UInt mob2.UserState  
output: system.UInt mob2.UserState
output: system.UInt mob2.UserState

helpLine: Updates last position and imei information for every user, and detects changes in imei
#endif // de INFO_COMMENT

		void init(samson::KVWriter *writer )
		{
		}

		void run(  samson::KVSetStruct* inputs , samson::KVWriter *writer )
		{
			if (inputs[0].num_kvs == 0)
			{
				// No new information about user
				// We have to reemit the state
				if (inputs[1].num_kvs > 0)
				{
					node.parse(inputs[1].kvs[0]->key);
					for (uint64_t j = 0; (j < inputs[1].num_kvs); j++)
					{
						state.parse(inputs[1].kvs[j]->value);
						writer->emit(1, &node, &state);
					}
				}
				return;
			}

			node.parse(inputs[0].kvs[0]->key);

			if (inputs[1].num_kvs > 1)
			{
				OLM_E(("Error, more than one state(%lu) per user:%lu", inputs[1].num_kvs, node.value));

				// We have to reemit the state
				for (uint64_t j = 0; (j < inputs[1].num_kvs); j++)
				{
					state.parse(inputs[1].kvs[j]->value);
					writer->emit(1, &node, &state);
				}
				return;
			}

			if (inputs[1].num_kvs == 0)
			{
				// We had not yet information about this user
				infoUser.parse(inputs[0].kvs[0]->value);

					//OLM_T(LMT_User06, ("New user:%lu detected, with infoUser.emei:%lu", node.value, infoUser.imei.value));
					state.imei.value = infoUser.imei.value;
					state.position.cell.value = infoUser.position.cell.value;
					state.position.time = infoUser.position.time;

			}
			else
			{
				//OLM_T(LMT_User06, ("Existing user:%lu detected", node.value));
				state.parse(inputs[1].kvs[0]->value);
			}

			for (uint64_t i = 0; (i < inputs[0].num_kvs); i++)
			{
				infoUser.parse(inputs[0].kvs[i]->value);

				if ((infoUser.imei.value != 0) && (state.imei.value != 0) && (infoUser.imei.value != state.imei.value))
				{

						OLM_E(("User:%lu. Detected different imei(%lu) from state.imei(%lu). info.cell(%d), state.cell(%d), info.time(%s), state.time(%s). at i:%lu of %lu", node.value, infoUser.imei.value, state.imei.value, infoUser.position.cell.value, state.position.cell.value, infoUser.position.time.str().c_str(), state.position.time.str().c_str(), i, inputs[0].num_kvs));
						state.imei.value = infoUser.imei.value;
						writer->emit(0, &node, &infoUser);
				}
				if (infoUser.position.cell.value != 0)
				{
					state.position.cell.value = infoUser.position.cell.value;
				}
				if (infoUser.imei.value != 0)
				{
					state.imei.value = infoUser.imei.value;
				}
				state.position.time = infoUser.position.time;
			}
			writer->emit(1, &node, &state);
		}

		void finish(samson::KVWriter *writer )
		{
		}



	};


} // end of namespace mob2
} // end of namespace samson

#endif
