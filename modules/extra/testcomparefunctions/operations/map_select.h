
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_testcomparefunctions_map_select
#define _H_SAMSON_testcomparefunctions_map_select


#include <samson/module/samson.h>


namespace samson{
namespace testcomparefunctions{


	class map_select : public samson::Map
	{

	public:
                std::string selectedFieldStr;
                int *selectedFieldIntP;



#ifdef INFO_COMMENT //Just to include a comment without conflicting anything
// If interface changes and you do not recreate this file, consider updating this information (and of course, the module file)

input: system.UInt testcomparefunctions.User  
output: system.UInt system.UInt

#endif // de INFO_COMMENT

		void init(samson::KVWriter *writer )
		{
                        OLM_T(LMT_User06,("map_select::init()"));
                        selectedFieldStr = environment->get("selectedFieldStr", "User.surname");
                        OLM_T(LMT_User06,("map_select::init() selectedFieldStr:'%s'\n", selectedFieldStr.c_str()));
                        selectedFieldIntP = User::getDataPathStatic(selectedFieldStr);
                        if (selectedFieldIntP == NULL)
                        {
                                OLM_E(("map_select::init(): Error getting path for selectedFieldStr:'%s'\n", selectedFieldStr.c_str()));
                        }
                        else
                        {
                                OLM_T(LMT_User06,("print_select::init() selectedFieldIntP:"));
                                int i = 0;
                                while (selectedFieldIntP[i] != -1)
                                {
                                        OLM_T(LMT_User06,("%d, ", selectedFieldIntP[i]));
                                        i++;
                                }
                                OLM_T(LMT_User06,("%d\n", selectedFieldIntP[i]));
                        }

                        OLM_T(LMT_User06,("map_select::init() selectedFieldIntP:"));
                        int i = 0;
                        while (selectedFieldIntP[i] != -1)
                        {
                                OLM_T(LMT_User06,("%d, ", selectedFieldIntP[i]));
                                i++;
                        }
                        OLM_T(LMT_User06,("%d\n", selectedFieldIntP[i]));
		}

		void run(  samson::KVSetStruct* inputs , samson::KVWriter *writer )
		{
			system::UInt key;
                        User user;
                        DataInstance *dataInstance;

                        for (size_t i = 0; (i < inputs[0].num_kvs); i++)
                        {
                                key.parse(inputs[0].kvs[i]->key);
                                user.parse(inputs[0].kvs[i]->value);
                                dataInstance = user.getDataInstanceFromPath(selectedFieldIntP);
                                if (dataInstance != NULL)
                                {
					OLM_T(LMT_User06,("map_select::run(): Emit key:%d, field:'%s'\n", key.value, dataInstance->str().c_str()));
                                        writer->emit(0, &key, dataInstance );
                                }
                                else
                                {
					OLM_W(("map_select::run(): Empty instance for '%s', key:%lu\n", selectedFieldStr.c_str(), key.value));
                                }
                        }
		}

		void finish(samson::KVWriter *writer )
		{
			OLM_T(LMT_User06,("map_select::finish()"));
			free(selectedFieldIntP);
		}



	};


} // end of namespace samson
} // end of namespace testcomparefunctions

#endif
