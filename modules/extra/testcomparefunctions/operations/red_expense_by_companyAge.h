
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_testcomparefunctions_red_expense_by_companyAge
#define _H_SAMSON_testcomparefunctions_red_expense_by_companyAge


#include <samson/module/samson.h>


namespace samson{
namespace testcomparefunctions{


	class red_expense_by_companyAge : public samson::ParserOutReduce
	{

	public:


#ifdef INFO_COMMENT //Just to include a comment without conflicting anything
// If interface changes and you do not recreate this file, consider updating this information (and of course, the module file)

input: system.UInt testcomparefunctions.User  compareValueFunction=compare_by_age

helpLine: For every company, prints expenses by age
#endif // de INFO_COMMENT


#ifdef MAX_STR_LEN
#undef MAX_STR_LEN
#endif
// Max line to be output
#define MAX_STR_LEN 2048
    char line[MAX_STR_LEN];

    		void init( TXTWriter *writer)
		{
			OLM_T(LMT_User06, ("class red_expense_by_companyAge : public samson::ParserOutReduce: init()\n"));
			writer->emit("Hello, world!\n");
		}

		void run(KVSetStruct* inputs , TXTWriter *writer )
		{
			system::UInt companyId;
			User user;
			int ageGroup;
			int prevAgeGroup;
			size_t expense;
			size_t acumExpense;

			OLM_T(LMT_User06, ("Starts with inputs[0].num_kvs:%d\n", inputs[0].num_kvs));
			if (inputs[0].num_kvs < 1)
			{
				OLM_E(("No users for this companies group\n"));
				return;
			}

			companyId.parse(inputs[0].kvs[0]->key);
			user.parse(inputs[0].kvs[0]->value);

			if (user.age_GetAssigned())
			{
				prevAgeGroup = user.age.value / 10;
			}
			else
			{
				prevAgeGroup = -1;
			}
			if (user.expense_GetAssigned())
			{
				acumExpense = user.expense.value;
			}
			else
			{
				acumExpense = 0;
			}

			for (size_t i = 1 ; i < inputs[0].num_kvs ; i++ )
			{
				user.parse(inputs[0].kvs[i]->value);
				if (user.age_GetAssigned())
				{
					ageGroup = user.age.value / 10;
				}
				else
				{
					ageGroup = -1;
				}

				if (user.expense_GetAssigned())
				{
					expense = user.expense.value;
				}
				else
				{
					expense = 0;
				}

				if (ageGroup == prevAgeGroup)
				{
					acumExpense += expense;
				}
				else
				{
					snprintf( line , MAX_STR_LEN, "companyId:%lu, ageGroup:%d, expense:%lu\n", companyId.value, prevAgeGroup, acumExpense );
					writer->emit( line );

					acumExpense = expense;
					prevAgeGroup = ageGroup;
				}
			}
			snprintf( line , MAX_STR_LEN, "companyId:%lu, ageGroup:%d, expense:%lu\n", companyId.value, prevAgeGroup, acumExpense );
			writer->emit( line );
		}

    		void finish(TXTWriter *writer)
		{
			OLM_T(LMT_User06, ("class red_expense_by_companyAge : public samson::ParserOutReduce: finish()\n"));
			writer->emit("That's all, folks\n");
		}
	};


} // end of namespace samson
} // end of namespace testcomparefunctions

#endif
