
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_sna_social_graph_out
#define _H_SAMSON_sna_social_graph_out


#include <samson/module/samson.h>
#include "sna_environment_parameters.h"
#include <iostream>
#include <sstream>


namespace samson{
namespace snalight{


	class social_graph_out : public samson::ParserOut
	{
		bool duplicates ;
		bool extern_mark ;
		char* sep ;

#ifdef MAX_STR_LEN
#undef MAX_STR_LEN
#endif

#define MAX_STR_LEN 1024
			char output[MAX_STR_LEN];


	public:

		void init(samson::KVWriter *writer ){

			  const char * def = "|";

			  sep = strdup(environment->get("sna.separator", def).c_str());

				std::string duplicatesStr = environment->get(SNA_FLAG_DUPLICATES, SNA_FLAG_DUPLICATES_DEFAULT);

				std::string extern_markStr = environment->get(SNA_FLAG_EXTERN_MARK, SNA_FLAG_EXTERN_MARK);

		  if( duplicatesStr.compare(SNA_FLAG_TRUE) == 0)
		    duplicates = true;
		  else
		    duplicates = false;

				  if( extern_markStr.compare(SNA_FLAG_TRUE) == 0)
					  extern_mark = true;
				  else
				    extern_mark = false;

		}


		void run(KVSetStruct* inputs , TXTWriter *writer )
		{
			  Node node_data;

			  for (size_t i  =0 ;  i< inputs[0].num_kvs ; i++) {
			    node_data.parse( inputs[0].kvs[i]->value );

			    for (int j = 0 ; j < node_data.links_length ; j++) {
			      if(duplicates || node_data.id.value < node_data.links[j].id.value){

				        if(extern_mark)
				        {
				        	snprintf(output, MAX_STR_LEN, "%lu|%lu|%.2f|%.2f|%lu\n", node_data.id.value, node_data.links[j].id.value, node_data.links[j].getWeight(), node_data.links[j].dir.value, (node_data.isExtern()?(long unsigned int)0:(long unsigned int)1));
				        }
				        else
				        {
				        	snprintf(output, MAX_STR_LEN, "%lu|%lu|%.2f|%.2f\n", node_data.id.value, node_data.links[j].id.value, node_data.links[j].getWeight(), node_data.links[j].dir.value);
				        }
					    writer->emit(output);

			      }
			    }

			  }
			  return;
		}

#ifdef RUNFINISH

		int MACRO_sna_social_graph_out::parseOutFinish( FILE *file) {
		  int total = 0;

		  total += fprintf(file, "nu1%s", sep);
		  total += fprintf(file, "nu2%s", sep);
		  total += fprintf(file, "weigth%s", sep);
		  total += fprintf(file, "dir");

		  if(extern_mark){
		    total += fprintf(file, "%sextern", sep);
		  }

		  total += fprintf(file, "\n");

		  free(sep);

		  return total;
		}

#endif


	};


} // end of namespace samson
} // end of namespace snalight

#endif
