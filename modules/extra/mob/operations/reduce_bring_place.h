
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
 */

#ifndef _H_SAMSON_mob_reduce_bring_place
#define _H_SAMSON_mob_reduce_bring_place


#include <samson/module/samson.h>


namespace samson{
namespace mob{


class reduce_bring_place : public samson::Reduce
{

public:

	// Input[0k] & Output[0k]
	samson::system::UInt phone;
	// Input[0v]
	samson::system::UInt number_days;
	// Input[1234v]
	LocCounter locCounter;
	// Output[0v]
	Place place;

#ifdef INFO_COMMENT //Just to include a comment without conflicting anything
	// If interface changes and you do not recreate this file, consider updating this information (and of course, the module file)

	input: system.UInt system.UInt
	input: system.UInt mob.LocCounter
	input: system.UInt mob.LocCounter
	input: system.UInt mob.LocCounter
	input: system.UInt mob.LocCounter
	output: system.UInt mob.Place

	helpLine: Bring together all the information about the place of home/work.
	extendedHelp: 		Bring together all the information about the place of home/work.

#endif // de INFO_COMMENT

	void init(samson::KVWriter *writer )
	{
	}
	/**
	 * Bring together all the information about
	 * the place of home/work.
	 */
	void run(  samson::KVSetStruct* inputs , samson::KVWriter *writer )
	{

		if( inputs[0].num_kvs > 0 )
		{
			// parse phone number
			phone.parse( inputs[0].kvs[0]->key );

			// set phone number, although it is
			// only necessary to make results consistent
			place.phone.value = phone.value;

			// total number of days with calls
			number_days.parse( inputs[0].kvs[0]->value );
			place.totalDaysWithCalls = number_days.value;

			//OLM_T(LMT_User06, ("For phone:%lu, totalDaysWithCalls:%lu", place.phone.value, place.totalDaysWithCalls.value));

			// only emit phones with location information
			if( place.totalDaysWithCalls > 0 )
			{
				// cell level
				if( inputs[1].num_kvs > 0 )
				{
					locCounter.parse( inputs[1].kvs[0]->value );
					place.cellId.value = locCounter.loc.value;
					place.cellDaysWithCalls = locCounter.count;
					//OLM_T(LMT_User06, ("For phone:%lu, totalDaysWithCalls:%lu, cellDaysWithCalls:%lu", place.phone.value, place.totalDaysWithCalls.value, place.cellDaysWithCalls.value));
				}
				else
				{
					place.cellId.value = 0;
					place.cellDaysWithCalls = 0;
				}

				// bts level
				if( inputs[2].num_kvs > 0 )
				{
					locCounter.parse( inputs[2].kvs[0]->value );
					place.btsId.value = locCounter.loc.value;
					place.btsDaysWithCalls = locCounter.count;
				}
				else
				{
					place.btsId = 0;
					place.btsDaysWithCalls = 0;
				}

				// lac level
				if( inputs[3].num_kvs > 0 )
				{
					locCounter.parse( inputs[3].kvs[0]->value );
					place.lacId.value = locCounter.loc.value;
					place.lacDaysWithCalls = locCounter.count;
				}
				else
				{
					place.lacId = 0;
					place.lacDaysWithCalls = 0;
				}

				// state level
				if( inputs[4].num_kvs > 0 )
				{
					locCounter.parse( inputs[4].kvs[0]->value );
					place.stateId = locCounter.loc;
					place.stateDaysWithCalls = locCounter.count;
				}
				else
				{
					place.stateId = 0;
					place.stateDaysWithCalls = 0;
				}

				// emit
				writer->emit(0, &phone, &place );
			}
		}
	}

	void finish(samson::KVWriter *writer )
	{
	}



};


} // end of namespace samson
} // end of namespace mob

#endif
