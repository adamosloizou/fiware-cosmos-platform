
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
 */

#ifndef _H_SAMSON_mob_map_distribute_cellCounter_info_location
#define _H_SAMSON_mob_map_distribute_cellCounter_info_location


#include <samson/module/samson.h>


namespace samson{
namespace mob{


class map_distribute_cellCounter_info_location : public samson::Map
{

	// Input[0k]
	samson::system::UInt phone;
	// Input[0v]
	CellCounter cellCounter;
	// Output [0123k]
	PhoneLocCounter phoneLocCounter;
	// Output [0123v]
	samson::system::Void void_data;

public:


#ifdef INFO_COMMENT //Just to include a comment without conflicting anything
	// If interface changes and you do not recreate this file, consider updating this information (and of course, the module file)

	input: system.UInt mob.CellCounter
	output: mob.PhoneLocCounter system.Void
	output: mob.PhoneLocCounter system.Void
	output: mob.PhoneLocCounter system.Void
	output: mob.PhoneLocCounter system.Void

#endif // de INFO_COMMENT

	void init(samson::KVWriter *writer )
	{
	}

	void run(  samson::KVSetStruct* inputs , samson::KVWriter *writer )
	{
		for (size_t i = 0; i < inputs[0].num_kvs; i++ )
		{
			phone.parse(inputs[0].kvs[i]->key);
			cellCounter.parse(inputs[0].kvs[i]->value);

			phoneLocCounter.phone.value = phone.value;
			phoneLocCounter.count.value = cellCounter.count.value;

			// mobility degree

			// cell level
			// fill structure
			phoneLocCounter.loc.value = cellCounter.cell.cellId.value;
			// emit output to compute the reference cell
			writer->emit(0, &phoneLocCounter, &void_data );

			// bts level
			// fill structure
			phoneLocCounter.loc.value = cellCounter.cell.btsId.value;
			// emit output to compute the reference cell
			writer->emit(1, &phoneLocCounter, &void_data );

			// lac level
			// fill structure
			phoneLocCounter.loc.value = cellCounter.cell.lacId.value;
			// emit output to compute the reference cell
			writer->emit(2, &phoneLocCounter, &void_data );

			// state level
			// fill structure
			phoneLocCounter.loc.value = cellCounter.cell.stateId.value;
			// emit output to compute the reference cell
			writer->emit(3, &phoneLocCounter, &void_data );
		}
	}

	void finish(samson::KVWriter *writer )
	{
	}



};


} // end of namespace samson
} // end of namespace mob

#endif
