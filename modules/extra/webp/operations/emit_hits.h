
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_webp_emit_hits
#define _H_SAMSON_webp_emit_hits


#include <samson/module/samson.h>
#include <samson/modules/system/String.h>
#include <samson/modules/system/UInt.h>
#include <samson/modules/webp/Log.h>


namespace samson{
namespace webp{


	class emit_hits : public samson::Map
	{

	   samson::webp::Log log;

	   samson::system::String output_key;
	   samson::system::UInt output_value;

	public:


//  INFO_MODULE
// If interface changes and you do not recreate this file, you will have to update this information (and of course, the module file)
// Please, do not remove this comments, as it will be used to check consistency on module declaration
//
//  input: system.String webp.Log  
//  output: system.String system.UInt
//  
// helpLine: Emit all the strings to be tracked.To be connected with hit module...
//  END_INFO_MODULE

		void init( samson::KVWriter *writer )
		{
		   output_value.value = 1;
		}

		void run( samson::KVSetStruct* inputs , samson::KVWriter *writer )
		{
		   for( size_t i = 0 ; i < inputs[0].num_kvs ; i++ )
		   {
			  // Only interested in the value
			  log.parse(inputs[0].kvs[i]->value );

			  // get domain
			  std::string domain  = "no_domain";
			  size_t pos = log.url.value.find("/");
			  if( pos == std::string::npos )
				 domain = log.url.value;
			  else
				 domain = log.url.value.substr(0,pos);

			  // Top categories
              // ------------------------------------------------------------------------------------------
              for ( int c = 0; c < log.categories_length ; c++ )
              {
				 output_key.value = "top_categories";
				 output_key.value.append(" ");
				 output_key.value.append( log.categories[c].get_name() );
				 
				 writer->emit(0, &output_key , &output_value );
			  }


			  // Top url
              // ------------------------------------------------------------------------------------------
			  output_key.value = "top_urls";
			  output_key.value.append(" ");
			  output_key.value.append( log.url.value );
			  
			  writer->emit(0, &output_key , &output_value );

			  // Top users
              // ------------------------------------------------------------------------------------------
			  output_key.value = "top_users";
			  output_key.value.append(" ");
			  output_key.value.append( log.user.value );
			  
			  writer->emit(0, &output_key , &output_value );


			  // Categories per user
              // ------------------------------------------------------------------------------------------
			  for ( int c = 0; c < log.categories_length ; c++ )
			  {
				 output_key.value = "top_categories_per_user_";
				 output_key.value.append( log.user.value );
				 output_key.value.append(" ");
				 output_key.value.append( log.categories[c].get_name() );

				 writer->emit(0, &output_key , &output_value );
			  }

			  // Domains  per user
              // ------------------------------------------------------------------------------------------
			  output_key.value = "top_domains_per_user_";
			  output_key.value.append( log.user.value );
			  output_key.value.append(" ");
			  output_key.value.append( domain );
			  
			  writer->emit(0, &output_key , &output_value );


			  // Domains per category
              // ------------------------------------------------------------------------------------------
              for ( int c = 0; c < log.categories_length ; c++ )
              {
                 output_key.value = "top_domains_per_category_";
                 output_key.value.append( log.categories[c].get_name() );
                 output_key.value.append(" ");
                 output_key.value.append( domain );

                 writer->emit(0, &output_key , &output_value );
              }

		   }

		}

		void finish( samson::KVWriter *writer )
		{
		}



	};


} // end of namespace webp
} // end of namespace samson

#endif
