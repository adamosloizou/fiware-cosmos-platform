
/**
 File autogenerated with samsonModuleParser, please do not edit
*/

#ifndef _H_SAMSON_url_benchmark_TopHits_BASE
#define _H_SAMSON_url_benchmark_TopHits_BASE


#include <samson/modules/url_benchmark/URLHit.h>


namespace ss{
namespace url_benchmark{


	class TopHits_base : public ss::DataInstance{

	public:
	::ss::url_benchmark::URLHit *hit;
	int hit_length;
	int hit_max_length;

	TopHits_base() : ss::DataInstance(){
		hit_length=0;
		hit_max_length=0;
		hit = NULL;
	}

	~TopHits_base() {
		if( hit )
			delete[] hit ;
	}

	int parse(char *data){
		int offset=0;
		{ //Parsing vector hit
			size_t _length;
			offset += ss::staticVarIntParse( data+offset , &_length );
		 	hitSetLength( _length );
			for (int i = 0 ; i < (int)hit_length ; i++){
				offset += hit[i].parse(data+offset);
			}
		}
		return offset;
	}

	int serialize(char *data){
		int offset=0;
		{ //Serialization vector hit
			offset += ss::staticVarIntSerialize( data+offset , hit_length );
			for (int i = 0 ; i < (int)hit_length ; i++){
				offset += hit[i].serialize(data+offset);
			}
		}
		return offset;
	}

	static inline int size(char *data){
		int offset=0;
		{ //Getting size of vector hit
			size_t _length;
			offset += ss::staticVarIntParse( data+offset , &_length );
			::ss::url_benchmark::URLHit _tmp;
			for (int i = 0 ; i < (int)_length ; i++){
				offset += ::ss::url_benchmark::URLHit::size(data+offset);
			}
		}
		return offset;
	}

	int hash(int max_num_partitions){
		if( hit_length > 0 ){
		return hit[0].hash(max_num_partitions);
		} else return 0;
	}

	inline static int compare(char * data1 , char *data2 , size_t *offset1 , size_t *offset2 ){
		{ // Comparing vector hit
			size_t _length1,_length2;
			*offset1 += ss::staticVarIntParse( data1+(*offset1) , &_length1 );
			*offset2 += ss::staticVarIntParse( data2+(*offset2) , &_length2 );
			if( _length1 < _length2 ) return -1;
			if( _length1 > _length2 ) return 1;
			for (int i = 0 ; i < (int)_length1 ; i++){
				{ // comparing hit[i]
					int tmp = ::ss::url_benchmark::URLHit::compare(data1,data2,offset1 , offset2);
					if( tmp != 0) return tmp;
				}
			}
		}
		return 0; //If everything is equal
	}

	inline static int compare( char* data1 , char* data2 )
	{
		size_t offset_1=0;
		size_t offset_2=0;
		return compare( data1 , data2 , &offset_1 , &offset_2 );
	}

	void hitSetLength(int _length){
		if( _length > hit_max_length){ 
			::ss::url_benchmark::URLHit *_previous = hit;
			int previous_length = hit_length;
			if(hit_max_length == 0) hit_max_length = _length;
			while(hit_max_length < _length) hit_max_length *= 2;
			hit = new ::ss::url_benchmark::URLHit[hit_max_length ];
			if( _previous ){
				for (int i = 0 ; i < previous_length ; i++)
					hit[i].copyFrom( &_previous[i] );
				delete[] _previous;
			}
		}
		hit_length=_length;
	}

	::ss::url_benchmark::URLHit* hitAdd(){
		hitSetLength( hit_length + 1 );
		return &hit[hit_length-1];
	}

	void copyFrom( TopHits_base *other ){
			{ // CopyFrom field hit
				hitSetLength( other->hit_length);
				for (int i = 0 ; i < hit_length ; i++){
					hit[i].copyFrom(&other->hit[i]);
				}
			}
	};

	std::string str(){
		std::ostringstream o;
		{// toString of vector hit
			for(int i = 0 ; i < hit_length ; i++){
				o << hit[i].str();
				 o << " ";
			}
		}
		o<<" ";
		return o.str();
	}

	}; //class TopHits_base

} // end of namespace ss
} // end of namespace url_benchmark

#endif
