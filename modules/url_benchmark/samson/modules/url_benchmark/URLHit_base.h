
/**
 File autogenerated with samsonModuleParser, please do not edit
*/

#ifndef _H_SAMSON_url_benchmark_URLHit_BASE
#define _H_SAMSON_url_benchmark_URLHit_BASE


#include <samson/modules/system/String.h>
#include <samson/modules/system/UInt.h>


namespace samson{
namespace url_benchmark{


	class URLHit_base : public samson::DataInstance{

	public:
	::samson::system::UInt count;
	::samson::system::String URL;

	URLHit_base() : samson::DataInstance(){
	}

	~URLHit_base() {
	}

	int parse(char *data){
		int offset=0;
		offset += count.parse(data+offset);
		offset += URL.parse(data+offset);
		return offset;
	}

	int serialize(char *data){
		int offset=0;
		offset += count.serialize(data+offset);
		offset += URL.serialize(data+offset);
		return offset;
	}

	static inline int size(char *data){
		int offset=0;
		offset += ::samson::system::UInt::size(data+offset);
		offset += ::samson::system::String::size(data+offset);
		return offset;
	}

	int hash(int max_num_partitions){
		return count.hash(max_num_partitions);
	}

	inline static int compare(char * data1 , char *data2 , size_t *offset1 , size_t *offset2 ){
		{ // comparing count
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}
		{ // comparing URL
			int tmp = ::samson::system::String::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}
		return 0; //If everything is equal
	}

	inline static int compare( char* data1 , char* data2 )
	{
		size_t offset_1=0;
		size_t offset_2=0;
		return compare( data1 , data2 , &offset_1 , &offset_2 );
	}

	void copyFrom( URLHit_base *other ){
		count.copyFrom(&other->count);
		URL.copyFrom(&other->URL);
	};

	std::string str(){
		std::ostringstream o;
		o << count.str();

		o<<" ";
		o << URL.str();

		o<<" ";
		return o.str();
	}

	}; //class URLHit_base

} // end of namespace samson
} // end of namespace url_benchmark

#endif
