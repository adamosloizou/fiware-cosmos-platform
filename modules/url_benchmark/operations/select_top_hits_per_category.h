
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_url_benchmark_select_top_hits_per_category
#define _H_SAMSON_url_benchmark_select_top_hits_per_category


#include <samson/samson.h>

/***************************************************************
reduce select_top_hits_per_category
{
	in system.UInt url_benchmark.URLHit       # Category -  URLS visited per server
	out system.UInt url_benchmark.TopHits     # Category - Top URLS visited for all the servers

	helpLine "From the classification of URLs per server, selects the top 'url_benchmark.num_hits' (globally)"
}
****************************************************************/

namespace ss{
namespace url_benchmark{


class select_top_hits_per_category : public ss::Reduce
{

public:


	void run(  ss::KVSetStruct* inputs , ss::KVWriter *writer )
	{

		if ( inputs[0].num_kvs == 0)
		{
			return;
		}

		size_t num_hits = environment->getInt("url_benchmark.num_hits", 10);

		ss::system::UInt categ;
		URLHit url_hit;
		TopHits hits;

		categ.parse(inputs[0].kvs[0]->key);

		for ( size_t i = 0 ; ((i < inputs[0].num_kvs) && (i < num_hits)) ; ++i)
		{
			url_hit.parse(inputs[0].kvs[i]->value);
			hits.hitAdd()->copyFrom(&url_hit);
			//OLM_T(LMT_User01, ("cat_%ld: %s(%ld)", categ.value, url_hit.URL.value.c_str(), url_hit.count.value));
		}
		writer->emit( 0  , &categ, &hits);
	}


};


} // end of namespace ss
} // end of namespace url_benchmark

#endif
