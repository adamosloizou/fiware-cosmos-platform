
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_url_benchmark_fake_visits
#define _H_SAMSON_url_benchmark_fake_visits


#include <samson/samson.h>

/*********************************************************
generator fake_visits
{
	out	system.UInt system.String  # UserId - URL visited

	helpLine "Generate a fixed set of visits from a group of of users and a number of URLs"
}
**********************************************************/

namespace ss{
namespace url_benchmark{


	class fake_visits : public ss::Generator
	{

	public:


		void run( ss::KVWriter *writer )
		{

			// Recover the number of users in this demo
			size_t num_users  = environment->getSizeT( "url_benchmark.num_users" ,  1000000 );

			// Recover the number of urls per user
			size_t num_urls_per_user = environment->getSizeT( "url_benchmark.num_urls_per_user" ,  100 );

			// Recover the number of paths per server
			size_t num_paths_per_server = environment->getSizeT( "url_benchmark.num_paths_per_server" ,  10 );

			// Recover the number of servers from the environment
			size_t num_servers = environment->getSizeT( "url_benchmark.num_servers" ,  1000000 );


			ss::system::UInt userId;
			ss::system::String url;

			for (size_t u = 0 ; u < num_users ; u++ )
			{
				if( !(u%1000) )
					operationController->reportProgress( (double) u / (double) num_users );

				for ( size_t t = 0 ; t < num_urls_per_user ; t++ )
				{
					size_t user = rand()%num_users;
					size_t server = rand()%num_servers;
					size_t path = rand()%num_paths_per_server;


					std::ostringstream o;
					o << "http://" << "ServerName_" << server << "/" << "path_to_somewhere_" << path;
					url.value = o.str();
					o.str(""); //Clear content;

					userId.value = user;

					writer->emit( 0 , &userId, &url);
				}
			}
		}

	};


} // end of namespace ss
} // end of namespace url_benchmark

#endif
