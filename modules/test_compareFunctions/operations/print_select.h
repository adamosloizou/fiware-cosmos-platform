
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_test_compareFunctions_print_select
#define _H_SAMSON_test_compareFunctions_print_select


#include <samson/module/samson.h>


namespace samson{
namespace test_compareFunctions{


	class print_select : public samson::ParserOut
	{

	public:

		std::string selectedFieldStr;
		int *selectedFieldIntP;


#ifdef INFO_COMMENT //Just to include a comment without conflicting anything
// If interface changes and you do not recreate this file, consider updating this information (and of course, the module file)

input: system.UInt test_compareFunctions.User  

#endif // de INFO_COMMENT

#ifdef MAX_STR_LEN
#undef MAX_STR_LEN
#endif
// Max line to be output
#define MAX_STR_LEN 2048
    char line[MAX_STR_LEN];


		void init(TXTWriter *writer )
		{
			OLM_T(LMT_User06,("print_select::init()"));
			selectedFieldStr = environment->get("selectedFieldStr", "User.surname");
			OLM_T(LMT_User06,("print_select::init() selectedFieldStr:'%s'\n", selectedFieldStr.c_str()));
			selectedFieldIntP = User::getDataPath(selectedFieldStr);
			OLM_T(LMT_User06,("print_select::init() selectedFieldIntP:\n"));
			int i = 0;
			while (selectedFieldIntP[i] != -1)
			{
				OLM_T(LMT_User06,("%d, ", selectedFieldIntP[i]));
				i++;
			}
			OLM_T(LMT_User06,("%d\n", selectedFieldIntP[i]));

		}

		void run(KVSetStruct* inputs , TXTWriter *writer )
		{
			User user;
			DataInstance *dataInstance;

			for (size_t i = 0; (i < inputs[0].num_kvs); i++)
			{
				user.parse(inputs[0].kvs[i]->value);
				dataInstance = user.getInstance(selectedFieldIntP);
				if (dataInstance != NULL)
				{
					snprintf( line , MAX_STR_LEN, "selectedField:'%s', val:'%s'\n", selectedFieldStr.c_str(), dataInstance->str().c_str());
					writer->emit( line );
				}
				else
				{
					snprintf( line , MAX_STR_LEN, "selectedField:'%s', val:'%s'\n", selectedFieldStr.c_str(), "empty");
					writer->emit( line );
				}
			}
			
		}

		void finish(TXTWriter *writer )
		{
			OLM_E(("print_select::finish()"));
			free(selectedFieldIntP);
		}



	};


} // end of namespace samson
} // end of namespace test_compareFunctions

#endif
