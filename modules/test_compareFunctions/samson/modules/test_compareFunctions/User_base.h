
/**
 File autogenerated with samsonModuleParser, please do not edit
*/

#ifndef _H_SAMSON_test_compareFunctions_User_BASE
#define _H_SAMSON_test_compareFunctions_User_BASE


#include <samson/modules/system/String.h>
#include <samson/modules/system/UInt.h>
#include <samson/modules/system/UInt8.h>


namespace samson{
namespace test_compareFunctions{


	class User_base : public samson::DataInstance{

	public:
	::samson::system::UInt8 __filledOptFields__;
	::samson::system::UInt id;
	::samson::system::String surname;
	::samson::system::UInt companyId;
	::samson::system::UInt8 age;
	::samson::system::UInt expense;

	User_base() : samson::DataInstance(){
		__filledOptFields__ = 0;
	}

	~User_base() {
	}

	void unassignAllOptionals(){
		__filledOptFields__ = 0;
	}

	int parse(char *data){
		int offset=0;
		{ //Parsing __filledOptFields__
			offset += __filledOptFields__.parse(data+offset);
		}

		{ //Parsing id
			offset += id.parse(data+offset);
		}

		{ //Parsing surname
			offset += surname.parse(data+offset);
		}

		{ //Parsing companyId
			offset += companyId.parse(data+offset);
		}

		if (__filledOptFields__.value & 0x1)
		{ //Parsing age
			offset += age.parse(data+offset);
		}

		if (__filledOptFields__.value & 0x2)
		{ //Parsing expense
			offset += expense.parse(data+offset);
		}

		return offset;
	}

	int serialize(char *data){
		int offset=0;
		{ //Serializing __filledOptFields__
			offset += __filledOptFields__.serialize(data+offset);
		}

		{ //Serializing id
			offset += id.serialize(data+offset);
		}

		{ //Serializing surname
			offset += surname.serialize(data+offset);
		}

		{ //Serializing companyId
			offset += companyId.serialize(data+offset);
		}

		if (__filledOptFields__.value & 0x1)
		{ //Serializing age
			offset += age.serialize(data+offset);
		}

		if (__filledOptFields__.value & 0x2)
		{ //Serializing expense
			offset += expense.serialize(data+offset);
		}

		return offset;
	}

	static inline int size(char *data){
		int offset=0;
		::samson::system::UInt8 local__filledOptFields__;
		{ //Parsing __filledOptFields__
			offset += local__filledOptFields__.parse(data+offset);
		}

		{ //Sizing id
			offset += ::samson::system::UInt::size(data+offset);
		}

		{ //Sizing surname
			offset += ::samson::system::String::size(data+offset);
		}

		{ //Sizing companyId
			offset += ::samson::system::UInt::size(data+offset);
		}

		if (local__filledOptFields__.value & 0x1)
		{ //Sizing age
			offset += ::samson::system::UInt8::size(data+offset);
		}

		if (local__filledOptFields__.value & 0x2)
		{ //Sizing expense
			offset += ::samson::system::UInt::size(data+offset);
		}

		return offset;
	}

	int hash(int max_num_partitions){
		{ //Partitioning id
			return id.hash(max_num_partitions);
		}

	}

	inline static int compare(char * data1 , char *data2 , size_t *offset1 , size_t *offset2 ){
		::samson::system::UInt8 local__filledOptFields__1;
		(*offset1) += local__filledOptFields__1.parse(data1+*offset1);
		::samson::system::UInt8 local__filledOptFields__2;
		(*offset2) += local__filledOptFields__2.parse(data2+*offset2);
		{ // comparing id
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  id compared 
		{ // comparing surname
			int tmp = ::samson::system::String::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  surname compared 
		{ // comparing companyId
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  companyId compared 
		{ // comparing age
			if (((local__filledOptFields__1.value & 0x1) != 0) && ((local__filledOptFields__2.value & 0x1) == 0))
			{
				return 1;
			}
			else if (((local__filledOptFields__1.value & 0x1) == 0) && ((local__filledOptFields__2.value & 0x1) != 0))
			{
				return -1;
			}
			else if ((local__filledOptFields__1.value & 0x1) && (local__filledOptFields__2.value & 0x1))
			{
				int tmp = ::samson::system::UInt8::compare(data1,data2,offset1 , offset2);
				if( tmp != 0) return tmp;
			}
		}   //  age compared 
		{ // comparing expense
			if (((local__filledOptFields__1.value & 0x2) != 0) && ((local__filledOptFields__2.value & 0x2) == 0))
			{
				return 1;
			}
			else if (((local__filledOptFields__1.value & 0x2) == 0) && ((local__filledOptFields__2.value & 0x2) != 0))
			{
				return -1;
			}
			else if ((local__filledOptFields__1.value & 0x2) && (local__filledOptFields__2.value & 0x2))
			{
				int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
				if( tmp != 0) return tmp;
			}
		}   //  expense compared 
		return 0; //If everything is equal
	}

	inline static int compare( char* data1 , char* data2 )
	{
		size_t offset_1=0;
		size_t offset_2=0;
		return compare( data1 , data2 , &offset_1 , &offset_2 );
	}





	void age_SetAssigned(bool _assign)
	{
		if (_assign)
		{
			__filledOptFields__.value |= 0x1;
		}
		else
		{
			__filledOptFields__.value &= ~0x1;
		}
	}
	bool age_GetAssigned(void)
	{
		return (__filledOptFields__.value & 0x1);
	}

	void expense_SetAssigned(bool _assign)
	{
		if (_assign)
		{
			__filledOptFields__.value |= 0x2;
		}
		else
		{
			__filledOptFields__.value &= ~0x2;
		}
	}
	bool expense_GetAssigned(void)
	{
		return (__filledOptFields__.value & 0x2);
	}


	void copyFrom( User_base *other ){
		{ //Copying __filledOptFields__
			__filledOptFields__.copyFrom(&other->__filledOptFields__);
		}

		{ //Copying id
			id.copyFrom(&other->id);
		}

		{ //Copying surname
			surname.copyFrom(&other->surname);
		}

		{ //Copying companyId
			companyId.copyFrom(&other->companyId);
		}

		if (__filledOptFields__.value & 0x1)
		{ //Copying age
			age.copyFrom(&other->age);
		}

		if (__filledOptFields__.value & 0x2)
		{ //Copying expense
			expense.copyFrom(&other->expense);
		}

	};

	std::string str(){
		std::ostringstream o;
				{ //Texting __filledOptFields__
			o << __filledOptFields__.str();
		}

		o<<" ";
				{ //Texting id
			o << id.str();
		}

		o<<" ";
				{ //Texting surname
			o << surname.str();
		}

		o<<" ";
				{ //Texting companyId
			o << companyId.str();
		}

		o<<" ";
		if (__filledOptFields__.value & 0x1)
				{ //Texting age
			o << age.str();
		}

		o<<" ";
		if (__filledOptFields__.value & 0x2)
				{ //Texting expense
			o << expense.str();
		}

		o<<" ";
		return o.str();
	}

	}; //class User_base

} // end of namespace samson
} // end of namespace test_compareFunctions

#endif
