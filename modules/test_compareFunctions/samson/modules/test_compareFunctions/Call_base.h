
/**
 File autogenerated with samsonModuleParser, please do not edit
*/

#ifndef _H_SAMSON_test_compareFunctions_Call_BASE
#define _H_SAMSON_test_compareFunctions_Call_BASE


#include <samson/modules/system/UInt.h>


namespace samson{
namespace test_compareFunctions{


	class Call_base : public samson::DataInstance{

	public:
	::samson::system::UInt userId;
	::samson::system::UInt duration;

	Call_base() : samson::DataInstance(){
	}

	~Call_base() {
	}

	int parse(char *data){
		int offset=0;
		{ //Parsing userId
			offset += userId.parse(data+offset);
		}

		{ //Parsing duration
			offset += duration.parse(data+offset);
		}

		return offset;
	}

	int serialize(char *data){
		int offset=0;
		{ //Serializing userId
			offset += userId.serialize(data+offset);
		}

		{ //Serializing duration
			offset += duration.serialize(data+offset);
		}

		return offset;
	}

	static inline int size(char *data){
		int offset=0;
		{ //Sizing userId
			offset += ::samson::system::UInt::size(data+offset);
		}

		{ //Sizing duration
			offset += ::samson::system::UInt::size(data+offset);
		}

		return offset;
	}

	int hash(int max_num_partitions){
		{ //Partitioning userId
			return userId.hash(max_num_partitions);
		}

	}

	inline static int compare(char * data1 , char *data2 , size_t *offset1 , size_t *offset2 ){
		{ // comparing userId
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  userId compared 
		{ // comparing duration
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  duration compared 
		return 0; //If everything is equal
	}

	inline static int compare( char* data1 , char* data2 )
	{
		size_t offset_1=0;
		size_t offset_2=0;
		return compare( data1 , data2 , &offset_1 , &offset_2 );
	}




	static int *getDataPath(const std::string &dataPathString){
		const char *dataPathCharP = dataPathString.c_str();
		int nlevels = 1;
		int *dataPathIntP;

		const char *p_sep = dataPathCharP;
		while ((p_sep = strchr(p_sep, '.')) != NULL)
		{
			nlevels++;
			p_sep++;
		}

		if ((dataPathIntP = (int *)malloc((nlevels + 1)*sizeof(int))) == NULL)
		{
			return ((int *)NULL);
		}

		int retError = getDataPath(dataPathCharP, dataPathIntP);

		if (retError)
		{
			free(dataPathIntP);
			dataPathIntP = NULL;
		}

		return  (dataPathIntP);
	}

	static int getDataPath(const char * dataPathCharP, int *dataPathIntP){
		if (strcmp(dataPathCharP, "Call") == 0)
		{
			*dataPathIntP = -1;
			return (0);
		}

		if (strncmp(dataPathCharP, "Call.", strlen("Call.")) == 0)
		{
			return (getDataPath(dataPathCharP+strlen("Call."), dataPathIntP));
		}
		{ //Scanning userId, terminal and non-terminal
			if (strcmp(dataPathCharP, "userId") == 0)
			{
				*dataPathIntP = 0;
				*(dataPathIntP+1) = -1;
				return (0);
			}
			if (strncmp(dataPathCharP, "userId.", strlen("userId.")) == 0)
			{
				*dataPathIntP = 0;
				*(dataPathIntP+1) = -1;
				return (0);
			}
		}
		{ //Scanning duration, terminal and non-terminal
			if (strcmp(dataPathCharP, "duration") == 0)
			{
				*dataPathIntP = 1;
				*(dataPathIntP+1) = -1;
				return (0);
			}
			if (strncmp(dataPathCharP, "duration.", strlen("duration.")) == 0)
			{
				*dataPathIntP = 1;
				*(dataPathIntP+1) = -1;
				return (0);
			}
		}
		return -1;
	}

	static std::string getType(const int *dataPathIntP){
		switch(*dataPathIntP)
		{
			case -1:
				return ("Call");
				break;
			case 0:
				return(system::UInt::getType(dataPathIntP+1));
				break;
			case 1:
				return(system::UInt::getType(dataPathIntP+1));
				break;
			default:
				return ("_Unknown_");
				break;
		};
	}

	DataInstance * getInstance(const int *dataPathIntP){
		switch(*dataPathIntP)
		{
			case -1:
				return(this);
				break;
			case 0:
				return(userId.getInstance(dataPathIntP+1));
				break;
			case 1:
				return(duration.getInstance(dataPathIntP+1));
				break;
			default:
				return (NULL);
				break;
		};
	}

	void copyFrom( Call_base *other ){
		{ //Copying userId
			userId.copyFrom(&other->userId);
		}

		{ //Copying duration
			duration.copyFrom(&other->duration);
		}

	};

	std::string str(){
		std::ostringstream o;
				{ //Texting userId
			o << userId.str();
		}

		o<<" ";
				{ //Texting duration
			o << duration.str();
		}

		o<<" ";
		return o.str();
	}

	}; //class Call_base

} // end of namespace samson
} // end of namespace test_compareFunctions

#endif
