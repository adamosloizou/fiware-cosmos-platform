
/**
 File autogenerated with samsonModuleParser, please do not edit
*/

#ifndef _H_SAMSON_sna_Node_Communities_BASE
#define _H_SAMSON_sna_Node_Communities_BASE


#include <samson/modules/sna/Clique.h>
#include <samson/modules/system/UInt.h>


namespace samson{
namespace sna{


	class Node_Communities_base : public samson::DataInstance{

	public:
	::samson::sna::Clique comm_id;
	::samson::system::UInt node_id;
	::samson::sna::Clique orphan;

	Node_Communities_base() : samson::DataInstance(){
	}

	~Node_Communities_base() {
	}

	int parse(char *data){
		int offset=0;
		offset += comm_id.parse(data+offset);
		offset += node_id.parse(data+offset);
		offset += orphan.parse(data+offset);
		return offset;
	}

	int serialize(char *data){
		int offset=0;
		offset += comm_id.serialize(data+offset);
		offset += node_id.serialize(data+offset);
		offset += orphan.serialize(data+offset);
		return offset;
	}

	static inline int size(char *data){
		int offset=0;
		offset += ::samson::sna::Clique::size(data+offset);
		offset += ::samson::system::UInt::size(data+offset);
		offset += ::samson::sna::Clique::size(data+offset);
		return offset;
	}

	int hash(int max_num_partitions){
		return comm_id.hash(max_num_partitions);
	}

	inline static int compare(char * data1 , char *data2 , size_t *offset1 , size_t *offset2 ){
		{ // comparing comm_id
			int tmp = ::samson::sna::Clique::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}
		{ // comparing node_id
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}
		{ // comparing orphan
			int tmp = ::samson::sna::Clique::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}
		return 0; //If everything is equal
	}

	inline static int compare( char* data1 , char* data2 )
	{
		size_t offset_1=0;
		size_t offset_2=0;
		return compare( data1 , data2 , &offset_1 , &offset_2 );
	}

	void copyFrom( Node_Communities_base *other ){
		comm_id.copyFrom(&other->comm_id);
		node_id.copyFrom(&other->node_id);
		orphan.copyFrom(&other->orphan);
	};

	std::string str(){
		std::ostringstream o;
		o << comm_id.str();

		o<<" ";
		o << node_id.str();

		o<<" ";
		o << orphan.str();

		o<<" ";
		return o.str();
	}

	}; //class Node_Communities_base

} // end of namespace samson
} // end of namespace sna

#endif
