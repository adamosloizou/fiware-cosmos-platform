
/**
 File autogenerated with samsonModuleParser, please do not edit
*/

#ifndef _H_SAMSON_sna_Node_Comm_Weigth_BASE
#define _H_SAMSON_sna_Node_Comm_Weigth_BASE


#include <samson/modules/system/UInt.h>


namespace ss{
namespace sna{


	class Node_Comm_Weigth_base : public ss::DataInstance{

	public:
	::ss::system::UInt node_id;
	::ss::system::UInt count_links;
	::ss::system::UInt count_extern_links;
	::ss::system::UInt weigth_all_members;
	::ss::system::UInt weigth_extern_members;
	::ss::system::UInt count_comm_extern_nodes;
	::ss::system::UInt count_competitor_nodes;

	Node_Comm_Weigth_base() : ss::DataInstance(){
	}

	~Node_Comm_Weigth_base() {
	}

	int parse(char *data){
		int offset=0;
		offset += node_id.parse(data+offset);
		offset += count_links.parse(data+offset);
		offset += count_extern_links.parse(data+offset);
		offset += weigth_all_members.parse(data+offset);
		offset += weigth_extern_members.parse(data+offset);
		offset += count_comm_extern_nodes.parse(data+offset);
		offset += count_competitor_nodes.parse(data+offset);
		return offset;
	}

	int serialize(char *data){
		int offset=0;
		offset += node_id.serialize(data+offset);
		offset += count_links.serialize(data+offset);
		offset += count_extern_links.serialize(data+offset);
		offset += weigth_all_members.serialize(data+offset);
		offset += weigth_extern_members.serialize(data+offset);
		offset += count_comm_extern_nodes.serialize(data+offset);
		offset += count_competitor_nodes.serialize(data+offset);
		return offset;
	}

	static inline int size(char *data){
		int offset=0;
		offset += ::ss::system::UInt::size(data+offset);
		offset += ::ss::system::UInt::size(data+offset);
		offset += ::ss::system::UInt::size(data+offset);
		offset += ::ss::system::UInt::size(data+offset);
		offset += ::ss::system::UInt::size(data+offset);
		offset += ::ss::system::UInt::size(data+offset);
		offset += ::ss::system::UInt::size(data+offset);
		return offset;
	}

	int hash(int max_num_partitions){
		return node_id.hash(max_num_partitions);
	}

	inline static int compare(char * data1 , char *data2 , size_t *offset1 , size_t *offset2 ){
		{ // comparing node_id
			int tmp = ::ss::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}
		{ // comparing count_links
			int tmp = ::ss::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}
		{ // comparing count_extern_links
			int tmp = ::ss::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}
		{ // comparing weigth_all_members
			int tmp = ::ss::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}
		{ // comparing weigth_extern_members
			int tmp = ::ss::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}
		{ // comparing count_comm_extern_nodes
			int tmp = ::ss::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}
		{ // comparing count_competitor_nodes
			int tmp = ::ss::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}
		return 0; //If everything is equal
	}

	inline static int compare( char* data1 , char* data2 )
	{
		size_t offset_1=0;
		size_t offset_2=0;
		return compare( data1 , data2 , &offset_1 , &offset_2 );
	}

	void copyFrom( Node_Comm_Weigth_base *other ){
		node_id.copyFrom(&other->node_id);
		count_links.copyFrom(&other->count_links);
		count_extern_links.copyFrom(&other->count_extern_links);
		weigth_all_members.copyFrom(&other->weigth_all_members);
		weigth_extern_members.copyFrom(&other->weigth_extern_members);
		count_comm_extern_nodes.copyFrom(&other->count_comm_extern_nodes);
		count_competitor_nodes.copyFrom(&other->count_competitor_nodes);
	};

	std::string str(){
		std::ostringstream o;
		o << node_id.str();

		o<<" ";
		o << count_links.str();

		o<<" ";
		o << count_extern_links.str();

		o<<" ";
		o << weigth_all_members.str();

		o<<" ";
		o << weigth_extern_members.str();

		o<<" ";
		o << count_comm_extern_nodes.str();

		o<<" ";
		o << count_competitor_nodes.str();

		o<<" ";
		return o.str();
	}

	}; //class Node_Comm_Weigth_base

} // end of namespace ss
} // end of namespace sna

#endif
