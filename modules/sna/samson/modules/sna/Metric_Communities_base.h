
/**
 File autogenerated with samsonModuleParser, please do not edit
*/

#ifndef _H_SAMSON_sna_Metric_Communities_BASE
#define _H_SAMSON_sna_Metric_Communities_BASE


#include <samson/modules/system/UInt.h>


namespace samson{
namespace sna{


	class Metric_Communities_base : public samson::DataInstance{

	public:
	::samson::system::UInt id_comm;
	::samson::system::UInt count_nodes;
	::samson::system::UInt count_nodes_strong;
	::samson::system::UInt count_nodes_associated;
	::samson::system::UInt count_nodes_competitor;
	::samson::system::UInt count_nodes_telefonica;
	::samson::system::UInt percent_nodes_competitor;
	::samson::system::UInt percent_nodes_strong;
	::samson::system::UInt percent_nodes_associated;
	::samson::system::UInt percent_nodes_telefonica;
	::samson::system::UInt count_regular_existing_links;
	::samson::system::UInt count_regular_possible_links;
	::samson::system::UInt count_all_existing_links;
	::samson::system::UInt count_all_possible_links;
	::samson::system::UInt density_regular_members;
	::samson::system::UInt density_all_members;
	::samson::system::UInt cohesion_regular_members;
	::samson::system::UInt cohesion_all_members;
	::samson::system::UInt value_total;
	::samson::system::UInt value_per_node;
	::samson::system::UInt value_per_edge;
	::samson::system::UInt reach_one_step;
	::samson::system::UInt reach_one_step_competitors;
	::samson::system::UInt reach_comm_on_step;

	Metric_Communities_base() : samson::DataInstance(){
	}

	~Metric_Communities_base() {
	}

	int parse(char *data){
		int offset=0;
		{ //Parsing id_comm
			offset += id_comm.parse(data+offset);
		}

		{ //Parsing count_nodes
			offset += count_nodes.parse(data+offset);
		}

		{ //Parsing count_nodes_strong
			offset += count_nodes_strong.parse(data+offset);
		}

		{ //Parsing count_nodes_associated
			offset += count_nodes_associated.parse(data+offset);
		}

		{ //Parsing count_nodes_competitor
			offset += count_nodes_competitor.parse(data+offset);
		}

		{ //Parsing count_nodes_telefonica
			offset += count_nodes_telefonica.parse(data+offset);
		}

		{ //Parsing percent_nodes_competitor
			offset += percent_nodes_competitor.parse(data+offset);
		}

		{ //Parsing percent_nodes_strong
			offset += percent_nodes_strong.parse(data+offset);
		}

		{ //Parsing percent_nodes_associated
			offset += percent_nodes_associated.parse(data+offset);
		}

		{ //Parsing percent_nodes_telefonica
			offset += percent_nodes_telefonica.parse(data+offset);
		}

		{ //Parsing count_regular_existing_links
			offset += count_regular_existing_links.parse(data+offset);
		}

		{ //Parsing count_regular_possible_links
			offset += count_regular_possible_links.parse(data+offset);
		}

		{ //Parsing count_all_existing_links
			offset += count_all_existing_links.parse(data+offset);
		}

		{ //Parsing count_all_possible_links
			offset += count_all_possible_links.parse(data+offset);
		}

		{ //Parsing density_regular_members
			offset += density_regular_members.parse(data+offset);
		}

		{ //Parsing density_all_members
			offset += density_all_members.parse(data+offset);
		}

		{ //Parsing cohesion_regular_members
			offset += cohesion_regular_members.parse(data+offset);
		}

		{ //Parsing cohesion_all_members
			offset += cohesion_all_members.parse(data+offset);
		}

		{ //Parsing value_total
			offset += value_total.parse(data+offset);
		}

		{ //Parsing value_per_node
			offset += value_per_node.parse(data+offset);
		}

		{ //Parsing value_per_edge
			offset += value_per_edge.parse(data+offset);
		}

		{ //Parsing reach_one_step
			offset += reach_one_step.parse(data+offset);
		}

		{ //Parsing reach_one_step_competitors
			offset += reach_one_step_competitors.parse(data+offset);
		}

		{ //Parsing reach_comm_on_step
			offset += reach_comm_on_step.parse(data+offset);
		}

		return offset;
	}

	int serialize(char *data){
		int offset=0;
		{ //Serializing id_comm
			offset += id_comm.serialize(data+offset);
		}

		{ //Serializing count_nodes
			offset += count_nodes.serialize(data+offset);
		}

		{ //Serializing count_nodes_strong
			offset += count_nodes_strong.serialize(data+offset);
		}

		{ //Serializing count_nodes_associated
			offset += count_nodes_associated.serialize(data+offset);
		}

		{ //Serializing count_nodes_competitor
			offset += count_nodes_competitor.serialize(data+offset);
		}

		{ //Serializing count_nodes_telefonica
			offset += count_nodes_telefonica.serialize(data+offset);
		}

		{ //Serializing percent_nodes_competitor
			offset += percent_nodes_competitor.serialize(data+offset);
		}

		{ //Serializing percent_nodes_strong
			offset += percent_nodes_strong.serialize(data+offset);
		}

		{ //Serializing percent_nodes_associated
			offset += percent_nodes_associated.serialize(data+offset);
		}

		{ //Serializing percent_nodes_telefonica
			offset += percent_nodes_telefonica.serialize(data+offset);
		}

		{ //Serializing count_regular_existing_links
			offset += count_regular_existing_links.serialize(data+offset);
		}

		{ //Serializing count_regular_possible_links
			offset += count_regular_possible_links.serialize(data+offset);
		}

		{ //Serializing count_all_existing_links
			offset += count_all_existing_links.serialize(data+offset);
		}

		{ //Serializing count_all_possible_links
			offset += count_all_possible_links.serialize(data+offset);
		}

		{ //Serializing density_regular_members
			offset += density_regular_members.serialize(data+offset);
		}

		{ //Serializing density_all_members
			offset += density_all_members.serialize(data+offset);
		}

		{ //Serializing cohesion_regular_members
			offset += cohesion_regular_members.serialize(data+offset);
		}

		{ //Serializing cohesion_all_members
			offset += cohesion_all_members.serialize(data+offset);
		}

		{ //Serializing value_total
			offset += value_total.serialize(data+offset);
		}

		{ //Serializing value_per_node
			offset += value_per_node.serialize(data+offset);
		}

		{ //Serializing value_per_edge
			offset += value_per_edge.serialize(data+offset);
		}

		{ //Serializing reach_one_step
			offset += reach_one_step.serialize(data+offset);
		}

		{ //Serializing reach_one_step_competitors
			offset += reach_one_step_competitors.serialize(data+offset);
		}

		{ //Serializing reach_comm_on_step
			offset += reach_comm_on_step.serialize(data+offset);
		}

		return offset;
	}

	static inline int size(char *data){
		int offset=0;
		{ //Sizing id_comm
			offset += ::samson::system::UInt::size(data+offset);
		}

		{ //Sizing count_nodes
			offset += ::samson::system::UInt::size(data+offset);
		}

		{ //Sizing count_nodes_strong
			offset += ::samson::system::UInt::size(data+offset);
		}

		{ //Sizing count_nodes_associated
			offset += ::samson::system::UInt::size(data+offset);
		}

		{ //Sizing count_nodes_competitor
			offset += ::samson::system::UInt::size(data+offset);
		}

		{ //Sizing count_nodes_telefonica
			offset += ::samson::system::UInt::size(data+offset);
		}

		{ //Sizing percent_nodes_competitor
			offset += ::samson::system::UInt::size(data+offset);
		}

		{ //Sizing percent_nodes_strong
			offset += ::samson::system::UInt::size(data+offset);
		}

		{ //Sizing percent_nodes_associated
			offset += ::samson::system::UInt::size(data+offset);
		}

		{ //Sizing percent_nodes_telefonica
			offset += ::samson::system::UInt::size(data+offset);
		}

		{ //Sizing count_regular_existing_links
			offset += ::samson::system::UInt::size(data+offset);
		}

		{ //Sizing count_regular_possible_links
			offset += ::samson::system::UInt::size(data+offset);
		}

		{ //Sizing count_all_existing_links
			offset += ::samson::system::UInt::size(data+offset);
		}

		{ //Sizing count_all_possible_links
			offset += ::samson::system::UInt::size(data+offset);
		}

		{ //Sizing density_regular_members
			offset += ::samson::system::UInt::size(data+offset);
		}

		{ //Sizing density_all_members
			offset += ::samson::system::UInt::size(data+offset);
		}

		{ //Sizing cohesion_regular_members
			offset += ::samson::system::UInt::size(data+offset);
		}

		{ //Sizing cohesion_all_members
			offset += ::samson::system::UInt::size(data+offset);
		}

		{ //Sizing value_total
			offset += ::samson::system::UInt::size(data+offset);
		}

		{ //Sizing value_per_node
			offset += ::samson::system::UInt::size(data+offset);
		}

		{ //Sizing value_per_edge
			offset += ::samson::system::UInt::size(data+offset);
		}

		{ //Sizing reach_one_step
			offset += ::samson::system::UInt::size(data+offset);
		}

		{ //Sizing reach_one_step_competitors
			offset += ::samson::system::UInt::size(data+offset);
		}

		{ //Sizing reach_comm_on_step
			offset += ::samson::system::UInt::size(data+offset);
		}

		return offset;
	}

	int hash(int max_num_partitions){
		{ //Partitioning id_comm
			return id_comm.hash(max_num_partitions);
		}

	}

	inline static int compare(char * data1 , char *data2 , size_t *offset1 , size_t *offset2 ){
		{ // comparing id_comm
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  id_comm compared 
		{ // comparing count_nodes
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  count_nodes compared 
		{ // comparing count_nodes_strong
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  count_nodes_strong compared 
		{ // comparing count_nodes_associated
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  count_nodes_associated compared 
		{ // comparing count_nodes_competitor
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  count_nodes_competitor compared 
		{ // comparing count_nodes_telefonica
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  count_nodes_telefonica compared 
		{ // comparing percent_nodes_competitor
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  percent_nodes_competitor compared 
		{ // comparing percent_nodes_strong
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  percent_nodes_strong compared 
		{ // comparing percent_nodes_associated
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  percent_nodes_associated compared 
		{ // comparing percent_nodes_telefonica
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  percent_nodes_telefonica compared 
		{ // comparing count_regular_existing_links
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  count_regular_existing_links compared 
		{ // comparing count_regular_possible_links
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  count_regular_possible_links compared 
		{ // comparing count_all_existing_links
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  count_all_existing_links compared 
		{ // comparing count_all_possible_links
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  count_all_possible_links compared 
		{ // comparing density_regular_members
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  density_regular_members compared 
		{ // comparing density_all_members
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  density_all_members compared 
		{ // comparing cohesion_regular_members
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  cohesion_regular_members compared 
		{ // comparing cohesion_all_members
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  cohesion_all_members compared 
		{ // comparing value_total
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  value_total compared 
		{ // comparing value_per_node
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  value_per_node compared 
		{ // comparing value_per_edge
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  value_per_edge compared 
		{ // comparing reach_one_step
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  reach_one_step compared 
		{ // comparing reach_one_step_competitors
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  reach_one_step_competitors compared 
		{ // comparing reach_comm_on_step
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  reach_comm_on_step compared 
		return 0; //If everything is equal
	}

	inline static int compare( char* data1 , char* data2 )
	{
		size_t offset_1=0;
		size_t offset_2=0;
		return compare( data1 , data2 , &offset_1 , &offset_2 );
	}


























	void copyFrom( Metric_Communities_base *other ){
		{ //Copying id_comm
			id_comm.copyFrom(&other->id_comm);
		}

		{ //Copying count_nodes
			count_nodes.copyFrom(&other->count_nodes);
		}

		{ //Copying count_nodes_strong
			count_nodes_strong.copyFrom(&other->count_nodes_strong);
		}

		{ //Copying count_nodes_associated
			count_nodes_associated.copyFrom(&other->count_nodes_associated);
		}

		{ //Copying count_nodes_competitor
			count_nodes_competitor.copyFrom(&other->count_nodes_competitor);
		}

		{ //Copying count_nodes_telefonica
			count_nodes_telefonica.copyFrom(&other->count_nodes_telefonica);
		}

		{ //Copying percent_nodes_competitor
			percent_nodes_competitor.copyFrom(&other->percent_nodes_competitor);
		}

		{ //Copying percent_nodes_strong
			percent_nodes_strong.copyFrom(&other->percent_nodes_strong);
		}

		{ //Copying percent_nodes_associated
			percent_nodes_associated.copyFrom(&other->percent_nodes_associated);
		}

		{ //Copying percent_nodes_telefonica
			percent_nodes_telefonica.copyFrom(&other->percent_nodes_telefonica);
		}

		{ //Copying count_regular_existing_links
			count_regular_existing_links.copyFrom(&other->count_regular_existing_links);
		}

		{ //Copying count_regular_possible_links
			count_regular_possible_links.copyFrom(&other->count_regular_possible_links);
		}

		{ //Copying count_all_existing_links
			count_all_existing_links.copyFrom(&other->count_all_existing_links);
		}

		{ //Copying count_all_possible_links
			count_all_possible_links.copyFrom(&other->count_all_possible_links);
		}

		{ //Copying density_regular_members
			density_regular_members.copyFrom(&other->density_regular_members);
		}

		{ //Copying density_all_members
			density_all_members.copyFrom(&other->density_all_members);
		}

		{ //Copying cohesion_regular_members
			cohesion_regular_members.copyFrom(&other->cohesion_regular_members);
		}

		{ //Copying cohesion_all_members
			cohesion_all_members.copyFrom(&other->cohesion_all_members);
		}

		{ //Copying value_total
			value_total.copyFrom(&other->value_total);
		}

		{ //Copying value_per_node
			value_per_node.copyFrom(&other->value_per_node);
		}

		{ //Copying value_per_edge
			value_per_edge.copyFrom(&other->value_per_edge);
		}

		{ //Copying reach_one_step
			reach_one_step.copyFrom(&other->reach_one_step);
		}

		{ //Copying reach_one_step_competitors
			reach_one_step_competitors.copyFrom(&other->reach_one_step_competitors);
		}

		{ //Copying reach_comm_on_step
			reach_comm_on_step.copyFrom(&other->reach_comm_on_step);
		}

	};

	std::string str(){
		std::ostringstream o;
				{ //Texting id_comm
			o << id_comm.str();
		}

		o<<" ";
				{ //Texting count_nodes
			o << count_nodes.str();
		}

		o<<" ";
				{ //Texting count_nodes_strong
			o << count_nodes_strong.str();
		}

		o<<" ";
				{ //Texting count_nodes_associated
			o << count_nodes_associated.str();
		}

		o<<" ";
				{ //Texting count_nodes_competitor
			o << count_nodes_competitor.str();
		}

		o<<" ";
				{ //Texting count_nodes_telefonica
			o << count_nodes_telefonica.str();
		}

		o<<" ";
				{ //Texting percent_nodes_competitor
			o << percent_nodes_competitor.str();
		}

		o<<" ";
				{ //Texting percent_nodes_strong
			o << percent_nodes_strong.str();
		}

		o<<" ";
				{ //Texting percent_nodes_associated
			o << percent_nodes_associated.str();
		}

		o<<" ";
				{ //Texting percent_nodes_telefonica
			o << percent_nodes_telefonica.str();
		}

		o<<" ";
				{ //Texting count_regular_existing_links
			o << count_regular_existing_links.str();
		}

		o<<" ";
				{ //Texting count_regular_possible_links
			o << count_regular_possible_links.str();
		}

		o<<" ";
				{ //Texting count_all_existing_links
			o << count_all_existing_links.str();
		}

		o<<" ";
				{ //Texting count_all_possible_links
			o << count_all_possible_links.str();
		}

		o<<" ";
				{ //Texting density_regular_members
			o << density_regular_members.str();
		}

		o<<" ";
				{ //Texting density_all_members
			o << density_all_members.str();
		}

		o<<" ";
				{ //Texting cohesion_regular_members
			o << cohesion_regular_members.str();
		}

		o<<" ";
				{ //Texting cohesion_all_members
			o << cohesion_all_members.str();
		}

		o<<" ";
				{ //Texting value_total
			o << value_total.str();
		}

		o<<" ";
				{ //Texting value_per_node
			o << value_per_node.str();
		}

		o<<" ";
				{ //Texting value_per_edge
			o << value_per_edge.str();
		}

		o<<" ";
				{ //Texting reach_one_step
			o << reach_one_step.str();
		}

		o<<" ";
				{ //Texting reach_one_step_competitors
			o << reach_one_step_competitors.str();
		}

		o<<" ";
				{ //Texting reach_comm_on_step
			o << reach_comm_on_step.str();
		}

		o<<" ";
		return o.str();
	}

	}; //class Metric_Communities_base

} // end of namespace samson
} // end of namespace sna

#endif
