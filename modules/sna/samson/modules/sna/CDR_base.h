
/**
 File autogenerated with samsonModuleParser, please do not edit
*/

#ifndef _H_SAMSON_sna_CDR_BASE
#define _H_SAMSON_sna_CDR_BASE


#include <samson/modules/system/Time.h>
#include <samson/modules/system/UInt.h>
#include <samson/modules/system/UInt8.h>


namespace samson{
namespace sna{


	class CDR_base : public samson::DataInstance{

	public:
	::samson::system::UInt node;
	::samson::system::Time time;
	::samson::system::UInt duration;
	::samson::system::UInt8 type;
	::samson::system::UInt8 week_day;
	::samson::system::UInt8 dir;

	CDR_base() : samson::DataInstance(){
	}

	~CDR_base() {
	}

	int parse(char *data){
		int offset=0;
		{ //Parsing node
			offset += node.parse(data+offset);
		}

		{ //Parsing time
			offset += time.parse(data+offset);
		}

		{ //Parsing duration
			offset += duration.parse(data+offset);
		}

		{ //Parsing type
			offset += type.parse(data+offset);
		}

		{ //Parsing week_day
			offset += week_day.parse(data+offset);
		}

		{ //Parsing dir
			offset += dir.parse(data+offset);
		}

		return offset;
	}

	int serialize(char *data){
		int offset=0;
		{ //Serializing node
			offset += node.serialize(data+offset);
		}

		{ //Serializing time
			offset += time.serialize(data+offset);
		}

		{ //Serializing duration
			offset += duration.serialize(data+offset);
		}

		{ //Serializing type
			offset += type.serialize(data+offset);
		}

		{ //Serializing week_day
			offset += week_day.serialize(data+offset);
		}

		{ //Serializing dir
			offset += dir.serialize(data+offset);
		}

		return offset;
	}

	static inline int size(char *data){
		int offset=0;
		{ //Sizing node
			offset += ::samson::system::UInt::size(data+offset);
		}

		{ //Sizing time
			offset += ::samson::system::Time::size(data+offset);
		}

		{ //Sizing duration
			offset += ::samson::system::UInt::size(data+offset);
		}

		{ //Sizing type
			offset += ::samson::system::UInt8::size(data+offset);
		}

		{ //Sizing week_day
			offset += ::samson::system::UInt8::size(data+offset);
		}

		{ //Sizing dir
			offset += ::samson::system::UInt8::size(data+offset);
		}

		return offset;
	}

	int hash(int max_num_partitions){
		{ //Partitioning node
			return node.hash(max_num_partitions);
		}

	}

	inline static int compare(char * data1 , char *data2 , size_t *offset1 , size_t *offset2 ){
		{ // comparing node
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  node compared 
		{ // comparing time
			int tmp = ::samson::system::Time::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  time compared 
		{ // comparing duration
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  duration compared 
		{ // comparing type
			int tmp = ::samson::system::UInt8::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  type compared 
		{ // comparing week_day
			int tmp = ::samson::system::UInt8::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  week_day compared 
		{ // comparing dir
			int tmp = ::samson::system::UInt8::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  dir compared 
		return 0; //If everything is equal
	}

	inline static int compare( char* data1 , char* data2 )
	{
		size_t offset_1=0;
		size_t offset_2=0;
		return compare( data1 , data2 , &offset_1 , &offset_2 );
	}








	void copyFrom( CDR_base *other ){
		{ //Copying node
			node.copyFrom(&other->node);
		}

		{ //Copying time
			time.copyFrom(&other->time);
		}

		{ //Copying duration
			duration.copyFrom(&other->duration);
		}

		{ //Copying type
			type.copyFrom(&other->type);
		}

		{ //Copying week_day
			week_day.copyFrom(&other->week_day);
		}

		{ //Copying dir
			dir.copyFrom(&other->dir);
		}

	};

	std::string str(){
		std::ostringstream o;
				{ //Texting node
			o << node.str();
		}

		o<<" ";
				{ //Texting time
			o << time.str();
		}

		o<<" ";
				{ //Texting duration
			o << duration.str();
		}

		o<<" ";
				{ //Texting type
			o << type.str();
		}

		o<<" ";
				{ //Texting week_day
			o << week_day.str();
		}

		o<<" ";
				{ //Texting dir
			o << dir.str();
		}

		o<<" ";
		return o.str();
	}

	}; //class CDR_base

} // end of namespace samson
} // end of namespace sna

#endif
