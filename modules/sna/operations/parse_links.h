
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_sna_parse_links
#define _H_SAMSON_sna_parse_links


#include <samson/Operation.h>
#include "sna_environment_parameters.h"
#include "sna_parsing_macros.h"


namespace ss{
namespace sna{


	class parse_links : public ss::Parser
	{
		bool no_duplicate ;
		bool parse_dir ;
		char delimiter ;

	public:

		void init()
		{
			no_duplicate = environment->getInt(SNA_FLAG_NO_DUPLICATE, SNA_FLAG_NO_DUPLICATE_DEFAULT);

			parse_dir = environment->getInt(SNA_FLAG_PARSE_DIR, SNA_FLAG_PARSE_DIR_DEFAULT);
		}

		void run( char *data , size_t length , ss::KVWriter *writer )
		{
			//Key Value to emit at the output

			//MRData_Link_Edges key_link ;
			ss::system::UInt       number ;
			Link       link ;

			ss::system::UInt node_a;
			ss::system::UInt node_b;
			double link_strength;
			double dir;

			size_t offset = 0;
			size_t line_begin = 0;

			while( offset < length )
			{
				if( data[offset] == '\n' || data[offset] == '\0' )
				{
					data[offset] = '\0';


			    SNA_PARSER_INIT( data+line_begin )
			    SNA_PARSER_NEXT_FIELD
			    SNA_PARSER_GET_UINT( node_a )
			    SNA_PARSER_NEXT_FIELD
			    SNA_PARSER_GET_UINT( node_b )
			    SNA_PARSER_NEXT_FIELD
			    SNA_PARSER_GET_DOUBLE( link_strength )

			    if( !no_duplicate ){
			      SNA_PARSER_NEXT_FIELD
			      SNA_PARSER_GET_DOUBLE( dir )
			    }

			    link.dir = (500) ;

			    //Weigth in an integuer format
			    int weight = (int) (link_strength * 1000) ;

			    if (node_a != node_b)
			    {
			      number =  node_a;
			      link.id    = node_b;
			      link.weight = weight;

			      if (parse_dir){
			        link.dir = (int) (dir * 1000)  ;
			      }


			      writer->emit(0, &number, &link);


			      if( !no_duplicate )
			      {
			        // This file contains only the links in one firection,
			        // so the oposite is also emitted

			        number =  node_b;
			        link.id    = node_a;
			        link.weight = weight;

			        if (parse_dir){
			          link.dir = (int) (dir * 1000)  ;
			        }

			        writer->emit(0, &number, &link);
			      }

			    }
				else
				{
					OLM_E(("Error in parser: Node: %d links itself", node_a.value));
				}
				line_begin = offset+1;
			}
			offset++;
			}
		    SNA_PARSER_INIT( data+line_begin )
		    SNA_PARSER_NEXT_FIELD
		    SNA_PARSER_GET_UINT( node_a )
		    SNA_PARSER_NEXT_FIELD
		    SNA_PARSER_GET_UINT( node_b )
		    SNA_PARSER_NEXT_FIELD
		    SNA_PARSER_GET_DOUBLE( link_strength )

		    if( !no_duplicate ){
		      SNA_PARSER_NEXT_FIELD
		      SNA_PARSER_GET_DOUBLE( dir )
		    }

		    link.dir = (500) ;

		    //Weigth in an integuer format
		    int weight = (int) (link_strength * 1000) ;

		    if (node_a != node_b)
		    {
		      number =  node_a;
		      link.id    = node_b;
		      link.weight = weight;

		      if (parse_dir){
		        link.dir = (int) (dir * 1000)  ;
		      }


		      writer->emit(0, &number, &link);


		      if( !no_duplicate )
		      {
		        // This file contains only the links in one firection,
		        // so the oposite is also emitted

		        number =  node_b;
		        link.id    = node_a;
		        link.weight = weight;

		        if (parse_dir){
		          link.dir = (int) (dir * 1000)  ;
		        }

		        writer->emit(0, &number, &link);
		      }

		    }
			else
			{
				OLM_E(("Error in parser: Node: %d links itself", node_a.value));
			}

		}


	};


} // end of namespace ss
} // end of namespace sna

#endif
