
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_sna_get_dyads
#define _H_SAMSON_sna_get_dyads


#include <samson/module/samson.h>


namespace samson{
namespace sna{


	class get_dyads : public samson::Reduce
	{

	public:


		void run(  samson::KVSetStruct* inputs , samson::KVWriter *writer )
		{
			Link nodeToCompare ;
			samson::system::UInt nodeId ;
			Node node ;
			Clique clique ;
			bool found ;

			//Iterate the graph to get all the links
			for (int i=0; i < inputs[0].num_kvs; i++)
			{
				node.parse(inputs[0].kvs[i]->value);
				//Iterate each link of each node to check if that link is a dyad
				for (int j = 0; j < node.links_length; j++)
				{
					nodeToCompare.copyFrom(&node.links[j]);
					//Don't check links twice.. it would generate the same dyad twice. Do it in one direction only
					//Check also that it is a strong contact
					if((node.id > nodeToCompare.id)&&(samson::sna::Link::intScaled_2_double(nodeToCompare.weight.value) >= 1) )
					{
						//Is the node to compare in any community?
						found = false;
						for (int k=0; k < inputs[1].num_kvs; k++)
						{
							clique.parse(inputs[1].kvs[k]->value);
							if (clique.containtsNode(nodeToCompare.id.value))
							{
								found=true;
								break;
							}
						}
						if (!found)
						{
							nodeId.value = node.id.value;
							writer->emit(0, &nodeId, &nodeToCompare);
						}
					}
				}
			}
		}


	};


} // end of namespace samson
} // end of namespace sna

#endif
