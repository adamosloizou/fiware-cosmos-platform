
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_sna_get_clique_links
#define _H_SAMSON_sna_get_clique_links


#include <samson/Operation.h>
#include "sna_environment_parameters.h"


namespace ss{
namespace sna{


	class get_clique_links : public ss::Reduce
	{

	public:
		double threshold_to_fuse_cliques;
		double penalization_missing_link;
		double penalization_missing_link_externals;
		double communities_min_overlaping;
		double communities_new_threshold;
		bool fusing_communities;


		void init(){
			threshold_to_fuse_cliques = environment->getDouble(SNA_PARAMETER_THRESHOLD_TO_FUSE_CLIQUES, SNA_PARAMETER_THRESHOLD_TO_FUSE_CLIQUES_DEFAULT);

			penalization_missing_link = environment->getDouble(SNA_PARAMETER_CLIQUES_PENALIZATION_MISSION_LINK, SNA_PARAMETER_CLIQUES_PENALIZATION_MISSION_LINK_DEFAULT);

			penalization_missing_link_externals = environment->getDouble(SNA_PARAMETER_CLIQUES_PENALIZATION_MISSION_LINK_EXTERNAL, SNA_PARAMETER_CLIQUES_PENALIZATION_MISSION_LINK_EXTERNAL_DEFAULT);

			communities_min_overlaping = environment->getDouble(SNA_PARAMETER_COMMUNITY_FUSITON_MIN_OVERLAPING, SNA_PARAMETER_COMMUNITY_FUSITON_MIN_OVERLAPING_DEFAULT);

			communities_new_threshold = environment->getDouble(SNA_PARAMETER_COMMUNITY_FUSITON_NEW_THRESHOLD, SNA_PARAMETER_COMMUNITY_FUSITON_NEW_THRESHOLD_DEFAULT);

			fusing_communities = environment->getInt(SNA_FLAG_FUSING_COMMUNITIES, 0);

		}

		void run(  ss::KVSetStruct* inputs , ss::KVWriter *writer )
		{
			Clique2 clique_pair ;
			Vector_Node nodes ;
			Clique_Link clique_link ;

			if ( inputs[0].num_kvs == 0)
				return;

			//Get the pair of clique we are evaluating
			clique_pair.parse( inputs[0].kvs[0]->key );

			// Eval a link with all involved nodes
			nodes.itemsSetLength(0);
			for (int i = 0 ; i < inputs[0].num_kvs ; i++ )
				nodes.itemsAdd()->parse(inputs[0].kvs[i]->value);

			double connection_strength =  nodes.internalConnectionStrength( penalization_missing_link , penalization_missing_link_externals );

			bool real_link = ( connection_strength >= threshold_to_fuse_cliques );

			if( !real_link && fusing_communities )
			{
				//Second oportunity for communities
				double shared_nodes_factor = clique_pair.clique_1.factorOFNodesInCommon( &clique_pair.clique_2 );

				if ( shared_nodes_factor >= communities_min_overlaping )
					if( connection_strength >= communities_new_threshold )
						real_link = true;
			}

			if (real_link)
			{
				//Emit in both directions

				clique_link.clique.copyFrom( &clique_pair.clique_2);
				clique_link.weight.value = connection_strength ;

				writer->emit(0, &clique_pair.clique_1, &clique_link);

				clique_link.clique.copyFrom( &clique_pair.clique_1);
				clique_link.weight.value = connection_strength ;

				writer->emit(0, &clique_pair.clique_2, &clique_link);

			}

		}


	};


} // end of namespace ss
} // end of namespace sna

#endif
