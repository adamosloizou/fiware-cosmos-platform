
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_sna_combine_associated_nodes_with_communities
#define _H_SAMSON_sna_combine_associated_nodes_with_communities


#include <samson/module/samson.h>


namespace samson{
namespace sna{


	class combine_associated_nodes_with_communities : public samson::Map
	{

	public:


		void run(  samson::KVSetStruct* inputs , samson::KVWriter *writer )
		{
			samson::sna::Clique clique1;
			samson::sna::Clique clique2;
			samson::sna::Clique clique;
			samson::system::Void void_data;

			std::vector<uint> nodes;

			for (int i = 0 ; i < inputs[0].num_kvs ; i++)
			{
				clique1.parse( inputs[0].kvs[i]->key );
				clique2.parse( inputs[0].kvs[i]->value );

				nodes.clear();

				for (int n = 0 ; n < clique1.nodes_length ; n++)
					nodes.push_back(clique1.nodes[n].value);
				for (int n = 0 ; n < clique2.nodes_length ; n++)
					nodes.push_back(clique2.nodes[n].value);

				// Sort and remove duplicates
				std::sort( nodes.begin() , nodes.end() );
				nodes.erase(std::unique(nodes.begin(), nodes.end()), nodes.end());

				//Prepare output

				clique.nodesSetLength(0);
				for (int n = 0 ; n < (int)nodes.size() ; n++)
					clique.nodesAdd()->value = nodes[n];


				//writer[0]->emit(&clique, &void_data);
				writer->emit(0, &clique, &clique2);

			}

		}


	};


} // end of namespace samson
} // end of namespace sna

#endif
