
/**
 File autogenerated with samsonModuleParser, please do not edit
*/

#ifndef _H_SAMSON_tienda_VectorProducts_BASE
#define _H_SAMSON_tienda_VectorProducts_BASE


#include <samson/modules/system/UInt.h>


namespace samson{
namespace tienda{


	class VectorProducts_base : public samson::DataInstance{

	public:
	::samson::system::UInt *products;
	int products_length;
	int products_max_length;

	VectorProducts_base() : samson::DataInstance(){
		products_length=0;
		products_max_length=0;
		products = NULL;
	}

	~VectorProducts_base() {
		if( products )
			delete[] products ;
	}

	int parse(char *data){
		int offset=0;
		{ //Parsing vector products
			size_t _length;
			offset += samson::staticVarIntParse( data+offset , &_length );
		 	productsSetLength( _length );
			for (int i = 0 ; i < (int)products_length ; i++)
			{ //Parsing products
				offset += products[i].parse(data+offset);
			}

		}

		return offset;
	}

	int serialize(char *data){
		int offset=0;
		{ //Serialization vector products
			offset += samson::staticVarIntSerialize( data+offset , products_length );
			for (int i = 0 ; i < (int)products_length ; i++)
			{ //Serializing products
				offset += products[i].serialize(data+offset);
			}

		}

		return offset;
	}

	static inline int size(char *data){
		int offset=0;
		{ //Getting size of vector products
			size_t _length;
			offset += samson::staticVarIntParse( data+offset , &_length );
			::samson::system::UInt _tmp;
			for (int i = 0 ; i < (int)_length ; i++)
			{ //Sizing products
				offset += ::samson::system::UInt::size(data+offset);
			}

		}

		return offset;
	}

	int hash(int max_num_partitions){
		if( products_length > 0 )
			{ //Partitioning products
				return products[0].hash(max_num_partitions);
			}

		else return 0;

	}

	inline static int compare(char * data1 , char *data2 , size_t *offset1 , size_t *offset2 ){
		{ // Comparing vector products
			size_t _length1,_length2;
			*offset1 += samson::staticVarIntParse( data1+(*offset1) , &_length1 );
			*offset2 += samson::staticVarIntParse( data2+(*offset2) , &_length2 );
			if( _length1 < _length2 ) return -1;
			if( _length1 > _length2 ) return 1;
			for (int i = 0 ; i < (int)_length1 ; i++)
			{ // comparing products[i]
				int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
				if( tmp != 0) return tmp;
			}   //  products[i] compared 
		}   // vector products compared 
		return 0; //If everything is equal
	}

	inline static int compare( char* data1 , char* data2 )
	{
		size_t offset_1=0;
		size_t offset_2=0;
		return compare( data1 , data2 , &offset_1 , &offset_2 );
	}



	void productsSetLength(int _length){
		if( _length > products_max_length){ 
			::samson::system::UInt *_previous = products;
			int previous_length = products_length;
			if(products_max_length == 0) products_max_length = _length;
			while(products_max_length < _length) products_max_length *= 2;
			products = new ::samson::system::UInt[products_max_length ];
			if( _previous ){
				for (int i = 0 ; i < previous_length ; i++)
					products[i].copyFrom( &_previous[i] );
				delete[] _previous;
			}
		}
		products_length=_length;
	}

	::samson::system::UInt* productsAdd(){
		productsSetLength( products_length + 1 );
		return &products[products_length-1];
	}

	void copyFrom( VectorProducts_base *other ){
		{ // CopyFrom field products
			productsSetLength( other->products_length);
			for (int i = 0 ; i < products_length ; i++)
			{ //Copying products
				products[i].copyFrom(&other->products[i]);
			}
		}

	};

	std::string str(){
		std::ostringstream o;
		{// toString of vector products
			for(int i = 0 ; i < products_length ; i++)
			{ //Texting products
				o << products[i].str();
			}
				 o << " ";
		}

		o<<" ";
		return o.str();
	}

	}; //class VectorProducts_base

} // end of namespace samson
} // end of namespace tienda

#endif
