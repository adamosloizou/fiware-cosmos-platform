
/**
 File autogenerated with samsonModuleParser, please do not edit
*/

#ifndef _H_SAMSON_page_rank_LinkVector_BASE
#define _H_SAMSON_page_rank_LinkVector_BASE


#include <samson/modules/system/String.h>


namespace samson{
namespace page_rank{


	class LinkVector_base : public samson::DataInstance{

	public:
	::samson::system::String *link;
	int link_length;
	int link_max_length;

	LinkVector_base() : samson::DataInstance(){
		link_length=0;
		link_max_length=0;
		link = NULL;
	}

	~LinkVector_base() {
		if( link )
			delete[] link ;
	}

	std::string getName(){
		return "page_rank.LinkVector";
	}

	int parse(char *data){
		int offset=0;
		{ //Parsing vector link
			size_t _length;
			offset += samson::staticVarIntParse( data+offset , &_length );
		 	linkSetLength( _length );
			for (int i = 0 ; i < (int)link_length ; i++)
			{ //Parsing link
				offset += link[i].parse(data+offset);
			}

		}

		return offset;
	}

	int serialize(char *data){
		int offset=0;
		{ //Serialization vector link
			offset += samson::staticVarIntSerialize( data+offset , link_length );
			for (int i = 0 ; i < (int)link_length ; i++)
			{ //Serializing link
				offset += link[i].serialize(data+offset);
			}

		}

		return offset;
	}

	static inline int size(char *data){
		int offset=0;
		{ //Getting size of vector link
			size_t _length;
			offset += samson::staticVarIntParse( data+offset , &_length );
			::samson::system::String _tmp;
			for (int i = 0 ; i < (int)_length ; i++)
			{ //Sizing link
				offset += ::samson::system::String::size(data+offset);
			}

		}

		return offset;
	}

	int hash(int max_num_partitions){
		if( link_length > 0 )
			{ //Partitioning link
				return link[0].hash(max_num_partitions);
			}

		else return 0;

	}

	inline static int compare(char * data1 , char *data2 , size_t *offset1 , size_t *offset2 ){
		{ // Comparing vector link
			size_t _length1,_length2;
			*offset1 += samson::staticVarIntParse( data1+(*offset1) , &_length1 );
			*offset2 += samson::staticVarIntParse( data2+(*offset2) , &_length2 );
			if( _length1 < _length2 ) return -1;
			if( _length1 > _length2 ) return 1;
			for (int i = 0 ; i < (int)_length1 ; i++)
			{ // comparing link[i]
				int tmp = ::samson::system::String::compare(data1,data2,offset1 , offset2);
				if( tmp != 0) return tmp;
			}   //  link[i] compared 
		}   // vector link compared 
		return 0; //If everything is equal
	}

	inline static int compare( char* data1 , char* data2 )
	{
		size_t offset_1=0;
		size_t offset_2=0;
		return compare( data1 , data2 , &offset_1 , &offset_2 );
	}



	void linkSetLength(int _length){
		if( _length > link_max_length){ 
			::samson::system::String *_previous = link;
			int previous_length = link_length;
			if(link_max_length == 0) link_max_length = _length;
			while(link_max_length < _length) link_max_length *= 2;
			link = new ::samson::system::String[link_max_length ];
			if( _previous ){
				for (int i = 0 ; i < previous_length ; i++)
					link[i].copyFrom( &_previous[i] );
				delete[] _previous;
			}
		}
		link_length=_length;
	}

	::samson::system::String* linkAdd(){
		linkSetLength( link_length + 1 );
		return &link[link_length-1];
	}

	int *getDataPath(const std::string &dataPathString){
		return(getDataPathStatic(dataPathString));
	}
	static int *getDataPathStatic(const std::string &dataPathString){
		const char *dataPathCharP = dataPathString.c_str();
		int nlevels = 1;
		int *dataPathIntP;

		const char *p_sep = dataPathCharP;
		while ((p_sep = strchr(p_sep, '.')) != NULL)
		{
			nlevels++;
			p_sep++;
		}

		if ((dataPathIntP = (int *)malloc((nlevels + 1)*sizeof(int))) == NULL)
		{
			return ((int *)NULL);
		}

		int retError = getDataPath(dataPathCharP, dataPathIntP);

		if (retError)
		{
			free(dataPathIntP);
			dataPathIntP = NULL;
		}

		return  (dataPathIntP);
	}

	static int getDataPath(const char * dataPathCharP, int *dataPathIntP){
		if (*dataPathCharP == 0)
		{
			*dataPathIntP = -1;
			return (0);
		}

		if (strcmp(dataPathCharP, "LinkVector") == 0)
		{
			*dataPathIntP = -1;
			return (0);
		}

		if (strncmp(dataPathCharP, "LinkVector.", strlen("LinkVector.")) == 0)
		{
			return (getDataPath(dataPathCharP+strlen("LinkVector."), dataPathIntP));
		}
		{ //Scanning link, terminal and non-terminal
			if (strcmp(dataPathCharP, "link") == 0)
			{
				*dataPathIntP = 0;
				*(dataPathIntP+1) = -1;
				return (0);
			}
			if (strncmp(dataPathCharP, "link.", strlen("link.")) == 0)
			{
				*dataPathIntP = 0;
				return (system::String::getDataPath(dataPathCharP+strlen("link."),dataPathIntP+1));
			}
		}
		return -1;
	}

	std::string getTypeFromPath(const std::string &dataPathString){
		const char *dataPathCharP = dataPathString.c_str();
		return(getTypeFromPathStatic(dataPathCharP));

	}

	static std::string getTypeFromPathStatic(const char * dataPathCharP){
		if (*dataPathCharP == 0)
		{
			return ("page_rank.LinkVector");
		}

		if (strcmp(dataPathCharP, ".") == 0)
		{
			return ("page_rank.LinkVector");
		}

		if (strcmp(dataPathCharP, "LinkVector") == 0)
		{
			return ("page_rank.LinkVector");
		}

		if (strncmp(dataPathCharP, "LinkVector.", strlen("LinkVector.")) == 0)
		{
			return (getTypeFromPathStatic(dataPathCharP+strlen("LinkVector.")));
		}
		{ //Scanning link, terminal and non-terminal
			if (strcmp(dataPathCharP, "link") == 0)
			{
			return("system.String");
			}
			if (strncmp(dataPathCharP, "link.", strlen("link.")) == 0)
			{
			return(system::String::getTypeFromPathStatic(dataPathCharP+strlen("link.")));
			}
		}
		return("_ERROR_");
	}

	std::string getTypeFromPath(const int *dataPathIntP){
		return(getTypeFromPathStatic(dataPathIntP));
	}
	static std::string getTypeFromPathStatic(const int *dataPathIntP){
		switch(*dataPathIntP)
		{
			case -1:
				return ("page_rank.LinkVector");
				break;
			case 0:
				return(system::String::getTypeFromPathStatic(dataPathIntP+1));
				break;
			default:
				return ("_ERROR_");
				break;
		};
	}

	static const char *getTypeStatic(){
		return("page_rank.LinkVector");
	}

	const char *getType(){
		return("page_rank.LinkVector");
	}

	static bool checkTypeStatic(const char *type){
		if (strcmp(type, "page_rank.LinkVector") == 0)
		{
			return true;
		}		return false;
	}

	bool checkType(const char *type){
		if (strcmp(type, "page_rank.LinkVector") == 0)
		{
			return true;
		}		return false;
	}

	static size_t getHashTypeStatic(){
		return(3747493218441206541ULL);
	}

	size_t getHashType(){
		return(3747493218441206541ULL);
	}

	static bool checkHashTypeStatic(size_t valType){
		if (valType == 3747493218441206541ULL)
		{
			return true;
		}		return false;
	}

	 bool checkHashType(size_t valType){
		if (valType == 3747493218441206541ULL)
		{
			return true;
		}		return false;
	}

	DataInstance * getDataInstanceFromPath(const int *dataPathIntP){
		switch(*dataPathIntP)
		{
			case -1:
				return(this);
				break;
			case 0:
				return((*link).getDataInstanceFromPath(dataPathIntP+1));
				break;
			default:
				return (NULL);
				break;
		};
	}

	void copyFrom( LinkVector_base *other ){
		{ // CopyFrom field link
			linkSetLength( other->link_length);
			for (int i = 0 ; i < link_length ; i++)
			{ //Copying link
				link[i].copyFrom(&other->link[i]);
			}
		}

	};

	std::string str(){
		std::ostringstream o;
		{// toString of vector link
			for(int i = 0 ; i < link_length ; i++)
			{
			{ //Texting link
				o << link[i].str();
			}
				 o << " ";
			}
		}

		o<<" ";
		return o.str();
	}

	}; //class LinkVector_base

} // end of namespace page_rank
} // end of namespace samson

#endif
