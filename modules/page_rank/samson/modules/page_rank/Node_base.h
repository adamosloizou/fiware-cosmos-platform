
/**
 File autogenerated with samsonModuleParser, please do not edit
*/

#ifndef _H_SAMSON_page_rank_Node_BASE
#define _H_SAMSON_page_rank_Node_BASE


#include <samson/modules/page_rank/Message.h>
#include <samson/modules/system/Double.h>
#include <samson/modules/system/String.h>
#include <samson/modules/system/UInt.h>


namespace samson{
namespace page_rank{


	class Node_base : public samson::DataInstance{

	public:
	::samson::system::String *links;
	int links_length;
	int links_max_length;
	::samson::page_rank::Message *messages;
	int messages_length;
	int messages_max_length;
	::samson::system::Double rank;
	::samson::system::UInt updated_outputs;
	::samson::system::UInt update_count;

	Node_base() : samson::DataInstance(){
		links_length=0;
		links_max_length=0;
		links = NULL;
		messages_length=0;
		messages_max_length=0;
		messages = NULL;
	}

	~Node_base() {
		if( links )
			delete[] links ;
		if( messages )
			delete[] messages ;
	}

	std::string getName(){
		return "page_rank.Node";
	}

	int parse(char *data){
		int offset=0;
		{ //Parsing vector links
			size_t _length;
			offset += samson::staticVarIntParse( data+offset , &_length );
		 	linksSetLength( _length );
			for (int i = 0 ; i < (int)links_length ; i++)
			{ //Parsing links
				offset += links[i].parse(data+offset);
			}

		}

		{ //Parsing vector messages
			size_t _length;
			offset += samson::staticVarIntParse( data+offset , &_length );
		 	messagesSetLength( _length );
			for (int i = 0 ; i < (int)messages_length ; i++)
			{ //Parsing messages
				offset += messages[i].parse(data+offset);
			}

		}

		{ //Parsing rank
			offset += rank.parse(data+offset);
		}

		{ //Parsing updated_outputs
			offset += updated_outputs.parse(data+offset);
		}

		{ //Parsing update_count
			offset += update_count.parse(data+offset);
		}

		return offset;
	}

	int serialize(char *data){
		int offset=0;
		{ //Serialization vector links
			offset += samson::staticVarIntSerialize( data+offset , links_length );
			for (int i = 0 ; i < (int)links_length ; i++)
			{ //Serializing links
				offset += links[i].serialize(data+offset);
			}

		}

		{ //Serialization vector messages
			offset += samson::staticVarIntSerialize( data+offset , messages_length );
			for (int i = 0 ; i < (int)messages_length ; i++)
			{ //Serializing messages
				offset += messages[i].serialize(data+offset);
			}

		}

		{ //Serializing rank
			offset += rank.serialize(data+offset);
		}

		{ //Serializing updated_outputs
			offset += updated_outputs.serialize(data+offset);
		}

		{ //Serializing update_count
			offset += update_count.serialize(data+offset);
		}

		return offset;
	}

	static inline int size(char *data){
		int offset=0;
		{ //Getting size of vector links
			size_t _length;
			offset += samson::staticVarIntParse( data+offset , &_length );
			::samson::system::String _tmp;
			for (int i = 0 ; i < (int)_length ; i++)
			{ //Sizing links
				offset += ::samson::system::String::size(data+offset);
			}

		}

		{ //Getting size of vector messages
			size_t _length;
			offset += samson::staticVarIntParse( data+offset , &_length );
			::samson::page_rank::Message _tmp;
			for (int i = 0 ; i < (int)_length ; i++)
			{ //Sizing messages
				offset += ::samson::page_rank::Message::size(data+offset);
			}

		}

		{ //Sizing rank
			offset += ::samson::system::Double::size(data+offset);
		}

		{ //Sizing updated_outputs
			offset += ::samson::system::UInt::size(data+offset);
		}

		{ //Sizing update_count
			offset += ::samson::system::UInt::size(data+offset);
		}

		return offset;
	}

	int hash(int max_num_partitions){
		if( links_length > 0 )
			{ //Partitioning links
				return links[0].hash(max_num_partitions);
			}

		else return 0;

	}

	inline static int compare(char * data1 , char *data2 , size_t *offset1 , size_t *offset2 ){
		{ // Comparing vector links
			size_t _length1,_length2;
			*offset1 += samson::staticVarIntParse( data1+(*offset1) , &_length1 );
			*offset2 += samson::staticVarIntParse( data2+(*offset2) , &_length2 );
			if( _length1 < _length2 ) return -1;
			if( _length1 > _length2 ) return 1;
			for (int i = 0 ; i < (int)_length1 ; i++)
			{ // comparing links[i]
				int tmp = ::samson::system::String::compare(data1,data2,offset1 , offset2);
				if( tmp != 0) return tmp;
			}   //  links[i] compared 
		}   // vector links compared 
		{ // Comparing vector messages
			size_t _length1,_length2;
			*offset1 += samson::staticVarIntParse( data1+(*offset1) , &_length1 );
			*offset2 += samson::staticVarIntParse( data2+(*offset2) , &_length2 );
			if( _length1 < _length2 ) return -1;
			if( _length1 > _length2 ) return 1;
			for (int i = 0 ; i < (int)_length1 ; i++)
			{ // comparing messages[i]
				int tmp = ::samson::page_rank::Message::compare(data1,data2,offset1 , offset2);
				if( tmp != 0) return tmp;
			}   //  messages[i] compared 
		}   // vector messages compared 
		{ // comparing rank
			int tmp = ::samson::system::Double::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  rank compared 
		{ // comparing updated_outputs
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  updated_outputs compared 
		{ // comparing update_count
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  update_count compared 
		return 0; //If everything is equal
	}

	inline static int compare( char* data1 , char* data2 )
	{
		size_t offset_1=0;
		size_t offset_2=0;
		return compare( data1 , data2 , &offset_1 , &offset_2 );
	}







	void linksSetLength(int _length){
		if( _length > links_max_length){ 
			::samson::system::String *_previous = links;
			int previous_length = links_length;
			if(links_max_length == 0) links_max_length = _length;
			while(links_max_length < _length) links_max_length *= 2;
			links = new ::samson::system::String[links_max_length ];
			if( _previous ){
				for (int i = 0 ; i < previous_length ; i++)
					links[i].copyFrom( &_previous[i] );
				delete[] _previous;
			}
		}
		links_length=_length;
	}

	::samson::system::String* linksAdd(){
		linksSetLength( links_length + 1 );
		return &links[links_length-1];
	}

	void messagesSetLength(int _length){
		if( _length > messages_max_length){ 
			::samson::page_rank::Message *_previous = messages;
			int previous_length = messages_length;
			if(messages_max_length == 0) messages_max_length = _length;
			while(messages_max_length < _length) messages_max_length *= 2;
			messages = new ::samson::page_rank::Message[messages_max_length ];
			if( _previous ){
				for (int i = 0 ; i < previous_length ; i++)
					messages[i].copyFrom( &_previous[i] );
				delete[] _previous;
			}
		}
		messages_length=_length;
	}

	::samson::page_rank::Message* messagesAdd(){
		messagesSetLength( messages_length + 1 );
		return &messages[messages_length-1];
	}

	int *getDataPath(const std::string &dataPathString){
		return(getDataPathStatic(dataPathString));
	}
	static int *getDataPathStatic(const std::string &dataPathString){
		const char *dataPathCharP = dataPathString.c_str();
		int nlevels = 1;
		int *dataPathIntP;

		const char *p_sep = dataPathCharP;
		while ((p_sep = strchr(p_sep, '.')) != NULL)
		{
			nlevels++;
			p_sep++;
		}

		if ((dataPathIntP = (int *)malloc((nlevels + 1)*sizeof(int))) == NULL)
		{
			return ((int *)NULL);
		}

		int retError = getDataPath(dataPathCharP, dataPathIntP);

		if (retError)
		{
			free(dataPathIntP);
			dataPathIntP = NULL;
		}

		return  (dataPathIntP);
	}

	static int getDataPath(const char * dataPathCharP, int *dataPathIntP){
		if (*dataPathCharP == 0)
		{
			*dataPathIntP = -1;
			return (0);
		}

		if (strcmp(dataPathCharP, "Node") == 0)
		{
			*dataPathIntP = -1;
			return (0);
		}

		if (strncmp(dataPathCharP, "Node.", strlen("Node.")) == 0)
		{
			return (getDataPath(dataPathCharP+strlen("Node."), dataPathIntP));
		}
		{ //Scanning links, terminal and non-terminal
			if (strcmp(dataPathCharP, "links") == 0)
			{
				*dataPathIntP = 0;
				*(dataPathIntP+1) = -1;
				return (0);
			}
			if (strncmp(dataPathCharP, "links.", strlen("links.")) == 0)
			{
				*dataPathIntP = 0;
				return (system::String::getDataPath(dataPathCharP+strlen("links."),dataPathIntP+1));
			}
		}
		{ //Scanning messages, terminal and non-terminal
			if (strcmp(dataPathCharP, "messages") == 0)
			{
				*dataPathIntP = 1;
				*(dataPathIntP+1) = -1;
				return (0);
			}
			if (strncmp(dataPathCharP, "messages.", strlen("messages.")) == 0)
			{
				*dataPathIntP = 1;
				return (page_rank::Message::getDataPath(dataPathCharP+strlen("messages."),dataPathIntP+1));
			}
		}
		{ //Scanning rank, terminal and non-terminal
			if (strcmp(dataPathCharP, "rank") == 0)
			{
				*dataPathIntP = 2;
				*(dataPathIntP+1) = -1;
				return (0);
			}
			if (strncmp(dataPathCharP, "rank.", strlen("rank.")) == 0)
			{
				*dataPathIntP = 2;
				return (system::Double::getDataPath(dataPathCharP+strlen("rank."),dataPathIntP+1));
			}
		}
		{ //Scanning updated_outputs, terminal and non-terminal
			if (strcmp(dataPathCharP, "updated_outputs") == 0)
			{
				*dataPathIntP = 3;
				*(dataPathIntP+1) = -1;
				return (0);
			}
			if (strncmp(dataPathCharP, "updated_outputs.", strlen("updated_outputs.")) == 0)
			{
				*dataPathIntP = 3;
				return (system::UInt::getDataPath(dataPathCharP+strlen("updated_outputs."),dataPathIntP+1));
			}
		}
		{ //Scanning update_count, terminal and non-terminal
			if (strcmp(dataPathCharP, "update_count") == 0)
			{
				*dataPathIntP = 4;
				*(dataPathIntP+1) = -1;
				return (0);
			}
			if (strncmp(dataPathCharP, "update_count.", strlen("update_count.")) == 0)
			{
				*dataPathIntP = 4;
				return (system::UInt::getDataPath(dataPathCharP+strlen("update_count."),dataPathIntP+1));
			}
		}
		return -1;
	}

	std::string getTypeFromPath(const std::string &dataPathString){
		const char *dataPathCharP = dataPathString.c_str();
		return(getTypeFromPathStatic(dataPathCharP));

	}

	static std::string getTypeFromPathStatic(const char * dataPathCharP){
		if (*dataPathCharP == 0)
		{
			return ("page_rank.Node");
		}

		if (strcmp(dataPathCharP, ".") == 0)
		{
			return ("page_rank.Node");
		}

		if (strcmp(dataPathCharP, "Node") == 0)
		{
			return ("page_rank.Node");
		}

		if (strncmp(dataPathCharP, "Node.", strlen("Node.")) == 0)
		{
			return (getTypeFromPathStatic(dataPathCharP+strlen("Node.")));
		}
		{ //Scanning links, terminal and non-terminal
			if (strcmp(dataPathCharP, "links") == 0)
			{
			return("system.String");
			}
			if (strncmp(dataPathCharP, "links.", strlen("links.")) == 0)
			{
			return(system::String::getTypeFromPathStatic(dataPathCharP+strlen("links.")));
			}
		}
		{ //Scanning messages, terminal and non-terminal
			if (strcmp(dataPathCharP, "messages") == 0)
			{
			return("page_rank.Message");
			}
			if (strncmp(dataPathCharP, "messages.", strlen("messages.")) == 0)
			{
			return(page_rank::Message::getTypeFromPathStatic(dataPathCharP+strlen("messages.")));
			}
		}
		{ //Scanning rank, terminal and non-terminal
			if (strcmp(dataPathCharP, "rank") == 0)
			{
			return("system.Double");
			}
			if (strncmp(dataPathCharP, "rank.", strlen("rank.")) == 0)
			{
			return(system::Double::getTypeFromPathStatic(dataPathCharP+strlen("rank.")));
			}
		}
		{ //Scanning updated_outputs, terminal and non-terminal
			if (strcmp(dataPathCharP, "updated_outputs") == 0)
			{
			return("system.UInt");
			}
			if (strncmp(dataPathCharP, "updated_outputs.", strlen("updated_outputs.")) == 0)
			{
			return(system::UInt::getTypeFromPathStatic(dataPathCharP+strlen("updated_outputs.")));
			}
		}
		{ //Scanning update_count, terminal and non-terminal
			if (strcmp(dataPathCharP, "update_count") == 0)
			{
			return("system.UInt");
			}
			if (strncmp(dataPathCharP, "update_count.", strlen("update_count.")) == 0)
			{
			return(system::UInt::getTypeFromPathStatic(dataPathCharP+strlen("update_count.")));
			}
		}
		return("_ERROR_");
	}

	std::string getTypeFromPath(const int *dataPathIntP){
		return(getTypeFromPathStatic(dataPathIntP));
	}
	static std::string getTypeFromPathStatic(const int *dataPathIntP){
		switch(*dataPathIntP)
		{
			case -1:
				return ("page_rank.Node");
				break;
			case 0:
				return(system::String::getTypeFromPathStatic(dataPathIntP+1));
				break;
			case 1:
				return(page_rank::Message::getTypeFromPathStatic(dataPathIntP+1));
				break;
			case 2:
				return(system::Double::getTypeFromPathStatic(dataPathIntP+1));
				break;
			case 3:
				return(system::UInt::getTypeFromPathStatic(dataPathIntP+1));
				break;
			case 4:
				return(system::UInt::getTypeFromPathStatic(dataPathIntP+1));
				break;
			default:
				return ("_ERROR_");
				break;
		};
	}

	static const char *getTypeStatic(){
		return("page_rank.Node");
	}

	const char *getType(){
		return("page_rank.Node");
	}

	static bool checkTypeStatic(const char *type){
		if (strcmp(type, "page_rank.Node") == 0)
		{
			return true;
		}		return false;
	}

	bool checkType(const char *type){
		if (strcmp(type, "page_rank.Node") == 0)
		{
			return true;
		}		return false;
	}

	static size_t getHashTypeStatic(){
		return(3346427420073363656ULL);
	}

	size_t getHashType(){
		return(3346427420073363656ULL);
	}

	static bool checkHashTypeStatic(size_t valType){
		if (valType == 3346427420073363656ULL)
		{
			return true;
		}		return false;
	}

	 bool checkHashType(size_t valType){
		if (valType == 3346427420073363656ULL)
		{
			return true;
		}		return false;
	}

	DataInstance * getDataInstanceFromPath(const int *dataPathIntP){
		switch(*dataPathIntP)
		{
			case -1:
				return(this);
				break;
			case 0:
				return((*links).getDataInstanceFromPath(dataPathIntP+1));
				break;
			case 1:
				return((*messages).getDataInstanceFromPath(dataPathIntP+1));
				break;
			case 2:
				return(rank.getDataInstanceFromPath(dataPathIntP+1));
				break;
			case 3:
				return(updated_outputs.getDataInstanceFromPath(dataPathIntP+1));
				break;
			case 4:
				return(update_count.getDataInstanceFromPath(dataPathIntP+1));
				break;
			default:
				return (NULL);
				break;
		};
	}

	void copyFrom( Node_base *other ){
		{ // CopyFrom field links
			linksSetLength( other->links_length);
			for (int i = 0 ; i < links_length ; i++)
			{ //Copying links
				links[i].copyFrom(&other->links[i]);
			}
		}

		{ // CopyFrom field messages
			messagesSetLength( other->messages_length);
			for (int i = 0 ; i < messages_length ; i++)
			{ //Copying messages
				messages[i].copyFrom(&other->messages[i]);
			}
		}

		{ //Copying rank
			rank.copyFrom(&other->rank);
		}

		{ //Copying updated_outputs
			updated_outputs.copyFrom(&other->updated_outputs);
		}

		{ //Copying update_count
			update_count.copyFrom(&other->update_count);
		}

	};

	std::string str(){
		std::ostringstream o;
		{// toString of vector links
			for(int i = 0 ; i < links_length ; i++)
			{
			{ //Texting links
				o << links[i].str();
			}
				 o << " ";
			}
		}

		o<<" ";
		{// toString of vector messages
			for(int i = 0 ; i < messages_length ; i++)
			{
			{ //Texting messages
				o << messages[i].str();
			}
				 o << " ";
			}
		}

		o<<" ";
				{ //Texting rank
			o << rank.str();
		}

		o<<" ";
				{ //Texting updated_outputs
			o << updated_outputs.str();
		}

		o<<" ";
				{ //Texting update_count
			o << update_count.str();
		}

		o<<" ";
		return o.str();
	}

	}; //class Node_base

} // end of namespace page_rank
} // end of namespace samson

#endif
