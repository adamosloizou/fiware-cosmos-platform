
/**
 File autogenerated with samsonModuleParser, please do not edit
*/

#ifndef _H_SAMSON_sna_light_Metric_Reach_Comm_BASE
#define _H_SAMSON_sna_light_Metric_Reach_Comm_BASE


#include <samson/modules/system/UInt.h>


namespace samson{
namespace sna_light{


	class Metric_Reach_Comm_base : public samson::DataInstance{

	public:
	::samson::system::UInt reach_one_step;
	::samson::system::UInt reach_one_step_competitors;
	::samson::system::UInt reach_comm_on_step;

	Metric_Reach_Comm_base() : samson::DataInstance(){
	}

	~Metric_Reach_Comm_base() {
	}

	int parse(char *data){
		int offset=0;
		{ //Parsing reach_one_step
			offset += reach_one_step.parse(data+offset);
		}

		{ //Parsing reach_one_step_competitors
			offset += reach_one_step_competitors.parse(data+offset);
		}

		{ //Parsing reach_comm_on_step
			offset += reach_comm_on_step.parse(data+offset);
		}

		return offset;
	}

	int serialize(char *data){
		int offset=0;
		{ //Serializing reach_one_step
			offset += reach_one_step.serialize(data+offset);
		}

		{ //Serializing reach_one_step_competitors
			offset += reach_one_step_competitors.serialize(data+offset);
		}

		{ //Serializing reach_comm_on_step
			offset += reach_comm_on_step.serialize(data+offset);
		}

		return offset;
	}

	static inline int size(char *data){
		int offset=0;
		{ //Sizing reach_one_step
			offset += ::samson::system::UInt::size(data+offset);
		}

		{ //Sizing reach_one_step_competitors
			offset += ::samson::system::UInt::size(data+offset);
		}

		{ //Sizing reach_comm_on_step
			offset += ::samson::system::UInt::size(data+offset);
		}

		return offset;
	}

	int hash(int max_num_partitions){
		{ //Partitioning reach_one_step
			return reach_one_step.hash(max_num_partitions);
		}

	}

	inline static int compare(char * data1 , char *data2 , size_t *offset1 , size_t *offset2 ){
		{ // comparing reach_one_step
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  reach_one_step compared 
		{ // comparing reach_one_step_competitors
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  reach_one_step_competitors compared 
		{ // comparing reach_comm_on_step
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  reach_comm_on_step compared 
		return 0; //If everything is equal
	}

	inline static int compare( char* data1 , char* data2 )
	{
		size_t offset_1=0;
		size_t offset_2=0;
		return compare( data1 , data2 , &offset_1 , &offset_2 );
	}





	void copyFrom( Metric_Reach_Comm_base *other ){
		{ //Copying reach_one_step
			reach_one_step.copyFrom(&other->reach_one_step);
		}

		{ //Copying reach_one_step_competitors
			reach_one_step_competitors.copyFrom(&other->reach_one_step_competitors);
		}

		{ //Copying reach_comm_on_step
			reach_comm_on_step.copyFrom(&other->reach_comm_on_step);
		}

	};

	std::string str(){
		std::ostringstream o;
				{ //Texting reach_one_step
			o << reach_one_step.str();
		}

		o<<" ";
				{ //Texting reach_one_step_competitors
			o << reach_one_step_competitors.str();
		}

		o<<" ";
				{ //Texting reach_comm_on_step
			o << reach_comm_on_step.str();
		}

		o<<" ";
		return o.str();
	}

	}; //class Metric_Reach_Comm_base

} // end of namespace samson
} // end of namespace sna_light

#endif
