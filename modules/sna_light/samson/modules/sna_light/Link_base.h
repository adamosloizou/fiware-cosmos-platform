
/**
 File autogenerated with samsonModuleParser, please do not edit
*/

#ifndef _H_SAMSON_sna_light_Link_BASE
#define _H_SAMSON_sna_light_Link_BASE


#include <samson/modules/system/Float.h>
#include <samson/modules/system/UInt.h>


namespace ss{
namespace sna_light{


	class Link_base : public ss::DataInstance{

	public:
	::ss::system::UInt id;
	::ss::system::Float weight;
	::ss::system::UInt dir;

	Link_base() : ss::DataInstance(){
	}

	~Link_base() {
	}

	int parse(char *data){
		int offset=0;
		offset += id.parse(data+offset);
		offset += weight.parse(data+offset);
		offset += dir.parse(data+offset);
		return offset;
	}

	int serialize(char *data){
		int offset=0;
		offset += id.serialize(data+offset);
		offset += weight.serialize(data+offset);
		offset += dir.serialize(data+offset);
		return offset;
	}

	static inline int size(char *data){
		int offset=0;
		offset += ::ss::system::UInt::size(data+offset);
		offset += ::ss::system::Float::size(data+offset);
		offset += ::ss::system::UInt::size(data+offset);
		return offset;
	}

	int hash(int max_num_partitions){
		return id.hash(max_num_partitions);
	}

	inline static int compare(char * data1 , char *data2 , size_t *offset1 , size_t *offset2 ){
		{ // comparing id
			int tmp = ::ss::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}
		{ // comparing weight
			int tmp = ::ss::system::Float::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}
		{ // comparing dir
			int tmp = ::ss::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}
		return 0; //If everything is equal
	}

	inline static int compare( char* data1 , char* data2 )
	{
		size_t offset_1=0;
		size_t offset_2=0;
		return compare( data1 , data2 , &offset_1 , &offset_2 );
	}

	void copyFrom( Link_base *other ){
		id.copyFrom(&other->id);
		weight.copyFrom(&other->weight);
		dir.copyFrom(&other->dir);
	};

	std::string str(){
		std::ostringstream o;
		o << id.str();

		o<<" ";
		o << weight.str();

		o<<" ";
		o << dir.str();

		o<<" ";
		return o.str();
	}

	}; //class Link_base

} // end of namespace ss
} // end of namespace sna_light

#endif
