
/**
 File autogenerated with samsonModuleParser, please do not edit
*/

#ifndef _H_SAMSON_sna_light_Metric_Node_In_Comm_Intermediate_BASE
#define _H_SAMSON_sna_light_Metric_Node_In_Comm_Intermediate_BASE


#include <samson/modules/sna_light/Clique.h>
#include <samson/modules/system/UInt.h>


namespace samson{
namespace sna_light{


	class Metric_Node_In_Comm_Intermediate_base : public samson::DataInstance{

	public:
	::samson::system::UInt node_id;
	::samson::sna_light::Clique comm_id;
	::samson::system::UInt sum_weights_node;
	::samson::system::UInt count_links_node;

	Metric_Node_In_Comm_Intermediate_base() : samson::DataInstance(){
	}

	~Metric_Node_In_Comm_Intermediate_base() {
	}

	int parse(char *data){
		int offset=0;
		{ //Parsing node_id
			offset += node_id.parse(data+offset);
		}

		{ //Parsing comm_id
			offset += comm_id.parse(data+offset);
		}

		{ //Parsing sum_weights_node
			offset += sum_weights_node.parse(data+offset);
		}

		{ //Parsing count_links_node
			offset += count_links_node.parse(data+offset);
		}

		return offset;
	}

	int serialize(char *data){
		int offset=0;
		{ //Serializing node_id
			offset += node_id.serialize(data+offset);
		}

		{ //Serializing comm_id
			offset += comm_id.serialize(data+offset);
		}

		{ //Serializing sum_weights_node
			offset += sum_weights_node.serialize(data+offset);
		}

		{ //Serializing count_links_node
			offset += count_links_node.serialize(data+offset);
		}

		return offset;
	}

	static inline int size(char *data){
		int offset=0;
		{ //Sizing node_id
			offset += ::samson::system::UInt::size(data+offset);
		}

		{ //Sizing comm_id
			offset += ::samson::sna_light::Clique::size(data+offset);
		}

		{ //Sizing sum_weights_node
			offset += ::samson::system::UInt::size(data+offset);
		}

		{ //Sizing count_links_node
			offset += ::samson::system::UInt::size(data+offset);
		}

		return offset;
	}

	int hash(int max_num_partitions){
		{ //Partitioning node_id
			return node_id.hash(max_num_partitions);
		}

	}

	inline static int compare(char * data1 , char *data2 , size_t *offset1 , size_t *offset2 ){
		{ // comparing node_id
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  node_id compared 
		{ // comparing comm_id
			int tmp = ::samson::sna_light::Clique::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  comm_id compared 
		{ // comparing sum_weights_node
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  sum_weights_node compared 
		{ // comparing count_links_node
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  count_links_node compared 
		return 0; //If everything is equal
	}

	inline static int compare( char* data1 , char* data2 )
	{
		size_t offset_1=0;
		size_t offset_2=0;
		return compare( data1 , data2 , &offset_1 , &offset_2 );
	}






	void copyFrom( Metric_Node_In_Comm_Intermediate_base *other ){
		{ //Copying node_id
			node_id.copyFrom(&other->node_id);
		}

		{ //Copying comm_id
			comm_id.copyFrom(&other->comm_id);
		}

		{ //Copying sum_weights_node
			sum_weights_node.copyFrom(&other->sum_weights_node);
		}

		{ //Copying count_links_node
			count_links_node.copyFrom(&other->count_links_node);
		}

	};

	std::string str(){
		std::ostringstream o;
				{ //Texting node_id
			o << node_id.str();
		}

		o<<" ";
				{ //Texting comm_id
			o << comm_id.str();
		}

		o<<" ";
				{ //Texting sum_weights_node
			o << sum_weights_node.str();
		}

		o<<" ";
				{ //Texting count_links_node
			o << count_links_node.str();
		}

		o<<" ";
		return o.str();
	}

	}; //class Metric_Node_In_Comm_Intermediate_base

} // end of namespace samson
} // end of namespace sna_light

#endif
