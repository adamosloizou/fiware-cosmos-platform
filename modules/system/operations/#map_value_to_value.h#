43

/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_system_map_value_to_value
#define _H_SAMSON_system_map_value_to_value


#include <samson/module/samson.h>
#include <samson/modules/system/Value.h>


namespace samson{
namespace system{


	class map_value_to_value : public samson::Map
	{

	   std::string command;

	   samson::system::Value key;
	   samson::system::Value value;

	public:


//  INFO_MODULE
// If interface changes and you do not recreate this file, you will have to update this information (and of course, the module file)
// Please, do not remove this comments, as it will be used to check consistency on module declaration
//
//  input: system.Value system.Value  
//  output: system.Value system.Value
//  
// helpLine: Generic map to transform values. User enviroment variable command to specify what to do...
//  END_INFO_MODULE

		void init( samson::KVWriter *writer )
		{
		   // Setup the process chain...
		   command =  environment->get( "command" ,  "" );
		   printf("Command 5s\n",command.c_str());
		}

		void run( samson::KVSetStruct* inputs , samson::KVWriter *writer )
		{
		   for ( size_t i = 0 ; i < inputs[0].num_kvs ; i++ )
		   {
			  key.parse( inputs[0].kvs[i]->key );
			  value.parse( inputs[0].kvs[i]->value );

			  writer->emit( 0 , &key , &value );
		   }

		}

		void finish( samson::KVWriter *writer )
		{
		}



	};


} // end of namespace system
} // end of namespace samson

#endif
