
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_system_reduce_value_to_value
#define _H_SAMSON_system_reduce_value_to_value


#include <samson/module/samson.h>
#include <samson/modules/system/Value.h>


namespace samson{
namespace system{


	class reduce_value_to_value : public samson::Reduce
	{
        
        samson::system::Value key;
        samson::system::Value value;
        
        std::string command;

	public:


//  INFO_MODULE
// If interface changes and you do not recreate this file, you will have to update this information (and of course, the module file)
// Please, do not remove this comments, as it will be used to check consistency on module declaration
//
//  input: system.Value system.Value  
//  output: system.Value system.Value
//  
// helpLine: Reduce all the values for every particular key. Possible commands  sum_double (default) , average_double , max_double  
//  END_INFO_MODULE

		void init( samson::KVWriter *writer )
		{
            command =  environment->get( "command" ,  "sum" ); // Default command
		}

		void run( samson::KVSetStruct* inputs , samson::KVWriter *writer )
		{
            key.parse( inputs[0].kvs[0]->key );
            
            if ( command == "sum" )
            {
                double total = 0;
                for( size_t i = 0 ; i < inputs[0].num_kvs ; i++ )
                {
                    value.parse( inputs[0].kvs[i]->value );
                    double tmp =  value.getDouble();
                    total += tmp;
                }
                
                value = total;
                writer->emit( 0 , &key , &value );
            }
            
            if ( command == "average" )
            {
                double total = 0;
                for( size_t i = 0 ; i < inputs[0].num_kvs ; i++ )
                {
                    value.parse( inputs[0].kvs[i]->value );
                    double tmp =  value.getDouble();
                    total += tmp;
                }
                total /= (double) inputs[0].num_kvs;
                value = total;
                printf("Average %lu %f %s\n" , inputs[0].num_kvs , total , value.str().c_str() );
                writer->emit( 0 , &key , &value );
            }

            
		}

		void finish( samson::KVWriter *writer )
		{
		}



	};


} // end of namespace system
} // end of namespace samson

#endif
