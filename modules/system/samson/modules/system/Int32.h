
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this data
 */

#ifndef _H_SAMSON_system_Int32
#define _H_SAMSON_system_Int32

#include <samson/modules/system/FixedLengthDataInstance.h>

namespace samson{
namespace system{


class Int32 : public FixedLengthDataInstance<int>
{
public:

   std::string getName()
   {
	  return "system.Int32";
   }


	int hash(int max_num_partitions){
		return abs(value)%max_num_partitions;
	}

	void operator= (int _value) {
		value = _value;
	}

	int *getDataPath(const std::string &dataPathString){
		return(getDataPathStatic(dataPathString));
	}

	static int *getDataPathStatic(const std::string &dataPathString){
		const char *dataPathCharP = dataPathString.c_str();
		int nlevels = 1;
		int *dataPathIntP;

		const char *p_sep = dataPathCharP;
		while ((p_sep = strchr(p_sep, '.')) != NULL)
		{
			nlevels++;
			p_sep++;
		}

		if ((dataPathIntP = (int *)malloc((nlevels + 1)*sizeof(int))) == NULL)
		{
			return ((int *)NULL);
		}

		int retError = getDataPath(dataPathCharP, dataPathIntP);

		if (retError)
		{
			free(dataPathIntP);
			dataPathIntP = NULL;
		}

		return  (dataPathIntP);
	}

	static int getDataPath(const char * dataPathCharP, int *dataPathIntP){
		if (*dataPathCharP == 0)
		{
			*dataPathIntP = -1;
			return (0);
		}

		if (strcmp(dataPathCharP, "Int32") == 0)
		{
			*dataPathIntP = -1;
			return (0);
		}

		return -1;
	}

	std::string getTypeFromPath(const std::string &dataPathString){
		const char *dataPathCharP = dataPathString.c_str();
		return(getTypeFromPathStatic(dataPathCharP));
	}

	static std::string getTypeFromPathStatic(const char * dataPathCharP){
		if (*dataPathCharP == 0)
		{
			return ("system.Int32");
		}
		if (strcmp(dataPathCharP, ".") == 0)
		{
			return ("system.Int32");
		}

		if (strcmp(dataPathCharP, "Int32") == 0)
		{
			return ("system.Int32");
		}
		return("_ERROR_");
	}

	std::string getTypeFromPath(const int *dataPathIntP){
		return(getTypeFromPathStatic(dataPathIntP));
	}

	static std::string getTypeFromPathStatic(const int *dataPathIntP){
		switch(*dataPathIntP)
		{
		case -1:
			return ("system.Int32");
			break;
		default:
			return ("_Unkwown_");
			break;
		};
	}

	static const char *getTypeStatic()
	{
		return ("system.Int32");
	}

	const char *getType()
	{
		return ("system.Int32");
	}

	static bool checkTypeStatic(const char *type)
	{
		if (strcmp(type, "system.Int32") == 0)
		{
			return true;
		}
		return false;
	}

	bool checkType(const char *type)
	{
		if (strcmp(type, "system.Int32") == 0)
		{
			return true;
		}
		return false;
	}

	static size_t getHashTypeStatic(){
		return(285947177384897626ULL);
	}

	size_t getHashType(){
		return(285947177384897626ULL);
	}

	static bool checkHashTypeStatic(size_t valType){
		if (valType == 285947177384897626ULL)
		{
			return true;
		}		return false;
	}

	 bool checkHashType(size_t valType){
		if (valType == 285947177384897626ULL)
		{
			return true;
		}		return false;
	}

	DataInstance * getDataInstanceFromPath(const int *dataPathIntP){
		switch(*dataPathIntP)
		{
		case -1:
			return (this);
			break;
		default:
			return (NULL);
			break;
		};
	}


};


} // end of namespace samson
} // end of namespace system

#endif
