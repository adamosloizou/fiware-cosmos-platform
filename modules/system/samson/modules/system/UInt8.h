
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this data
*/

#ifndef _H_SAMSON_system_UInt8
#define _H_SAMSON_system_UInt8

#include <samson/modules/system/FixedLengthDataInstance.h>

namespace samson{
namespace system{


	class UInt8 : public FixedLengthDataInstance<unsigned char>
	{
	public:
		int hash(int max_num_partitions){
			return abs(value)%max_num_partitions;
		}

		int toInt()
		{
			return (value);
		}

		void operator= (int _value) {
			value = _value;
		}			
		void operator= (char _value) {
			value = _value;
		}			
		
		// Intra type operations
		
		UInt8& operator=(const UInt8 &o) {
			value=o.value;
			return *this;
		}			
		
		UInt8& operator+=(const UInt8 &o) {
			value+=o.value;
			return *this;
		}			
		
		UInt8& operator-=(const UInt8 &o) {
			value-=o.value;
			return *this;
		}			
		
		bool operator== (UInt8& o) {
			return ( value == o.value);
		}			
		
		bool operator!= (UInt8& o) {
			return ( value != o.value);
		}			
		
		bool operator< (UInt8& o) {
			return ( value < o.value);
		}			
		
		bool operator<= (UInt8& o) {
			return ( value <= o.value);
		}			

		bool operator> (UInt8& o) {
			return ( value > o.value);
		}			
		
		bool operator>= (UInt8& o) {
			return ( value >= o.value);
		}			
		
		
		
		
	};	

	
	
} // end of namespace ss
} // end of namespace system

#endif
