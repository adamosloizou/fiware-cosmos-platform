Module passive_location
{
	title	"Passive Location pilot ( mongoDB connection )"
	author	"Andreu & Ken mail:<andreu@tid.es>"
	version "0.2"
}

data Record
{
	system.UInt     imsi;
	system.UInt     imei;
	system.UInt		msisdn;
	system.TimeUnix timestamp;
	system.UInt32   cellId; 
	system.UInt16   callType;
	system.UInt8    DRType; 
}

data Cell
{
	system.UInt32      cellId;
	system.UInt8       type;
	mobility.Position  position;
}

data User
{
	system.UInt	       msisdn;
	system.UInt	       imsi;
	system.UInt	       imei;
}

data CompleteTMSI
{
	system.UInt   tmsi;
	system.UInt16 LAC;
}

# ------------------------------------------------------------
# Parse input data (from Arcanum) to generate passive_location.Record 
# ------------------------------------------------------------

parser parse_xml_cdrs
{
	out system.UInt passive_location.Record                     # Emitted with key = imsi
	out passive_location.CompleteTMSI passive_location.Record   # Whem imsi = 0, emitted with key = tmsi
	out system.UInt passive_location.Record                     # If no cellId or LAC is parsed in the record
	out passive_location.CompleteTMSI system.UInt               # Queue to recover imsi from tmsi

	helpLine "Parse input cdrs from Arkanum platform. Note that output key is imsi for the first output,when imsi is avalilable. If imsi == 0, sent to second output with imei"
}


# ------------------------------------------------------------
# Parse input data (from Tektronix probes) to generate passive_location.Record 
# ------------------------------------------------------------

parser parse_tek_drs
{
	out system.UInt passive_location.Record                     # Emitted with key = imsi
	out passive_location.CompleteTMSI passive_location.Record   # Whem imsi = 0, emitted with key = tmsi
	out system.UInt passive_location.Record                     # If no cellId or LAC is parsed in the record
	out passive_location.CompleteTMSI system.UInt               # Queue to recover imsi from tmsi

	helpLine "Parse input binary OHDRs from Tektroniks platform (probes). Note that output key is imsi"
}



# ------------------------------------------------------------
# Parse cell's table
# ------------------------------------------------------------

parser parse_cell_info
{
	out system.UInt32 passive_location.Cell

	helpLine "Parse input txt file containing cell information( latitude & longitude ). Key is cellId composed of ((LAC left_desp 16) | cellID)"
}

# ------------------------------------------------------------
# Parse User's table
# ------------------------------------------------------------

parser parse_user_info
{
	out system.UInt passive_location.User  # Emitted with key = imsi
	out system.UInt passive_location.User  # Emitted with key = imei

	helpLine "Parse input txt file containing user info to extract msisdn from imsi. key is imsi"
}

# ------------------------------------------------------------
# Update tmsi-imsi table
# ------------------------------------------------------------

reduce update_tmsi_imsi_table
{
	in passive_location.CompleteTMSI system.UInt  # Info from records
	in passive_location.CompleteTMSI system.UInt  # tmsi-imsi table

	out passive_location.CompleteTMSI system.UInt  # tmsi-imsi table

	helpLine "Update the table to translate to recover imsi from tmsi"
}

# ------------------------------------------------------------
# Join of location records with imsi == 0, to recover it from tmsi
# ------------------------------------------------------------

reduce reduce_user_imsi_by_tmsi
{
	in passive_location.CompleteTMSI passive_location.Record   # Whem imsi = 0, emitted with key = tmsi
	in passive_location.CompleteTMSI system.UInt               # Queue to recover imsi from tmsi

	out	system.UInt passive_location.Record   # Records ( key = msisdn )
	out system.UInt passive_location.Record   # Records with a non-existing imsi (key = imei)

	helpLine "Extract imsi info from tmsi_imsi table, based on previous records"
}


# ------------------------------------------------------------
# Join of location records with user info from table, to extract MSISDN, from imsi info
# ------------------------------------------------------------

reduce reduce_user_msisdn_by_imsi
{
	in system.UInt  passive_location.Record   # Records (key = imsi)
	in system.UInt  passive_location.User     # User    (key = imsi)

	out	system.UInt passive_location.Record   # Records ( key = msisdn )
	out system.UInt passive_location.Record   # Records with a non-existing imsi (key = imsi)

	helpLine "Extract msisdn info from user table, based on imsi"
}

# ------------------------------------------------------------
# Join of location records with user info from table, to extract MSISDN, from imei info
# ------------------------------------------------------------

reduce reduce_user_msisdn_by_imei
{
	in system.UInt  passive_location.Record   # Records (key = imei)
	in system.UInt  passive_location.User     # User    (key = imei)

	out	system.UInt passive_location.Record   # Records ( key = msisdn )
	out system.UInt passive_location.Record   # Records with a non-existing imsi (key = imei)

	helpLine "Extract msisdn info from user table, based on imei"
}

# ------------------------------------------------------------
# Map of location records to reduce the amount of data sent to mongo
# ------------------------------------------------------------

map get_mobility_cell_records
{
	in system.UInt passive_location.Record
	
	out system.UInt32 mobility.CellRecord

	helpLine "Transform passive_location.Record into a mobility.CellRecord"
}


# ------------------------------------------------------------
# Join of mobility.Cellrecord with cell info from table 
# ------------------------------------------------------------

reduce reduce_cell_latitude_longitude
{
	in 	system.UInt32 mobility.CellRecord	  # CellRecords ( key = cellID )
	in 	system.UInt32 passive_location.Cell   # Cell information

	out	system.UInt mobility.Record		    # Records ( key = userId )
	out system.UInt32 mobility.CellRecord   # Records with a non-existing cell-id (key = cellId)

	helpLine "Add lat-lon information to Records. Note that key at the input is cellid,key at the output user-id"
}

# ------------------------------------------------------------
# To keep alive the last queue
# ------------------------------------------------------------

parserOut dummy_output
{
	in system.UInt mobility.Record
	
	helpLine "dummy parserOut to have access to the queue"
}

# ------------------------------------------------------------
# Import data from MongoDB
# ------------------------------------------------------------

generator mongo_location_import
{
	out system.UInt mobility.Record

	helpLine "Import passive location data from a mongoDb server at 'mongo.ip' from table 'mongo.table'"
}


generator mongo_latlong_import
{
	out system.UInt mobility.Record
	helpLine "Import passive location 'latlong' data from a mongoDb server at 'mongo.ip' from table 'mongo.table'"
}

# ------------------------------------------------------------
# Export data from MongoDB
# ------------------------------------------------------------

map mongo_location_export
{
	in system.UInt mobility.Record
	helpLine "Export passive location data to a mongoDb server at 'mongo' to table 'mongo_table'"
}


# ------------------------------------------------------------
# Script to init stream operations
# ------------------------------------------------------------

script init_stream_operations
{
	code
	{
		# Queues;

		alias [cells.txt]   00.in_cells;
		alias [users.txt]   00.in_users;
		alias [cells]       01.cells;		
		alias [users_imsi]  01.users_by_imsi;
		alias [users_imei]  01.users_by_imei;
		alias [q2]          02.in_xml_cdrs;
		alias [q2t]         02.in_tek_cdrs;
		
		alias [tmsi_imsi]   010.tmsi_imsi;
		alias [tmsi_table]   010.tmsi_table;
		alias [tmsi_copy]   011.tmsi_copy;
		
		alias [q3]          030.user_records;
		alias [q3c]         030.user_records.copia;
		alias [q3n]         031.no_imsi_records;
		alias [q3nc]        031.no_imsi_records.copia;
		alias [q30]         032.no_cell_info;
		alias [q30c]        032.no_cell_info.copia;
		
		
		alias [q4]          040.cell_records;	
		alias [q4c]         040.cell_records.copia;	
		alias [nouser_imsi] 041.no_user_imsi;	
		alias [nouser_imsic] 041.no_user_imsi.copia;	
		alias [nouser1]      042.no_user_imsi0_no_by_imei;		
		alias [nouser2]      042.no_user_no_by_imsi_imei;	
		alias [q4r]         043.cell_red_records;		
		alias [q4rc]        043.cell_red_records.copia;	
		
		alias [r1]          200.records;
		alias [r2]          200.records2;
		alias [nocell]      201.no_cell_join;	
		

		# Operations;

       alias [parse_cell]          00.parse_cell;
       alias [parse_user]          00.parse_user;

		alias [parser_xml]          01.parser_xml_cdrs;
		alias [parser_tek]          01.parser_tek_drs;
		
		alias [update_tmsi]         10.update_tmsi
		alias [join_tmsi_imsi]      19.join_tmsi_imsi;
		alias [join_imsi_msisdn]    20.join_imsi_msisdn;
		alias [join_imei_msisdn1]   21.join_imei_msisdn;
		alias [join_imei_msisdn2]   22.join_imei_msisdn;
		alias [get_cell_records]    25.get_mobility_cell_records;
		alias [join_cells]          26.mobility_records;
		alias [export_history]      30.export_mongo;
		alias [export_lkl]          31.export_mongo_lkl;

		add_stream_operation  [parse_cell]        passive_location.parse_cell_info                [cells.txt]       [cells];
		add_stream_operation  [parse_user]        passive_location.parse_user_info                [users.txt]       [users_imsi] [users_imei];

		add_stream_operation  [parser_xml]        passive_location.parse_xml_cdrs                 [q2]              [q3] [q3n] [q30] [tmsi_imsi];
		add_stream_operation  [parser_tek]        passive_location.parse_tek_drs                  [q2t]             [q3] [q3n] [q30] [tmsi_imsi];

		add_stream_operation  [update_tmsi]        passive_location.update_tmsi_imsi_table                  [tmsi_imsi] [tmsi_table]            [tmsi_table],[tmsi_copy];

		add_stream_operation  [join_tmsi_imsi]    passive_location.reduce_user_imsi_by_tmsi        [q3n] [tmsi_copy]           [q4] [nouser_imsi] -forward;
		
		add_stream_operation  [join_imsi_msisdn]   passive_location.reduce_user_msisdn_by_imsi     [q3] [users_imsi]          [q4] [nouser_imsi] -forward;
#		add_stream_operation  [join_imei_msisdn1]  passive_location.reduce_user_msisdn_by_imei     [q3n] [users_imei]         [q4] [nouser1] -forward;
		add_stream_operation  [join_imei_msisdn2]  passive_location.reduce_user_msisdn_by_imei     [nouser_imsi] [users_imei] [q4] [nouser2] -forward;
		
		add_stream_operation  [get_cell_records]  passive_location.get_mobility_cell_records      [q4]              [q4r];
		add_stream_operation  [join_cells]        passive_location.reduce_cell_latitude_longitude [q4r] [cells]     [r1],[r2] [nocell] -forward;
		
		#add_stream_operation  [export_history]    passive_location.mongo_location_export          [r1];
		#add_stream_operation  [export_lkl]        passive_location.mongo_location_export          [r2];

		#set_stream_operation_property   [export_history]      mongo.ip                  samson05;
		#set_stream_operation_property   [export_history]      mongo.db                  PassiveLocation;
		#set_stream_operation_property   [export_history]      mongo.collection          History;

		#set_stream_operation_property   [export_lkl]  mongo.ip                  samson08;
		#set_stream_operation_property   [export_lkl]  mongo.db                  PassiveLocation;
		#set_stream_operation_property   [export_lkl]  mongo.collection          LastKnownLocation;
		#set_stream_operation_property   [export_lkl]  mongo.history             0;
    }
}


script demo
{
	code
	{
		remove_all_stream;
		init_stream passive_location.init_stream_operations;
	}
}


