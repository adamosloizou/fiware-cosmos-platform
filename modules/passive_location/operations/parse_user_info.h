
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
 */

#ifndef _H_SAMSON_passive_location_parse_user_info
#define _H_SAMSON_passive_location_parse_user_info


#include <samson/module/samson.h>
#include <samson/modules/passive_location/User.h>
#include <samson/modules/system/UInt.h>
#include <samson/modules/system/SimpleParser.h>    // SimpleParser


namespace samson{
namespace passive_location{


class parse_user_info : public samson::system::SimpleParser
{
    samson::passive_location::User user;   // User information in the table (imsi, msisdn, imei)

    std::vector<char *> words;             // Vector used to store words parsed at each line

public:


    //  INFO_MODULE
    // If interface changes and you do not recreate this file, you will have to update this information (and of course, the module file)
    // Please, do not remove this comments, as it will be used to check consistency on module declaration
    //
    //  output: system.UInt passive_location.User
    //  output: system.UInt passive_location.User
    //
    // helpLine: Parse input txt file containing user info to extract msisdn from imsi. key is imsi
    //  END_INFO_MODULE

    void parseLine( char * line , samson::KVWriter *writer )
    {
        // Split line in words
        split_in_words( line, words , '|' );

        if( words.size() < 2 )
            return; // Wrong format

        // Extract information:
        // MSISDN|IMSI|IMEI|date|brand|model

        // IMSI id is in field "1"
        user.imsi.value = atoll( words[1]);
        // MSISDN is in field "0"
        user.msisdn.value = atol(words[0]);
        // IMEI is in field "2"
        user.imei.value = atol(words[2]);

        if ((user.imsi.value == 0) || (user.imei.value == 0) || (user.msisdn == 0))
        {
            LM_W (("Parsing:'%s' imsi:%lu, imei:%lu, msisdn:%lu", line, user.imsi.value, user.imei.value, user.msisdn.value));
        }

        if ((user.imsi.value == 0) && (user.imei.value == 0))
        {
            return;
        }


        // Emit the user information, by IMSI
        writer->emit( 0 , &user.imsi , &user );
        // Emit the user information, by IMEI
        writer->emit( 1 , &user.imei , &user );

    }

    void finish( samson::KVWriter *writer )
    {
    }



};


} // end of namespace passive_location
} // end of namespace samson

#endif
