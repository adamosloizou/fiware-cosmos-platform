
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_passive_location_reduce_user_msisdn_by_imei
#define _H_SAMSON_passive_location_reduce_user_msisdn_by_imei


#include <samson/module/samson.h>
#include <samson/modules/passive_location/Record.h>
#include <samson/modules/passive_location/User.h>
#include <samson/modules/system/UInt.h>


namespace samson{
namespace passive_location{


	class reduce_user_msisdn_by_imei : public samson::Reduce
	{
	    samson::system::UInt imei_key;                // Input key
	    samson::passive_location::Record record;      // Input & Output record
	    samson::passive_location::User userInfo;      // Information about cell

	public:


//  INFO_MODULE
// If interface changes and you do not recreate this file, you will have to update this information (and of course, the module file)
// Please, do not remove this comments, as it will be used to check consistency on module declaration
//
//  input: system.UInt passive_location.Record  
//  input: system.UInt passive_location.User  
//  output: system.UInt passive_location.Record
//  output: system.UInt passive_location.Record
//  
// helpLine: Extract msisdn info from user table, based on imei
//  END_INFO_MODULE

		void init( samson::KVWriter *writer )
		{
		}

		void run( samson::KVSetStruct* inputs , samson::KVWriter *writer )
		{
	        if (inputs[0].num_kvs == 0)
	        {
	            return;
	        }

	        if( inputs[1].num_kvs == 0)
	        {
	            imei_key.parse(inputs[0].kvs[0]->key);
	            LM_W(("No userInfo for imei:%lu (%lu records)", imei_key.value, inputs[0].num_kvs));

	            // Non existing user... forward input to output 1
	            for ( uint64_t i = 0 ; i< inputs[0].num_kvs ; i++)
	            {
	                record.parse( inputs[0].kvs[i]->value );
                    if (record.imei.value != 0)
                    {
                        writer->emit( 1 , &record.imei , &record );
                    }
	            }
	            return;
	        }

	        imei_key.parse(inputs[1].kvs[0]->key);

            if (imei_key.value == 0)
            {
                LM_W (("Records with imei == 0, inputs[0].num_kvs:%lu, inputs[1].num_kvs:%lu", inputs[0].num_kvs, inputs[1].num_kvs));
            }


	        if (inputs[1].num_kvs > 1)
	        {
	            LM_W(("More than one user description for imei:%lu (%lu infos)", imei_key.value, inputs[1].num_kvs));
	        }
	        //LM_M(("Emitting %lu records for imei:%lu", inputs[0].num_kvs, imei_key.value));


	        userInfo.parse( inputs[1].kvs[0]->value ); // Only consider the first one...

	        for ( uint64_t i = 0 ; i< inputs[0].num_kvs; i++)
	        {
	            record.parse( inputs[0].kvs[i]->value );

	            // Complete the complete record
	            record.msisdn.value = userInfo.msisdn.value;
                if (record.msisdn.value == 0)
                {
                    LM_W(("Found msisdn:%lu == 0 (imsi:%lu), with record.imei:%lu from userInfo.imei:%lu", record.msisdn.value, record.imsi.value, record.imei.value, userInfo.imei.value));
                }


                if (record.imsi.value != userInfo.imsi.value)
                {
                    LM_W(("For user msisdn:%lu (imei:%lu), different record.imsi:%lu from userInfo.imsi:%lu", record.msisdn.value, record.imei.value, record.imsi.value, userInfo.imsi.value));
                }

	            writer->emit( 0 , &record.msisdn , &record );
	        }
	        return;
		}

		void finish( samson::KVWriter *writer )
		{
		}



	};


} // end of namespace passive_location
} // end of namespace samson

#endif
