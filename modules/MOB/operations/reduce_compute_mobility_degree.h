
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
 */

#ifndef _H_SAMSON_MOB_reduce_compute_mobility_degree
#define _H_SAMSON_MOB_reduce_compute_mobility_degree


#include <samson/module/samson.h>

#include "../cdr/cdr_environment_parameters.h"


namespace samson{
namespace MOB{


class reduce_compute_mobility_degree : public samson::Reduce
{

public:


#ifdef INFO_COMMENT //Just to include a comment without conflicting anything
	// If interface changes and you do not recreate this file, consider updating this information (and of course, the module file)

	input: system.UInt64 cdr.mobCdr
	input: system.UInt64 MOB.LocCounter
	input: system.UInt64 MOB.LocCounter
	input: system.UInt64 MOB.LocCounter
	input: system.UInt64 MOB.LocCounter
	output: system.UInt64 MOB.MobilityDegree

	helpLine: Compute all the values necessary to get the mobility degree.
	extendedHelp: 		Compute all the values necessary to get the mobility degree.

#endif // de INFO_COMMENT

	void init(samson::KVWriter *writer )
	{
	}

	/**
	 * Fill the values related to mobility degree and
	 * compute the number of national and international
	 * calls when no cell information is available in
	 * the CDR.
	 *
	 * @return Void.
	 */
	void run(  samson::KVSetStruct* inputs , samson::KVWriter *writer )
	{
		samson::system::UInt64 phone;
		samson::cdr::mobCdr cdr;
		MobilityDegree md;
		LocCounter locCounter;

		if (inputs[0].kvs[0]->key)
		{
			return;
		}

		// parse phone number
		phone.parse( inputs[0].kvs[0]->key );

		// total number of calls
		md.totalCalls = inputs[0].num_kvs;

		md.nationalCalls = 0;
		md.internationalCalls = 0;

		// cell level
		if( inputs[1].num_kvs > 0 )
		{
			locCounter.parse( inputs[1].kvs[0]->value );
			md.cellId = locCounter.loc;
			md.cellCalls = locCounter.count;
		}
		else
		{
			md.cellId = 0;
			md.cellCalls = 0;
		}

		// bts level
		if( inputs[2].num_kvs > 0 )
		{
			locCounter.parse( inputs[2].kvs[0]->value );
			md.btsId = locCounter.loc;
			md.btsCalls = locCounter.count;
		}
		else
		{
			md.btsId = 0;
			md.btsCalls = 0;
		}

		// lac level
		if( inputs[3].num_kvs > 0 )
		{
			locCounter.parse( inputs[3].kvs[0]->value );
			md.lacId = locCounter.loc;
			md.lacCalls = locCounter.count;
		}
		else
		{
			md.lacId = 0;
			md.lacCalls = 0;
		}

		// state level
		if( inputs[4].num_kvs > 0 )
		{
			locCounter.parse( inputs[4].kvs[0]->value );
			md.stateId = locCounter.loc;
			md.stateCalls = locCounter.count;
		}
		else
		{
			md.stateId = 0;
			md.stateCalls = 0;
		}

		// national and international calls
		for( int i=0; i<inputs[0].num_kvs; i++ )
		{
			cdr.parse( inputs[0].kvs[i]->value );
			if( cdr.cellId == 0 )
			{
				if( cdr.mobScope >= LOC_ROAMING_INTRARREGIONAL )
				{
					if( cdr.mobScope <= LOC_ROAMING_NACIONAL )
					{
						md.nationalCalls.value++;
					}
					else
					{
						md.internationalCalls.value++;
					}
				}
			}
		}

		// emit
		writer->emit(0, &phone, &md );
	}

	void finish(samson::KVWriter *writer )
	{
	}



};


} // end of namespace samson
} // end of namespace MOB

#endif
