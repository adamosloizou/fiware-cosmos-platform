
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
 */

#ifndef _H_SAMSON_MOB_map_distribute_cell_info_location
#define _H_SAMSON_MOB_map_distribute_cell_info_location


#include <samson/module/samson.h>


namespace samson{
namespace MOB{


class map_distribute_cell_info_location : public samson::Map
{

	samson::system::Void void_data;

public:


#ifdef INFO_COMMENT //Just to include a comment without conflicting anything
	// If interface changes and you do not recreate this file, consider updating this information (and of course, the module file)

	input: system.UInt64 cdr.Cell
	output: MOB.PhoneLoc system.Void
	output: MOB.PhoneLoc system.Void
	output: MOB.PhoneLoc system.Void
	output: MOB.PhoneLoc system.Void

#endif // de INFO_COMMENT

	void init(samson::KVWriter *writer )
	{
	}

	void run(  samson::KVSetStruct* inputs , samson::KVWriter *writer )
	{
		samson::system::UInt64 phone;
		PhoneLoc phoneLoc;
		samson::cdr::Cell cell;

		if (inputs[0].num_kvs == 0)
		{
			return;
		}
		phone.parse(inputs[0].kvs[0]->key);

		for (int i = 0; i < inputs[0].num_kvs; i++ )
		{
			cell.parse(inputs[0].kvs[i]->key);

			phoneLoc.phone.value = phone.value;

			// mobility degree

			// cell level
			// fill structure
			phoneLoc.loc.value = cell.cellId.value;
			// emit output to compute the reference cell
			writer->emit(0, &phoneLoc, &void_data );

			// bts level
			// fill structure
			phoneLoc.loc.value = cell.btsId.value;
			// emit output to compute the reference cell
			writer->emit(1, &phoneLoc, &void_data );

			// lac level
			// fill structure
			phoneLoc.loc.value = cell.lacId.value;
			// emit output to compute the reference cell
			writer->emit(2, &phoneLoc, &void_data );

			// state level
			// fill structure
			phoneLoc.loc.value = cell.stateId.value;
			// emit output to compute the reference cell
			writer->emit(3, &phoneLoc, &void_data );
		}
	}

	void finish(samson::KVWriter *writer )
	{
	}



};


} // end of namespace samson
} // end of namespace MOB

#endif
