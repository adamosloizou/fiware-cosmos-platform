
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_simple_mobility_parser
#define _H_SAMSON_simple_mobility_parser


#include <samson/module/samson.h>
#include <samson/modules/system/SimpleParser.h>    // SimpleParser 
#include <samson/modules/system/String.h>
#include <samson/modules/system/StringVector.h>


namespace samson{
namespace simple_mobility{


   class parser : public samson::system::SimpleParser
	{

		  samson::system::UInt key;
		  samson::system::StringVector value;

	public:


#ifdef INFO_COMMENT //Just to include a comment without conflicting anything
// If interface changes and you do not recreate this file, consider updating this information (and of course, the module file)

output: system.String system.StringVector

helpLine: Parse input txt to generate commands per user
#endif // de INFO_COMMENT

		void init( samson::KVWriter *writer )
		{
		}

	   void parseLine( char * line , samson::KVWriter *writer )
	   {
		  
		  // Simple parser
		  size_t pos = 0;
		  size_t previous = 0;

		  std::string key_string;
		  
		  bool key_asigned = false;
		  bool finish = false;

		  value.valuesSetLength(0);


		  while( !finish )
		  {

			 if( ( line[pos] == ' ' ) || ( line[pos] == '\0' ) )
			 {
				if( line[pos] == '\0' )
				   finish = true;

				line[pos] = '\0'; // Artifical termination of string

				if( key_asigned )
				   value.valuesAdd()->value = &line[previous];
				else
				{
				  key_string = &line[previous];
				   key_asigned = true;
				}

				previous = pos+1;

			 }

			 pos++;
		  }

		  if( key_asigned )
		  {
		      size_t div_pos = key_string.find("-");

		      if( div_pos == std::string::npos )
		      {			  		      
			  key.value = atoll( key_string.c_str() );
			  writer->emit( 0 , &key , &value );		  
		      }
		      else
		      {
			  
			size_t from  = atoll( key_string.substr( 0 , div_pos ).c_str() );
			size_t to  = atoll( key_string.substr( div_pos+1 , key_string.length() - (std::string::npos+1)  ).c_str() );

			
			  if( from <= to )
			      for( size_t k = from ; k <= to ; k++ )
			      {
				  key.value = k;
				  writer->emit( 0 , &key , &value );
			      }
		      }
		  }
		  
	   }


		void finish( samson::KVWriter *writer )
		{
		}



	};


} // end of namespace simple_mobility
} // end of namespace samson

#endif
