
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_simple_mobility_parser
#define _H_SAMSON_simple_mobility_parser

#include "au/CommandLine.h"

#include <samson/module/samson.h>
#include <samson/modules/system/SimpleParser.h>    // SimpleParser 
#include <samson/modules/system/String.h>
#include <samson/modules/system/StringVector.h>


namespace samson{
namespace simple_mobility{


   class parser : public samson::system::SimpleParser
	{

		  samson::system::String key;
		  samson::system::StringVector value;

	public:


#ifdef INFO_COMMENT //Just to include a comment without conflicting anything
// If interface changes and you do not recreate this file, consider updating this information (and of course, the module file)

output: system.String system.StringVector

helpLine: Parse input txt to generate commands per user
#endif // de INFO_COMMENT

		void init( samson::KVWriter *writer )
		{
		}

	   void parseLine( char * line , samson::KVWriter *writer )
	   {
		  au::CommandLine cmdLine;
		  std::string parse_line = line;
		  cmdLine.parse( line );
		 		  
		  if( cmdLine.get_num_arguments() < 2 )
			 return;
		  
		  key.value =  cmdLine.get_argument( 0 );
		  value.valuesSetLength(0);
		  for (int i = 1 ; i < cmdLine.get_num_arguments() ; i++) 
			 value.valuesAdd()->value = cmdLine.get_argument( i );
		  
		  writer->emit( 0 , &key , &value );		  

	   }


		void finish( samson::KVWriter *writer )
		{
		}



	};


} // end of namespace simple_mobility
} // end of namespace samson

#endif
