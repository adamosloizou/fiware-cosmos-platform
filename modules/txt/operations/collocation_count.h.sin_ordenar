
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_txt_collocation_count
#define _H_SAMSON_txt_collocation_count


#include <samson/Operation.h>
#include "logMsg.h"             // LM_*
#include <iostream>
#include <fstream>
#include <string>



namespace ss{
namespace txt{


	class collocation_count : public ss::Reduce
	{

	public:

		ss::txt::Collocation key;
		ss::txt::Collocation keyPrev;
		ss::system::UInt count;
		ss::system::UInt total;

		void run(  ss::KVSetStruct* inputs , ss::KVWriter *writer )
		{


			if( inputs[0].num_kvs == 0 )
			{
				return;
			}

			bool primeraKey = true;
			std::string vacio = "";
			keyPrev.w1 = vacio;
			keyPrev.w2 = vacio;
			total.value = 0;
			//LM_M(("Reducing %d pairs", inputs[0].num_kvs));
			for (size_t i = 0; i < inputs[0].num_kvs ; i++)
			{
				key.parse(inputs[0].kvs[i]->key);
				count.parse( inputs[0].kvs[i]->value );

				const char *cad1 = key.w1.value.c_str();
				const char *cad2 = key.w2.value.c_str();

				//LM_M(("Treating ('%s';'%s')", cad1, cad2));
				//std::cout << "Treating: (" << key.w1.value << ", " << key.w2.value << ") " << std::endl;
				std::string filename = "/tmp/collocation_count_" + key.w1.value + ".log";
				std::ofstream fs(filename.c_str(), std::ios::app); 
				fs << "Treating: (" << key.w1.value << ", " << key.w2.value << ") " << std::endl;

				if (!primeraKey && ((key.w1.value.compare(keyPrev.w1.value) == 0) && (key.w2.value.compare(keyPrev.w2.value) == 0)))
				{

					//LM_M(("Same keyPrev"));
					total.value += count.value;
				}
				else
				{
					if (!primeraKey)
					{
						const char *cad1Prev = keyPrev.w1.value.c_str();
						const char *cad2Prev = keyPrev.w2.value.c_str();
						//LM_M(("New key diff from keyPrev: ('%s';'%s')", cad1Prev, cad2Prev));
						writer->emit( 0, &keyPrev , &total );
					}
					total.value = count.value;
					keyPrev = key;
				}
				primeraKey = false;
				fs.close();
			}

			if (total.value > 0)
			{
				writer->emit( 0, &key , &total );
			}
		}


	};


} // end of namespace ss
} // end of namespace txt

#endif
