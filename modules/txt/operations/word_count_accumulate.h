
/**
 File autogenerated with samsonModuleParser. Please, edit to complete this operation
*/

#ifndef _H_SAMSON_txt_word_count_accumulate
#define _H_SAMSON_txt_word_count_accumulate


#include <samson/Operation.h>

#include "samson/modules/system/String.h"
#include "samson/modules/system/UInt.h"

namespace ss{
namespace txt{


	class word_count_accumulate : public ss::Reduce
	{

	public:
		
		ss::system::String word;
		ss::system::UInt count;
		ss::system::UInt total;


		void run(  ss::KVSetStruct* inputs , ss::KVWriter *writer )
		{
			
			if( inputs[0].num_kvs != 0 )
			  word.parse( inputs[0].kvs[0]->key );
			else if( inputs[1].num_kvs != 0 )
			  word.parse( inputs[1].kvs[0]->key );
			else
			  return; // No input at all
			
			total.value = 0;
			for (size_t i = 0 ; i < inputs[0].num_kvs ; i++)
			{
				count.parse( inputs[0].kvs[i]->value );
				total.value += count.value;
			}
			for (size_t i = 0 ; i < inputs[1].num_kvs ; i++)
			{
				count.parse( inputs[1].kvs[i]->value );
				total.value += count.value;
			}
			
			writer->emit( 0, &word , &total );
		}


	};


} // end of namespace ss
} // end of namespace system

#endif
