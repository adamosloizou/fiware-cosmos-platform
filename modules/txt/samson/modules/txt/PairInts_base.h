
/**
 File autogenerated with samsonModuleParser, please do not edit
*/

#ifndef _H_SAMSON_txt_PairInts_BASE
#define _H_SAMSON_txt_PairInts_BASE


#include <samson/modules/system/UInt.h>


namespace samson{
namespace txt{


	class PairInts_base : public samson::DataInstance{

	public:
	::samson::system::UInt i1;
	::samson::system::UInt i2;

	PairInts_base() : samson::DataInstance(){
	}

	~PairInts_base() {
	}

	int parse(char *data){
		int offset=0;
		{ //Parsing i1
			offset += i1.parse(data+offset);
		}

		{ //Parsing i2
			offset += i2.parse(data+offset);
		}

		return offset;
	}

	int serialize(char *data){
		int offset=0;
		{ //Serializing i1
			offset += i1.serialize(data+offset);
		}

		{ //Serializing i2
			offset += i2.serialize(data+offset);
		}

		return offset;
	}

	static inline int size(char *data){
		int offset=0;
		{ //Sizing i1
			offset += ::samson::system::UInt::size(data+offset);
		}

		{ //Sizing i2
			offset += ::samson::system::UInt::size(data+offset);
		}

		return offset;
	}

	int hash(int max_num_partitions){
		{ //Partitioning i1
			return i1.hash(max_num_partitions);
		}

	}

	inline static int compare(char * data1 , char *data2 , size_t *offset1 , size_t *offset2 ){
		{ // comparing i1
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  i1 compared 
		{ // comparing i2
			int tmp = ::samson::system::UInt::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  i2 compared 
		return 0; //If everything is equal
	}

	inline static int compare( char* data1 , char* data2 )
	{
		size_t offset_1=0;
		size_t offset_2=0;
		return compare( data1 , data2 , &offset_1 , &offset_2 );
	}




	void copyFrom( PairInts_base *other ){
		{ //Copying i1
			i1.copyFrom(&other->i1);
		}

		{ //Copying i2
			i2.copyFrom(&other->i2);
		}

	};

	std::string str(){
		std::ostringstream o;
				{ //Texting i1
			o << i1.str();
		}

		o<<" ";
				{ //Texting i2
			o << i2.str();
		}

		o<<" ";
		return o.str();
	}

	}; //class PairInts_base

} // end of namespace samson
} // end of namespace txt

#endif
