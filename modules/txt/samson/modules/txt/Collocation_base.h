
/**
 File autogenerated with samsonModuleParser, please do not edit
*/

#ifndef _H_SAMSON_txt_Collocation_BASE
#define _H_SAMSON_txt_Collocation_BASE


#include <samson/modules/system/String.h>


namespace samson{
namespace txt{


	class Collocation_base : public samson::DataInstance{

	public:
	::samson::system::String w1;
	::samson::system::String w2;

	Collocation_base() : samson::DataInstance(){
	}

	~Collocation_base() {
	}

	int parse(char *data){
		int offset=0;
		{ //Parsing w1
			offset += w1.parse(data+offset);
		}

		{ //Parsing w2
			offset += w2.parse(data+offset);
		}

		return offset;
	}

	int serialize(char *data){
		int offset=0;
		{ //Serializing w1
			offset += w1.serialize(data+offset);
		}

		{ //Serializing w2
			offset += w2.serialize(data+offset);
		}

		return offset;
	}

	static inline int size(char *data){
		int offset=0;
		{ //Sizing w1
			offset += ::samson::system::String::size(data+offset);
		}

		{ //Sizing w2
			offset += ::samson::system::String::size(data+offset);
		}

		return offset;
	}

	int hash(int max_num_partitions){
		{ //Partitioning w1
			return w1.hash(max_num_partitions);
		}

	}

	inline static int compare(char * data1 , char *data2 , size_t *offset1 , size_t *offset2 ){
		{ // comparing w1
			int tmp = ::samson::system::String::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  w1 compared 
		{ // comparing w2
			int tmp = ::samson::system::String::compare(data1,data2,offset1 , offset2);
			if( tmp != 0) return tmp;
		}   //  w2 compared 
		return 0; //If everything is equal
	}

	inline static int compare( char* data1 , char* data2 )
	{
		size_t offset_1=0;
		size_t offset_2=0;
		return compare( data1 , data2 , &offset_1 , &offset_2 );
	}




	void copyFrom( Collocation_base *other ){
		{ //Copying w1
			w1.copyFrom(&other->w1);
		}

		{ //Copying w2
			w2.copyFrom(&other->w2);
		}

	};

	std::string str(){
		std::ostringstream o;
				{ //Texting w1
			o << w1.str();
		}

		o<<" ";
				{ //Texting w2
			o << w2.str();
		}

		o<<" ";
		return o.str();
	}

	}; //class Collocation_base

} // end of namespace samson
} // end of namespace txt

#endif
